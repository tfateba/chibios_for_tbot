
ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  00001e72  00001f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ef  00800270  00800270  00001f76  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000628  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000104c9  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c16  00000000  00000000  00012ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004263  00000000  00000000  000166cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001100  00000000  00000000  0001a934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b93  00000000  00000000  0001ba34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bb1  00000000  00000000  0001d5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  00022178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	82 c0       	rjmp	.+260    	; 0x106 <__ctors_end>
       2:	00 00       	nop
       4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_17>
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__vector_25>
      68:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_26>
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_32>
      84:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_33>
      88:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__vector_34>
      8c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_35>
      90:	5b c0       	rjmp	.+182    	; 0x148 <__bad_interrupt>
      92:	00 00       	nop
      94:	59 c0       	rjmp	.+178    	; 0x148 <__bad_interrupt>
      96:	00 00       	nop
      98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	55 c0       	rjmp	.+170    	; 0x148 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	51 c0       	rjmp	.+162    	; 0x148 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4f c0       	rjmp	.+158    	; 0x148 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c0       	rjmp	.+146    	; 0x148 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c0       	rjmp	.+138    	; 0x148 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3d c0       	rjmp	.+122    	; 0x148 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3b c0       	rjmp	.+118    	; 0x148 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	37 c0       	rjmp	.+110    	; 0x148 <__bad_interrupt>
      da:	00 00       	nop
      dc:	35 c0       	rjmp	.+106    	; 0x148 <__bad_interrupt>
      de:	00 00       	nop
      e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	45 46       	sbci	r20, 0x65	; 101
      e6:	47 65       	ori	r20, 0x57	; 87
      e8:	66 67       	ori	r22, 0x76	; 118
	...

000000eb <__c.2314>:
      eb:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000000fb <__c.2449>:
      fb:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d1 e2       	ldi	r29, 0x21	; 33
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0c bf       	out	0x3c, r16	; 60

00000116 <__do_copy_data>:
     116:	12 e0       	ldi	r17, 0x02	; 2
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b2 e0       	ldi	r27, 0x02	; 2
     11c:	e2 e7       	ldi	r30, 0x72	; 114
     11e:	fe e1       	ldi	r31, 0x1E	; 30
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0b bf       	out	0x3b, r16	; 59
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x14>
     126:	07 90       	elpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a0 37       	cpi	r26, 0x70	; 112
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0x10>

00000130 <__do_clear_bss>:
     130:	23 e0       	ldi	r18, 0x03	; 3
     132:	a0 e7       	ldi	r26, 0x70	; 112
     134:	b2 e0       	ldi	r27, 0x02	; 2
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	af 35       	cpi	r26, 0x5F	; 95
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <main>
     144:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     14a:	ff cf       	rjmp	.-2      	; 0x14a <_idle_thread>

0000014c <chSysInit>:
     14c:	da d1       	rcall	.+948    	; 0x502 <_scheduler_init>
     14e:	7b d0       	rcall	.+246    	; 0x246 <_vt_init>
     150:	40 e8       	ldi	r20, 0x80	; 128
     152:	6f e1       	ldi	r22, 0x1F	; 31
     154:	72 e0       	ldi	r23, 0x02	; 2
     156:	82 ef       	ldi	r24, 0xF2	; 242
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	ea d2       	rcall	.+1492   	; 0x730 <_thread_init>
     15c:	fc 01       	movw	r30, r24
     15e:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <ch+0xc>
     162:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ch+0xb>
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	95 87       	std	Z+13, r25	; 0x0d
     16a:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <__avr_in_isr>
     16e:	78 94       	sei
     170:	84 e1       	ldi	r24, 0x14	; 20
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	61 c3       	rjmp	.+1730   	; 0x838 <chThdCreate>

00000176 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
     182:	c0 91 e8 02 	lds	r28, 0x02E8	; 0x8002e8 <ch+0xd>
     186:	d0 91 e9 02 	lds	r29, 0x02E9	; 0x8002e9 <ch+0xe>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     18a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     18e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
     192:	4c 81       	ldd	r20, Y+4	; 0x04
     194:	5d 81       	ldd	r21, Y+5	; 0x05
     196:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <ch+0x13>
     19a:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <ch+0x14>
     19e:	bc 01       	movw	r22, r24
     1a0:	62 1b       	sub	r22, r18
     1a2:	73 0b       	sbc	r23, r19
     1a4:	64 17       	cp	r22, r20
     1a6:	75 07       	cpc	r23, r21
     1a8:	78 f1       	brcs	.+94     	; 0x208 <chSysTimerHandlerI+0x92>
     1aa:	08 ee       	ldi	r16, 0xE8	; 232
     1ac:	12 e0       	ldi	r17, 0x02	; 2
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
     1ae:	24 0f       	add	r18, r20
     1b0:	35 1f       	adc	r19, r21
     1b2:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <ch+0x14>
     1b6:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <ch+0x13>

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     1ba:	e8 81       	ld	r30, Y
     1bc:	f9 81       	ldd	r31, Y+1	; 0x01
     1be:	13 83       	std	Z+3, r17	; 0x03
     1c0:	02 83       	std	Z+2, r16	; 0x02
    ch.vtlist.next = vtp->next;
     1c2:	f0 93 e9 02 	sts	0x02E9, r31	; 0x8002e9 <ch+0xe>
     1c6:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <ch+0xd>
    fn = vtp->func;
     1ca:	ee 80       	ldd	r14, Y+6	; 0x06
     1cc:	ff 80       	ldd	r15, Y+7	; 0x07
    vtp->func = NULL;
     1ce:	1f 82       	std	Y+7, r1	; 0x07
     1d0:	1e 82       	std	Y+6, r1	; 0x06

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     1d2:	e8 5e       	subi	r30, 0xE8	; 232
     1d4:	f2 40       	sbci	r31, 0x02	; 2
     1d6:	59 f1       	breq	.+86     	; 0x22e <chSysTimerHandlerI+0xb8>
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
     1d8:	88 85       	ldd	r24, Y+8	; 0x08
     1da:	99 85       	ldd	r25, Y+9	; 0x09
     1dc:	f7 01       	movw	r30, r14
     1de:	19 95       	eicall
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
     1e0:	c0 91 e8 02 	lds	r28, 0x02E8	; 0x8002e8 <ch+0xd>
     1e4:	d0 91 e9 02 	lds	r29, 0x02E9	; 0x8002e9 <ch+0xe>
     1e8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     1ec:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
     1f0:	4c 81       	ldd	r20, Y+4	; 0x04
     1f2:	5d 81       	ldd	r21, Y+5	; 0x05
     1f4:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <ch+0x13>
     1f8:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <ch+0x14>
     1fc:	bc 01       	movw	r22, r24
     1fe:	62 1b       	sub	r22, r18
     200:	73 0b       	sbc	r23, r19
     202:	64 17       	cp	r22, r20
     204:	75 07       	cpc	r23, r21
     206:	98 f6       	brcc	.-90     	; 0x1ae <chSysTimerHandlerI+0x38>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     208:	c8 5e       	subi	r28, 0xE8	; 232
     20a:	d2 40       	sbci	r29, 0x02	; 2
     20c:	a9 f0       	breq	.+42     	; 0x238 <chSysTimerHandlerI+0xc2>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
     20e:	24 0f       	add	r18, r20
     210:	35 1f       	adc	r19, r21
     212:	28 1b       	sub	r18, r24
     214:	39 0b       	sbc	r19, r25
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
     216:	22 30       	cpi	r18, 0x02	; 2
     218:	31 05       	cpc	r19, r1
     21a:	58 f0       	brcs	.+22     	; 0x232 <chSysTimerHandlerI+0xbc>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     21c:	82 0f       	add	r24, r18
     21e:	93 1f       	adc	r25, r19
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	00 c4       	rjmp	.+2048   	; 0xa2e <stSetAlarm>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     22e:	fc d3       	rcall	.+2040   	; 0xa28 <stStopAlarm>
     230:	d3 cf       	rjmp	.-90     	; 0x1d8 <chSysTimerHandlerI+0x62>
     232:	22 e0       	ldi	r18, 0x02	; 2
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	f2 cf       	rjmp	.-28     	; 0x21c <chSysTimerHandlerI+0xa6>
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	08 95       	ret

00000246 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     246:	eb ed       	ldi	r30, 0xDB	; 219
     248:	f2 e0       	ldi	r31, 0x02	; 2
     24a:	88 ee       	ldi	r24, 0xE8	; 232
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	96 87       	std	Z+14, r25	; 0x0e
     250:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     252:	90 8b       	std	Z+16, r25	; 0x10
     254:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (systime_t)-1;
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	9f ef       	ldi	r25, 0xFF	; 255
     25a:	92 8b       	std	Z+18, r25	; 0x12
     25c:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
     25e:	14 8a       	std	Z+20, r1	; 0x14
     260:	13 8a       	std	Z+19, r1	; 0x13
     262:	08 95       	ret

00000264 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	7c 01       	movw	r14, r24
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     272:	dc 01       	movw	r26, r24
     274:	19 96       	adiw	r26, 0x09	; 9
     276:	3c 93       	st	X, r19
     278:	2e 93       	st	-X, r18
     27a:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     27c:	17 96       	adiw	r26, 0x07	; 7
     27e:	5c 93       	st	X, r21
     280:	4e 93       	st	-X, r20
     282:	16 97       	sbiw	r26, 0x06	; 6
     284:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     288:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
     28c:	62 30       	cpi	r22, 0x02	; 2
     28e:	71 05       	cpc	r23, r1
     290:	08 f4       	brcc	.+2      	; 0x294 <chVTDoSetI+0x30>
     292:	59 c0       	rjmp	.+178    	; 0x346 <chVTDoSetI+0xe2>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     294:	00 91 e8 02 	lds	r16, 0x02E8	; 0x8002e8 <ch+0xd>
     298:	10 91 e9 02 	lds	r17, 0x02E9	; 0x8002e9 <ch+0xe>
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	08 3e       	cpi	r16, 0xE8	; 232
     2a0:	1b 07       	cpc	r17, r27
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <chVTDoSetI+0x42>
     2a4:	5a c0       	rjmp	.+180    	; 0x35a <chVTDoSetI+0xf6>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
     2a6:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <ch+0x13>
     2aa:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <ch+0x14>
     2ae:	28 1b       	sub	r18, r24
     2b0:	39 0b       	sbc	r19, r25
     2b2:	eb 01       	movw	r28, r22
     2b4:	c2 0f       	add	r28, r18
     2b6:	d3 1f       	adc	r29, r19

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     2b8:	d8 01       	movw	r26, r16

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;

    if (delta < now - ch.vtlist.lasttime) {
     2ba:	c2 17       	cp	r28, r18
     2bc:	d3 07       	cpc	r29, r19
     2be:	e0 f1       	brcs	.+120    	; 0x338 <chVTDoSetI+0xd4>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
     2c0:	14 96       	adiw	r26, 0x04	; 4
     2c2:	2d 91       	ld	r18, X+
     2c4:	3c 91       	ld	r19, X
     2c6:	15 97       	sbiw	r26, 0x05	; 5
     2c8:	c2 17       	cp	r28, r18
     2ca:	d3 07       	cpc	r29, r19
     2cc:	48 f4       	brcc	.+18     	; 0x2e0 <chVTDoSetI+0x7c>
     2ce:	3e c0       	rjmp	.+124    	; 0x34c <chVTDoSetI+0xe8>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
     2d0:	c2 1b       	sub	r28, r18
     2d2:	d3 0b       	sbc	r29, r19
    p = p->next;
     2d4:	d8 01       	movw	r26, r16
    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
     2d6:	0d 91       	ld	r16, X+
     2d8:	1c 91       	ld	r17, X
     2da:	f8 01       	movw	r30, r16
     2dc:	24 81       	ldd	r18, Z+4	; 0x04
     2de:	35 81       	ldd	r19, Z+5	; 0x05
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     2e0:	2c 17       	cp	r18, r28
     2e2:	3d 07       	cpc	r19, r29
     2e4:	a8 f3       	brcs	.-22     	; 0x2d0 <chVTDoSetI+0x6c>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     2e6:	d7 01       	movw	r26, r14
     2e8:	0d 93       	st	X+, r16
     2ea:	1c 93       	st	X, r17
  vtp->prev = vtp->next->prev;
     2ec:	d8 01       	movw	r26, r16
     2ee:	12 96       	adiw	r26, 0x02	; 2
     2f0:	ed 91       	ld	r30, X+
     2f2:	fc 91       	ld	r31, X
     2f4:	13 97       	sbiw	r26, 0x03	; 3
     2f6:	d7 01       	movw	r26, r14
     2f8:	13 96       	adiw	r26, 0x03	; 3
     2fa:	fc 93       	st	X, r31
     2fc:	ee 93       	st	-X, r30
     2fe:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     300:	f1 82       	std	Z+1, r15	; 0x01
     302:	e0 82       	st	Z, r14
  p->prev = vtp;
     304:	f8 01       	movw	r30, r16
     306:	f3 82       	std	Z+3, r15	; 0x03
     308:	e2 82       	std	Z+2, r14	; 0x02
  vtp->delta = delta
     30a:	15 96       	adiw	r26, 0x05	; 5
     30c:	dc 93       	st	X, r29
     30e:	ce 93       	st	-X, r28
     310:	14 97       	sbiw	r26, 0x04	; 4

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
     312:	84 81       	ldd	r24, Z+4	; 0x04
     314:	95 81       	ldd	r25, Z+5	; 0x05
     316:	8c 1b       	sub	r24, r28
     318:	9d 0b       	sbc	r25, r29
     31a:	95 83       	std	Z+5, r25	; 0x05
     31c:	84 83       	std	Z+4, r24	; 0x04
  ch.vtlist.delta = (systime_t)-1;
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	9f ef       	ldi	r25, 0xFF	; 255
     322:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <ch+0x12>
     326:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <ch+0x11>
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	08 95       	ret

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     338:	14 96       	adiw	r26, 0x04	; 4
     33a:	8d 91       	ld	r24, X+
     33c:	9c 91       	ld	r25, X
     33e:	15 97       	sbiw	r26, 0x05	; 5
     340:	c8 1b       	sub	r28, r24
     342:	d9 0b       	sbc	r29, r25
     344:	c8 cf       	rjmp	.-112    	; 0x2d6 <chVTDoSetI+0x72>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
     346:	62 e0       	ldi	r22, 0x02	; 2
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	a4 cf       	rjmp	.-184    	; 0x294 <chVTDoSetI+0x30>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     34c:	8c 0f       	add	r24, r28
     34e:	9d 1f       	adc	r25, r29
     350:	6e d3       	rcall	.+1756   	; 0xa2e <stSetAlarm>
     352:	f8 01       	movw	r30, r16
     354:	24 81       	ldd	r18, Z+4	; 0x04
     356:	35 81       	ldd	r19, Z+5	; 0x05
     358:	c3 cf       	rjmp	.-122    	; 0x2e0 <chVTDoSetI+0x7c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
     35a:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <ch+0x14>
     35e:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <ch+0x13>
      ch.vtlist.next = vtp;
     362:	f0 92 e9 02 	sts	0x02E9, r15	; 0x8002e9 <ch+0xe>
     366:	e0 92 e8 02 	sts	0x02E8, r14	; 0x8002e8 <ch+0xd>
      ch.vtlist.prev = vtp;
     36a:	f0 92 eb 02 	sts	0x02EB, r15	; 0x8002eb <ch+0x10>
     36e:	e0 92 ea 02 	sts	0x02EA, r14	; 0x8002ea <ch+0xf>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
     372:	f7 01       	movw	r30, r14
     374:	11 83       	std	Z+1, r17	; 0x01
     376:	00 83       	st	Z, r16
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
     378:	13 83       	std	Z+3, r17	; 0x03
     37a:	02 83       	std	Z+2, r16	; 0x02
      vtp->delta = delay;
     37c:	75 83       	std	Z+5, r23	; 0x05
     37e:	64 83       	std	Z+4, r22	; 0x04
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
     380:	cb 01       	movw	r24, r22
     382:	82 0f       	add	r24, r18
     384:	93 1f       	adc	r25, r19

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	41 c3       	rjmp	.+1666   	; 0xa16 <stStartAlarm>

00000394 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	fc 01       	movw	r30, r24
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
     39a:	a0 91 e8 02 	lds	r26, 0x02E8	; 0x8002e8 <ch+0xd>
     39e:	b0 91 e9 02 	lds	r27, 0x02E9	; 0x8002e9 <ch+0xe>
     3a2:	a8 17       	cp	r26, r24
     3a4:	b9 07       	cpc	r27, r25
     3a6:	09 f1       	breq	.+66     	; 0x3ea <chVTDoResetI+0x56>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
     3a8:	c2 81       	ldd	r28, Z+2	; 0x02
     3aa:	d3 81       	ldd	r29, Z+3	; 0x03
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	99 83       	std	Y+1, r25	; 0x01
     3b2:	88 83       	st	Y, r24
    vtp->next->prev = vtp->prev;
     3b4:	a0 81       	ld	r26, Z
     3b6:	b1 81       	ldd	r27, Z+1	; 0x01
     3b8:	13 96       	adiw	r26, 0x03	; 3
     3ba:	dc 93       	st	X, r29
     3bc:	ce 93       	st	-X, r28
     3be:	12 97       	sbiw	r26, 0x02	; 2
    vtp->func = NULL;
     3c0:	17 82       	std	Z+7, r1	; 0x07
     3c2:	16 82       	std	Z+6, r1	; 0x06

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
     3c4:	62 e0       	ldi	r22, 0x02	; 2
     3c6:	a8 3e       	cpi	r26, 0xE8	; 232
     3c8:	b6 07       	cpc	r27, r22
     3ca:	61 f0       	breq	.+24     	; 0x3e4 <chVTDoResetI+0x50>
      vtp->next->delta += vtp->delta;
     3cc:	14 96       	adiw	r26, 0x04	; 4
     3ce:	2d 91       	ld	r18, X+
     3d0:	3c 91       	ld	r19, X
     3d2:	15 97       	sbiw	r26, 0x05	; 5
     3d4:	84 81       	ldd	r24, Z+4	; 0x04
     3d6:	95 81       	ldd	r25, Z+5	; 0x05
     3d8:	82 0f       	add	r24, r18
     3da:	93 1f       	adc	r25, r19
     3dc:	15 96       	adiw	r26, 0x05	; 5
     3de:	9c 93       	st	X, r25
     3e0:	8e 93       	st	-X, r24
     3e2:	14 97       	sbiw	r26, 0x04	; 4
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	11 97       	sbiw	r26, 0x01	; 1
     3f0:	f0 93 e9 02 	sts	0x02E9, r31	; 0x8002e9 <ch+0xe>
     3f4:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <ch+0xd>
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
     3f8:	88 ee       	ldi	r24, 0xE8	; 232
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	93 83       	std	Z+3, r25	; 0x03
     3fe:	82 83       	std	Z+2, r24	; 0x02
  vtp->func = NULL;
     400:	17 96       	adiw	r26, 0x07	; 7
     402:	1c 92       	st	X, r1
     404:	1e 92       	st	-X, r1
     406:	16 97       	sbiw	r26, 0x06	; 6

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     408:	e8 17       	cp	r30, r24
     40a:	f9 07       	cpc	r31, r25
     40c:	29 f1       	breq	.+74     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
     40e:	24 81       	ldd	r18, Z+4	; 0x04
     410:	35 81       	ldd	r19, Z+5	; 0x05
     412:	14 96       	adiw	r26, 0x04	; 4
     414:	8d 91       	ld	r24, X+
     416:	9c 91       	ld	r25, X
     418:	15 97       	sbiw	r26, 0x05	; 5
     41a:	28 0f       	add	r18, r24
     41c:	39 1f       	adc	r19, r25
     41e:	35 83       	std	Z+5, r19	; 0x05
     420:	24 83       	std	Z+4, r18	; 0x04
     422:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     426:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
     42a:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <ch+0x13>
     42e:	50 91 ef 02 	lds	r21, 0x02EF	; 0x8002ef <ch+0x14>
     432:	bc 01       	movw	r22, r24
     434:	64 1b       	sub	r22, r20
     436:	75 0b       	sbc	r23, r21

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
     438:	62 17       	cp	r22, r18
     43a:	73 07       	cpc	r23, r19
     43c:	98 f6       	brcc	.-90     	; 0x3e4 <chVTDoResetI+0x50>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
     43e:	26 1b       	sub	r18, r22
     440:	37 0b       	sbc	r19, r23

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
     442:	22 30       	cpi	r18, 0x02	; 2
     444:	31 05       	cpc	r19, r1
     446:	28 f0       	brcs	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	ee c2       	rjmp	.+1500   	; 0xa2e <stSetAlarm>
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
     452:	22 e0       	ldi	r18, 0x02	; 2
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f8 cf       	rjmp	.-16     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     458:	df 91       	pop	r29
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     45a:	cf 91       	pop	r28
     45c:	e5 c2       	rjmp	.+1482   	; 0xa28 <stStopAlarm>

0000045e <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	dc 01       	movw	r26, r24
     464:	1d 96       	adiw	r26, 0x0d	; 13
     466:	8c 91       	ld	r24, X
     468:	1d 97       	sbiw	r26, 0x0d	; 13
     46a:	84 30       	cpi	r24, 0x04	; 4
     46c:	99 f1       	breq	.+102    	; 0x4d4 <wakeup+0x76>
     46e:	70 f5       	brcc	.+92     	; 0x4cc <wakeup+0x6e>
     470:	88 23       	and	r24, r24
     472:	49 f1       	breq	.+82     	; 0x4c6 <wakeup+0x68>
     474:	83 30       	cpi	r24, 0x03	; 3
     476:	31 f4       	brne	.+12     	; 0x484 <wakeup+0x26>
     478:	50 96       	adiw	r26, 0x10	; 16
     47a:	ed 91       	ld	r30, X+
     47c:	fc 91       	ld	r31, X
     47e:	51 97       	sbiw	r26, 0x11	; 17
     480:	11 82       	std	Z+1, r1	; 0x01
     482:	10 82       	st	Z, r1
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	9f ef       	ldi	r25, 0xFF	; 255
     488:	51 96       	adiw	r26, 0x11	; 17
     48a:	9c 93       	st	X, r25
     48c:	8e 93       	st	-X, r24
     48e:	50 97       	sbiw	r26, 0x10	; 16
     490:	1d 96       	adiw	r26, 0x0d	; 13
     492:	1c 92       	st	X, r1
     494:	1d 97       	sbiw	r26, 0x0d	; 13
     496:	14 96       	adiw	r26, 0x04	; 4
     498:	2c 91       	ld	r18, X
     49a:	14 97       	sbiw	r26, 0x04	; 4
     49c:	eb ed       	ldi	r30, 0xDB	; 219
     49e:	f2 e0       	ldi	r31, 0x02	; 2
     4a0:	01 90       	ld	r0, Z+
     4a2:	f0 81       	ld	r31, Z
     4a4:	e0 2d       	mov	r30, r0
     4a6:	94 81       	ldd	r25, Z+4	; 0x04
     4a8:	92 17       	cp	r25, r18
     4aa:	d0 f7       	brcc	.-12     	; 0x4a0 <wakeup+0x42>
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	fc 93       	st	X, r31
     4b0:	ee 93       	st	-X, r30
     4b2:	c2 81       	ldd	r28, Z+2	; 0x02
     4b4:	d3 81       	ldd	r29, Z+3	; 0x03
     4b6:	13 96       	adiw	r26, 0x03	; 3
     4b8:	dc 93       	st	X, r29
     4ba:	ce 93       	st	-X, r28
     4bc:	12 97       	sbiw	r26, 0x02	; 2
     4be:	b9 83       	std	Y+1, r27	; 0x01
     4c0:	a8 83       	st	Y, r26
     4c2:	b3 83       	std	Z+3, r27	; 0x03
     4c4:	a2 83       	std	Z+2, r26	; 0x02
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret
     4cc:	85 30       	cpi	r24, 0x05	; 5
     4ce:	89 f0       	breq	.+34     	; 0x4f2 <wakeup+0x94>
     4d0:	87 30       	cpi	r24, 0x07	; 7
     4d2:	c1 f6       	brne	.-80     	; 0x484 <wakeup+0x26>
     4d4:	12 96       	adiw	r26, 0x02	; 2
     4d6:	ed 91       	ld	r30, X+
     4d8:	fc 91       	ld	r31, X
     4da:	13 97       	sbiw	r26, 0x03	; 3
     4dc:	8d 91       	ld	r24, X+
     4de:	9c 91       	ld	r25, X
     4e0:	11 97       	sbiw	r26, 0x01	; 1
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	80 83       	st	Z, r24
     4e6:	cd 91       	ld	r28, X+
     4e8:	dc 91       	ld	r29, X
     4ea:	11 97       	sbiw	r26, 0x01	; 1
     4ec:	fb 83       	std	Y+3, r31	; 0x03
     4ee:	ea 83       	std	Y+2, r30	; 0x02
     4f0:	c9 cf       	rjmp	.-110    	; 0x484 <wakeup+0x26>
     4f2:	50 96       	adiw	r26, 0x10	; 16
     4f4:	ed 91       	ld	r30, X+
     4f6:	fc 91       	ld	r31, X
     4f8:	51 97       	sbiw	r26, 0x11	; 17
     4fa:	84 81       	ldd	r24, Z+4	; 0x04
     4fc:	8f 5f       	subi	r24, 0xFF	; 255
     4fe:	84 83       	std	Z+4, r24	; 0x04
     500:	e9 cf       	rjmp	.-46     	; 0x4d4 <wakeup+0x76>

00000502 <_scheduler_init>:
     502:	eb ed       	ldi	r30, 0xDB	; 219
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	f1 83       	std	Z+1, r31	; 0x01
     508:	e0 83       	st	Z, r30
     50a:	f3 83       	std	Z+3, r31	; 0x03
     50c:	e2 83       	std	Z+2, r30	; 0x02
     50e:	14 82       	std	Z+4, r1	; 0x04
     510:	f0 87       	std	Z+8, r31	; 0x08
     512:	e7 83       	std	Z+7, r30	; 0x07
     514:	f2 87       	std	Z+10, r31	; 0x0a
     516:	e1 87       	std	Z+9, r30	; 0x09
     518:	08 95       	ret

0000051a <chSchReadyI>:
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	dc 01       	movw	r26, r24
     520:	1d 96       	adiw	r26, 0x0d	; 13
     522:	1c 92       	st	X, r1
     524:	1d 97       	sbiw	r26, 0x0d	; 13
     526:	14 96       	adiw	r26, 0x04	; 4
     528:	2c 91       	ld	r18, X
     52a:	14 97       	sbiw	r26, 0x04	; 4
     52c:	eb ed       	ldi	r30, 0xDB	; 219
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	01 90       	ld	r0, Z+
     532:	f0 81       	ld	r31, Z
     534:	e0 2d       	mov	r30, r0
     536:	94 81       	ldd	r25, Z+4	; 0x04
     538:	92 17       	cp	r25, r18
     53a:	d0 f7       	brcc	.-12     	; 0x530 <chSchReadyI+0x16>
     53c:	11 96       	adiw	r26, 0x01	; 1
     53e:	fc 93       	st	X, r31
     540:	ee 93       	st	-X, r30
     542:	c2 81       	ldd	r28, Z+2	; 0x02
     544:	d3 81       	ldd	r29, Z+3	; 0x03
     546:	13 96       	adiw	r26, 0x03	; 3
     548:	dc 93       	st	X, r29
     54a:	ce 93       	st	-X, r28
     54c:	12 97       	sbiw	r26, 0x02	; 2
     54e:	b9 83       	std	Y+1, r27	; 0x01
     550:	a8 83       	st	Y, r26
     552:	b3 83       	std	Z+3, r27	; 0x03
     554:	a2 83       	std	Z+2, r26	; 0x02
     556:	cd 01       	movw	r24, r26
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <chSchGoSleepS>:
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	eb ed       	ldi	r30, 0xDB	; 219
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	63 85       	ldd	r22, Z+11	; 0x0b
     568:	74 85       	ldd	r23, Z+12	; 0x0c
     56a:	db 01       	movw	r26, r22
     56c:	1d 96       	adiw	r26, 0x0d	; 13
     56e:	8c 93       	st	X, r24
     570:	80 81       	ld	r24, Z
     572:	91 81       	ldd	r25, Z+1	; 0x01
     574:	ec 01       	movw	r28, r24
     576:	a8 81       	ld	r26, Y
     578:	b9 81       	ldd	r27, Y+1	; 0x01
     57a:	b1 83       	std	Z+1, r27	; 0x01
     57c:	a0 83       	st	Z, r26
     57e:	13 96       	adiw	r26, 0x03	; 3
     580:	fc 93       	st	X, r31
     582:	ee 93       	st	-X, r30
     584:	12 97       	sbiw	r26, 0x02	; 2
     586:	94 87       	std	Z+12, r25	; 0x0c
     588:	83 87       	std	Z+11, r24	; 0x0b
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	2d 87       	std	Y+13, r18	; 0x0d
     58e:	06 d2       	rcall	.+1036   	; 0x99c <_port_switch>
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <chSchGoSleepTimeoutS>:
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	2a 97       	sbiw	r28, 0x0a	; 10
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	18 2f       	mov	r17, r24
     5ae:	6f 3f       	cpi	r22, 0xFF	; 255
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	78 07       	cpc	r23, r24
     5b4:	11 f1       	breq	.+68     	; 0x5fa <chSchGoSleepTimeoutS+0x64>
     5b6:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <ch+0xb>
     5ba:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <ch+0xc>
     5be:	4f e2       	ldi	r20, 0x2F	; 47
     5c0:	52 e0       	ldi	r21, 0x02	; 2
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	4e de       	rcall	.-868    	; 0x264 <chVTDoSetI>
     5c8:	81 2f       	mov	r24, r17
     5ca:	c9 df       	rcall	.-110    	; 0x55e <chSchGoSleepS>
     5cc:	8f 81       	ldd	r24, Y+7	; 0x07
     5ce:	98 85       	ldd	r25, Y+8	; 0x08
     5d0:	89 2b       	or	r24, r25
     5d2:	19 f0       	breq	.+6      	; 0x5da <chSchGoSleepTimeoutS+0x44>
     5d4:	ce 01       	movw	r24, r28
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	dd de       	rcall	.-582    	; 0x394 <chVTDoResetI>
     5da:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <ch+0xb>
     5de:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <ch+0xc>
     5e2:	80 89       	ldd	r24, Z+16	; 0x10
     5e4:	91 89       	ldd	r25, Z+17	; 0x11
     5e6:	2a 96       	adiw	r28, 0x0a	; 10
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	08 95       	ret
     5fa:	81 2f       	mov	r24, r17
     5fc:	b0 df       	rcall	.-160    	; 0x55e <chSchGoSleepS>
     5fe:	ed cf       	rjmp	.-38     	; 0x5da <chSchGoSleepTimeoutS+0x44>

00000600 <chSchWakeupS>:
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	dc 01       	movw	r26, r24
     606:	c0 91 e6 02 	lds	r28, 0x02E6	; 0x8002e6 <ch+0xb>
     60a:	d0 91 e7 02 	lds	r29, 0x02E7	; 0x8002e7 <ch+0xc>
     60e:	51 96       	adiw	r26, 0x11	; 17
     610:	7c 93       	st	X, r23
     612:	6e 93       	st	-X, r22
     614:	50 97       	sbiw	r26, 0x10	; 16
     616:	14 96       	adiw	r26, 0x04	; 4
     618:	2c 91       	ld	r18, X
     61a:	14 97       	sbiw	r26, 0x04	; 4
     61c:	8c 81       	ldd	r24, Y+4	; 0x04
     61e:	82 17       	cp	r24, r18
     620:	d8 f0       	brcs	.+54     	; 0x658 <chSchWakeupS+0x58>
     622:	1d 96       	adiw	r26, 0x0d	; 13
     624:	1c 92       	st	X, r1
     626:	1d 97       	sbiw	r26, 0x0d	; 13
     628:	eb ed       	ldi	r30, 0xDB	; 219
     62a:	f2 e0       	ldi	r31, 0x02	; 2
     62c:	01 90       	ld	r0, Z+
     62e:	f0 81       	ld	r31, Z
     630:	e0 2d       	mov	r30, r0
     632:	94 81       	ldd	r25, Z+4	; 0x04
     634:	92 17       	cp	r25, r18
     636:	d0 f7       	brcc	.-12     	; 0x62c <chSchWakeupS+0x2c>
     638:	11 96       	adiw	r26, 0x01	; 1
     63a:	fc 93       	st	X, r31
     63c:	ee 93       	st	-X, r30
     63e:	c2 81       	ldd	r28, Z+2	; 0x02
     640:	d3 81       	ldd	r29, Z+3	; 0x03
     642:	13 96       	adiw	r26, 0x03	; 3
     644:	dc 93       	st	X, r29
     646:	ce 93       	st	-X, r28
     648:	12 97       	sbiw	r26, 0x02	; 2
     64a:	b9 83       	std	Y+1, r27	; 0x01
     64c:	a8 83       	st	Y, r26
     64e:	b3 83       	std	Z+3, r27	; 0x03
     650:	a2 83       	std	Z+2, r26	; 0x02
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret
     658:	1d 86       	std	Y+13, r1	; 0x0d
     65a:	eb ed       	ldi	r30, 0xDB	; 219
     65c:	f2 e0       	ldi	r31, 0x02	; 2
     65e:	01 90       	ld	r0, Z+
     660:	f0 81       	ld	r31, Z
     662:	e0 2d       	mov	r30, r0
     664:	94 81       	ldd	r25, Z+4	; 0x04
     666:	98 17       	cp	r25, r24
     668:	d0 f7       	brcc	.-12     	; 0x65e <chSchWakeupS+0x5e>
     66a:	cd 01       	movw	r24, r26
     66c:	f9 83       	std	Y+1, r31	; 0x01
     66e:	e8 83       	st	Y, r30
     670:	a2 81       	ldd	r26, Z+2	; 0x02
     672:	b3 81       	ldd	r27, Z+3	; 0x03
     674:	bb 83       	std	Y+3, r27	; 0x03
     676:	aa 83       	std	Y+2, r26	; 0x02
     678:	cd 93       	st	X+, r28
     67a:	dc 93       	st	X, r29
     67c:	d3 83       	std	Z+3, r29	; 0x03
     67e:	c2 83       	std	Z+2, r28	; 0x02
     680:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <ch+0xc>
     684:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ch+0xb>
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	fc 01       	movw	r30, r24
     68c:	25 87       	std	Z+13, r18	; 0x0d
     68e:	be 01       	movw	r22, r28
     690:	85 d1       	rcall	.+778    	; 0x99c <_port_switch>
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <chSchIsPreemptionRequired>:
     698:	a0 91 db 02 	lds	r26, 0x02DB	; 0x8002db <ch>
     69c:	b0 91 dc 02 	lds	r27, 0x02DC	; 0x8002dc <ch+0x1>
     6a0:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <ch+0xb>
     6a4:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <ch+0xc>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	14 96       	adiw	r26, 0x04	; 4
     6ac:	2c 91       	ld	r18, X
     6ae:	94 81       	ldd	r25, Z+4	; 0x04
     6b0:	92 17       	cp	r25, r18
     6b2:	08 f0       	brcs	.+2      	; 0x6b6 <chSchIsPreemptionRequired+0x1e>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	08 95       	ret

000006b8 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
  thread_t *otp = currp;
     6bc:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <ch+0xb>
     6c0:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     6c4:	40 91 db 02 	lds	r20, 0x02DB	; 0x8002db <ch>
     6c8:	50 91 dc 02 	lds	r21, 0x02DC	; 0x8002dc <ch+0x1>

  tqp->next             = tp->queue.next;
     6cc:	ea 01       	movw	r28, r20
     6ce:	e8 81       	ld	r30, Y
     6d0:	f9 81       	ldd	r31, Y+1	; 0x01
     6d2:	f0 93 dc 02 	sts	0x02DC, r31	; 0x8002dc <ch+0x1>
     6d6:	e0 93 db 02 	sts	0x02DB, r30	; 0x8002db <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     6da:	8b ed       	ldi	r24, 0xDB	; 219
     6dc:	92 e0       	ldi	r25, 0x02	; 2
     6de:	93 83       	std	Z+3, r25	; 0x03
     6e0:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     6e2:	50 93 e7 02 	sts	0x02E7, r21	; 0x8002e7 <ch+0xc>
     6e6:	40 93 e6 02 	sts	0x02E6, r20	; 0x8002e6 <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     6ee:	1d 96       	adiw	r26, 0x0d	; 13
     6f0:	1c 92       	st	X, r1
     6f2:	1d 97       	sbiw	r26, 0x0d	; 13
     6f4:	14 96       	adiw	r26, 0x04	; 4
     6f6:	2c 91       	ld	r18, X
     6f8:	14 97       	sbiw	r26, 0x04	; 4
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <chSchDoReschedule+0x4a>
     6fc:	01 90       	ld	r0, Z+
     6fe:	f0 81       	ld	r31, Z
     700:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     702:	94 81       	ldd	r25, Z+4	; 0x04
     704:	29 17       	cp	r18, r25
     706:	d0 f3       	brcs	.-12     	; 0x6fc <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     708:	11 96       	adiw	r26, 0x01	; 1
     70a:	fc 93       	st	X, r31
     70c:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     70e:	82 81       	ldd	r24, Z+2	; 0x02
     710:	93 81       	ldd	r25, Z+3	; 0x03
     712:	13 96       	adiw	r26, 0x03	; 3
     714:	9c 93       	st	X, r25
     716:	8e 93       	st	-X, r24
     718:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     71a:	ec 01       	movw	r28, r24
     71c:	b9 83       	std	Y+1, r27	; 0x01
     71e:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     720:	b3 83       	std	Z+3, r27	; 0x03
     722:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     724:	bd 01       	movw	r22, r26
     726:	ca 01       	movw	r24, r20
     728:	39 d1       	rcall	.+626    	; 0x99c <_port_switch>
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	fc 01       	movw	r30, r24
     736:	44 83       	std	Z+4, r20	; 0x04
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	85 87       	std	Z+13, r24	; 0x0d
     73c:	16 86       	std	Z+14, r1	; 0x0e
     73e:	43 8f       	std	Z+27, r20	; 0x1b
     740:	12 8e       	std	Z+26, r1	; 0x1a
     742:	11 8e       	std	Z+25, r1	; 0x19
     744:	10 8e       	std	Z+24, r1	; 0x18
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	87 87       	std	Z+15, r24	; 0x0f
     74a:	74 87       	std	Z+12, r23	; 0x0c
     74c:	63 87       	std	Z+11, r22	; 0x0b
     74e:	ab ed       	ldi	r26, 0xDB	; 219
     750:	b2 e0       	ldi	r27, 0x02	; 2
     752:	b0 87       	std	Z+8, r27	; 0x08
     754:	a7 83       	std	Z+7, r26	; 0x07
     756:	19 96       	adiw	r26, 0x09	; 9
     758:	cd 91       	ld	r28, X+
     75a:	dc 91       	ld	r29, X
     75c:	1a 97       	sbiw	r26, 0x0a	; 10
     75e:	d2 87       	std	Z+10, r29	; 0x0a
     760:	c1 87       	std	Z+9, r28	; 0x09
     762:	f8 87       	std	Y+8, r31	; 0x08
     764:	ef 83       	std	Y+7, r30	; 0x07
     766:	1a 96       	adiw	r26, 0x0a	; 10
     768:	fc 93       	st	X, r31
     76a:	ee 93       	st	-X, r30
     76c:	19 97       	sbiw	r26, 0x09	; 9
     76e:	cf 01       	movw	r24, r30
     770:	42 96       	adiw	r24, 0x12	; 18
     772:	93 8b       	std	Z+19, r25	; 0x13
     774:	82 8b       	std	Z+18, r24	; 0x12
     776:	02 96       	adiw	r24, 0x02	; 2
     778:	95 8b       	std	Z+21, r25	; 0x15
     77a:	84 8b       	std	Z+20, r24	; 0x14
     77c:	97 8b       	std	Z+23, r25	; 0x17
     77e:	86 8b       	std	Z+22, r24	; 0x16
     780:	cf 01       	movw	r24, r30
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <chThdCreateSuspendedI>:
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	dc 01       	movw	r26, r24
     78e:	14 96       	adiw	r26, 0x04	; 4
     790:	4d 91       	ld	r20, X+
     792:	5c 91       	ld	r21, X
     794:	15 97       	sbiw	r26, 0x05	; 5
     796:	fa 01       	movw	r30, r20
     798:	7c 97       	sbiw	r30, 0x1c	; 28
     79a:	ea 01       	movw	r28, r20
     79c:	e2 97       	sbiw	r28, 0x32	; 50
     79e:	d6 83       	std	Z+6, r29	; 0x06
     7a0:	c5 83       	std	Z+5, r28	; 0x05
     7a2:	17 96       	adiw	r26, 0x07	; 7
     7a4:	2c 91       	ld	r18, X
     7a6:	17 97       	sbiw	r26, 0x07	; 7
     7a8:	2a 8b       	std	Y+18, r18	; 0x12
     7aa:	18 96       	adiw	r26, 0x08	; 8
     7ac:	2c 91       	ld	r18, X
     7ae:	18 97       	sbiw	r26, 0x08	; 8
     7b0:	29 8b       	std	Y+17, r18	; 0x11
     7b2:	19 96       	adiw	r26, 0x09	; 9
     7b4:	2c 91       	ld	r18, X
     7b6:	19 97       	sbiw	r26, 0x09	; 9
     7b8:	28 8b       	std	Y+16, r18	; 0x10
     7ba:	1a 96       	adiw	r26, 0x0a	; 10
     7bc:	2c 91       	ld	r18, X
     7be:	1a 97       	sbiw	r26, 0x0a	; 10
     7c0:	2f 87       	std	Y+15, r18	; 0x0f
     7c2:	1b 8a       	std	Y+19, r1	; 0x13
     7c4:	2d ef       	ldi	r18, 0xFD	; 253
     7c6:	34 e0       	ldi	r19, 0x04	; 4
     7c8:	3c 8b       	std	Y+20, r19	; 0x14
     7ca:	2d 8b       	std	Y+21, r18	; 0x15
     7cc:	16 96       	adiw	r26, 0x06	; 6
     7ce:	2c 91       	ld	r18, X
     7d0:	16 97       	sbiw	r26, 0x06	; 6
     7d2:	8d 91       	ld	r24, X+
     7d4:	9c 91       	ld	r25, X
     7d6:	24 83       	std	Z+4, r18	; 0x04
     7d8:	32 e0       	ldi	r19, 0x02	; 2
     7da:	35 87       	std	Z+13, r19	; 0x0d
     7dc:	16 86       	std	Z+14, r1	; 0x0e
     7de:	23 8f       	std	Z+27, r18	; 0x1b
     7e0:	12 8e       	std	Z+26, r1	; 0x1a
     7e2:	11 8e       	std	Z+25, r1	; 0x19
     7e4:	10 8e       	std	Z+24, r1	; 0x18
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	27 87       	std	Z+15, r18	; 0x0f
     7ea:	94 87       	std	Z+12, r25	; 0x0c
     7ec:	83 87       	std	Z+11, r24	; 0x0b
     7ee:	cb ed       	ldi	r28, 0xDB	; 219
     7f0:	d2 e0       	ldi	r29, 0x02	; 2
     7f2:	d0 87       	std	Z+8, r29	; 0x08
     7f4:	c7 83       	std	Z+7, r28	; 0x07
     7f6:	89 85       	ldd	r24, Y+9	; 0x09
     7f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7fa:	92 87       	std	Z+10, r25	; 0x0a
     7fc:	81 87       	std	Z+9, r24	; 0x09
     7fe:	dc 01       	movw	r26, r24
     800:	18 96       	adiw	r26, 0x08	; 8
     802:	fc 93       	st	X, r31
     804:	ee 93       	st	-X, r30
     806:	17 97       	sbiw	r26, 0x07	; 7
     808:	fa 87       	std	Y+10, r31	; 0x0a
     80a:	e9 87       	std	Y+9, r30	; 0x09
     80c:	ea 01       	movw	r28, r20
     80e:	2a 97       	sbiw	r28, 0x0a	; 10
     810:	d9 83       	std	Y+1, r29	; 0x01
     812:	c8 83       	st	Y, r28
     814:	da 01       	movw	r26, r20
     816:	18 97       	sbiw	r26, 0x08	; 8
     818:	0b 2e       	mov	r0, r27
     81a:	11 96       	adiw	r26, 0x01	; 1
     81c:	0c 92       	st	X, r0
     81e:	11 97       	sbiw	r26, 0x01	; 1
     820:	ac 93       	st	X, r26
     822:	0a 2e       	mov	r0, r26
     824:	1b 2e       	mov	r1, r27
     826:	13 96       	adiw	r26, 0x03	; 3
     828:	1c 92       	st	X, r1
     82a:	0e 92       	st	-X, r0
     82c:	11 24       	eor	r1, r1
     82e:	12 97       	sbiw	r26, 0x02	; 2
     830:	cf 01       	movw	r24, r30
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <chThdCreate>:
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	f8 94       	cli
     83e:	a4 df       	rcall	.-184    	; 0x788 <chThdCreateSuspendedI>
     840:	ec 01       	movw	r28, r24
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	dc de       	rcall	.-584    	; 0x600 <chSchWakeupS>
     848:	78 94       	sei
     84a:	ce 01       	movw	r24, r28
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <chThdExitS>:
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	c0 91 e6 02 	lds	r28, 0x02E6	; 0x8002e6 <ch+0xb>
     85e:	d0 91 e7 02 	lds	r29, 0x02E7	; 0x8002e7 <ch+0xc>
     862:	99 8b       	std	Y+17, r25	; 0x11
     864:	88 8b       	std	Y+16, r24	; 0x10
     866:	8e 01       	movw	r16, r28
     868:	0e 5e       	subi	r16, 0xEE	; 238
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	8a 89       	ldd	r24, Y+18	; 0x12
     86e:	9b 89       	ldd	r25, Y+19	; 0x13
     870:	08 17       	cp	r16, r24
     872:	19 07       	cpc	r17, r25
     874:	59 f0       	breq	.+22     	; 0x88c <chThdExitS+0x3a>
     876:	fc 01       	movw	r30, r24
     878:	20 81       	ld	r18, Z
     87a:	31 81       	ldd	r19, Z+1	; 0x01
     87c:	3b 8b       	std	Y+19, r19	; 0x13
     87e:	2a 8b       	std	Y+18, r18	; 0x12
     880:	4c de       	rcall	.-872    	; 0x51a <chSchReadyI>
     882:	8a 89       	ldd	r24, Y+18	; 0x12
     884:	9b 89       	ldd	r25, Y+19	; 0x13
     886:	80 17       	cp	r24, r16
     888:	91 07       	cpc	r25, r17
     88a:	a9 f7       	brne	.-22     	; 0x876 <chThdExitS+0x24>
     88c:	8f 85       	ldd	r24, Y+15	; 0x0f
     88e:	81 11       	cpse	r24, r1
     890:	0c c0       	rjmp	.+24     	; 0x8aa <chThdExitS+0x58>
     892:	e9 85       	ldd	r30, Y+9	; 0x09
     894:	fa 85       	ldd	r31, Y+10	; 0x0a
     896:	8f 81       	ldd	r24, Y+7	; 0x07
     898:	98 85       	ldd	r25, Y+8	; 0x08
     89a:	90 87       	std	Z+8, r25	; 0x08
     89c:	87 83       	std	Z+7, r24	; 0x07
     89e:	af 81       	ldd	r26, Y+7	; 0x07
     8a0:	b8 85       	ldd	r27, Y+8	; 0x08
     8a2:	1a 96       	adiw	r26, 0x0a	; 10
     8a4:	fc 93       	st	X, r31
     8a6:	ee 93       	st	-X, r30
     8a8:	19 97       	sbiw	r26, 0x09	; 9
     8aa:	8f e0       	ldi	r24, 0x0F	; 15
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	54 ce       	rjmp	.-856    	; 0x55e <chSchGoSleepS>

000008b6 <chThdExit>:
     8b6:	f8 94       	cli
     8b8:	cc cf       	rjmp	.-104    	; 0x852 <chThdExitS>

000008ba <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     8be:	61 15       	cp	r22, r1
     8c0:	71 05       	cpc	r23, r1
     8c2:	99 f0       	breq	.+38     	; 0x8ea <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     8c4:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <ch+0xb>
     8c8:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     8d0:	ec 01       	movw	r28, r24
     8d2:	aa 81       	ldd	r26, Y+2	; 0x02
     8d4:	bb 81       	ldd	r27, Y+3	; 0x03
     8d6:	b3 83       	std	Z+3, r27	; 0x03
     8d8:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     8da:	ed 93       	st	X+, r30
     8dc:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     8de:	fb 83       	std	Y+3, r31	; 0x03
     8e0:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     8e2:	84 e0       	ldi	r24, 0x04	; 4
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     8e8:	56 ce       	rjmp	.-852    	; 0x596 <chSchGoSleepTimeoutS>
}
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	9f ef       	ldi	r25, 0xFF	; 255
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     8fe:	e8 17       	cp	r30, r24
     900:	f9 07       	cpc	r31, r25
     902:	71 f0       	breq	.+28     	; 0x920 <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     904:	ec 01       	movw	r28, r24
     906:	a8 81       	ld	r26, Y
     908:	b9 81       	ldd	r27, Y+1	; 0x01
     90a:	b1 83       	std	Z+1, r27	; 0x01
     90c:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     90e:	13 96       	adiw	r26, 0x03	; 3
     910:	fc 93       	st	X, r31
     912:	ee 93       	st	-X, r30
     914:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     916:	79 8b       	std	Y+17, r23	; 0x11
     918:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
     91e:	fd cd       	rjmp	.-1030   	; 0x51a <chSchReadyI>
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     926:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     928:	90 8d       	ldd	r25, Z+24	; 0x18
     92a:	69 2b       	or	r22, r25
     92c:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     92e:	85 85       	ldd	r24, Z+13	; 0x0d
     930:	8a 30       	cpi	r24, 0x0A	; 10
     932:	59 f0       	breq	.+22     	; 0x94a <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     934:	8b 30       	cpi	r24, 0x0B	; 11
     936:	09 f0       	breq	.+2      	; 0x93a <chEvtSignalI+0x14>
     938:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     93a:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     93c:	68 23       	and	r22, r24
     93e:	86 13       	cpse	r24, r22
     940:	fb cf       	rjmp	.-10     	; 0x938 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     942:	11 8a       	std	Z+17, r1	; 0x11
     944:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     946:	cf 01       	movw	r24, r30
     948:	e8 cd       	rjmp	.-1072   	; 0x51a <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     94a:	80 89       	ldd	r24, Z+16	; 0x10
     94c:	68 23       	and	r22, r24
     94e:	c9 f7       	brne	.-14     	; 0x942 <chEvtSignalI+0x1c>
     950:	08 95       	ret

00000952 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	7c 01       	movw	r14, r24
     95e:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     960:	fc 01       	movw	r30, r24
     962:	c0 81       	ld	r28, Z
     964:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     966:	8c 17       	cp	r24, r28
     968:	9d 07       	cpc	r25, r29
     96a:	91 f0       	breq	.+36     	; 0x990 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	81 2b       	or	r24, r17
     970:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     972:	11 23       	and	r17, r17
     974:	19 f0       	breq	.+6      	; 0x97c <chEvtBroadcastFlagsI+0x2a>
     976:	9e 81       	ldd	r25, Y+6	; 0x06
     978:	89 23       	and	r24, r25
     97a:	21 f0       	breq	.+8      	; 0x984 <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     97c:	6c 81       	ldd	r22, Y+4	; 0x04
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	9b 81       	ldd	r25, Y+3	; 0x03
     982:	d1 df       	rcall	.-94     	; 0x926 <chEvtSignalI>
    }
    elp = elp->next;
     984:	09 90       	ld	r0, Y+
     986:	d8 81       	ld	r29, Y
     988:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     98a:	ec 16       	cp	r14, r28
     98c:	fd 06       	cpc	r15, r29
     98e:	71 f7       	brne	.-36     	; 0x96c <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	08 95       	ret

0000099c <_port_switch>:
#if !defined(__DOXYGEN__)
__attribute__((naked, weak))
#endif
void _port_switch(thread_t *ntp, thread_t *otp) {

  asm volatile ("push    r2");
     99c:	2f 92       	push	r2
  asm volatile ("push    r3");
     99e:	3f 92       	push	r3
  asm volatile ("push    r4");
     9a0:	4f 92       	push	r4
  asm volatile ("push    r5");
     9a2:	5f 92       	push	r5
  asm volatile ("push    r6");
     9a4:	6f 92       	push	r6
  asm volatile ("push    r7");
     9a6:	7f 92       	push	r7
  asm volatile ("push    r8");
     9a8:	8f 92       	push	r8
  asm volatile ("push    r9");
     9aa:	9f 92       	push	r9
  asm volatile ("push    r10");
     9ac:	af 92       	push	r10
  asm volatile ("push    r11");
     9ae:	bf 92       	push	r11
  asm volatile ("push    r12");
     9b0:	cf 92       	push	r12
  asm volatile ("push    r13");
     9b2:	df 92       	push	r13
  asm volatile ("push    r14");
     9b4:	ef 92       	push	r14
  asm volatile ("push    r15");
     9b6:	ff 92       	push	r15
  asm volatile ("push    r16");
     9b8:	0f 93       	push	r16
  asm volatile ("push    r17");
     9ba:	1f 93       	push	r17
  asm volatile ("push    r28");
     9bc:	cf 93       	push	r28
  asm volatile ("push    r29");
     9be:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     9c0:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     9c2:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     9c4:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     9c6:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     9c8:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     9ca:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     9cc:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     9ce:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     9d0:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     9d2:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     9d4:	df 91       	pop	r29
  asm volatile ("pop     r28");
     9d6:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     9d8:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     9da:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     9dc:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     9de:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     9e0:	df 90       	pop	r13
  asm volatile ("pop     r12");
     9e2:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     9e4:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     9e6:	af 90       	pop	r10
  asm volatile ("pop     r9");
     9e8:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     9ea:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     9ec:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     9ee:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     9f0:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     9f2:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     9f4:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     9f6:	2f 90       	pop	r2
  asm volatile ("ret");
     9f8:	08 95       	ret

000009fa <_port_thread_start>:
     9fa:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     9fc:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     9fe:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     a00:	09 95       	icall
#if defined(_CHIBIOS_RT_)
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     a02:	59 cf       	rjmp	.-334    	; 0x8b6 <chThdExit>

00000a04 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
     a04:	d8 d2       	rcall	.+1456   	; 0xfb6 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
     a06:	89 e5       	ldi	r24, 0x59	; 89
     a08:	92 e0       	ldi	r25, 0x02	; 2
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
     a0a:	d6 d2       	rcall	.+1452   	; 0xfb8 <_pal_lld_init>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
     a0c:	26 d2       	rcall	.+1100   	; 0xe5a <pwmInit>
     a0e:	69 d2       	rcall	.+1234   	; 0xee2 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
     a10:	ea d5       	rcall	.+3028   	; 0x15e6 <boardInit>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <stInit>

00000a14 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
     a14:	5a c3       	rjmp	.+1716   	; 0x10ca <st_lld_init>

00000a16 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     a16:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     a1a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	86 bb       	out	0x16, r24	; 22

  /* enable interrupt */
  TIMSK_REG = _BV(OCIE1A);
     a22:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
     a26:	08 95       	ret

00000a28 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
     a28:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
     a2c:	08 95       	ret

00000a2e <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     a2e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     a32:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     a36:	08 95       	ret

00000a38 <iqObjectInit>:
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	fc 01       	movw	r30, r24
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	80 83       	st	Z, r24
     a42:	93 83       	std	Z+3, r25	; 0x03
     a44:	82 83       	std	Z+2, r24	; 0x02
     a46:	15 82       	std	Z+5, r1	; 0x05
     a48:	14 82       	std	Z+4, r1	; 0x04
     a4a:	77 83       	std	Z+7, r23	; 0x07
     a4c:	66 83       	std	Z+6, r22	; 0x06
     a4e:	75 87       	std	Z+13, r23	; 0x0d
     a50:	64 87       	std	Z+12, r22	; 0x0c
     a52:	73 87       	std	Z+11, r23	; 0x0b
     a54:	62 87       	std	Z+10, r22	; 0x0a
     a56:	64 0f       	add	r22, r20
     a58:	75 1f       	adc	r23, r21
     a5a:	71 87       	std	Z+9, r23	; 0x09
     a5c:	60 87       	std	Z+8, r22	; 0x08
     a5e:	37 87       	std	Z+15, r19	; 0x0f
     a60:	26 87       	std	Z+14, r18	; 0x0e
     a62:	11 8b       	std	Z+17, r17	; 0x11
     a64:	00 8b       	std	Z+16, r16	; 0x10
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <iqPutI>:
     a6c:	fc 01       	movw	r30, r24
     a6e:	a2 85       	ldd	r26, Z+10	; 0x0a
     a70:	b3 85       	ldd	r27, Z+11	; 0x0b
     a72:	84 85       	ldd	r24, Z+12	; 0x0c
     a74:	95 85       	ldd	r25, Z+13	; 0x0d
     a76:	a8 17       	cp	r26, r24
     a78:	b9 07       	cpc	r27, r25
     a7a:	e1 f0       	breq	.+56     	; 0xab4 <iqPutI+0x48>
     a7c:	84 81       	ldd	r24, Z+4	; 0x04
     a7e:	95 81       	ldd	r25, Z+5	; 0x05
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	95 83       	std	Z+5, r25	; 0x05
     a84:	84 83       	std	Z+4, r24	; 0x04
     a86:	cd 01       	movw	r24, r26
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	93 87       	std	Z+11, r25	; 0x0b
     a8c:	82 87       	std	Z+10, r24	; 0x0a
     a8e:	6c 93       	st	X, r22
     a90:	22 85       	ldd	r18, Z+10	; 0x0a
     a92:	33 85       	ldd	r19, Z+11	; 0x0b
     a94:	80 85       	ldd	r24, Z+8	; 0x08
     a96:	91 85       	ldd	r25, Z+9	; 0x09
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	20 f0       	brcs	.+8      	; 0xaa6 <iqPutI+0x3a>
     a9e:	86 81       	ldd	r24, Z+6	; 0x06
     aa0:	97 81       	ldd	r25, Z+7	; 0x07
     aa2:	93 87       	std	Z+11, r25	; 0x0b
     aa4:	82 87       	std	Z+10, r24	; 0x0a
     aa6:	cf 01       	movw	r24, r30
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	23 df       	rcall	.-442    	; 0x8f4 <chThdDequeueNextI>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	08 95       	ret
     ab4:	84 81       	ldd	r24, Z+4	; 0x04
     ab6:	95 81       	ldd	r25, Z+5	; 0x05
     ab8:	89 2b       	or	r24, r25
     aba:	01 f3       	breq	.-64     	; 0xa7c <iqPutI+0x10>
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	9f ef       	ldi	r25, 0xFF	; 255
     ac0:	08 95       	ret

00000ac2 <iqGetTimeout>:
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	ec 01       	movw	r28, r24
     acc:	8b 01       	movw	r16, r22
     ace:	f8 94       	cli
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <iqGetTimeout+0x1a>
     ad2:	b8 01       	movw	r22, r16
     ad4:	ce 01       	movw	r24, r28
     ad6:	f1 de       	rcall	.-542    	; 0x8ba <chThdEnqueueTimeoutS>
     ad8:	97 fd       	sbrc	r25, 7
     ada:	27 c0       	rjmp	.+78     	; 0xb2a <iqGetTimeout+0x68>
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	9d 81       	ldd	r25, Y+5	; 0x05
     ae0:	89 2b       	or	r24, r25
     ae2:	b9 f3       	breq	.-18     	; 0xad2 <iqGetTimeout+0x10>
     ae4:	8c 81       	ldd	r24, Y+4	; 0x04
     ae6:	9d 81       	ldd	r25, Y+5	; 0x05
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	9d 83       	std	Y+5, r25	; 0x05
     aec:	8c 83       	std	Y+4, r24	; 0x04
     aee:	ec 85       	ldd	r30, Y+12	; 0x0c
     af0:	fd 85       	ldd	r31, Y+13	; 0x0d
     af2:	cf 01       	movw	r24, r30
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	9d 87       	std	Y+13, r25	; 0x0d
     af8:	8c 87       	std	Y+12, r24	; 0x0c
     afa:	10 81       	ld	r17, Z
     afc:	28 85       	ldd	r18, Y+8	; 0x08
     afe:	39 85       	ldd	r19, Y+9	; 0x09
     b00:	82 17       	cp	r24, r18
     b02:	93 07       	cpc	r25, r19
     b04:	20 f0       	brcs	.+8      	; 0xb0e <iqGetTimeout+0x4c>
     b06:	8e 81       	ldd	r24, Y+6	; 0x06
     b08:	9f 81       	ldd	r25, Y+7	; 0x07
     b0a:	9d 87       	std	Y+13, r25	; 0x0d
     b0c:	8c 87       	std	Y+12, r24	; 0x0c
     b0e:	ee 85       	ldd	r30, Y+14	; 0x0e
     b10:	ff 85       	ldd	r31, Y+15	; 0x0f
     b12:	30 97       	sbiw	r30, 0x00	; 0
     b14:	11 f0       	breq	.+4      	; 0xb1a <iqGetTimeout+0x58>
     b16:	ce 01       	movw	r24, r28
     b18:	19 95       	eicall
     b1a:	78 94       	sei
     b1c:	81 2f       	mov	r24, r17
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret
     b2a:	78 94       	sei
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret

00000b36 <iqReadTimeout>:
     b36:	2f 92       	push	r2
     b38:	3f 92       	push	r3
     b3a:	4f 92       	push	r4
     b3c:	5f 92       	push	r5
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	ec 01       	movw	r28, r24
     b5c:	7b 01       	movw	r14, r22
     b5e:	8a 01       	movw	r16, r20
     b60:	39 01       	movw	r6, r18
     b62:	ae 84       	ldd	r10, Y+14	; 0x0e
     b64:	bf 84       	ldd	r11, Y+15	; 0x0f
     b66:	f8 94       	cli
     b68:	20 90 84 00 	lds	r2, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     b6c:	30 90 85 00 	lds	r3, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     b70:	22 0e       	add	r2, r18
     b72:	33 1e       	adc	r3, r19
     b74:	c1 2c       	mov	r12, r1
     b76:	d1 2c       	mov	r13, r1
     b78:	29 01       	movw	r4, r18
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	48 1a       	sub	r4, r24
     b7e:	51 08       	sbc	r5, r1
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	89 2b       	or	r24, r25
     b86:	81 f1       	breq	.+96     	; 0xbe8 <iqReadTimeout+0xb2>
     b88:	8c 81       	ldd	r24, Y+4	; 0x04
     b8a:	9d 81       	ldd	r25, Y+5	; 0x05
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	9d 83       	std	Y+5, r25	; 0x05
     b90:	8c 83       	std	Y+4, r24	; 0x04
     b92:	47 01       	movw	r8, r14
     b94:	ff ef       	ldi	r31, 0xFF	; 255
     b96:	8f 1a       	sub	r8, r31
     b98:	9f 0a       	sbc	r9, r31
     b9a:	ec 85       	ldd	r30, Y+12	; 0x0c
     b9c:	fd 85       	ldd	r31, Y+13	; 0x0d
     b9e:	cf 01       	movw	r24, r30
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	9d 87       	std	Y+13, r25	; 0x0d
     ba4:	8c 87       	std	Y+12, r24	; 0x0c
     ba6:	80 81       	ld	r24, Z
     ba8:	f7 01       	movw	r30, r14
     baa:	80 83       	st	Z, r24
     bac:	2c 85       	ldd	r18, Y+12	; 0x0c
     bae:	3d 85       	ldd	r19, Y+13	; 0x0d
     bb0:	88 85       	ldd	r24, Y+8	; 0x08
     bb2:	99 85       	ldd	r25, Y+9	; 0x09
     bb4:	28 17       	cp	r18, r24
     bb6:	39 07       	cpc	r19, r25
     bb8:	20 f0       	brcs	.+8      	; 0xbc2 <iqReadTimeout+0x8c>
     bba:	8e 81       	ldd	r24, Y+6	; 0x06
     bbc:	9f 81       	ldd	r25, Y+7	; 0x07
     bbe:	9d 87       	std	Y+13, r25	; 0x0d
     bc0:	8c 87       	std	Y+12, r24	; 0x0c
     bc2:	a1 14       	cp	r10, r1
     bc4:	b1 04       	cpc	r11, r1
     bc6:	19 f0       	breq	.+6      	; 0xbce <iqReadTimeout+0x98>
     bc8:	ce 01       	movw	r24, r28
     bca:	f5 01       	movw	r30, r10
     bcc:	19 95       	eicall
     bce:	78 94       	sei
     bd0:	ff ef       	ldi	r31, 0xFF	; 255
     bd2:	cf 1a       	sub	r12, r31
     bd4:	df 0a       	sbc	r13, r31
     bd6:	01 50       	subi	r16, 0x01	; 1
     bd8:	11 09       	sbc	r17, r1
     bda:	d9 f0       	breq	.+54     	; 0xc12 <iqReadTimeout+0xdc>
     bdc:	f8 94       	cli
     bde:	74 01       	movw	r14, r8
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	9d 81       	ldd	r25, Y+5	; 0x05
     be4:	89 2b       	or	r24, r25
     be6:	81 f6       	brne	.-96     	; 0xb88 <iqReadTimeout+0x52>
     be8:	ee ef       	ldi	r30, 0xFE	; 254
     bea:	4e 16       	cp	r4, r30
     bec:	ef ef       	ldi	r30, 0xFF	; 255
     bee:	5e 06       	cpc	r5, r30
     bf0:	20 f5       	brcc	.+72     	; 0xc3a <iqReadTimeout+0x104>
     bf2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     bf6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     bfa:	b1 01       	movw	r22, r2
     bfc:	68 1b       	sub	r22, r24
     bfe:	79 0b       	sbc	r23, r25
     c00:	66 16       	cp	r6, r22
     c02:	77 06       	cpc	r7, r23
     c04:	28 f0       	brcs	.+10     	; 0xc10 <iqReadTimeout+0xda>
     c06:	ce 01       	movw	r24, r28
     c08:	58 de       	rcall	.-848    	; 0x8ba <chThdEnqueueTimeoutS>
     c0a:	89 2b       	or	r24, r25
     c0c:	09 f4       	brne	.+2      	; 0xc10 <iqReadTimeout+0xda>
     c0e:	b8 cf       	rjmp	.-144    	; 0xb80 <iqReadTimeout+0x4a>
     c10:	78 94       	sei
     c12:	c6 01       	movw	r24, r12
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	bf 90       	pop	r11
     c26:	af 90       	pop	r10
     c28:	9f 90       	pop	r9
     c2a:	8f 90       	pop	r8
     c2c:	7f 90       	pop	r7
     c2e:	6f 90       	pop	r6
     c30:	5f 90       	pop	r5
     c32:	4f 90       	pop	r4
     c34:	3f 90       	pop	r3
     c36:	2f 90       	pop	r2
     c38:	08 95       	ret
     c3a:	b3 01       	movw	r22, r6
     c3c:	ce 01       	movw	r24, r28
     c3e:	3d de       	rcall	.-902    	; 0x8ba <chThdEnqueueTimeoutS>
     c40:	e4 cf       	rjmp	.-56     	; 0xc0a <iqReadTimeout+0xd4>

00000c42 <oqObjectInit>:
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	fc 01       	movw	r30, r24
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	80 83       	st	Z, r24
     c4c:	93 83       	std	Z+3, r25	; 0x03
     c4e:	82 83       	std	Z+2, r24	; 0x02
     c50:	55 83       	std	Z+5, r21	; 0x05
     c52:	44 83       	std	Z+4, r20	; 0x04
     c54:	77 83       	std	Z+7, r23	; 0x07
     c56:	66 83       	std	Z+6, r22	; 0x06
     c58:	75 87       	std	Z+13, r23	; 0x0d
     c5a:	64 87       	std	Z+12, r22	; 0x0c
     c5c:	73 87       	std	Z+11, r23	; 0x0b
     c5e:	62 87       	std	Z+10, r22	; 0x0a
     c60:	46 0f       	add	r20, r22
     c62:	57 1f       	adc	r21, r23
     c64:	51 87       	std	Z+9, r21	; 0x09
     c66:	40 87       	std	Z+8, r20	; 0x08
     c68:	37 87       	std	Z+15, r19	; 0x0f
     c6a:	26 87       	std	Z+14, r18	; 0x0e
     c6c:	11 8b       	std	Z+17, r17	; 0x11
     c6e:	00 8b       	std	Z+16, r16	; 0x10
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	08 95       	ret

00000c76 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	f6 2e       	mov	r15, r22
     c84:	8a 01       	movw	r16, r20
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     c86:	f8 94       	cli
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <oqPutTimeout+0x1e>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
     c8a:	b8 01       	movw	r22, r16
     c8c:	ce 01       	movw	r24, r28
     c8e:	15 de       	rcall	.-982    	; 0x8ba <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
     c90:	97 fd       	sbrc	r25, 7
     c92:	2a c0       	rjmp	.+84     	; 0xce8 <oqPutTimeout+0x72>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
     c94:	8c 81       	ldd	r24, Y+4	; 0x04
     c96:	9d 81       	ldd	r25, Y+5	; 0x05
     c98:	89 2b       	or	r24, r25
     c9a:	b9 f3       	breq	.-18     	; 0xc8a <oqPutTimeout+0x14>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	9d 83       	std	Y+5, r25	; 0x05
     ca4:	8c 83       	std	Y+4, r24	; 0x04
  *oqp->q_wrptr++ = b;
     ca6:	ea 85       	ldd	r30, Y+10	; 0x0a
     ca8:	fb 85       	ldd	r31, Y+11	; 0x0b
     caa:	cf 01       	movw	r24, r30
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	9b 87       	std	Y+11, r25	; 0x0b
     cb0:	8a 87       	std	Y+10, r24	; 0x0a
     cb2:	f0 82       	st	Z, r15
  if (oqp->q_wrptr >= oqp->q_top) {
     cb4:	2a 85       	ldd	r18, Y+10	; 0x0a
     cb6:	3b 85       	ldd	r19, Y+11	; 0x0b
     cb8:	88 85       	ldd	r24, Y+8	; 0x08
     cba:	99 85       	ldd	r25, Y+9	; 0x09
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	20 f0       	brcs	.+8      	; 0xcca <oqPutTimeout+0x54>
    oqp->q_wrptr = oqp->q_buffer;
     cc2:	8e 81       	ldd	r24, Y+6	; 0x06
     cc4:	9f 81       	ldd	r25, Y+7	; 0x07
     cc6:	9b 87       	std	Y+11, r25	; 0x0b
     cc8:	8a 87       	std	Y+10, r24	; 0x0a
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
     cca:	ee 85       	ldd	r30, Y+14	; 0x0e
     ccc:	ff 85       	ldd	r31, Y+15	; 0x0f
     cce:	30 97       	sbiw	r30, 0x00	; 0
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <oqPutTimeout+0x60>
    oqp->q_notify(oqp);
     cd2:	ce 01       	movw	r24, r28
     cd4:	19 95       	eicall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     cd6:	78 94       	sei
  }

  osalSysUnlock();

  return MSG_OK;
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	08 95       	ret
     ce8:	78 94       	sei
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	08 95       	ret

00000cf6 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
     cf6:	cf 93       	push	r28
     cf8:	fc 01       	movw	r30, r24
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
     cfa:	a4 85       	ldd	r26, Z+12	; 0x0c
     cfc:	b5 85       	ldd	r27, Z+13	; 0x0d
     cfe:	82 85       	ldd	r24, Z+10	; 0x0a
     d00:	93 85       	ldd	r25, Z+11	; 0x0b
     d02:	8a 17       	cp	r24, r26
     d04:	9b 07       	cpc	r25, r27
     d06:	e1 f0       	breq	.+56     	; 0xd40 <oqGetI+0x4a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
     d08:	84 81       	ldd	r24, Z+4	; 0x04
     d0a:	95 81       	ldd	r25, Z+5	; 0x05
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	95 83       	std	Z+5, r25	; 0x05
     d10:	84 83       	std	Z+4, r24	; 0x04
  b = *oqp->q_rdptr++;
     d12:	cd 01       	movw	r24, r26
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	95 87       	std	Z+13, r25	; 0x0d
     d18:	84 87       	std	Z+12, r24	; 0x0c
     d1a:	cc 91       	ld	r28, X
  if (oqp->q_rdptr >= oqp->q_top) {
     d1c:	20 85       	ldd	r18, Z+8	; 0x08
     d1e:	31 85       	ldd	r19, Z+9	; 0x09
     d20:	82 17       	cp	r24, r18
     d22:	93 07       	cpc	r25, r19
     d24:	40 f4       	brcc	.+16     	; 0xd36 <oqGetI+0x40>
     d26:	cf 01       	movw	r24, r30
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	e3 dd       	rcall	.-1082   	; 0x8f4 <chThdDequeueNextI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

  return (msg_t)b;
     d2e:	8c 2f       	mov	r24, r28
     d30:	90 e0       	ldi	r25, 0x00	; 0
}
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
     d36:	86 81       	ldd	r24, Z+6	; 0x06
     d38:	97 81       	ldd	r25, Z+7	; 0x07
     d3a:	95 87       	std	Z+13, r25	; 0x0d
     d3c:	84 87       	std	Z+12, r24	; 0x0c
     d3e:	f3 cf       	rjmp	.-26     	; 0xd26 <oqGetI+0x30>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
     d40:	84 81       	ldd	r24, Z+4	; 0x04
     d42:	95 81       	ldd	r25, Z+5	; 0x05
     d44:	89 2b       	or	r24, r25
     d46:	01 f3       	breq	.-64     	; 0xd08 <oqGetI+0x12>
    return MSG_TIMEOUT;
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	9f ef       	ldi	r25, 0xFF	; 255
     d4c:	f2 cf       	rjmp	.-28     	; 0xd32 <oqGetI+0x3c>

00000d4e <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
     d4e:	2f 92       	push	r2
     d50:	3f 92       	push	r3
     d52:	4f 92       	push	r4
     d54:	5f 92       	push	r5
     d56:	6f 92       	push	r6
     d58:	7f 92       	push	r7
     d5a:	8f 92       	push	r8
     d5c:	9f 92       	push	r9
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
     d74:	7b 01       	movw	r14, r22
     d76:	8a 01       	movw	r16, r20
     d78:	39 01       	movw	r6, r18
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
     d7a:	ae 84       	ldd	r10, Y+14	; 0x0e
     d7c:	bf 84       	ldd	r11, Y+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     d7e:	f8 94       	cli
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     d80:	20 90 84 00 	lds	r2, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     d84:	30 90 85 00 	lds	r3, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
     d88:	22 0e       	add	r2, r18
     d8a:	33 1e       	adc	r3, r19
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
     d8c:	c1 2c       	mov	r12, r1
     d8e:	d1 2c       	mov	r13, r1
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
     d90:	29 01       	movw	r4, r18
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	48 1a       	sub	r4, r24
     d96:	51 08       	sbc	r5, r1
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	9d 81       	ldd	r25, Y+5	; 0x05
     d9c:	89 2b       	or	r24, r25
     d9e:	81 f1       	breq	.+96     	; 0xe00 <oqWriteTimeout+0xb2>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	9d 83       	std	Y+5, r25	; 0x05
     da8:	8c 83       	std	Y+4, r24	; 0x04
    *oqp->q_wrptr++ = *bp++;
     daa:	ea 85       	ldd	r30, Y+10	; 0x0a
     dac:	fb 85       	ldd	r31, Y+11	; 0x0b
     dae:	cf 01       	movw	r24, r30
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	9b 87       	std	Y+11, r25	; 0x0b
     db4:	8a 87       	std	Y+10, r24	; 0x0a
     db6:	47 01       	movw	r8, r14
     db8:	bf ef       	ldi	r27, 0xFF	; 255
     dba:	8b 1a       	sub	r8, r27
     dbc:	9b 0a       	sbc	r9, r27
     dbe:	d7 01       	movw	r26, r14
     dc0:	8c 91       	ld	r24, X
     dc2:	80 83       	st	Z, r24
    if (oqp->q_wrptr >= oqp->q_top) {
     dc4:	2a 85       	ldd	r18, Y+10	; 0x0a
     dc6:	3b 85       	ldd	r19, Y+11	; 0x0b
     dc8:	88 85       	ldd	r24, Y+8	; 0x08
     dca:	99 85       	ldd	r25, Y+9	; 0x09
     dcc:	28 17       	cp	r18, r24
     dce:	39 07       	cpc	r19, r25
     dd0:	20 f0       	brcs	.+8      	; 0xdda <oqWriteTimeout+0x8c>
      oqp->q_wrptr = oqp->q_buffer;
     dd2:	8e 81       	ldd	r24, Y+6	; 0x06
     dd4:	9f 81       	ldd	r25, Y+7	; 0x07
     dd6:	9b 87       	std	Y+11, r25	; 0x0b
     dd8:	8a 87       	std	Y+10, r24	; 0x0a
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
     dda:	a1 14       	cp	r10, r1
     ddc:	b1 04       	cpc	r11, r1
     dde:	19 f0       	breq	.+6      	; 0xde6 <oqWriteTimeout+0x98>
      nfy(oqp);
     de0:	ce 01       	movw	r24, r28
     de2:	f5 01       	movw	r30, r10
     de4:	19 95       	eicall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     de6:	78 94       	sei
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
     de8:	ff ef       	ldi	r31, 0xFF	; 255
     dea:	cf 1a       	sub	r12, r31
     dec:	df 0a       	sbc	r13, r31
    if (--n == 0U) {
     dee:	01 50       	subi	r16, 0x01	; 1
     df0:	11 09       	sbc	r17, r1
     df2:	d9 f0       	breq	.+54     	; 0xe2a <oqWriteTimeout+0xdc>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     df4:	f8 94       	cli
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
     df6:	74 01       	movw	r14, r8
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	89 2b       	or	r24, r25
     dfe:	81 f6       	brne	.-96     	; 0xda0 <oqWriteTimeout+0x52>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
     e00:	ae ef       	ldi	r26, 0xFE	; 254
     e02:	4a 16       	cp	r4, r26
     e04:	af ef       	ldi	r26, 0xFF	; 255
     e06:	5a 06       	cpc	r5, r26
     e08:	20 f5       	brcc	.+72     	; 0xe52 <oqWriteTimeout+0x104>
     e0a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     e0e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
     e12:	b1 01       	movw	r22, r2
     e14:	68 1b       	sub	r22, r24
     e16:	79 0b       	sbc	r23, r25

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
     e18:	66 16       	cp	r6, r22
     e1a:	77 06       	cpc	r7, r23
     e1c:	28 f0       	brcs	.+10     	; 0xe28 <oqWriteTimeout+0xda>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
     e1e:	ce 01       	movw	r24, r28
     e20:	4c dd       	rcall	.-1384   	; 0x8ba <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     e22:	89 2b       	or	r24, r25
     e24:	09 f4       	brne	.+2      	; 0xe28 <oqWriteTimeout+0xda>
     e26:	b8 cf       	rjmp	.-144    	; 0xd98 <oqWriteTimeout+0x4a>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     e28:	78 94       	sei
      return w;
    }

    osalSysLock();
  }
}
     e2a:	c6 01       	movw	r24, r12
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	9f 90       	pop	r9
     e42:	8f 90       	pop	r8
     e44:	7f 90       	pop	r7
     e46:	6f 90       	pop	r6
     e48:	5f 90       	pop	r5
     e4a:	4f 90       	pop	r4
     e4c:	3f 90       	pop	r3
     e4e:	2f 90       	pop	r2
     e50:	08 95       	ret
     e52:	b3 01       	movw	r22, r6
     e54:	ce 01       	movw	r24, r28
     e56:	31 dd       	rcall	.-1438   	; 0x8ba <chThdEnqueueTimeoutS>
     e58:	e4 cf       	rjmp	.-56     	; 0xe22 <oqWriteTimeout+0xd4>

00000e5a <pwmInit>:
     e5a:	2e c2       	rjmp	.+1116   	; 0x12b8 <pwm_lld_init>

00000e5c <pwmObjectInit>:
     e5c:	fc 01       	movw	r30, r24
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 83       	st	Z, r24
     e62:	12 82       	std	Z+2, r1	; 0x02
     e64:	11 82       	std	Z+1, r1	; 0x01
     e66:	15 82       	std	Z+5, r1	; 0x05
     e68:	16 82       	std	Z+6, r1	; 0x06
     e6a:	08 95       	ret

00000e6c <pwmStart>:
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	ec 01       	movw	r28, r24
     e72:	f8 94       	cli
     e74:	7a 83       	std	Y+2, r23	; 0x02
     e76:	69 83       	std	Y+1, r22	; 0x01
     e78:	fb 01       	movw	r30, r22
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	9c 83       	std	Y+4, r25	; 0x04
     e80:	8b 83       	std	Y+3, r24	; 0x03
     e82:	ce 01       	movw	r24, r28
     e84:	25 d2       	rcall	.+1098   	; 0x12d0 <pwm_lld_start>
     e86:	1d 82       	std	Y+5, r1	; 0x05
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	88 83       	st	Y, r24
     e8c:	78 94       	sei
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <pwmEnableChannel>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     e94:	f8 94       	cli

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	06 2e       	mov	r0, r22
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <pwmEnableChannel+0xc>
     e9e:	22 0f       	add	r18, r18
     ea0:	0a 94       	dec	r0
     ea2:	ea f7       	brpl	.-6      	; 0xe9e <pwmEnableChannel+0xa>
     ea4:	fc 01       	movw	r30, r24
     ea6:	35 81       	ldd	r19, Z+5	; 0x05
     ea8:	23 2b       	or	r18, r19
     eaa:	25 83       	std	Z+5, r18	; 0x05
     eac:	40 d2       	rcall	.+1152   	; 0x132e <pwm_lld_enable_channel>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     eae:	78 94       	sei
     eb0:	08 95       	ret

00000eb2 <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     eb2:	05 96       	adiw	r24, 0x05	; 5
     eb4:	40 ce       	rjmp	.-896    	; 0xb36 <iqReadTimeout>

00000eb6 <_read>:
     eb6:	2f ef       	ldi	r18, 0xFF	; 255
     eb8:	3f ef       	ldi	r19, 0xFF	; 255
     eba:	05 96       	adiw	r24, 0x05	; 5
     ebc:	3c ce       	rjmp	.-904    	; 0xb36 <iqReadTimeout>

00000ebe <_writet>:
     ebe:	47 96       	adiw	r24, 0x17	; 23
     ec0:	46 cf       	rjmp	.-372    	; 0xd4e <oqWriteTimeout>

00000ec2 <_write>:
     ec2:	2f ef       	ldi	r18, 0xFF	; 255
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
     ec6:	47 96       	adiw	r24, 0x17	; 23
     ec8:	42 cf       	rjmp	.-380    	; 0xd4e <oqWriteTimeout>

00000eca <_gett>:
     eca:	05 96       	adiw	r24, 0x05	; 5
     ecc:	fa cd       	rjmp	.-1036   	; 0xac2 <iqGetTimeout>

00000ece <_get>:
     ece:	6f ef       	ldi	r22, 0xFF	; 255
     ed0:	7f ef       	ldi	r23, 0xFF	; 255
     ed2:	05 96       	adiw	r24, 0x05	; 5
     ed4:	f6 cd       	rjmp	.-1044   	; 0xac2 <iqGetTimeout>

00000ed6 <_putt>:
     ed6:	47 96       	adiw	r24, 0x17	; 23
     ed8:	ce ce       	rjmp	.-612    	; 0xc76 <oqPutTimeout>

00000eda <_put>:
     eda:	4f ef       	ldi	r20, 0xFF	; 255
     edc:	5f ef       	ldi	r21, 0xFF	; 255
     ede:	47 96       	adiw	r24, 0x17	; 23
     ee0:	ca ce       	rjmp	.-620    	; 0xc76 <oqPutTimeout>

00000ee2 <sdInit>:
     ee2:	7a c3       	rjmp	.+1780   	; 0x15d8 <sd_lld_init>

00000ee4 <sdObjectInit>:
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	ec 01       	movw	r28, r24
     ef2:	9b 01       	movw	r18, r22
     ef4:	7a 01       	movw	r14, r20
     ef6:	fc 01       	movw	r30, r24
     ef8:	85 e3       	ldi	r24, 0x35	; 53
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	81 93       	st	Z+, r24
     efe:	91 93       	st	Z+, r25
     f00:	fb 83       	std	Y+3, r31	; 0x03
     f02:	ea 83       	std	Y+2, r30	; 0x02
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	8c 83       	std	Y+4, r24	; 0x04
     f08:	be 01       	movw	r22, r28
     f0a:	67 5d       	subi	r22, 0xD7	; 215
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	8e 01       	movw	r16, r28
     f10:	40 e1       	ldi	r20, 0x10	; 16
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	ce 01       	movw	r24, r28
     f16:	05 96       	adiw	r24, 0x05	; 5
     f18:	8f dd       	rcall	.-1250   	; 0xa38 <iqObjectInit>
     f1a:	be 01       	movw	r22, r28
     f1c:	67 5c       	subi	r22, 0xC7	; 199
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	97 01       	movw	r18, r14
     f22:	40 e1       	ldi	r20, 0x10	; 16
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	ce 01       	movw	r24, r28
     f28:	47 96       	adiw	r24, 0x17	; 23
     f2a:	8b de       	rcall	.-746    	; 0xc42 <oqObjectInit>
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	08 95       	ret

00000f3a <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ec 01       	movw	r28, r24
     f42:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	9a 85       	ldd	r25, Y+10	; 0x0a
     f48:	89 2b       	or	r24, r25
     f4a:	51 f0       	breq	.+20     	; 0xf60 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     f4c:	61 2f       	mov	r22, r17
     f4e:	ce 01       	movw	r24, r28
     f50:	05 96       	adiw	r24, 0x05	; 5
     f52:	8c dd       	rcall	.-1256   	; 0xa6c <iqPutI>
     f54:	97 fd       	sbrc	r25, 7
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     f60:	64 e0       	ldi	r22, 0x04	; 4
     f62:	ce 01       	movw	r24, r28
     f64:	02 96       	adiw	r24, 0x02	; 2
     f66:	f5 dc       	rcall	.-1558   	; 0x952 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     f68:	61 2f       	mov	r22, r17
     f6a:	ce 01       	movw	r24, r28
     f6c:	05 96       	adiw	r24, 0x05	; 5
     f6e:	7e dd       	rcall	.-1284   	; 0xa6c <iqPutI>
     f70:	97 ff       	sbrs	r25, 7
     f72:	f2 cf       	rjmp	.-28     	; 0xf58 <sdIncomingDataI+0x1e>
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	ce 01       	movw	r24, r28
     f78:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	e8 cc       	rjmp	.-1584   	; 0x952 <chEvtBroadcastFlagsI>

00000f82 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
     f8c:	47 96       	adiw	r24, 0x17	; 23
     f8e:	b3 de       	rcall	.-666    	; 0xcf6 <oqGetI>
     f90:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
     f92:	97 fd       	sbrc	r25, 7
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
     f96:	ce 01       	movw	r24, r28
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	08 95       	ret
     fa2:	68 e0       	ldi	r22, 0x08	; 8
     fa4:	c8 01       	movw	r24, r16
     fa6:	02 96       	adiw	r24, 0x02	; 2
     fa8:	d4 dc       	rcall	.-1624   	; 0x952 <chEvtBroadcastFlagsI>
     faa:	ce 01       	movw	r24, r28
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     fb6:	08 95       	ret

00000fb8 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     fb8:	fc 01       	movw	r30, r24

#if defined(PORTA) || defined(__DOXYGEN__)
  PORTA = config->porta.out;
     fba:	80 81       	ld	r24, Z
     fbc:	82 b9       	out	0x02, r24	; 2
  DDRA = config->porta.dir;
     fbe:	81 81       	ldd	r24, Z+1	; 0x01
     fc0:	81 b9       	out	0x01, r24	; 1
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     fc6:	83 81       	ldd	r24, Z+3	; 0x03
     fc8:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     fca:	84 81       	ldd	r24, Z+4	; 0x04
     fcc:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     fce:	85 81       	ldd	r24, Z+5	; 0x05
     fd0:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     fd2:	86 81       	ldd	r24, Z+6	; 0x06
     fd4:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     fd6:	87 81       	ldd	r24, Z+7	; 0x07
     fd8:	8a b9       	out	0x0a, r24	; 10
#endif

#if defined(PORTE) || defined(__DOXYGEN__)
  PORTE = config->porte.out;
     fda:	80 85       	ldd	r24, Z+8	; 0x08
     fdc:	8e b9       	out	0x0e, r24	; 14
  DDRE = config->porte.dir;
     fde:	81 85       	ldd	r24, Z+9	; 0x09
     fe0:	8d b9       	out	0x0d, r24	; 13
#endif

#if defined(PORTF) || defined(__DOXYGEN__)
  PORTF = config->portf.out;
     fe2:	82 85       	ldd	r24, Z+10	; 0x0a
     fe4:	81 bb       	out	0x11, r24	; 17
  DDRF = config->portf.dir;
     fe6:	83 85       	ldd	r24, Z+11	; 0x0b
     fe8:	80 bb       	out	0x10, r24	; 16
#endif

#if defined(PORTG) || defined(__DOXYGEN__)
  PORTG = config->portg.out;
     fea:	84 85       	ldd	r24, Z+12	; 0x0c
     fec:	84 bb       	out	0x14, r24	; 20
  DDRG = config->portg.dir;
     fee:	85 85       	ldd	r24, Z+13	; 0x0d
     ff0:	83 bb       	out	0x13, r24	; 19
#endif

#if defined(PORTH) || defined(__DOXYGEN__)
  PORTH = config->porth.out;
     ff2:	86 85       	ldd	r24, Z+14	; 0x0e
     ff4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
  DDRH = config->porth.dir;
     ff8:	87 85       	ldd	r24, Z+15	; 0x0f
     ffa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
#endif

#if defined(PORTJ) || defined(__DOXYGEN__)
  PORTJ = config->portj.out;
     ffe:	80 89       	ldd	r24, Z+16	; 0x10
    1000:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
  DDRJ = config->portj.dir;
    1004:	81 89       	ldd	r24, Z+17	; 0x11
    1006:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
#endif

#if defined(PORTK) || defined(__DOXYGEN__)
  PORTK = config->portk.out;
    100a:	82 89       	ldd	r24, Z+18	; 0x12
    100c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
  DDRK = config->portk.dir;
    1010:	83 89       	ldd	r24, Z+19	; 0x13
    1012:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
#endif

#if defined(PORTL) || defined(__DOXYGEN__)
  PORTL = config->portl.out;
    1016:	84 89       	ldd	r24, Z+20	; 0x14
    1018:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
  DDRL = config->portl.dir;
    101c:	85 89       	ldd	r24, Z+21	; 0x15
    101e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    1022:	08 95       	ret

00001024 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
    1024:	fc 01       	movw	r30, r24

  switch (mode) {
    1026:	42 30       	cpi	r20, 0x02	; 2
    1028:	c9 f0       	breq	.+50     	; 0x105c <_pal_lld_setgroupmode+0x38>
    102a:	98 f0       	brcs	.+38     	; 0x1052 <_pal_lld_setgroupmode+0x2e>
    102c:	45 30       	cpi	r20, 0x05	; 5
    102e:	b1 f0       	breq	.+44     	; 0x105c <_pal_lld_setgroupmode+0x38>
    1030:	46 30       	cpi	r20, 0x06	; 6
    1032:	21 f4       	brne	.+8      	; 0x103c <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
    1034:	81 81       	ldd	r24, Z+1	; 0x01
    1036:	68 2b       	or	r22, r24
    1038:	61 83       	std	Z+1, r22	; 0x01
    103a:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
    103c:	43 30       	cpi	r20, 0x03	; 3
    103e:	e9 f7       	brne	.-6      	; 0x103a <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    1040:	81 81       	ldd	r24, Z+1	; 0x01
    1042:	96 2f       	mov	r25, r22
    1044:	90 95       	com	r25
    1046:	89 23       	and	r24, r25
    1048:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
    104a:	82 81       	ldd	r24, Z+2	; 0x02
    104c:	68 2b       	or	r22, r24
    104e:	62 83       	std	Z+2, r22	; 0x02
    break;
    1050:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
    1052:	44 23       	and	r20, r20
    1054:	19 f0       	breq	.+6      	; 0x105c <_pal_lld_setgroupmode+0x38>
    1056:	41 30       	cpi	r20, 0x01	; 1
    1058:	99 f3       	breq	.-26     	; 0x1040 <_pal_lld_setgroupmode+0x1c>
    105a:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
    105c:	81 81       	ldd	r24, Z+1	; 0x01
    105e:	60 95       	com	r22
    1060:	86 23       	and	r24, r22
    1062:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	68 23       	and	r22, r24
    1068:	62 83       	std	Z+2, r22	; 0x02
    break;
    106a:	08 95       	ret

0000106c <__vector_17>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	0b b6       	in	r0, 0x3b	; 59
    1078:	0f 92       	push	r0
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
    1098:	6e d8       	rcall	.-3876   	; 0x176 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    109a:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__avr_in_isr>
    109e:	fc da       	rcall	.-2568   	; 0x698 <chSchIsPreemptionRequired>
    10a0:	81 11       	cpse	r24, r1
    10a2:	0a db       	rcall	.-2540   	; 0x6b8 <chSchDoReschedule>
}
    10a4:	ff 91       	pop	r31
    10a6:	ef 91       	pop	r30
    10a8:	bf 91       	pop	r27
    10aa:	af 91       	pop	r26
    10ac:	9f 91       	pop	r25
    10ae:	8f 91       	pop	r24
    10b0:	7f 91       	pop	r23
    10b2:	6f 91       	pop	r22
    10b4:	5f 91       	pop	r21
    10b6:	4f 91       	pop	r20
    10b8:	3f 91       	pop	r19
    10ba:	2f 91       	pop	r18
    10bc:	0f 90       	pop	r0
    10be:	0b be       	out	0x3b, r0	; 59
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	1f 90       	pop	r1
    10c8:	18 95       	reti

000010ca <st_lld_init>:
  /*
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source */
  TCCR1A     = 0;
    10ca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
  TCCR1B     = _BV(WGM12);
    10ce:	e1 e8       	ldi	r30, 0x81	; 129
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	88 e0       	ldi	r24, 0x08	; 8
    10d4:	80 83       	st	Z, r24

  /* start disabled */
  TCCR1C     = 0;
    10d6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7c0082>
  OCR1A      = 0;
    10da:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    10de:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
  TCNT1      = 0;
    10e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    10e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
  TIFR_REG   = _BV(OCF1A);                                  /* Reset pending.   */
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
    10ee:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
  TCCR1B     = PRESCALER;
    10f2:	85 e0       	ldi	r24, 0x05	; 5
    10f4:	80 83       	st	Z, r24
    10f6:	08 95       	ret

000010f8 <__vector_35>:
 * @param[in] period    new cycle time in ticks
 *
 * @notapi
 */
void pwm_lld_change_period(PWMDriver *pwmp, pwmcnt_t period)
{
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	0b b6       	in	r0, 0x3b	; 59
    1104:	0f 92       	push	r0
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__avr_in_isr>
    1124:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <PWMD3+0x1>
    1128:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <PWMD3+0x2>
    112c:	04 80       	ldd	r0, Z+4	; 0x04
    112e:	f5 81       	ldd	r31, Z+5	; 0x05
    1130:	e0 2d       	mov	r30, r0
    1132:	8f e0       	ldi	r24, 0x0F	; 15
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	19 95       	eicall
    1138:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__avr_in_isr>
    113c:	ad da       	rcall	.-2726   	; 0x698 <chSchIsPreemptionRequired>
    113e:	81 11       	cpse	r24, r1
    1140:	bb da       	rcall	.-2698   	; 0x6b8 <chSchDoReschedule>
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0b be       	out	0x3b, r0	; 59
    115e:	0f 90       	pop	r0
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	0f 90       	pop	r0
    1164:	1f 90       	pop	r1
    1166:	18 95       	reti

00001168 <__vector_32>:
    1168:	1f 92       	push	r1
    116a:	0f 92       	push	r0
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	0f 92       	push	r0
    1170:	11 24       	eor	r1, r1
    1172:	0b b6       	in	r0, 0x3b	; 59
    1174:	0f 92       	push	r0
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__avr_in_isr>
    1194:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <PWMD3+0x1>
    1198:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <PWMD3+0x2>
    119c:	07 80       	ldd	r0, Z+7	; 0x07
    119e:	f0 85       	ldd	r31, Z+8	; 0x08
    11a0:	e0 2d       	mov	r30, r0
    11a2:	8f e0       	ldi	r24, 0x0F	; 15
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	19 95       	eicall
    11a8:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__avr_in_isr>
    11ac:	75 da       	rcall	.-2838   	; 0x698 <chSchIsPreemptionRequired>
    11ae:	81 11       	cpse	r24, r1
    11b0:	83 da       	rcall	.-2810   	; 0x6b8 <chSchDoReschedule>
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0b be       	out	0x3b, r0	; 59
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <__vector_33>:
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	0b b6       	in	r0, 0x3b	; 59
    11e4:	0f 92       	push	r0
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__avr_in_isr>
    1204:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <PWMD3+0x1>
    1208:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <PWMD3+0x2>
    120c:	02 84       	ldd	r0, Z+10	; 0x0a
    120e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1210:	e0 2d       	mov	r30, r0
    1212:	8f e0       	ldi	r24, 0x0F	; 15
    1214:	93 e0       	ldi	r25, 0x03	; 3
    1216:	19 95       	eicall
    1218:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__avr_in_isr>
    121c:	3d da       	rcall	.-2950   	; 0x698 <chSchIsPreemptionRequired>
    121e:	81 11       	cpse	r24, r1
    1220:	4b da       	rcall	.-2922   	; 0x6b8 <chSchDoReschedule>
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0b be       	out	0x3b, r0	; 59
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <__vector_34>:
    1248:	1f 92       	push	r1
    124a:	0f 92       	push	r0
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	0f 92       	push	r0
    1250:	11 24       	eor	r1, r1
    1252:	0b b6       	in	r0, 0x3b	; 59
    1254:	0f 92       	push	r0
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__avr_in_isr>
    1274:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <PWMD3+0x1>
    1278:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <PWMD3+0x2>
    127c:	05 84       	ldd	r0, Z+13	; 0x0d
    127e:	f6 85       	ldd	r31, Z+14	; 0x0e
    1280:	e0 2d       	mov	r30, r0
    1282:	8f e0       	ldi	r24, 0x0F	; 15
    1284:	93 e0       	ldi	r25, 0x03	; 3
    1286:	19 95       	eicall
    1288:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__avr_in_isr>
    128c:	05 da       	rcall	.-3062   	; 0x698 <chSchIsPreemptionRequired>
    128e:	81 11       	cpse	r24, r1
    1290:	13 da       	rcall	.-3034   	; 0x6b8 <chSchDoReschedule>
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0b be       	out	0x3b, r0	; 59
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <pwm_lld_init>:
    12b8:	8f e0       	ldi	r24, 0x0F	; 15
    12ba:	93 e0       	ldi	r25, 0x03	; 3
    12bc:	cf dd       	rcall	.-1122   	; 0xe5c <pwmObjectInit>
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <PWMD3+0x6>
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    12ca:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    12ce:	08 95       	ret

000012d0 <pwm_lld_start>:
    12d0:	dc 01       	movw	r26, r24
    12d2:	2c 91       	ld	r18, X
    12d4:	21 30       	cpi	r18, 0x01	; 1
    12d6:	09 f0       	breq	.+2      	; 0x12da <pwm_lld_start+0xa>
    12d8:	08 95       	ret
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	b3 e0       	ldi	r27, 0x03	; 3
    12e0:	8f 30       	cpi	r24, 0x0F	; 15
    12e2:	9b 07       	cpc	r25, r27
    12e4:	09 f1       	breq	.+66     	; 0x1328 <pwm_lld_start+0x58>
    12e6:	44 e1       	ldi	r20, 0x14	; 20
    12e8:	42 9f       	mul	r20, r18
    12ea:	f0 01       	movw	r30, r0
    12ec:	43 9f       	mul	r20, r19
    12ee:	f0 0d       	add	r31, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	eb 5b       	subi	r30, 0xBB	; 187
    12f4:	fd 4f       	sbci	r31, 0xFD	; 253
    12f6:	02 80       	ldd	r0, Z+2	; 0x02
    12f8:	f3 81       	ldd	r31, Z+3	; 0x03
    12fa:	e0 2d       	mov	r30, r0
    12fc:	20 81       	ld	r18, Z
    12fe:	21 60       	ori	r18, 0x01	; 1
    1300:	20 83       	st	Z, r18
    1302:	20 81       	ld	r18, Z
    1304:	22 60       	ori	r18, 0x02	; 2
    1306:	20 83       	st	Z, r18
    1308:	20 81       	ld	r18, Z
    130a:	2b 7f       	andi	r18, 0xFB	; 251
    130c:	20 83       	st	Z, r18
    130e:	dc 01       	movw	r26, r24
    1310:	11 96       	adiw	r26, 0x01	; 1
    1312:	ed 91       	ld	r30, X+
    1314:	fc 91       	ld	r31, X
    1316:	12 97       	sbiw	r26, 0x02	; 2
    1318:	84 81       	ldd	r24, Z+4	; 0x04
    131a:	95 81       	ldd	r25, Z+5	; 0x05
    131c:	89 2b       	or	r24, r25
    131e:	e1 f2       	breq	.-72     	; 0x12d8 <pwm_lld_start+0x8>
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    1326:	08 95       	ret
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	dc cf       	rjmp	.-72     	; 0x12e6 <pwm_lld_start+0x16>

0000132e <pwm_lld_enable_channel>:
 * @notapi
 */
void pwm_lld_enable_channel(PWMDriver *pwmp,
                            pwmchannel_t channel,
                            pwmcnt_t width)
{
    132e:	af 92       	push	r10
    1330:	bf 92       	push	r11
    1332:	cf 92       	push	r12
    1334:	df 92       	push	r13
    1336:	ef 92       	push	r14
    1338:	ff 92       	push	r15
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	fc 01       	movw	r30, r24
    1344:	41 15       	cp	r20, r1
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	58 07       	cpc	r21, r24
    134a:	10 f0       	brcs	.+4      	; 0x1350 <pwm_lld_enable_channel+0x22>
    134c:	4f ef       	ldi	r20, 0xFF	; 255
    134e:	53 e0       	ldi	r21, 0x03	; 3
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
    1350:	26 2f       	mov	r18, r22
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	a1 81       	ldd	r26, Z+1	; 0x01
    1356:	b2 81       	ldd	r27, Z+2	; 0x02
    1358:	89 01       	movw	r16, r18
    135a:	00 0f       	add	r16, r16
    135c:	11 1f       	adc	r17, r17
    135e:	c8 01       	movw	r24, r16
    1360:	82 0f       	add	r24, r18
    1362:	93 1f       	adc	r25, r19
    1364:	a8 0f       	add	r26, r24
    1366:	b9 1f       	adc	r27, r25
    1368:	16 96       	adiw	r26, 0x06	; 6
    136a:	7c 91       	ld	r23, X
    136c:	c1 e0       	ldi	r28, 0x01	; 1
    136e:	d0 e0       	ldi	r29, 0x00	; 0
    1370:	a3 e0       	ldi	r26, 0x03	; 3
    1372:	ef 30       	cpi	r30, 0x0F	; 15
    1374:	fa 07       	cpc	r31, r26
    1376:	09 f4       	brne	.+2      	; 0x137a <pwm_lld_enable_channel+0x4c>
    1378:	a6 c0       	rjmp	.+332    	; 0x14c6 <pwm_lld_enable_channel+0x198>
    137a:	84 e1       	ldi	r24, 0x14	; 20
    137c:	8c 9f       	mul	r24, r28
    137e:	d0 01       	movw	r26, r0
    1380:	8d 9f       	mul	r24, r29
    1382:	b0 0d       	add	r27, r0
    1384:	11 24       	eor	r1, r1
    1386:	ab 5b       	subi	r26, 0xBB	; 187
    1388:	bd 4f       	sbci	r27, 0xFD	; 253
    138a:	ed 90       	ld	r14, X+
    138c:	fc 90       	ld	r15, X
static void config_channel(volatile uint8_t *tccra,
                           uint8_t com1,
                           uint8_t com0,
                           pwmmode_t mode)
{
  *tccra &= ~((1 << com1) | (1 << com0));
    138e:	d7 01       	movw	r26, r14
    1390:	8c 91       	ld	r24, X
    1392:	a6 2f       	mov	r26, r22
    1394:	aa 0f       	add	r26, r26
    1396:	97 e0       	ldi	r25, 0x07	; 7
    1398:	9a 1b       	sub	r25, r26
    139a:	a1 e0       	ldi	r26, 0x01	; 1
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	6d 01       	movw	r12, r26
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <pwm_lld_enable_channel+0x76>
    13a2:	cc 0c       	add	r12, r12
    13a4:	9a 95       	dec	r25
    13a6:	ea f7       	brpl	.-6      	; 0x13a2 <pwm_lld_enable_channel+0x74>
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	a9 2e       	mov	r10, r25
    13ac:	b1 2c       	mov	r11, r1
    13ae:	a2 1a       	sub	r10, r18
    13b0:	b3 0a       	sbc	r11, r19
    13b2:	aa 0c       	add	r10, r10
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <pwm_lld_enable_channel+0x8a>
    13b6:	aa 0f       	add	r26, r26
    13b8:	aa 94       	dec	r10
    13ba:	ea f7       	brpl	.-6      	; 0x13b6 <pwm_lld_enable_channel+0x88>
    13bc:	ba 2e       	mov	r11, r26
    13be:	bc 28       	or	r11, r12
    13c0:	9b 2d       	mov	r25, r11
    13c2:	90 95       	com	r25
    13c4:	98 23       	and	r25, r24
    13c6:	d7 01       	movw	r26, r14
    13c8:	9c 93       	st	X, r25
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
    13ca:	71 30       	cpi	r23, 0x01	; 1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <pwm_lld_enable_channel+0xa2>
    13ce:	72 c0       	rjmp	.+228    	; 0x14b4 <pwm_lld_enable_channel+0x186>
    *tccra |= ((1 << com1) | (0 << com0)); /* non inverting mode */
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
    13d0:	72 30       	cpi	r23, 0x02	; 2
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <pwm_lld_enable_channel+0xa8>
    13d4:	73 c0       	rjmp	.+230    	; 0x14bc <pwm_lld_enable_channel+0x18e>
  config_channel(regs_table[i].tccra,
                 7 - 2*channel,
                 6 - 2*channel,
                 pwmp->config->channels[channel].mode);
  volatile uint8_t *ocrh, *ocrl;
  switch (channel) {
    13d6:	61 30       	cpi	r22, 0x01	; 1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <pwm_lld_enable_channel+0xae>
    13da:	5b c0       	rjmp	.+182    	; 0x1492 <pwm_lld_enable_channel+0x164>
    13dc:	62 30       	cpi	r22, 0x02	; 2
    13de:	09 f4       	brne	.+2      	; 0x13e2 <pwm_lld_enable_channel+0xb4>
    13e0:	47 c0       	rjmp	.+142    	; 0x1470 <pwm_lld_enable_channel+0x142>
  case 2:
    ocrh = regs_table[i].ocrch;
    ocrl = regs_table[i].ocrcl;
    break;
  default:
    ocrh = regs_table[i].ocrah;
    13e2:	84 e1       	ldi	r24, 0x14	; 20
    13e4:	8c 9f       	mul	r24, r28
    13e6:	d0 01       	movw	r26, r0
    13e8:	8d 9f       	mul	r24, r29
    13ea:	b0 0d       	add	r27, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	ab 5b       	subi	r26, 0xBB	; 187
    13f0:	bd 4f       	sbci	r27, 0xFD	; 253
    13f2:	14 96       	adiw	r26, 0x04	; 4
    13f4:	8d 91       	ld	r24, X+
    13f6:	9c 91       	ld	r25, X
    13f8:	15 97       	sbiw	r26, 0x05	; 5
    ocrl = regs_table[i].ocral;
    13fa:	16 96       	adiw	r26, 0x06	; 6
    13fc:	6d 91       	ld	r22, X+
    13fe:	7c 91       	ld	r23, X
    1400:	17 97       	sbiw	r26, 0x07	; 7
  }
  *ocrh = val >> 8;
    1402:	dc 01       	movw	r26, r24
    1404:	5c 93       	st	X, r21
  *ocrl = val & 0xFF;
    1406:	db 01       	movw	r26, r22
    1408:	4c 93       	st	X, r20
  *regs_table[i].tifr |= (1 << (channel + 1));
    140a:	84 e1       	ldi	r24, 0x14	; 20
    140c:	8c 9f       	mul	r24, r28
    140e:	d0 01       	movw	r26, r0
    1410:	8d 9f       	mul	r24, r29
    1412:	b0 0d       	add	r27, r0
    1414:	11 24       	eor	r1, r1
    1416:	ab 5b       	subi	r26, 0xBB	; 187
    1418:	bd 4f       	sbci	r27, 0xFD	; 253
    141a:	50 96       	adiw	r26, 0x10	; 16
    141c:	0d 90       	ld	r0, X+
    141e:	bc 91       	ld	r27, X
    1420:	a0 2d       	mov	r26, r0
    1422:	8c 91       	ld	r24, X
    1424:	b9 01       	movw	r22, r18
    1426:	6f 5f       	subi	r22, 0xFF	; 255
    1428:	7f 4f       	sbci	r23, 0xFF	; 255
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <pwm_lld_enable_channel+0x104>
    1430:	44 0f       	add	r20, r20
    1432:	6a 95       	dec	r22
    1434:	ea f7       	brpl	.-6      	; 0x1430 <pwm_lld_enable_channel+0x102>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
  if (pwmp->config->channels[channel].callback != NULL)
    143a:	01 80       	ldd	r0, Z+1	; 0x01
    143c:	f2 81       	ldd	r31, Z+2	; 0x02
    143e:	e0 2d       	mov	r30, r0
    1440:	20 0f       	add	r18, r16
    1442:	31 1f       	adc	r19, r17
    1444:	e2 0f       	add	r30, r18
    1446:	f3 1f       	adc	r31, r19
    1448:	87 81       	ldd	r24, Z+7	; 0x07
    144a:	90 85       	ldd	r25, Z+8	; 0x08
    144c:	89 2b       	or	r24, r25
    144e:	29 f0       	breq	.+10     	; 0x145a <pwm_lld_enable_channel+0x12c>
    *regs_table[i].timsk |= (1 << (channel + 1));
    1450:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    1454:	48 2b       	or	r20, r24
    1456:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	08 95       	ret
  case 1:
    ocrh = regs_table[i].ocrbh;
    ocrl = regs_table[i].ocrbl;
    break;
  case 2:
    ocrh = regs_table[i].ocrch;
    1470:	84 e1       	ldi	r24, 0x14	; 20
    1472:	8c 9f       	mul	r24, r28
    1474:	d0 01       	movw	r26, r0
    1476:	8d 9f       	mul	r24, r29
    1478:	b0 0d       	add	r27, r0
    147a:	11 24       	eor	r1, r1
    147c:	ab 5b       	subi	r26, 0xBB	; 187
    147e:	bd 4f       	sbci	r27, 0xFD	; 253
    1480:	1c 96       	adiw	r26, 0x0c	; 12
    1482:	8d 91       	ld	r24, X+
    1484:	9c 91       	ld	r25, X
    1486:	1d 97       	sbiw	r26, 0x0d	; 13
    ocrl = regs_table[i].ocrcl;
    1488:	1e 96       	adiw	r26, 0x0e	; 14
    148a:	6d 91       	ld	r22, X+
    148c:	7c 91       	ld	r23, X
    148e:	1f 97       	sbiw	r26, 0x0f	; 15
    break;
    1490:	b8 cf       	rjmp	.-144    	; 0x1402 <pwm_lld_enable_channel+0xd4>
                 6 - 2*channel,
                 pwmp->config->channels[channel].mode);
  volatile uint8_t *ocrh, *ocrl;
  switch (channel) {
  case 1:
    ocrh = regs_table[i].ocrbh;
    1492:	84 e1       	ldi	r24, 0x14	; 20
    1494:	8c 9f       	mul	r24, r28
    1496:	d0 01       	movw	r26, r0
    1498:	8d 9f       	mul	r24, r29
    149a:	b0 0d       	add	r27, r0
    149c:	11 24       	eor	r1, r1
    149e:	ab 5b       	subi	r26, 0xBB	; 187
    14a0:	bd 4f       	sbci	r27, 0xFD	; 253
    14a2:	18 96       	adiw	r26, 0x08	; 8
    14a4:	8d 91       	ld	r24, X+
    14a6:	9c 91       	ld	r25, X
    14a8:	19 97       	sbiw	r26, 0x09	; 9
    ocrl = regs_table[i].ocrbl;
    14aa:	1a 96       	adiw	r26, 0x0a	; 10
    14ac:	6d 91       	ld	r22, X+
    14ae:	7c 91       	ld	r23, X
    14b0:	1b 97       	sbiw	r26, 0x0b	; 11
    break;
    14b2:	a7 cf       	rjmp	.-178    	; 0x1402 <pwm_lld_enable_channel+0xd4>
                           uint8_t com0,
                           pwmmode_t mode)
{
  *tccra &= ~((1 << com1) | (1 << com0));
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
    *tccra |= ((1 << com1) | (0 << com0)); /* non inverting mode */
    14b4:	8c 91       	ld	r24, X
    14b6:	c8 2a       	or	r12, r24
    14b8:	cc 92       	st	X, r12
    14ba:	8d cf       	rjmp	.-230    	; 0x13d6 <pwm_lld_enable_channel+0xa8>
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
    *tccra |= (1 << com1) | (1 << com0);   /* inverting mode */
    14bc:	d7 01       	movw	r26, r14
    14be:	8c 91       	ld	r24, X
    14c0:	8b 29       	or	r24, r11
    14c2:	8c 93       	st	X, r24
    14c4:	88 cf       	rjmp	.-240    	; 0x13d6 <pwm_lld_enable_channel+0xa8>
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
    14c6:	c0 e0       	ldi	r28, 0x00	; 0
    14c8:	d0 e0       	ldi	r29, 0x00	; 0
    14ca:	57 cf       	rjmp	.-338    	; 0x137a <pwm_lld_enable_channel+0x4c>

000014cc <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    14cc:	e1 ec       	ldi	r30, 0xC1	; 193
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	80 62       	ori	r24, 0x20	; 32
    14d4:	80 83       	st	Z, r24
    14d6:	08 95       	ret

000014d8 <__vector_25>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    14d8:	1f 92       	push	r1
    14da:	0f 92       	push	r0
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	0f 92       	push	r0
    14e0:	11 24       	eor	r1, r1
    14e2:	0b b6       	in	r0, 0x3b	; 59
    14e4:	0f 92       	push	r0
    14e6:	2f 93       	push	r18
    14e8:	3f 93       	push	r19
    14ea:	4f 93       	push	r20
    14ec:	5f 93       	push	r21
    14ee:	6f 93       	push	r22
    14f0:	7f 93       	push	r23
    14f2:	8f 93       	push	r24
    14f4:	9f 93       	push	r25
    14f6:	af 93       	push	r26
    14f8:	bf 93       	push	r27
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__avr_in_isr>

  sra = UCSR0A;
    1504:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    1508:	98 2f       	mov	r25, r24
    150a:	9c 71       	andi	r25, 0x1C	; 28
    150c:	e9 f4       	brne	.+58     	; 0x1548 <__vector_25+0x70>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    150e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1512:	86 e1       	ldi	r24, 0x16	; 22
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	11 dd       	rcall	.-1502   	; 0xf3a <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1518:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__avr_in_isr>
    151c:	bd d8       	rcall	.-3718   	; 0x698 <chSchIsPreemptionRequired>
    151e:	81 11       	cpse	r24, r1
    1520:	cb d8       	rcall	.-3690   	; 0x6b8 <chSchDoReschedule>
}
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0b be       	out	0x3b, r0	; 59
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    1548:	83 fd       	sbrc	r24, 3
    154a:	09 c0       	rjmp	.+18     	; 0x155e <__vector_25+0x86>
/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    154c:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    154e:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    1550:	60 62       	ori	r22, 0x20	; 32
  if (sra & fe)
    1552:	84 fd       	sbrc	r24, 4
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    1554:	60 64       	ori	r22, 0x40	; 64
    1556:	88 e1       	ldi	r24, 0x18	; 24
    1558:	93 e0       	ldi	r25, 0x03	; 3
    155a:	fb d9       	rcall	.-3082   	; 0x952 <chEvtBroadcastFlagsI>
    155c:	d8 cf       	rjmp	.-80     	; 0x150e <__vector_25+0x36>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    155e:	60 e8       	ldi	r22, 0x80	; 128
    1560:	f6 cf       	rjmp	.-20     	; 0x154e <__vector_25+0x76>

00001562 <__vector_26>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
    156c:	0b b6       	in	r0, 0x3b	; 59
    156e:	0f 92       	push	r0
    1570:	2f 93       	push	r18
    1572:	3f 93       	push	r19
    1574:	4f 93       	push	r20
    1576:	5f 93       	push	r21
    1578:	6f 93       	push	r22
    157a:	7f 93       	push	r23
    157c:	8f 93       	push	r24
    157e:	9f 93       	push	r25
    1580:	af 93       	push	r26
    1582:	bf 93       	push	r27
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    158e:	86 e1       	ldi	r24, 0x16	; 22
    1590:	93 e0       	ldi	r25, 0x03	; 3
    1592:	f7 dc       	rcall	.-1554   	; 0xf82 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    1594:	97 fd       	sbrc	r25, 7
    1596:	1a c0       	rjmp	.+52     	; 0x15cc <__vector_26+0x6a>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    1598:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

  OSAL_IRQ_EPILOGUE();
    159c:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__avr_in_isr>
    15a0:	7b d8       	rcall	.-3850   	; 0x698 <chSchIsPreemptionRequired>
    15a2:	81 11       	cpse	r24, r1
    15a4:	89 d8       	rcall	.-3822   	; 0x6b8 <chSchDoReschedule>
}
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	bf 91       	pop	r27
    15ac:	af 91       	pop	r26
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	7f 91       	pop	r23
    15b4:	6f 91       	pop	r22
    15b6:	5f 91       	pop	r21
    15b8:	4f 91       	pop	r20
    15ba:	3f 91       	pop	r19
    15bc:	2f 91       	pop	r18
    15be:	0f 90       	pop	r0
    15c0:	0b be       	out	0x3b, r0	; 59
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    15cc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    15d0:	8f 7d       	andi	r24, 0xDF	; 223
    15d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    15d6:	e2 cf       	rjmp	.-60     	; 0x159c <__vector_26+0x3a>

000015d8 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    15d8:	46 e6       	ldi	r20, 0x66	; 102
    15da:	5a e0       	ldi	r21, 0x0A	; 10
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	86 e1       	ldi	r24, 0x16	; 22
    15e2:	93 e0       	ldi	r25, 0x03	; 3
    15e4:	7f cc       	rjmp	.-1794   	; 0xee4 <sdObjectInit>

000015e6 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    15e6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
  EICRB  = 0x00;
    15ea:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
  EIMSK  = 0x00;
    15ee:	1d ba       	out	0x1d, r1	; 29
    15f0:	08 95       	ret

000015f2 <main>:
THD_TABLE_END
#endif

int main(void) {

  halInit();
    15f2:	08 da       	rcall	.-3056   	; 0xa04 <halInit>
      {PWM_OUTPUT_ACTIVE_HIGH, NULL},
    },
  };

  /* PE3-5 are timer 3 pwm channel outputs */
  palSetPadMode(IOPORT5, 3, PAL_MODE_OUTPUT_PUSHPULL);
    15f4:	46 e0       	ldi	r20, 0x06	; 6
    15f6:	68 e0       	ldi	r22, 0x08	; 8
    15f8:	8c e2       	ldi	r24, 0x2C	; 44
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	13 dd       	rcall	.-1498   	; 0x1024 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT5, 4, PAL_MODE_OUTPUT_PUSHPULL);
    15fe:	46 e0       	ldi	r20, 0x06	; 6
    1600:	60 e1       	ldi	r22, 0x10	; 16
    1602:	8c e2       	ldi	r24, 0x2C	; 44
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e dd       	rcall	.-1508   	; 0x1024 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT5, 5, PAL_MODE_OUTPUT_PUSHPULL);
    1608:	46 e0       	ldi	r20, 0x06	; 6
    160a:	60 e2       	ldi	r22, 0x20	; 32
    160c:	8c e2       	ldi	r24, 0x2C	; 44
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	09 dd       	rcall	.-1518   	; 0x1024 <_pal_lld_setgroupmode>

  pwmStart(&PWMD3, &pwm3cfg);
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	72 e0       	ldi	r23, 0x02	; 2
    1616:	8f e0       	ldi	r24, 0x0F	; 15
    1618:	93 e0       	ldi	r25, 0x03	; 3
    161a:	28 dc       	rcall	.-1968   	; 0xe6c <pwmStart>

  /* channel 0 with 50% duty cycle, 1 with 25% and 2 with 75% */
  pwmEnableChannel(&PWMD3, 0, 511);
    161c:	4f ef       	ldi	r20, 0xFF	; 255
    161e:	51 e0       	ldi	r21, 0x01	; 1
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	8f e0       	ldi	r24, 0x0F	; 15
    1624:	93 e0       	ldi	r25, 0x03	; 3
    1626:	36 dc       	rcall	.-1940   	; 0xe94 <pwmEnableChannel>
  pwmEnableChannel(&PWMD3, 1, 255);
    1628:	4f ef       	ldi	r20, 0xFF	; 255
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	8f e0       	ldi	r24, 0x0F	; 15
    1630:	93 e0       	ldi	r25, 0x03	; 3
    1632:	30 dc       	rcall	.-1952   	; 0xe94 <pwmEnableChannel>
  pwmEnableChannel(&PWMD3, 2, 767);
    1634:	4f ef       	ldi	r20, 0xFF	; 255
    1636:	52 e0       	ldi	r21, 0x02	; 2
    1638:	62 e0       	ldi	r22, 0x02	; 2
    163a:	8f e0       	ldi	r24, 0x0F	; 15
    163c:	93 e0       	ldi	r25, 0x03	; 3
    163e:	2a dc       	rcall	.-1964   	; 0xe94 <pwmEnableChannel>
    1640:	0e 94 a6 00 	call	0x14c	; 0x14c <chSysInit>

  chSysInit();
    1644:	ff cf       	rjmp	.-2      	; 0x1644 <main+0x52>

00001646 <vfprintf>:
    1646:	6f 92       	push	r6
    1648:	7f 92       	push	r7
    164a:	8f 92       	push	r8
    164c:	9f 92       	push	r9
    164e:	af 92       	push	r10
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	2b 97       	sbiw	r28, 0x0b	; 11
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	6c 01       	movw	r12, r24
    1674:	7b 01       	movw	r14, r22
    1676:	3a 01       	movw	r6, r20
    1678:	fc 01       	movw	r30, r24
    167a:	17 82       	std	Z+7, r1	; 0x07
    167c:	16 82       	std	Z+6, r1	; 0x06
    167e:	83 81       	ldd	r24, Z+3	; 0x03
    1680:	81 ff       	sbrs	r24, 1
    1682:	f9 c0       	rjmp	.+498    	; 0x1876 <vfprintf+0x230>
    1684:	ce 01       	movw	r24, r28
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	4c 01       	movw	r8, r24
    168a:	f6 01       	movw	r30, r12
    168c:	b3 80       	ldd	r11, Z+3	; 0x03
    168e:	f7 01       	movw	r30, r14
    1690:	b3 fc       	sbrc	r11, 3
    1692:	05 91       	lpm	r16, Z+
    1694:	b3 fe       	sbrs	r11, 3
    1696:	01 91       	ld	r16, Z+
    1698:	7f 01       	movw	r14, r30
    169a:	00 23       	and	r16, r16
    169c:	09 f4       	brne	.+2      	; 0x16a0 <vfprintf+0x5a>
    169e:	e7 c0       	rjmp	.+462    	; 0x186e <vfprintf+0x228>
    16a0:	05 32       	cpi	r16, 0x25	; 37
    16a2:	49 f4       	brne	.+18     	; 0x16b6 <vfprintf+0x70>
    16a4:	b3 fc       	sbrc	r11, 3
    16a6:	05 91       	lpm	r16, Z+
    16a8:	b3 fe       	sbrs	r11, 3
    16aa:	01 91       	ld	r16, Z+
    16ac:	7f 01       	movw	r14, r30
    16ae:	05 32       	cpi	r16, 0x25	; 37
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <vfprintf+0x70>
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	17 c0       	rjmp	.+46     	; 0x16e4 <vfprintf+0x9e>
    16b6:	b6 01       	movw	r22, r12
    16b8:	80 2f       	mov	r24, r16
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	22 d3       	rcall	.+1604   	; 0x1d02 <fputc>
    16be:	53 01       	movw	r10, r6
    16c0:	35 01       	movw	r6, r10
    16c2:	e3 cf       	rjmp	.-58     	; 0x168a <vfprintf+0x44>
    16c4:	00 23       	and	r16, r16
    16c6:	09 f4       	brne	.+2      	; 0x16ca <vfprintf+0x84>
    16c8:	d2 c0       	rjmp	.+420    	; 0x186e <vfprintf+0x228>
    16ca:	60 2f       	mov	r22, r16
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	8b ee       	ldi	r24, 0xEB	; 235
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	ce d2       	rcall	.+1436   	; 0x1c70 <strchr_P>
    16d4:	89 2b       	or	r24, r25
    16d6:	49 f0       	breq	.+18     	; 0x16ea <vfprintf+0xa4>
    16d8:	f7 01       	movw	r30, r14
    16da:	b3 fc       	sbrc	r11, 3
    16dc:	05 91       	lpm	r16, Z+
    16de:	b3 fe       	sbrs	r11, 3
    16e0:	01 91       	ld	r16, Z+
    16e2:	7f 01       	movw	r14, r30
    16e4:	17 ff       	sbrs	r17, 7
    16e6:	ee cf       	rjmp	.-36     	; 0x16c4 <vfprintf+0x7e>
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <vfprintf+0xac>
    16ea:	03 32       	cpi	r16, 0x23	; 35
    16ec:	39 f0       	breq	.+14     	; 0x16fc <vfprintf+0xb6>
    16ee:	0c 36       	cpi	r16, 0x6C	; 108
    16f0:	19 f0       	breq	.+6      	; 0x16f8 <vfprintf+0xb2>
    16f2:	01 11       	cpse	r16, r1
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <vfprintf+0xba>
    16f6:	bb c0       	rjmp	.+374    	; 0x186e <vfprintf+0x228>
    16f8:	10 68       	ori	r17, 0x80	; 128
    16fa:	ee cf       	rjmp	.-36     	; 0x16d8 <vfprintf+0x92>
    16fc:	10 e1       	ldi	r17, 0x10	; 16
    16fe:	ec cf       	rjmp	.-40     	; 0x16d8 <vfprintf+0x92>
    1700:	60 2f       	mov	r22, r16
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	84 ee       	ldi	r24, 0xE4	; 228
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	b3 d2       	rcall	.+1382   	; 0x1c70 <strchr_P>
    170a:	89 2b       	or	r24, r25
    170c:	41 f0       	breq	.+16     	; 0x171e <vfprintf+0xd8>
    170e:	53 01       	movw	r10, r6
    1710:	f4 e0       	ldi	r31, 0x04	; 4
    1712:	af 0e       	add	r10, r31
    1714:	b1 1c       	adc	r11, r1
    1716:	b6 01       	movw	r22, r12
    1718:	8f e3       	ldi	r24, 0x3F	; 63
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	10 c0       	rjmp	.+32     	; 0x173e <vfprintf+0xf8>
    171e:	03 36       	cpi	r16, 0x63	; 99
    1720:	31 f0       	breq	.+12     	; 0x172e <vfprintf+0xe8>
    1722:	03 37       	cpi	r16, 0x73	; 115
    1724:	71 f0       	breq	.+28     	; 0x1742 <vfprintf+0xfc>
    1726:	03 35       	cpi	r16, 0x53	; 83
    1728:	01 f5       	brne	.+64     	; 0x176a <vfprintf+0x124>
    172a:	11 60       	ori	r17, 0x01	; 1
    172c:	0a c0       	rjmp	.+20     	; 0x1742 <vfprintf+0xfc>
    172e:	53 01       	movw	r10, r6
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	a8 0e       	add	r10, r24
    1734:	b1 1c       	adc	r11, r1
    1736:	b6 01       	movw	r22, r12
    1738:	f3 01       	movw	r30, r6
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	e1 d2       	rcall	.+1474   	; 0x1d02 <fputc>
    1740:	bf cf       	rjmp	.-130    	; 0x16c0 <vfprintf+0x7a>
    1742:	53 01       	movw	r10, r6
    1744:	f2 e0       	ldi	r31, 0x02	; 2
    1746:	af 0e       	add	r10, r31
    1748:	b1 1c       	adc	r11, r1
    174a:	f3 01       	movw	r30, r6
    174c:	60 80       	ld	r6, Z
    174e:	71 80       	ldd	r7, Z+1	; 0x01
    1750:	f3 01       	movw	r30, r6
    1752:	10 fd       	sbrc	r17, 0
    1754:	85 91       	lpm	r24, Z+
    1756:	10 ff       	sbrs	r17, 0
    1758:	81 91       	ld	r24, Z+
    175a:	3f 01       	movw	r6, r30
    175c:	88 23       	and	r24, r24
    175e:	09 f4       	brne	.+2      	; 0x1762 <vfprintf+0x11c>
    1760:	af cf       	rjmp	.-162    	; 0x16c0 <vfprintf+0x7a>
    1762:	b6 01       	movw	r22, r12
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	cd d2       	rcall	.+1434   	; 0x1d02 <fputc>
    1768:	f3 cf       	rjmp	.-26     	; 0x1750 <vfprintf+0x10a>
    176a:	04 36       	cpi	r16, 0x64	; 100
    176c:	11 f0       	breq	.+4      	; 0x1772 <vfprintf+0x12c>
    176e:	09 36       	cpi	r16, 0x69	; 105
    1770:	21 f5       	brne	.+72     	; 0x17ba <vfprintf+0x174>
    1772:	53 01       	movw	r10, r6
    1774:	17 ff       	sbrs	r17, 7
    1776:	09 c0       	rjmp	.+18     	; 0x178a <vfprintf+0x144>
    1778:	f4 e0       	ldi	r31, 0x04	; 4
    177a:	af 0e       	add	r10, r31
    177c:	b1 1c       	adc	r11, r1
    177e:	f3 01       	movw	r30, r6
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	0a c0       	rjmp	.+20     	; 0x179e <vfprintf+0x158>
    178a:	f2 e0       	ldi	r31, 0x02	; 2
    178c:	af 0e       	add	r10, r31
    178e:	b1 1c       	adc	r11, r1
    1790:	f3 01       	movw	r30, r6
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	07 2e       	mov	r0, r23
    1798:	00 0c       	add	r0, r0
    179a:	88 0b       	sbc	r24, r24
    179c:	99 0b       	sbc	r25, r25
    179e:	1f 7e       	andi	r17, 0xEF	; 239
    17a0:	97 ff       	sbrs	r25, 7
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <vfprintf+0x16e>
    17a4:	90 95       	com	r25
    17a6:	80 95       	com	r24
    17a8:	70 95       	com	r23
    17aa:	61 95       	neg	r22
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	10 64       	ori	r17, 0x40	; 64
    17b4:	2a e0       	ldi	r18, 0x0A	; 10
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	30 c0       	rjmp	.+96     	; 0x181a <vfprintf+0x1d4>
    17ba:	00 37       	cpi	r16, 0x70	; 112
    17bc:	91 f0       	breq	.+36     	; 0x17e2 <vfprintf+0x19c>
    17be:	40 f4       	brcc	.+16     	; 0x17d0 <vfprintf+0x18a>
    17c0:	08 35       	cpi	r16, 0x58	; 88
    17c2:	a1 f0       	breq	.+40     	; 0x17ec <vfprintf+0x1a6>
    17c4:	0f 36       	cpi	r16, 0x6F	; 111
    17c6:	09 f0       	breq	.+2      	; 0x17ca <vfprintf+0x184>
    17c8:	52 c0       	rjmp	.+164    	; 0x186e <vfprintf+0x228>
    17ca:	28 e0       	ldi	r18, 0x08	; 8
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	11 c0       	rjmp	.+34     	; 0x17f2 <vfprintf+0x1ac>
    17d0:	05 37       	cpi	r16, 0x75	; 117
    17d2:	19 f0       	breq	.+6      	; 0x17da <vfprintf+0x194>
    17d4:	08 37       	cpi	r16, 0x78	; 120
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <vfprintf+0x19e>
    17d8:	4a c0       	rjmp	.+148    	; 0x186e <vfprintf+0x228>
    17da:	1f 7e       	andi	r17, 0xEF	; 239
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <vfprintf+0x1ac>
    17e2:	10 61       	ori	r17, 0x10	; 16
    17e4:	14 62       	ori	r17, 0x24	; 36
    17e6:	20 e1       	ldi	r18, 0x10	; 16
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <vfprintf+0x1ac>
    17ec:	14 60       	ori	r17, 0x04	; 4
    17ee:	20 e1       	ldi	r18, 0x10	; 16
    17f0:	32 e0       	ldi	r19, 0x02	; 2
    17f2:	53 01       	movw	r10, r6
    17f4:	17 ff       	sbrs	r17, 7
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <vfprintf+0x1c4>
    17f8:	f4 e0       	ldi	r31, 0x04	; 4
    17fa:	af 0e       	add	r10, r31
    17fc:	b1 1c       	adc	r11, r1
    17fe:	f3 01       	movw	r30, r6
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	08 c0       	rjmp	.+16     	; 0x181a <vfprintf+0x1d4>
    180a:	f2 e0       	ldi	r31, 0x02	; 2
    180c:	af 0e       	add	r10, r31
    180e:	b1 1c       	adc	r11, r1
    1810:	f3 01       	movw	r30, r6
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a4 01       	movw	r20, r8
    181c:	c7 d2       	rcall	.+1422   	; 0x1dac <__ultoa_invert>
    181e:	08 2f       	mov	r16, r24
    1820:	08 19       	sub	r16, r8
    1822:	16 ff       	sbrs	r17, 6
    1824:	04 c0       	rjmp	.+8      	; 0x182e <vfprintf+0x1e8>
    1826:	b6 01       	movw	r22, r12
    1828:	8d e2       	ldi	r24, 0x2D	; 45
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	6a d2       	rcall	.+1236   	; 0x1d02 <fputc>
    182e:	14 ff       	sbrs	r17, 4
    1830:	13 c0       	rjmp	.+38     	; 0x1858 <vfprintf+0x212>
    1832:	fe 01       	movw	r30, r28
    1834:	e0 0f       	add	r30, r16
    1836:	f1 1d       	adc	r31, r1
    1838:	80 81       	ld	r24, Z
    183a:	80 33       	cpi	r24, 0x30	; 48
    183c:	69 f0       	breq	.+26     	; 0x1858 <vfprintf+0x212>
    183e:	b6 01       	movw	r22, r12
    1840:	80 e3       	ldi	r24, 0x30	; 48
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	5e d2       	rcall	.+1212   	; 0x1d02 <fputc>
    1846:	12 ff       	sbrs	r17, 2
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <vfprintf+0x212>
    184a:	10 72       	andi	r17, 0x20	; 32
    184c:	81 2f       	mov	r24, r17
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	b6 01       	movw	r22, r12
    1852:	88 5a       	subi	r24, 0xA8	; 168
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	55 d2       	rcall	.+1194   	; 0x1d02 <fputc>
    1858:	01 50       	subi	r16, 0x01	; 1
    185a:	f4 01       	movw	r30, r8
    185c:	e0 0f       	add	r30, r16
    185e:	f1 1d       	adc	r31, r1
    1860:	80 81       	ld	r24, Z
    1862:	b6 01       	movw	r22, r12
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	4d d2       	rcall	.+1178   	; 0x1d02 <fputc>
    1868:	01 11       	cpse	r16, r1
    186a:	f6 cf       	rjmp	.-20     	; 0x1858 <vfprintf+0x212>
    186c:	29 cf       	rjmp	.-430    	; 0x16c0 <vfprintf+0x7a>
    186e:	f6 01       	movw	r30, r12
    1870:	86 81       	ldd	r24, Z+6	; 0x06
    1872:	97 81       	ldd	r25, Z+7	; 0x07
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0x234>
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	9f ef       	ldi	r25, 0xFF	; 255
    187a:	2b 96       	adiw	r28, 0x0b	; 11
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	cf 90       	pop	r12
    1896:	bf 90       	pop	r11
    1898:	af 90       	pop	r10
    189a:	9f 90       	pop	r9
    189c:	8f 90       	pop	r8
    189e:	7f 90       	pop	r7
    18a0:	6f 90       	pop	r6
    18a2:	08 95       	ret

000018a4 <putval>:
    18a4:	20 fd       	sbrc	r18, 0
    18a6:	09 c0       	rjmp	.+18     	; 0x18ba <putval+0x16>
    18a8:	fc 01       	movw	r30, r24
    18aa:	23 fd       	sbrc	r18, 3
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <putval+0x14>
    18ae:	22 ff       	sbrs	r18, 2
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <putval+0x12>
    18b2:	73 83       	std	Z+3, r23	; 0x03
    18b4:	62 83       	std	Z+2, r22	; 0x02
    18b6:	51 83       	std	Z+1, r21	; 0x01
    18b8:	40 83       	st	Z, r20
    18ba:	08 95       	ret

000018bc <mulacc>:
    18bc:	44 fd       	sbrc	r20, 4
    18be:	17 c0       	rjmp	.+46     	; 0x18ee <mulacc+0x32>
    18c0:	46 fd       	sbrc	r20, 6
    18c2:	17 c0       	rjmp	.+46     	; 0x18f2 <mulacc+0x36>
    18c4:	ab 01       	movw	r20, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	da 01       	movw	r26, r20
    18ca:	fb 01       	movw	r30, r22
    18cc:	aa 0f       	add	r26, r26
    18ce:	bb 1f       	adc	r27, r27
    18d0:	ee 1f       	adc	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	10 94       	com	r1
    18d6:	d1 f7       	brne	.-12     	; 0x18cc <mulacc+0x10>
    18d8:	4a 0f       	add	r20, r26
    18da:	5b 1f       	adc	r21, r27
    18dc:	6e 1f       	adc	r22, r30
    18de:	7f 1f       	adc	r23, r31
    18e0:	cb 01       	movw	r24, r22
    18e2:	ba 01       	movw	r22, r20
    18e4:	66 0f       	add	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	09 c0       	rjmp	.+18     	; 0x1900 <mulacc+0x44>
    18ee:	33 e0       	ldi	r19, 0x03	; 3
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <mulacc+0x38>
    18f2:	34 e0       	ldi	r19, 0x04	; 4
    18f4:	66 0f       	add	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	88 1f       	adc	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	31 50       	subi	r19, 0x01	; 1
    18fe:	d1 f7       	brne	.-12     	; 0x18f4 <mulacc+0x38>
    1900:	62 0f       	add	r22, r18
    1902:	71 1d       	adc	r23, r1
    1904:	81 1d       	adc	r24, r1
    1906:	91 1d       	adc	r25, r1
    1908:	08 95       	ret

0000190a <skip_spaces>:
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	8c 01       	movw	r16, r24
    1914:	c8 01       	movw	r24, r16
    1916:	b7 d1       	rcall	.+878    	; 0x1c86 <fgetc>
    1918:	ec 01       	movw	r28, r24
    191a:	97 fd       	sbrc	r25, 7
    191c:	06 c0       	rjmp	.+12     	; 0x192a <skip_spaces+0x20>
    191e:	a0 d1       	rcall	.+832    	; 0x1c60 <isspace>
    1920:	89 2b       	or	r24, r25
    1922:	c1 f7       	brne	.-16     	; 0x1914 <skip_spaces+0xa>
    1924:	b8 01       	movw	r22, r16
    1926:	ce 01       	movw	r24, r28
    1928:	28 d2       	rcall	.+1104   	; 0x1d7a <ungetc>
    192a:	ce 01       	movw	r24, r28
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <conv_int>:
    1936:	8f 92       	push	r8
    1938:	9f 92       	push	r9
    193a:	af 92       	push	r10
    193c:	bf 92       	push	r11
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	8c 01       	movw	r16, r24
    194c:	d6 2f       	mov	r29, r22
    194e:	7a 01       	movw	r14, r20
    1950:	b2 2e       	mov	r11, r18
    1952:	99 d1       	rcall	.+818    	; 0x1c86 <fgetc>
    1954:	9c 01       	movw	r18, r24
    1956:	33 27       	eor	r19, r19
    1958:	2b 32       	cpi	r18, 0x2B	; 43
    195a:	31 05       	cpc	r19, r1
    195c:	31 f0       	breq	.+12     	; 0x196a <conv_int+0x34>
    195e:	2d 32       	cpi	r18, 0x2D	; 45
    1960:	31 05       	cpc	r19, r1
    1962:	59 f4       	brne	.+22     	; 0x197a <conv_int+0x44>
    1964:	8b 2d       	mov	r24, r11
    1966:	80 68       	ori	r24, 0x80	; 128
    1968:	b8 2e       	mov	r11, r24
    196a:	d1 50       	subi	r29, 0x01	; 1
    196c:	11 f4       	brne	.+4      	; 0x1972 <conv_int+0x3c>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	61 c0       	rjmp	.+194    	; 0x1a34 <conv_int+0xfe>
    1972:	c8 01       	movw	r24, r16
    1974:	88 d1       	rcall	.+784    	; 0x1c86 <fgetc>
    1976:	97 fd       	sbrc	r25, 7
    1978:	fa cf       	rjmp	.-12     	; 0x196e <conv_int+0x38>
    197a:	cb 2d       	mov	r28, r11
    197c:	cd 7f       	andi	r28, 0xFD	; 253
    197e:	2b 2d       	mov	r18, r11
    1980:	20 73       	andi	r18, 0x30	; 48
    1982:	f9 f4       	brne	.+62     	; 0x19c2 <conv_int+0x8c>
    1984:	80 33       	cpi	r24, 0x30	; 48
    1986:	e9 f4       	brne	.+58     	; 0x19c2 <conv_int+0x8c>
    1988:	aa 24       	eor	r10, r10
    198a:	aa 94       	dec	r10
    198c:	ad 0e       	add	r10, r29
    198e:	09 f4       	brne	.+2      	; 0x1992 <conv_int+0x5c>
    1990:	3e c0       	rjmp	.+124    	; 0x1a0e <conv_int+0xd8>
    1992:	c8 01       	movw	r24, r16
    1994:	78 d1       	rcall	.+752    	; 0x1c86 <fgetc>
    1996:	97 fd       	sbrc	r25, 7
    1998:	3a c0       	rjmp	.+116    	; 0x1a0e <conv_int+0xd8>
    199a:	9c 01       	movw	r18, r24
    199c:	2f 7d       	andi	r18, 0xDF	; 223
    199e:	33 27       	eor	r19, r19
    19a0:	28 35       	cpi	r18, 0x58	; 88
    19a2:	31 05       	cpc	r19, r1
    19a4:	41 f4       	brne	.+16     	; 0x19b6 <conv_int+0x80>
    19a6:	c2 64       	ori	r28, 0x42	; 66
    19a8:	d2 50       	subi	r29, 0x02	; 2
    19aa:	89 f1       	breq	.+98     	; 0x1a0e <conv_int+0xd8>
    19ac:	c8 01       	movw	r24, r16
    19ae:	6b d1       	rcall	.+726    	; 0x1c86 <fgetc>
    19b0:	97 ff       	sbrs	r25, 7
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <conv_int+0x8c>
    19b4:	2c c0       	rjmp	.+88     	; 0x1a0e <conv_int+0xd8>
    19b6:	b6 fe       	sbrs	r11, 6
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <conv_int+0x88>
    19ba:	c2 60       	ori	r28, 0x02	; 2
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <conv_int+0x8a>
    19be:	c2 61       	ori	r28, 0x12	; 18
    19c0:	da 2d       	mov	r29, r10
    19c2:	81 2c       	mov	r8, r1
    19c4:	91 2c       	mov	r9, r1
    19c6:	54 01       	movw	r10, r8
    19c8:	20 ed       	ldi	r18, 0xD0	; 208
    19ca:	28 0f       	add	r18, r24
    19cc:	28 30       	cpi	r18, 0x08	; 8
    19ce:	78 f0       	brcs	.+30     	; 0x19ee <conv_int+0xb8>
    19d0:	c4 ff       	sbrs	r28, 4
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <conv_int+0xa4>
    19d4:	b8 01       	movw	r22, r16
    19d6:	d1 d1       	rcall	.+930    	; 0x1d7a <ungetc>
    19d8:	17 c0       	rjmp	.+46     	; 0x1a08 <conv_int+0xd2>
    19da:	2a 30       	cpi	r18, 0x0A	; 10
    19dc:	40 f0       	brcs	.+16     	; 0x19ee <conv_int+0xb8>
    19de:	c6 ff       	sbrs	r28, 6
    19e0:	f9 cf       	rjmp	.-14     	; 0x19d4 <conv_int+0x9e>
    19e2:	2f 7d       	andi	r18, 0xDF	; 223
    19e4:	3f ee       	ldi	r19, 0xEF	; 239
    19e6:	32 0f       	add	r19, r18
    19e8:	36 30       	cpi	r19, 0x06	; 6
    19ea:	a0 f7       	brcc	.-24     	; 0x19d4 <conv_int+0x9e>
    19ec:	27 50       	subi	r18, 0x07	; 7
    19ee:	4c 2f       	mov	r20, r28
    19f0:	c5 01       	movw	r24, r10
    19f2:	b4 01       	movw	r22, r8
    19f4:	63 df       	rcall	.-314    	; 0x18bc <mulacc>
    19f6:	4b 01       	movw	r8, r22
    19f8:	5c 01       	movw	r10, r24
    19fa:	c2 60       	ori	r28, 0x02	; 2
    19fc:	d1 50       	subi	r29, 0x01	; 1
    19fe:	51 f0       	breq	.+20     	; 0x1a14 <conv_int+0xde>
    1a00:	c8 01       	movw	r24, r16
    1a02:	41 d1       	rcall	.+642    	; 0x1c86 <fgetc>
    1a04:	97 ff       	sbrs	r25, 7
    1a06:	e0 cf       	rjmp	.-64     	; 0x19c8 <conv_int+0x92>
    1a08:	c1 fd       	sbrc	r28, 1
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <conv_int+0xde>
    1a0c:	b0 cf       	rjmp	.-160    	; 0x196e <conv_int+0x38>
    1a0e:	81 2c       	mov	r8, r1
    1a10:	91 2c       	mov	r9, r1
    1a12:	54 01       	movw	r10, r8
    1a14:	c7 ff       	sbrs	r28, 7
    1a16:	08 c0       	rjmp	.+16     	; 0x1a28 <conv_int+0xf2>
    1a18:	b0 94       	com	r11
    1a1a:	a0 94       	com	r10
    1a1c:	90 94       	com	r9
    1a1e:	80 94       	com	r8
    1a20:	81 1c       	adc	r8, r1
    1a22:	91 1c       	adc	r9, r1
    1a24:	a1 1c       	adc	r10, r1
    1a26:	b1 1c       	adc	r11, r1
    1a28:	2c 2f       	mov	r18, r28
    1a2a:	b5 01       	movw	r22, r10
    1a2c:	a4 01       	movw	r20, r8
    1a2e:	c7 01       	movw	r24, r14
    1a30:	39 df       	rcall	.-398    	; 0x18a4 <putval>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	bf 90       	pop	r11
    1a42:	af 90       	pop	r10
    1a44:	9f 90       	pop	r9
    1a46:	8f 90       	pop	r8
    1a48:	08 95       	ret

00001a4a <vfscanf>:
    1a4a:	5f 92       	push	r5
    1a4c:	6f 92       	push	r6
    1a4e:	7f 92       	push	r7
    1a50:	8f 92       	push	r8
    1a52:	9f 92       	push	r9
    1a54:	af 92       	push	r10
    1a56:	bf 92       	push	r11
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	6c 01       	movw	r12, r24
    1a6a:	eb 01       	movw	r28, r22
    1a6c:	5a 01       	movw	r10, r20
    1a6e:	fc 01       	movw	r30, r24
    1a70:	17 82       	std	Z+7, r1	; 0x07
    1a72:	16 82       	std	Z+6, r1	; 0x06
    1a74:	51 2c       	mov	r5, r1
    1a76:	f6 01       	movw	r30, r12
    1a78:	f3 80       	ldd	r15, Z+3	; 0x03
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	f3 fc       	sbrc	r15, 3
    1a7e:	85 91       	lpm	r24, Z+
    1a80:	f3 fe       	sbrs	r15, 3
    1a82:	81 91       	ld	r24, Z+
    1a84:	18 2f       	mov	r17, r24
    1a86:	ef 01       	movw	r28, r30
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <vfscanf+0x44>
    1a8c:	d4 c0       	rjmp	.+424    	; 0x1c36 <vfscanf+0x1ec>
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	e7 d0       	rcall	.+462    	; 0x1c60 <isspace>
    1a92:	89 2b       	or	r24, r25
    1a94:	19 f0       	breq	.+6      	; 0x1a9c <vfscanf+0x52>
    1a96:	c6 01       	movw	r24, r12
    1a98:	38 df       	rcall	.-400    	; 0x190a <skip_spaces>
    1a9a:	ed cf       	rjmp	.-38     	; 0x1a76 <vfscanf+0x2c>
    1a9c:	15 32       	cpi	r17, 0x25	; 37
    1a9e:	41 f4       	brne	.+16     	; 0x1ab0 <vfscanf+0x66>
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	f3 fc       	sbrc	r15, 3
    1aa4:	15 91       	lpm	r17, Z+
    1aa6:	f3 fe       	sbrs	r15, 3
    1aa8:	11 91       	ld	r17, Z+
    1aaa:	ef 01       	movw	r28, r30
    1aac:	15 32       	cpi	r17, 0x25	; 37
    1aae:	71 f4       	brne	.+28     	; 0x1acc <vfscanf+0x82>
    1ab0:	c6 01       	movw	r24, r12
    1ab2:	e9 d0       	rcall	.+466    	; 0x1c86 <fgetc>
    1ab4:	97 fd       	sbrc	r25, 7
    1ab6:	bd c0       	rjmp	.+378    	; 0x1c32 <vfscanf+0x1e8>
    1ab8:	41 2f       	mov	r20, r17
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	9c 01       	movw	r18, r24
    1abe:	33 27       	eor	r19, r19
    1ac0:	24 17       	cp	r18, r20
    1ac2:	35 07       	cpc	r19, r21
    1ac4:	c1 f2       	breq	.-80     	; 0x1a76 <vfscanf+0x2c>
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	58 d1       	rcall	.+688    	; 0x1d7a <ungetc>
    1aca:	b5 c0       	rjmp	.+362    	; 0x1c36 <vfscanf+0x1ec>
    1acc:	1a 32       	cpi	r17, 0x2A	; 42
    1ace:	39 f4       	brne	.+14     	; 0x1ade <vfscanf+0x94>
    1ad0:	f3 fc       	sbrc	r15, 3
    1ad2:	15 91       	lpm	r17, Z+
    1ad4:	f3 fe       	sbrs	r15, 3
    1ad6:	11 91       	ld	r17, Z+
    1ad8:	ef 01       	movw	r28, r30
    1ada:	01 e0       	ldi	r16, 0x01	; 1
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <vfscanf+0x96>
    1ade:	00 e0       	ldi	r16, 0x00	; 0
    1ae0:	e1 2c       	mov	r14, r1
    1ae2:	20 ed       	ldi	r18, 0xD0	; 208
    1ae4:	21 0f       	add	r18, r17
    1ae6:	2a 30       	cpi	r18, 0x0A	; 10
    1ae8:	78 f4       	brcc	.+30     	; 0x1b08 <vfscanf+0xbe>
    1aea:	02 60       	ori	r16, 0x02	; 2
    1aec:	6e 2d       	mov	r22, r14
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	e2 de       	rcall	.-572    	; 0x18bc <mulacc>
    1af8:	e6 2e       	mov	r14, r22
    1afa:	fe 01       	movw	r30, r28
    1afc:	f3 fc       	sbrc	r15, 3
    1afe:	15 91       	lpm	r17, Z+
    1b00:	f3 fe       	sbrs	r15, 3
    1b02:	11 91       	ld	r17, Z+
    1b04:	ef 01       	movw	r28, r30
    1b06:	ed cf       	rjmp	.-38     	; 0x1ae2 <vfscanf+0x98>
    1b08:	01 ff       	sbrs	r16, 1
    1b0a:	03 c0       	rjmp	.+6      	; 0x1b12 <vfscanf+0xc8>
    1b0c:	e1 10       	cpse	r14, r1
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <vfscanf+0xcc>
    1b10:	92 c0       	rjmp	.+292    	; 0x1c36 <vfscanf+0x1ec>
    1b12:	ee 24       	eor	r14, r14
    1b14:	ea 94       	dec	r14
    1b16:	18 36       	cpi	r17, 0x68	; 104
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <vfscanf+0xd6>
    1b1a:	1c 36       	cpi	r17, 0x6C	; 108
    1b1c:	51 f0       	breq	.+20     	; 0x1b32 <vfscanf+0xe8>
    1b1e:	10 c0       	rjmp	.+32     	; 0x1b40 <vfscanf+0xf6>
    1b20:	fe 01       	movw	r30, r28
    1b22:	f3 fc       	sbrc	r15, 3
    1b24:	15 91       	lpm	r17, Z+
    1b26:	f3 fe       	sbrs	r15, 3
    1b28:	11 91       	ld	r17, Z+
    1b2a:	ef 01       	movw	r28, r30
    1b2c:	18 36       	cpi	r17, 0x68	; 104
    1b2e:	41 f4       	brne	.+16     	; 0x1b40 <vfscanf+0xf6>
    1b30:	08 60       	ori	r16, 0x08	; 8
    1b32:	04 60       	ori	r16, 0x04	; 4
    1b34:	fe 01       	movw	r30, r28
    1b36:	f3 fc       	sbrc	r15, 3
    1b38:	15 91       	lpm	r17, Z+
    1b3a:	f3 fe       	sbrs	r15, 3
    1b3c:	11 91       	ld	r17, Z+
    1b3e:	ef 01       	movw	r28, r30
    1b40:	11 23       	and	r17, r17
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <vfscanf+0xfc>
    1b44:	78 c0       	rjmp	.+240    	; 0x1c36 <vfscanf+0x1ec>
    1b46:	61 2f       	mov	r22, r17
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	8b ef       	ldi	r24, 0xFB	; 251
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	90 d0       	rcall	.+288    	; 0x1c70 <strchr_P>
    1b50:	89 2b       	or	r24, r25
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <vfscanf+0x10c>
    1b54:	70 c0       	rjmp	.+224    	; 0x1c36 <vfscanf+0x1ec>
    1b56:	00 fd       	sbrc	r16, 0
    1b58:	07 c0       	rjmp	.+14     	; 0x1b68 <vfscanf+0x11e>
    1b5a:	f5 01       	movw	r30, r10
    1b5c:	80 80       	ld	r8, Z
    1b5e:	91 80       	ldd	r9, Z+1	; 0x01
    1b60:	c5 01       	movw	r24, r10
    1b62:	02 96       	adiw	r24, 0x02	; 2
    1b64:	5c 01       	movw	r10, r24
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <vfscanf+0x122>
    1b68:	81 2c       	mov	r8, r1
    1b6a:	91 2c       	mov	r9, r1
    1b6c:	1e 36       	cpi	r17, 0x6E	; 110
    1b6e:	49 f4       	brne	.+18     	; 0x1b82 <vfscanf+0x138>
    1b70:	f6 01       	movw	r30, r12
    1b72:	46 81       	ldd	r20, Z+6	; 0x06
    1b74:	57 81       	ldd	r21, Z+7	; 0x07
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	20 2f       	mov	r18, r16
    1b7c:	c4 01       	movw	r24, r8
    1b7e:	92 de       	rcall	.-732    	; 0x18a4 <putval>
    1b80:	7a cf       	rjmp	.-268    	; 0x1a76 <vfscanf+0x2c>
    1b82:	13 36       	cpi	r17, 0x63	; 99
    1b84:	a1 f4       	brne	.+40     	; 0x1bae <vfscanf+0x164>
    1b86:	01 fd       	sbrc	r16, 1
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <vfscanf+0x144>
    1b8a:	ee 24       	eor	r14, r14
    1b8c:	e3 94       	inc	r14
    1b8e:	c6 01       	movw	r24, r12
    1b90:	7a d0       	rcall	.+244    	; 0x1c86 <fgetc>
    1b92:	97 fd       	sbrc	r25, 7
    1b94:	4e c0       	rjmp	.+156    	; 0x1c32 <vfscanf+0x1e8>
    1b96:	81 14       	cp	r8, r1
    1b98:	91 04       	cpc	r9, r1
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <vfscanf+0x15c>
    1b9c:	f4 01       	movw	r30, r8
    1b9e:	80 83       	st	Z, r24
    1ba0:	c4 01       	movw	r24, r8
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	4c 01       	movw	r8, r24
    1ba6:	ea 94       	dec	r14
    1ba8:	e1 10       	cpse	r14, r1
    1baa:	f1 cf       	rjmp	.-30     	; 0x1b8e <vfscanf+0x144>
    1bac:	3e c0       	rjmp	.+124    	; 0x1c2a <vfscanf+0x1e0>
    1bae:	c6 01       	movw	r24, r12
    1bb0:	ac de       	rcall	.-680    	; 0x190a <skip_spaces>
    1bb2:	97 fd       	sbrc	r25, 7
    1bb4:	3e c0       	rjmp	.+124    	; 0x1c32 <vfscanf+0x1e8>
    1bb6:	1f 36       	cpi	r17, 0x6F	; 111
    1bb8:	49 f1       	breq	.+82     	; 0x1c0c <vfscanf+0x1c2>
    1bba:	28 f4       	brcc	.+10     	; 0x1bc6 <vfscanf+0x17c>
    1bbc:	14 36       	cpi	r17, 0x64	; 100
    1bbe:	21 f1       	breq	.+72     	; 0x1c08 <vfscanf+0x1be>
    1bc0:	19 36       	cpi	r17, 0x69	; 105
    1bc2:	39 f1       	breq	.+78     	; 0x1c12 <vfscanf+0x1c8>
    1bc4:	25 c0       	rjmp	.+74     	; 0x1c10 <vfscanf+0x1c6>
    1bc6:	13 37       	cpi	r17, 0x73	; 115
    1bc8:	71 f0       	breq	.+28     	; 0x1be6 <vfscanf+0x19c>
    1bca:	15 37       	cpi	r17, 0x75	; 117
    1bcc:	e9 f0       	breq	.+58     	; 0x1c08 <vfscanf+0x1be>
    1bce:	20 c0       	rjmp	.+64     	; 0x1c10 <vfscanf+0x1c6>
    1bd0:	81 14       	cp	r8, r1
    1bd2:	91 04       	cpc	r9, r1
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <vfscanf+0x196>
    1bd6:	f4 01       	movw	r30, r8
    1bd8:	60 82       	st	Z, r6
    1bda:	c4 01       	movw	r24, r8
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	4c 01       	movw	r8, r24
    1be0:	ea 94       	dec	r14
    1be2:	ee 20       	and	r14, r14
    1be4:	59 f0       	breq	.+22     	; 0x1bfc <vfscanf+0x1b2>
    1be6:	c6 01       	movw	r24, r12
    1be8:	4e d0       	rcall	.+156    	; 0x1c86 <fgetc>
    1bea:	3c 01       	movw	r6, r24
    1bec:	97 fd       	sbrc	r25, 7
    1bee:	06 c0       	rjmp	.+12     	; 0x1bfc <vfscanf+0x1b2>
    1bf0:	37 d0       	rcall	.+110    	; 0x1c60 <isspace>
    1bf2:	89 2b       	or	r24, r25
    1bf4:	69 f3       	breq	.-38     	; 0x1bd0 <vfscanf+0x186>
    1bf6:	b6 01       	movw	r22, r12
    1bf8:	c3 01       	movw	r24, r6
    1bfa:	bf d0       	rcall	.+382    	; 0x1d7a <ungetc>
    1bfc:	81 14       	cp	r8, r1
    1bfe:	91 04       	cpc	r9, r1
    1c00:	a1 f0       	breq	.+40     	; 0x1c2a <vfscanf+0x1e0>
    1c02:	f4 01       	movw	r30, r8
    1c04:	10 82       	st	Z, r1
    1c06:	11 c0       	rjmp	.+34     	; 0x1c2a <vfscanf+0x1e0>
    1c08:	00 62       	ori	r16, 0x20	; 32
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <vfscanf+0x1c8>
    1c0c:	00 61       	ori	r16, 0x10	; 16
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <vfscanf+0x1c8>
    1c10:	00 64       	ori	r16, 0x40	; 64
    1c12:	20 2f       	mov	r18, r16
    1c14:	a4 01       	movw	r20, r8
    1c16:	6e 2d       	mov	r22, r14
    1c18:	c6 01       	movw	r24, r12
    1c1a:	8d de       	rcall	.-742    	; 0x1936 <conv_int>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <vfscanf+0x1e0>
    1c20:	f6 01       	movw	r30, r12
    1c22:	83 81       	ldd	r24, Z+3	; 0x03
    1c24:	80 73       	andi	r24, 0x30	; 48
    1c26:	29 f4       	brne	.+10     	; 0x1c32 <vfscanf+0x1e8>
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <vfscanf+0x1ec>
    1c2a:	00 fd       	sbrc	r16, 0
    1c2c:	24 cf       	rjmp	.-440    	; 0x1a76 <vfscanf+0x2c>
    1c2e:	53 94       	inc	r5
    1c30:	22 cf       	rjmp	.-444    	; 0x1a76 <vfscanf+0x2c>
    1c32:	55 20       	and	r5, r5
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <vfscanf+0x1f2>
    1c36:	85 2d       	mov	r24, r5
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <vfscanf+0x1f6>
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	9f ef       	ldi	r25, 0xFF	; 255
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	df 90       	pop	r13
    1c4e:	cf 90       	pop	r12
    1c50:	bf 90       	pop	r11
    1c52:	af 90       	pop	r10
    1c54:	9f 90       	pop	r9
    1c56:	8f 90       	pop	r8
    1c58:	7f 90       	pop	r7
    1c5a:	6f 90       	pop	r6
    1c5c:	5f 90       	pop	r5
    1c5e:	08 95       	ret

00001c60 <isspace>:
    1c60:	91 11       	cpse	r25, r1
    1c62:	02 c1       	rjmp	.+516    	; 0x1e68 <__ctype_isfalse>
    1c64:	80 32       	cpi	r24, 0x20	; 32
    1c66:	19 f0       	breq	.+6      	; 0x1c6e <isspace+0xe>
    1c68:	89 50       	subi	r24, 0x09	; 9
    1c6a:	85 50       	subi	r24, 0x05	; 5
    1c6c:	d0 f7       	brcc	.-12     	; 0x1c62 <isspace+0x2>
    1c6e:	08 95       	ret

00001c70 <strchr_P>:
    1c70:	fc 01       	movw	r30, r24
    1c72:	05 90       	lpm	r0, Z+
    1c74:	06 16       	cp	r0, r22
    1c76:	21 f0       	breq	.+8      	; 0x1c80 <strchr_P+0x10>
    1c78:	00 20       	and	r0, r0
    1c7a:	d9 f7       	brne	.-10     	; 0x1c72 <strchr_P+0x2>
    1c7c:	c0 01       	movw	r24, r0
    1c7e:	08 95       	ret
    1c80:	31 97       	sbiw	r30, 0x01	; 1
    1c82:	cf 01       	movw	r24, r30
    1c84:	08 95       	ret

00001c86 <fgetc>:
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	ec 01       	movw	r28, r24
    1c8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8e:	20 ff       	sbrs	r18, 0
    1c90:	33 c0       	rjmp	.+102    	; 0x1cf8 <fgetc+0x72>
    1c92:	26 ff       	sbrs	r18, 6
    1c94:	0a c0       	rjmp	.+20     	; 0x1caa <fgetc+0x24>
    1c96:	2f 7b       	andi	r18, 0xBF	; 191
    1c98:	2b 83       	std	Y+3, r18	; 0x03
    1c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	9f 83       	std	Y+7, r25	; 0x07
    1ca2:	8e 83       	std	Y+6, r24	; 0x06
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	29 c0       	rjmp	.+82     	; 0x1cfc <fgetc+0x76>
    1caa:	22 ff       	sbrs	r18, 2
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <fgetc+0x46>
    1cae:	e8 81       	ld	r30, Y
    1cb0:	f9 81       	ldd	r31, Y+1	; 0x01
    1cb2:	80 81       	ld	r24, Z
    1cb4:	08 2e       	mov	r0, r24
    1cb6:	00 0c       	add	r0, r0
    1cb8:	99 0b       	sbc	r25, r25
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	19 f4       	brne	.+6      	; 0x1cc4 <fgetc+0x3e>
    1cbe:	20 62       	ori	r18, 0x20	; 32
    1cc0:	2b 83       	std	Y+3, r18	; 0x03
    1cc2:	1a c0       	rjmp	.+52     	; 0x1cf8 <fgetc+0x72>
    1cc4:	31 96       	adiw	r30, 0x01	; 1
    1cc6:	f9 83       	std	Y+1, r31	; 0x01
    1cc8:	e8 83       	st	Y, r30
    1cca:	0e c0       	rjmp	.+28     	; 0x1ce8 <fgetc+0x62>
    1ccc:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cce:	fb 85       	ldd	r31, Y+11	; 0x0b
    1cd0:	19 95       	eicall
    1cd2:	97 ff       	sbrs	r25, 7
    1cd4:	09 c0       	rjmp	.+18     	; 0x1ce8 <fgetc+0x62>
    1cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	11 f0       	breq	.+4      	; 0x1ce0 <fgetc+0x5a>
    1cdc:	80 e2       	ldi	r24, 0x20	; 32
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <fgetc+0x5c>
    1ce0:	80 e1       	ldi	r24, 0x10	; 16
    1ce2:	82 2b       	or	r24, r18
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	08 c0       	rjmp	.+16     	; 0x1cf8 <fgetc+0x72>
    1ce8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cea:	3f 81       	ldd	r19, Y+7	; 0x07
    1cec:	2f 5f       	subi	r18, 0xFF	; 255
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	3f 83       	std	Y+7, r19	; 0x07
    1cf2:	2e 83       	std	Y+6, r18	; 0x06
    1cf4:	99 27       	eor	r25, r25
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <fgetc+0x76>
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	9f ef       	ldi	r25, 0xFF	; 255
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <fputc>:
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	fb 01       	movw	r30, r22
    1d0c:	23 81       	ldd	r18, Z+3	; 0x03
    1d0e:	21 fd       	sbrc	r18, 1
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <fputc+0x16>
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	9f ef       	ldi	r25, 0xFF	; 255
    1d16:	2c c0       	rjmp	.+88     	; 0x1d70 <fputc+0x6e>
    1d18:	22 ff       	sbrs	r18, 2
    1d1a:	16 c0       	rjmp	.+44     	; 0x1d48 <fputc+0x46>
    1d1c:	46 81       	ldd	r20, Z+6	; 0x06
    1d1e:	57 81       	ldd	r21, Z+7	; 0x07
    1d20:	24 81       	ldd	r18, Z+4	; 0x04
    1d22:	35 81       	ldd	r19, Z+5	; 0x05
    1d24:	42 17       	cp	r20, r18
    1d26:	53 07       	cpc	r21, r19
    1d28:	44 f4       	brge	.+16     	; 0x1d3a <fputc+0x38>
    1d2a:	a0 81       	ld	r26, Z
    1d2c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d2e:	9d 01       	movw	r18, r26
    1d30:	2f 5f       	subi	r18, 0xFF	; 255
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	31 83       	std	Z+1, r19	; 0x01
    1d36:	20 83       	st	Z, r18
    1d38:	8c 93       	st	X, r24
    1d3a:	26 81       	ldd	r18, Z+6	; 0x06
    1d3c:	37 81       	ldd	r19, Z+7	; 0x07
    1d3e:	2f 5f       	subi	r18, 0xFF	; 255
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	37 83       	std	Z+7, r19	; 0x07
    1d44:	26 83       	std	Z+6, r18	; 0x06
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <fputc+0x6e>
    1d48:	8b 01       	movw	r16, r22
    1d4a:	ec 01       	movw	r28, r24
    1d4c:	fb 01       	movw	r30, r22
    1d4e:	00 84       	ldd	r0, Z+8	; 0x08
    1d50:	f1 85       	ldd	r31, Z+9	; 0x09
    1d52:	e0 2d       	mov	r30, r0
    1d54:	19 95       	eicall
    1d56:	89 2b       	or	r24, r25
    1d58:	e1 f6       	brne	.-72     	; 0x1d12 <fputc+0x10>
    1d5a:	d8 01       	movw	r26, r16
    1d5c:	16 96       	adiw	r26, 0x06	; 6
    1d5e:	8d 91       	ld	r24, X+
    1d60:	9c 91       	ld	r25, X
    1d62:	17 97       	sbiw	r26, 0x07	; 7
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	17 96       	adiw	r26, 0x07	; 7
    1d68:	9c 93       	st	X, r25
    1d6a:	8e 93       	st	-X, r24
    1d6c:	16 97       	sbiw	r26, 0x06	; 6
    1d6e:	ce 01       	movw	r24, r28
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <ungetc>:
    1d7a:	fb 01       	movw	r30, r22
    1d7c:	23 81       	ldd	r18, Z+3	; 0x03
    1d7e:	20 ff       	sbrs	r18, 0
    1d80:	12 c0       	rjmp	.+36     	; 0x1da6 <ungetc+0x2c>
    1d82:	26 fd       	sbrc	r18, 6
    1d84:	10 c0       	rjmp	.+32     	; 0x1da6 <ungetc+0x2c>
    1d86:	8f 3f       	cpi	r24, 0xFF	; 255
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	93 07       	cpc	r25, r19
    1d8c:	61 f0       	breq	.+24     	; 0x1da6 <ungetc+0x2c>
    1d8e:	82 83       	std	Z+2, r24	; 0x02
    1d90:	2f 7d       	andi	r18, 0xDF	; 223
    1d92:	20 64       	ori	r18, 0x40	; 64
    1d94:	23 83       	std	Z+3, r18	; 0x03
    1d96:	26 81       	ldd	r18, Z+6	; 0x06
    1d98:	37 81       	ldd	r19, Z+7	; 0x07
    1d9a:	21 50       	subi	r18, 0x01	; 1
    1d9c:	31 09       	sbc	r19, r1
    1d9e:	37 83       	std	Z+7, r19	; 0x07
    1da0:	26 83       	std	Z+6, r18	; 0x06
    1da2:	99 27       	eor	r25, r25
    1da4:	08 95       	ret
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	08 95       	ret

00001dac <__ultoa_invert>:
    1dac:	fa 01       	movw	r30, r20
    1dae:	aa 27       	eor	r26, r26
    1db0:	28 30       	cpi	r18, 0x08	; 8
    1db2:	51 f1       	breq	.+84     	; 0x1e08 <__ultoa_invert+0x5c>
    1db4:	20 31       	cpi	r18, 0x10	; 16
    1db6:	81 f1       	breq	.+96     	; 0x1e18 <__ultoa_invert+0x6c>
    1db8:	e8 94       	clt
    1dba:	6f 93       	push	r22
    1dbc:	6e 7f       	andi	r22, 0xFE	; 254
    1dbe:	6e 5f       	subi	r22, 0xFE	; 254
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	af 4f       	sbci	r26, 0xFF	; 255
    1dc8:	b1 e0       	ldi	r27, 0x01	; 1
    1dca:	3e d0       	rcall	.+124    	; 0x1e48 <__ultoa_invert+0x9c>
    1dcc:	b4 e0       	ldi	r27, 0x04	; 4
    1dce:	3c d0       	rcall	.+120    	; 0x1e48 <__ultoa_invert+0x9c>
    1dd0:	67 0f       	add	r22, r23
    1dd2:	78 1f       	adc	r23, r24
    1dd4:	89 1f       	adc	r24, r25
    1dd6:	9a 1f       	adc	r25, r26
    1dd8:	a1 1d       	adc	r26, r1
    1dda:	68 0f       	add	r22, r24
    1ddc:	79 1f       	adc	r23, r25
    1dde:	8a 1f       	adc	r24, r26
    1de0:	91 1d       	adc	r25, r1
    1de2:	a1 1d       	adc	r26, r1
    1de4:	6a 0f       	add	r22, r26
    1de6:	71 1d       	adc	r23, r1
    1de8:	81 1d       	adc	r24, r1
    1dea:	91 1d       	adc	r25, r1
    1dec:	a1 1d       	adc	r26, r1
    1dee:	20 d0       	rcall	.+64     	; 0x1e30 <__ultoa_invert+0x84>
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <__ultoa_invert+0x48>
    1df2:	68 94       	set
    1df4:	3f 91       	pop	r19
    1df6:	2a e0       	ldi	r18, 0x0A	; 10
    1df8:	26 9f       	mul	r18, r22
    1dfa:	11 24       	eor	r1, r1
    1dfc:	30 19       	sub	r19, r0
    1dfe:	30 5d       	subi	r19, 0xD0	; 208
    1e00:	31 93       	st	Z+, r19
    1e02:	de f6       	brtc	.-74     	; 0x1dba <__ultoa_invert+0xe>
    1e04:	cf 01       	movw	r24, r30
    1e06:	08 95       	ret
    1e08:	46 2f       	mov	r20, r22
    1e0a:	47 70       	andi	r20, 0x07	; 7
    1e0c:	40 5d       	subi	r20, 0xD0	; 208
    1e0e:	41 93       	st	Z+, r20
    1e10:	b3 e0       	ldi	r27, 0x03	; 3
    1e12:	0f d0       	rcall	.+30     	; 0x1e32 <__ultoa_invert+0x86>
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <__ultoa_invert+0x5c>
    1e16:	f6 cf       	rjmp	.-20     	; 0x1e04 <__ultoa_invert+0x58>
    1e18:	46 2f       	mov	r20, r22
    1e1a:	4f 70       	andi	r20, 0x0F	; 15
    1e1c:	40 5d       	subi	r20, 0xD0	; 208
    1e1e:	4a 33       	cpi	r20, 0x3A	; 58
    1e20:	18 f0       	brcs	.+6      	; 0x1e28 <__ultoa_invert+0x7c>
    1e22:	49 5d       	subi	r20, 0xD9	; 217
    1e24:	31 fd       	sbrc	r19, 1
    1e26:	40 52       	subi	r20, 0x20	; 32
    1e28:	41 93       	st	Z+, r20
    1e2a:	02 d0       	rcall	.+4      	; 0x1e30 <__ultoa_invert+0x84>
    1e2c:	a9 f7       	brne	.-22     	; 0x1e18 <__ultoa_invert+0x6c>
    1e2e:	ea cf       	rjmp	.-44     	; 0x1e04 <__ultoa_invert+0x58>
    1e30:	b4 e0       	ldi	r27, 0x04	; 4
    1e32:	a6 95       	lsr	r26
    1e34:	97 95       	ror	r25
    1e36:	87 95       	ror	r24
    1e38:	77 95       	ror	r23
    1e3a:	67 95       	ror	r22
    1e3c:	ba 95       	dec	r27
    1e3e:	c9 f7       	brne	.-14     	; 0x1e32 <__ultoa_invert+0x86>
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	61 05       	cpc	r22, r1
    1e44:	71 05       	cpc	r23, r1
    1e46:	08 95       	ret
    1e48:	9b 01       	movw	r18, r22
    1e4a:	ac 01       	movw	r20, r24
    1e4c:	0a 2e       	mov	r0, r26
    1e4e:	06 94       	lsr	r0
    1e50:	57 95       	ror	r21
    1e52:	47 95       	ror	r20
    1e54:	37 95       	ror	r19
    1e56:	27 95       	ror	r18
    1e58:	ba 95       	dec	r27
    1e5a:	c9 f7       	brne	.-14     	; 0x1e4e <__ultoa_invert+0xa2>
    1e5c:	62 0f       	add	r22, r18
    1e5e:	73 1f       	adc	r23, r19
    1e60:	84 1f       	adc	r24, r20
    1e62:	95 1f       	adc	r25, r21
    1e64:	a0 1d       	adc	r26, r0
    1e66:	08 95       	ret

00001e68 <__ctype_isfalse>:
    1e68:	99 27       	eor	r25, r25
    1e6a:	88 27       	eor	r24, r24

00001e6c <__ctype_istrue>:
    1e6c:	08 95       	ret

00001e6e <_exit>:
    1e6e:	f8 94       	cli

00001e70 <__stop_program>:
    1e70:	ff cf       	rjmp	.-2      	; 0x1e70 <__stop_program>


ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800200  00002b96  00002c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ef  008002b8  008002b8  00002ce2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002ce2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000638  00000000  00000000  00002d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011033  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f87  00000000  00000000  0001439f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a1e  00000000  00000000  00018326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000127c  00000000  00000000  0001cd44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b72  00000000  00000000  0001dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000060ba  00000000  00000000  0001fb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000750  00000000  00000000  00025bec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ec c0       	rjmp	.+472    	; 0x1da <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_1>
       8:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_2>
       c:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_3>
      10:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__vector_4>
      14:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__vector_5>
      18:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_6>
      1c:	ff c0       	rjmp	.+510    	; 0x21c <__bad_interrupt>
      1e:	00 00       	nop
      20:	fd c0       	rjmp	.+506    	; 0x21c <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__vector_9>
      28:	f9 c0       	rjmp	.+498    	; 0x21c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f7 c0       	rjmp	.+494    	; 0x21c <__bad_interrupt>
      2e:	00 00       	nop
      30:	f5 c0       	rjmp	.+490    	; 0x21c <__bad_interrupt>
      32:	00 00       	nop
      34:	f3 c0       	rjmp	.+486    	; 0x21c <__bad_interrupt>
      36:	00 00       	nop
      38:	f1 c0       	rjmp	.+482    	; 0x21c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ef c0       	rjmp	.+478    	; 0x21c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ed c0       	rjmp	.+474    	; 0x21c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_17>
      48:	e9 c0       	rjmp	.+466    	; 0x21c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e7 c0       	rjmp	.+462    	; 0x21c <__bad_interrupt>
      4e:	00 00       	nop
      50:	e5 c0       	rjmp	.+458    	; 0x21c <__bad_interrupt>
      52:	00 00       	nop
      54:	e3 c0       	rjmp	.+454    	; 0x21c <__bad_interrupt>
      56:	00 00       	nop
      58:	e1 c0       	rjmp	.+450    	; 0x21c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	df c0       	rjmp	.+446    	; 0x21c <__bad_interrupt>
      5e:	00 00       	nop
      60:	dd c0       	rjmp	.+442    	; 0x21c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_25>
      68:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_26>
      6c:	d7 c0       	rjmp	.+430    	; 0x21c <__bad_interrupt>
      6e:	00 00       	nop
      70:	d5 c0       	rjmp	.+426    	; 0x21c <__bad_interrupt>
      72:	00 00       	nop
      74:	d3 c0       	rjmp	.+422    	; 0x21c <__bad_interrupt>
      76:	00 00       	nop
      78:	d1 c0       	rjmp	.+418    	; 0x21c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cf c0       	rjmp	.+414    	; 0x21c <__bad_interrupt>
      7e:	00 00       	nop
      80:	cd c0       	rjmp	.+410    	; 0x21c <__bad_interrupt>
      82:	00 00       	nop
      84:	cb c0       	rjmp	.+406    	; 0x21c <__bad_interrupt>
      86:	00 00       	nop
      88:	c9 c0       	rjmp	.+402    	; 0x21c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c7 c0       	rjmp	.+398    	; 0x21c <__bad_interrupt>
      8e:	00 00       	nop
      90:	c5 c0       	rjmp	.+394    	; 0x21c <__bad_interrupt>
      92:	00 00       	nop
      94:	c3 c0       	rjmp	.+390    	; 0x21c <__bad_interrupt>
      96:	00 00       	nop
      98:	c1 c0       	rjmp	.+386    	; 0x21c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bf c0       	rjmp	.+382    	; 0x21c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bd c0       	rjmp	.+378    	; 0x21c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bb c0       	rjmp	.+374    	; 0x21c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b9 c0       	rjmp	.+370    	; 0x21c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b7 c0       	rjmp	.+366    	; 0x21c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b5 c0       	rjmp	.+362    	; 0x21c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b3 c0       	rjmp	.+358    	; 0x21c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b1 c0       	rjmp	.+354    	; 0x21c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	af c0       	rjmp	.+350    	; 0x21c <__bad_interrupt>
      be:	00 00       	nop
      c0:	ad c0       	rjmp	.+346    	; 0x21c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ab c0       	rjmp	.+342    	; 0x21c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a9 c0       	rjmp	.+338    	; 0x21c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a7 c0       	rjmp	.+334    	; 0x21c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a5 c0       	rjmp	.+330    	; 0x21c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a3 c0       	rjmp	.+326    	; 0x21c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a1 c0       	rjmp	.+322    	; 0x21c <__bad_interrupt>
      da:	00 00       	nop
      dc:	9f c0       	rjmp	.+318    	; 0x21c <__bad_interrupt>
      de:	00 00       	nop
      e0:	9d c0       	rjmp	.+314    	; 0x21c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	77 0e       	add	r7, r23
      e6:	ad 0b       	sbc	r26, r29
      e8:	ad 0b       	sbc	r26, r29
      ea:	ad 0b       	sbc	r26, r29
      ec:	ad 0b       	sbc	r26, r29
      ee:	77 0e       	add	r7, r23
      f0:	ad 0b       	sbc	r26, r29
      f2:	ad 0b       	sbc	r26, r29
      f4:	ad 0b       	sbc	r26, r29
      f6:	ad 0b       	sbc	r26, r29
      f8:	ad 0b       	sbc	r26, r29
      fa:	2d 0e       	add	r2, r29
      fc:	ad 0b       	sbc	r26, r29
      fe:	ad 0b       	sbc	r26, r29
     100:	ad 0b       	sbc	r26, r29
     102:	ad 0b       	sbc	r26, r29
     104:	ad 0b       	sbc	r26, r29
     106:	cb 0d       	add	r28, r11
     108:	ad 0b       	sbc	r26, r29
     10a:	ad 0b       	sbc	r26, r29
     10c:	6e 0e       	add	r6, r30
     10e:	ad 0b       	sbc	r26, r29
     110:	ad 0b       	sbc	r26, r29
     112:	ad 0b       	sbc	r26, r29
     114:	ad 0b       	sbc	r26, r29
     116:	ad 0b       	sbc	r26, r29
     118:	ad 0b       	sbc	r26, r29
     11a:	ad 0b       	sbc	r26, r29
     11c:	ad 0b       	sbc	r26, r29
     11e:	ad 0b       	sbc	r26, r29
     120:	ad 0b       	sbc	r26, r29
     122:	b8 0d       	add	r27, r8
     124:	77 0e       	add	r7, r23
     126:	ad 0b       	sbc	r26, r29
     128:	94 0c       	add	r9, r4
     12a:	ad 0b       	sbc	r26, r29
     12c:	ad 0b       	sbc	r26, r29
     12e:	77 0e       	add	r7, r23
     130:	ad 0b       	sbc	r26, r29
     132:	ad 0b       	sbc	r26, r29
     134:	ad 0b       	sbc	r26, r29
     136:	ad 0b       	sbc	r26, r29
     138:	ad 0b       	sbc	r26, r29
     13a:	2d 0e       	add	r2, r29
     13c:	ad 0b       	sbc	r26, r29
     13e:	ad 0b       	sbc	r26, r29
     140:	ad 0b       	sbc	r26, r29
     142:	5e 0c       	add	r5, r14
     144:	ad 0b       	sbc	r26, r29
     146:	cb 0d       	add	r28, r11
     148:	ad 0b       	sbc	r26, r29
     14a:	ad 0b       	sbc	r26, r29
     14c:	6e 0e       	add	r6, r30
     14e:	d2 0e       	add	r13, r18
     150:	28 0c       	add	r2, r8
     152:	28 0c       	add	r2, r8
     154:	28 0c       	add	r2, r8
     156:	28 0c       	add	r2, r8
     158:	d2 0e       	add	r13, r18
     15a:	28 0c       	add	r2, r8
     15c:	28 0c       	add	r2, r8
     15e:	28 0c       	add	r2, r8
     160:	28 0c       	add	r2, r8
     162:	28 0c       	add	r2, r8
     164:	2c 0e       	add	r2, r28
     166:	28 0c       	add	r2, r8
     168:	28 0c       	add	r2, r8
     16a:	28 0c       	add	r2, r8
     16c:	28 0c       	add	r2, r8
     16e:	28 0c       	add	r2, r8
     170:	ca 0d       	add	r28, r10
     172:	28 0c       	add	r2, r8
     174:	28 0c       	add	r2, r8
     176:	ee 0e       	add	r14, r30
     178:	28 0c       	add	r2, r8
     17a:	28 0c       	add	r2, r8
     17c:	28 0c       	add	r2, r8
     17e:	28 0c       	add	r2, r8
     180:	28 0c       	add	r2, r8
     182:	28 0c       	add	r2, r8
     184:	28 0c       	add	r2, r8
     186:	28 0c       	add	r2, r8
     188:	28 0c       	add	r2, r8
     18a:	28 0c       	add	r2, r8
     18c:	b8 0d       	add	r27, r8
     18e:	d2 0e       	add	r13, r18
     190:	28 0c       	add	r2, r8
     192:	94 0c       	add	r9, r4
     194:	28 0c       	add	r2, r8
     196:	28 0c       	add	r2, r8
     198:	d2 0e       	add	r13, r18
     19a:	28 0c       	add	r2, r8
     19c:	28 0c       	add	r2, r8
     19e:	28 0c       	add	r2, r8
     1a0:	28 0c       	add	r2, r8
     1a2:	28 0c       	add	r2, r8
     1a4:	2c 0e       	add	r2, r28
     1a6:	28 0c       	add	r2, r8
     1a8:	28 0c       	add	r2, r8
     1aa:	28 0c       	add	r2, r8
     1ac:	5e 0c       	add	r5, r14
     1ae:	28 0c       	add	r2, r8
     1b0:	ca 0d       	add	r28, r10
     1b2:	28 0c       	add	r2, r8
     1b4:	28 0c       	add	r2, r8
     1b6:	ee 0e       	add	r14, r30

000001b8 <__trampolines_end>:
     1b8:	45 46       	sbci	r20, 0x65	; 101
     1ba:	47 65       	ori	r20, 0x57	; 87
     1bc:	66 67       	ori	r22, 0x76	; 118
	...

000001bf <__c.2314>:
     1bf:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000001cf <__c.2449>:
     1cf:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

000001da <__ctors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	d1 e2       	ldi	r29, 0x21	; 33
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0c bf       	out	0x3c, r16	; 60

000001ea <__do_copy_data>:
     1ea:	12 e0       	ldi	r17, 0x02	; 2
     1ec:	a0 e0       	ldi	r26, 0x00	; 0
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	e6 e9       	ldi	r30, 0x96	; 150
     1f2:	fb e2       	ldi	r31, 0x2B	; 43
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0b bf       	out	0x3b, r16	; 59
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__do_copy_data+0x14>
     1fa:	07 90       	elpm	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	a8 3b       	cpi	r26, 0xB8	; 184
     200:	b1 07       	cpc	r27, r17
     202:	d9 f7       	brne	.-10     	; 0x1fa <__do_copy_data+0x10>

00000204 <__do_clear_bss>:
     204:	23 e0       	ldi	r18, 0x03	; 3
     206:	a8 eb       	ldi	r26, 0xB8	; 184
     208:	b2 e0       	ldi	r27, 0x02	; 2
     20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
     20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
     20e:	a7 3a       	cpi	r26, 0xA7	; 167
     210:	b2 07       	cpc	r27, r18
     212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>
     214:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <main>
     218:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <_exit>

0000021c <__bad_interrupt>:
     21c:	f1 ce       	rjmp	.-542    	; 0x0 <__vectors>

0000021e <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     21e:	ff cf       	rjmp	.-2      	; 0x21e <_idle_thread>

00000220 <chSysInit>:
     220:	da d1       	rcall	.+948    	; 0x5d6 <_scheduler_init>
     222:	7b d0       	rcall	.+246    	; 0x31a <_vt_init>
     224:	40 e8       	ldi	r20, 0x80	; 128
     226:	62 e1       	ldi	r22, 0x12	; 18
     228:	72 e0       	ldi	r23, 0x02	; 2
     22a:	8e e3       	ldi	r24, 0x3E	; 62
     22c:	93 e0       	ldi	r25, 0x03	; 3
     22e:	ea d2       	rcall	.+1492   	; 0x804 <_thread_init>
     230:	fc 01       	movw	r30, r24
     232:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <ch+0xc>
     236:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <ch+0xb>
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	95 87       	std	Z+13, r25	; 0x0d
     23e:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <__avr_in_isr>
     242:	78 94       	sei
     244:	87 e0       	ldi	r24, 0x07	; 7
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	61 c3       	rjmp	.+1730   	; 0x90c <chThdCreate>

0000024a <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
     256:	c0 91 34 03 	lds	r28, 0x0334	; 0x800334 <ch+0xd>
     25a:	d0 91 35 03 	lds	r29, 0x0335	; 0x800335 <ch+0xe>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     25e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     262:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
     266:	4c 81       	ldd	r20, Y+4	; 0x04
     268:	5d 81       	ldd	r21, Y+5	; 0x05
     26a:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <ch+0x13>
     26e:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <ch+0x14>
     272:	bc 01       	movw	r22, r24
     274:	62 1b       	sub	r22, r18
     276:	73 0b       	sbc	r23, r19
     278:	64 17       	cp	r22, r20
     27a:	75 07       	cpc	r23, r21
     27c:	78 f1       	brcs	.+94     	; 0x2dc <chSysTimerHandlerI+0x92>
     27e:	04 e3       	ldi	r16, 0x34	; 52
     280:	13 e0       	ldi	r17, 0x03	; 3
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
     282:	24 0f       	add	r18, r20
     284:	35 1f       	adc	r19, r21
     286:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <ch+0x14>
     28a:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <ch+0x13>

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     28e:	e8 81       	ld	r30, Y
     290:	f9 81       	ldd	r31, Y+1	; 0x01
     292:	13 83       	std	Z+3, r17	; 0x03
     294:	02 83       	std	Z+2, r16	; 0x02
    ch.vtlist.next = vtp->next;
     296:	f0 93 35 03 	sts	0x0335, r31	; 0x800335 <ch+0xe>
     29a:	e0 93 34 03 	sts	0x0334, r30	; 0x800334 <ch+0xd>
    fn = vtp->func;
     29e:	ee 80       	ldd	r14, Y+6	; 0x06
     2a0:	ff 80       	ldd	r15, Y+7	; 0x07
    vtp->func = NULL;
     2a2:	1f 82       	std	Y+7, r1	; 0x07
     2a4:	1e 82       	std	Y+6, r1	; 0x06

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     2a6:	e4 53       	subi	r30, 0x34	; 52
     2a8:	f3 40       	sbci	r31, 0x03	; 3
     2aa:	59 f1       	breq	.+86     	; 0x302 <chSysTimerHandlerI+0xb8>
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
     2ac:	88 85       	ldd	r24, Y+8	; 0x08
     2ae:	99 85       	ldd	r25, Y+9	; 0x09
     2b0:	f7 01       	movw	r30, r14
     2b2:	19 95       	eicall
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
     2b4:	c0 91 34 03 	lds	r28, 0x0334	; 0x800334 <ch+0xd>
     2b8:	d0 91 35 03 	lds	r29, 0x0335	; 0x800335 <ch+0xe>
     2bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     2c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
     2c4:	4c 81       	ldd	r20, Y+4	; 0x04
     2c6:	5d 81       	ldd	r21, Y+5	; 0x05
     2c8:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <ch+0x13>
     2cc:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <ch+0x14>
     2d0:	bc 01       	movw	r22, r24
     2d2:	62 1b       	sub	r22, r18
     2d4:	73 0b       	sbc	r23, r19
     2d6:	64 17       	cp	r22, r20
     2d8:	75 07       	cpc	r23, r21
     2da:	98 f6       	brcc	.-90     	; 0x282 <chSysTimerHandlerI+0x38>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     2dc:	c4 53       	subi	r28, 0x34	; 52
     2de:	d3 40       	sbci	r29, 0x03	; 3
     2e0:	a9 f0       	breq	.+42     	; 0x30c <chSysTimerHandlerI+0xc2>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
     2e2:	24 0f       	add	r18, r20
     2e4:	35 1f       	adc	r19, r21
     2e6:	28 1b       	sub	r18, r24
     2e8:	39 0b       	sbc	r19, r25
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
     2ea:	22 30       	cpi	r18, 0x02	; 2
     2ec:	31 05       	cpc	r19, r1
     2ee:	58 f0       	brcs	.+22     	; 0x306 <chSysTimerHandlerI+0xbc>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     2f0:	82 0f       	add	r24, r18
     2f2:	93 1f       	adc	r25, r19
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	06 c4       	rjmp	.+2060   	; 0xb0e <stSetAlarm>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     302:	02 d4       	rcall	.+2052   	; 0xb08 <stStopAlarm>
     304:	d3 cf       	rjmp	.-90     	; 0x2ac <chSysTimerHandlerI+0x62>
     306:	22 e0       	ldi	r18, 0x02	; 2
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f2 cf       	rjmp	.-28     	; 0x2f0 <chSysTimerHandlerI+0xa6>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	08 95       	ret

0000031a <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     31a:	e7 e2       	ldi	r30, 0x27	; 39
     31c:	f3 e0       	ldi	r31, 0x03	; 3
     31e:	84 e3       	ldi	r24, 0x34	; 52
     320:	93 e0       	ldi	r25, 0x03	; 3
     322:	96 87       	std	Z+14, r25	; 0x0e
     324:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     326:	90 8b       	std	Z+16, r25	; 0x10
     328:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (systime_t)-1;
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	9f ef       	ldi	r25, 0xFF	; 255
     32e:	92 8b       	std	Z+18, r25	; 0x12
     330:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
     332:	14 8a       	std	Z+20, r1	; 0x14
     334:	13 8a       	std	Z+19, r1	; 0x13
     336:	08 95       	ret

00000338 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	7c 01       	movw	r14, r24
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     346:	dc 01       	movw	r26, r24
     348:	19 96       	adiw	r26, 0x09	; 9
     34a:	3c 93       	st	X, r19
     34c:	2e 93       	st	-X, r18
     34e:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     350:	17 96       	adiw	r26, 0x07	; 7
     352:	5c 93       	st	X, r21
     354:	4e 93       	st	-X, r20
     356:	16 97       	sbiw	r26, 0x06	; 6
     358:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     35c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
     360:	62 30       	cpi	r22, 0x02	; 2
     362:	71 05       	cpc	r23, r1
     364:	08 f4       	brcc	.+2      	; 0x368 <chVTDoSetI+0x30>
     366:	59 c0       	rjmp	.+178    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     368:	00 91 34 03 	lds	r16, 0x0334	; 0x800334 <ch+0xd>
     36c:	10 91 35 03 	lds	r17, 0x0335	; 0x800335 <ch+0xe>
     370:	b3 e0       	ldi	r27, 0x03	; 3
     372:	04 33       	cpi	r16, 0x34	; 52
     374:	1b 07       	cpc	r17, r27
     376:	09 f4       	brne	.+2      	; 0x37a <chVTDoSetI+0x42>
     378:	5a c0       	rjmp	.+180    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
     37a:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <ch+0x13>
     37e:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <ch+0x14>
     382:	28 1b       	sub	r18, r24
     384:	39 0b       	sbc	r19, r25
     386:	eb 01       	movw	r28, r22
     388:	c2 0f       	add	r28, r18
     38a:	d3 1f       	adc	r29, r19

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     38c:	d8 01       	movw	r26, r16

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;

    if (delta < now - ch.vtlist.lasttime) {
     38e:	c2 17       	cp	r28, r18
     390:	d3 07       	cpc	r29, r19
     392:	e0 f1       	brcs	.+120    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
     394:	14 96       	adiw	r26, 0x04	; 4
     396:	2d 91       	ld	r18, X+
     398:	3c 91       	ld	r19, X
     39a:	15 97       	sbiw	r26, 0x05	; 5
     39c:	c2 17       	cp	r28, r18
     39e:	d3 07       	cpc	r29, r19
     3a0:	48 f4       	brcc	.+18     	; 0x3b4 <chVTDoSetI+0x7c>
     3a2:	3e c0       	rjmp	.+124    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
     3a4:	c2 1b       	sub	r28, r18
     3a6:	d3 0b       	sbc	r29, r19
    p = p->next;
     3a8:	d8 01       	movw	r26, r16
    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
     3aa:	0d 91       	ld	r16, X+
     3ac:	1c 91       	ld	r17, X
     3ae:	f8 01       	movw	r30, r16
     3b0:	24 81       	ldd	r18, Z+4	; 0x04
     3b2:	35 81       	ldd	r19, Z+5	; 0x05
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     3b4:	2c 17       	cp	r18, r28
     3b6:	3d 07       	cpc	r19, r29
     3b8:	a8 f3       	brcs	.-22     	; 0x3a4 <chVTDoSetI+0x6c>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     3ba:	d7 01       	movw	r26, r14
     3bc:	0d 93       	st	X+, r16
     3be:	1c 93       	st	X, r17
  vtp->prev = vtp->next->prev;
     3c0:	d8 01       	movw	r26, r16
     3c2:	12 96       	adiw	r26, 0x02	; 2
     3c4:	ed 91       	ld	r30, X+
     3c6:	fc 91       	ld	r31, X
     3c8:	13 97       	sbiw	r26, 0x03	; 3
     3ca:	d7 01       	movw	r26, r14
     3cc:	13 96       	adiw	r26, 0x03	; 3
     3ce:	fc 93       	st	X, r31
     3d0:	ee 93       	st	-X, r30
     3d2:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     3d4:	f1 82       	std	Z+1, r15	; 0x01
     3d6:	e0 82       	st	Z, r14
  p->prev = vtp;
     3d8:	f8 01       	movw	r30, r16
     3da:	f3 82       	std	Z+3, r15	; 0x03
     3dc:	e2 82       	std	Z+2, r14	; 0x02
  vtp->delta = delta
     3de:	15 96       	adiw	r26, 0x05	; 5
     3e0:	dc 93       	st	X, r29
     3e2:	ce 93       	st	-X, r28
     3e4:	14 97       	sbiw	r26, 0x04	; 4

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
     3e6:	84 81       	ldd	r24, Z+4	; 0x04
     3e8:	95 81       	ldd	r25, Z+5	; 0x05
     3ea:	8c 1b       	sub	r24, r28
     3ec:	9d 0b       	sbc	r25, r29
     3ee:	95 83       	std	Z+5, r25	; 0x05
     3f0:	84 83       	std	Z+4, r24	; 0x04
  ch.vtlist.delta = (systime_t)-1;
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	9f ef       	ldi	r25, 0xFF	; 255
     3f6:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <ch+0x12>
     3fa:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <ch+0x11>
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	08 95       	ret

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     40c:	14 96       	adiw	r26, 0x04	; 4
     40e:	8d 91       	ld	r24, X+
     410:	9c 91       	ld	r25, X
     412:	15 97       	sbiw	r26, 0x05	; 5
     414:	c8 1b       	sub	r28, r24
     416:	d9 0b       	sbc	r29, r25
     418:	c8 cf       	rjmp	.-112    	; 0x3aa <chVTDoSetI+0x72>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
     41a:	62 e0       	ldi	r22, 0x02	; 2
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	a4 cf       	rjmp	.-184    	; 0x368 <chVTDoSetI+0x30>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     420:	8c 0f       	add	r24, r28
     422:	9d 1f       	adc	r25, r29
     424:	74 d3       	rcall	.+1768   	; 0xb0e <stSetAlarm>
     426:	f8 01       	movw	r30, r16
     428:	24 81       	ldd	r18, Z+4	; 0x04
     42a:	35 81       	ldd	r19, Z+5	; 0x05
     42c:	c3 cf       	rjmp	.-122    	; 0x3b4 <chVTDoSetI+0x7c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
     42e:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <ch+0x14>
     432:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <ch+0x13>
      ch.vtlist.next = vtp;
     436:	f0 92 35 03 	sts	0x0335, r15	; 0x800335 <ch+0xe>
     43a:	e0 92 34 03 	sts	0x0334, r14	; 0x800334 <ch+0xd>
      ch.vtlist.prev = vtp;
     43e:	f0 92 37 03 	sts	0x0337, r15	; 0x800337 <ch+0x10>
     442:	e0 92 36 03 	sts	0x0336, r14	; 0x800336 <ch+0xf>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
     446:	f7 01       	movw	r30, r14
     448:	11 83       	std	Z+1, r17	; 0x01
     44a:	00 83       	st	Z, r16
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
     44c:	13 83       	std	Z+3, r17	; 0x03
     44e:	02 83       	std	Z+2, r16	; 0x02
      vtp->delta = delay;
     450:	75 83       	std	Z+5, r23	; 0x05
     452:	64 83       	std	Z+4, r22	; 0x04
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
     454:	cb 01       	movw	r24, r22
     456:	82 0f       	add	r24, r18
     458:	93 1f       	adc	r25, r19

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	47 c3       	rjmp	.+1678   	; 0xaf6 <stStartAlarm>

00000468 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	fc 01       	movw	r30, r24
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
     46e:	a0 91 34 03 	lds	r26, 0x0334	; 0x800334 <ch+0xd>
     472:	b0 91 35 03 	lds	r27, 0x0335	; 0x800335 <ch+0xe>
     476:	a8 17       	cp	r26, r24
     478:	b9 07       	cpc	r27, r25
     47a:	09 f1       	breq	.+66     	; 0x4be <chVTDoResetI+0x56>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
     47c:	c2 81       	ldd	r28, Z+2	; 0x02
     47e:	d3 81       	ldd	r29, Z+3	; 0x03
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	99 83       	std	Y+1, r25	; 0x01
     486:	88 83       	st	Y, r24
    vtp->next->prev = vtp->prev;
     488:	a0 81       	ld	r26, Z
     48a:	b1 81       	ldd	r27, Z+1	; 0x01
     48c:	13 96       	adiw	r26, 0x03	; 3
     48e:	dc 93       	st	X, r29
     490:	ce 93       	st	-X, r28
     492:	12 97       	sbiw	r26, 0x02	; 2
    vtp->func = NULL;
     494:	17 82       	std	Z+7, r1	; 0x07
     496:	16 82       	std	Z+6, r1	; 0x06

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
     498:	63 e0       	ldi	r22, 0x03	; 3
     49a:	a4 33       	cpi	r26, 0x34	; 52
     49c:	b6 07       	cpc	r27, r22
     49e:	61 f0       	breq	.+24     	; 0x4b8 <chVTDoResetI+0x50>
      vtp->next->delta += vtp->delta;
     4a0:	14 96       	adiw	r26, 0x04	; 4
     4a2:	2d 91       	ld	r18, X+
     4a4:	3c 91       	ld	r19, X
     4a6:	15 97       	sbiw	r26, 0x05	; 5
     4a8:	84 81       	ldd	r24, Z+4	; 0x04
     4aa:	95 81       	ldd	r25, Z+5	; 0x05
     4ac:	82 0f       	add	r24, r18
     4ae:	93 1f       	adc	r25, r19
     4b0:	15 96       	adiw	r26, 0x05	; 5
     4b2:	9c 93       	st	X, r25
     4b4:	8e 93       	st	-X, r24
     4b6:	14 97       	sbiw	r26, 0x04	; 4
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
     4be:	ed 91       	ld	r30, X+
     4c0:	fc 91       	ld	r31, X
     4c2:	11 97       	sbiw	r26, 0x01	; 1
     4c4:	f0 93 35 03 	sts	0x0335, r31	; 0x800335 <ch+0xe>
     4c8:	e0 93 34 03 	sts	0x0334, r30	; 0x800334 <ch+0xd>
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
     4cc:	84 e3       	ldi	r24, 0x34	; 52
     4ce:	93 e0       	ldi	r25, 0x03	; 3
     4d0:	93 83       	std	Z+3, r25	; 0x03
     4d2:	82 83       	std	Z+2, r24	; 0x02
  vtp->func = NULL;
     4d4:	17 96       	adiw	r26, 0x07	; 7
     4d6:	1c 92       	st	X, r1
     4d8:	1e 92       	st	-X, r1
     4da:	16 97       	sbiw	r26, 0x06	; 6

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     4dc:	e8 17       	cp	r30, r24
     4de:	f9 07       	cpc	r31, r25
     4e0:	29 f1       	breq	.+74     	; 0x52c <chVTDoResetI+0xc4>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
     4e2:	24 81       	ldd	r18, Z+4	; 0x04
     4e4:	35 81       	ldd	r19, Z+5	; 0x05
     4e6:	14 96       	adiw	r26, 0x04	; 4
     4e8:	8d 91       	ld	r24, X+
     4ea:	9c 91       	ld	r25, X
     4ec:	15 97       	sbiw	r26, 0x05	; 5
     4ee:	28 0f       	add	r18, r24
     4f0:	39 1f       	adc	r19, r25
     4f2:	35 83       	std	Z+5, r19	; 0x05
     4f4:	24 83       	std	Z+4, r18	; 0x04
     4f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     4fa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
     4fe:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <ch+0x13>
     502:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <ch+0x14>
     506:	bc 01       	movw	r22, r24
     508:	64 1b       	sub	r22, r20
     50a:	75 0b       	sbc	r23, r21

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
     50c:	62 17       	cp	r22, r18
     50e:	73 07       	cpc	r23, r19
     510:	98 f6       	brcc	.-90     	; 0x4b8 <chVTDoResetI+0x50>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
     512:	26 1b       	sub	r18, r22
     514:	37 0b       	sbc	r19, r23

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
     516:	22 30       	cpi	r18, 0x02	; 2
     518:	31 05       	cpc	r19, r1
     51a:	28 f0       	brcs	.+10     	; 0x526 <chVTDoResetI+0xbe>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	f4 c2       	rjmp	.+1512   	; 0xb0e <stSetAlarm>
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
     526:	22 e0       	ldi	r18, 0x02	; 2
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f8 cf       	rjmp	.-16     	; 0x51c <chVTDoResetI+0xb4>
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     52c:	df 91       	pop	r29
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     52e:	cf 91       	pop	r28
     530:	eb c2       	rjmp	.+1494   	; 0xb08 <stStopAlarm>

00000532 <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	dc 01       	movw	r26, r24
     538:	1d 96       	adiw	r26, 0x0d	; 13
     53a:	8c 91       	ld	r24, X
     53c:	1d 97       	sbiw	r26, 0x0d	; 13
     53e:	84 30       	cpi	r24, 0x04	; 4
     540:	99 f1       	breq	.+102    	; 0x5a8 <wakeup+0x76>
     542:	70 f5       	brcc	.+92     	; 0x5a0 <wakeup+0x6e>
     544:	88 23       	and	r24, r24
     546:	49 f1       	breq	.+82     	; 0x59a <wakeup+0x68>
     548:	83 30       	cpi	r24, 0x03	; 3
     54a:	31 f4       	brne	.+12     	; 0x558 <wakeup+0x26>
     54c:	50 96       	adiw	r26, 0x10	; 16
     54e:	ed 91       	ld	r30, X+
     550:	fc 91       	ld	r31, X
     552:	51 97       	sbiw	r26, 0x11	; 17
     554:	11 82       	std	Z+1, r1	; 0x01
     556:	10 82       	st	Z, r1
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	9f ef       	ldi	r25, 0xFF	; 255
     55c:	51 96       	adiw	r26, 0x11	; 17
     55e:	9c 93       	st	X, r25
     560:	8e 93       	st	-X, r24
     562:	50 97       	sbiw	r26, 0x10	; 16
     564:	1d 96       	adiw	r26, 0x0d	; 13
     566:	1c 92       	st	X, r1
     568:	1d 97       	sbiw	r26, 0x0d	; 13
     56a:	14 96       	adiw	r26, 0x04	; 4
     56c:	2c 91       	ld	r18, X
     56e:	14 97       	sbiw	r26, 0x04	; 4
     570:	e7 e2       	ldi	r30, 0x27	; 39
     572:	f3 e0       	ldi	r31, 0x03	; 3
     574:	01 90       	ld	r0, Z+
     576:	f0 81       	ld	r31, Z
     578:	e0 2d       	mov	r30, r0
     57a:	94 81       	ldd	r25, Z+4	; 0x04
     57c:	92 17       	cp	r25, r18
     57e:	d0 f7       	brcc	.-12     	; 0x574 <wakeup+0x42>
     580:	11 96       	adiw	r26, 0x01	; 1
     582:	fc 93       	st	X, r31
     584:	ee 93       	st	-X, r30
     586:	c2 81       	ldd	r28, Z+2	; 0x02
     588:	d3 81       	ldd	r29, Z+3	; 0x03
     58a:	13 96       	adiw	r26, 0x03	; 3
     58c:	dc 93       	st	X, r29
     58e:	ce 93       	st	-X, r28
     590:	12 97       	sbiw	r26, 0x02	; 2
     592:	b9 83       	std	Y+1, r27	; 0x01
     594:	a8 83       	st	Y, r26
     596:	b3 83       	std	Z+3, r27	; 0x03
     598:	a2 83       	std	Z+2, r26	; 0x02
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret
     5a0:	85 30       	cpi	r24, 0x05	; 5
     5a2:	89 f0       	breq	.+34     	; 0x5c6 <wakeup+0x94>
     5a4:	87 30       	cpi	r24, 0x07	; 7
     5a6:	c1 f6       	brne	.-80     	; 0x558 <wakeup+0x26>
     5a8:	12 96       	adiw	r26, 0x02	; 2
     5aa:	ed 91       	ld	r30, X+
     5ac:	fc 91       	ld	r31, X
     5ae:	13 97       	sbiw	r26, 0x03	; 3
     5b0:	8d 91       	ld	r24, X+
     5b2:	9c 91       	ld	r25, X
     5b4:	11 97       	sbiw	r26, 0x01	; 1
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	80 83       	st	Z, r24
     5ba:	cd 91       	ld	r28, X+
     5bc:	dc 91       	ld	r29, X
     5be:	11 97       	sbiw	r26, 0x01	; 1
     5c0:	fb 83       	std	Y+3, r31	; 0x03
     5c2:	ea 83       	std	Y+2, r30	; 0x02
     5c4:	c9 cf       	rjmp	.-110    	; 0x558 <wakeup+0x26>
     5c6:	50 96       	adiw	r26, 0x10	; 16
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	51 97       	sbiw	r26, 0x11	; 17
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	84 83       	std	Z+4, r24	; 0x04
     5d4:	e9 cf       	rjmp	.-46     	; 0x5a8 <wakeup+0x76>

000005d6 <_scheduler_init>:
     5d6:	e7 e2       	ldi	r30, 0x27	; 39
     5d8:	f3 e0       	ldi	r31, 0x03	; 3
     5da:	f1 83       	std	Z+1, r31	; 0x01
     5dc:	e0 83       	st	Z, r30
     5de:	f3 83       	std	Z+3, r31	; 0x03
     5e0:	e2 83       	std	Z+2, r30	; 0x02
     5e2:	14 82       	std	Z+4, r1	; 0x04
     5e4:	f0 87       	std	Z+8, r31	; 0x08
     5e6:	e7 83       	std	Z+7, r30	; 0x07
     5e8:	f2 87       	std	Z+10, r31	; 0x0a
     5ea:	e1 87       	std	Z+9, r30	; 0x09
     5ec:	08 95       	ret

000005ee <chSchReadyI>:
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	dc 01       	movw	r26, r24
     5f4:	1d 96       	adiw	r26, 0x0d	; 13
     5f6:	1c 92       	st	X, r1
     5f8:	1d 97       	sbiw	r26, 0x0d	; 13
     5fa:	14 96       	adiw	r26, 0x04	; 4
     5fc:	2c 91       	ld	r18, X
     5fe:	14 97       	sbiw	r26, 0x04	; 4
     600:	e7 e2       	ldi	r30, 0x27	; 39
     602:	f3 e0       	ldi	r31, 0x03	; 3
     604:	01 90       	ld	r0, Z+
     606:	f0 81       	ld	r31, Z
     608:	e0 2d       	mov	r30, r0
     60a:	94 81       	ldd	r25, Z+4	; 0x04
     60c:	92 17       	cp	r25, r18
     60e:	d0 f7       	brcc	.-12     	; 0x604 <chSchReadyI+0x16>
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	fc 93       	st	X, r31
     614:	ee 93       	st	-X, r30
     616:	c2 81       	ldd	r28, Z+2	; 0x02
     618:	d3 81       	ldd	r29, Z+3	; 0x03
     61a:	13 96       	adiw	r26, 0x03	; 3
     61c:	dc 93       	st	X, r29
     61e:	ce 93       	st	-X, r28
     620:	12 97       	sbiw	r26, 0x02	; 2
     622:	b9 83       	std	Y+1, r27	; 0x01
     624:	a8 83       	st	Y, r26
     626:	b3 83       	std	Z+3, r27	; 0x03
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	cd 01       	movw	r24, r26
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <chSchGoSleepS>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	e7 e2       	ldi	r30, 0x27	; 39
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	63 85       	ldd	r22, Z+11	; 0x0b
     63c:	74 85       	ldd	r23, Z+12	; 0x0c
     63e:	db 01       	movw	r26, r22
     640:	1d 96       	adiw	r26, 0x0d	; 13
     642:	8c 93       	st	X, r24
     644:	80 81       	ld	r24, Z
     646:	91 81       	ldd	r25, Z+1	; 0x01
     648:	ec 01       	movw	r28, r24
     64a:	a8 81       	ld	r26, Y
     64c:	b9 81       	ldd	r27, Y+1	; 0x01
     64e:	b1 83       	std	Z+1, r27	; 0x01
     650:	a0 83       	st	Z, r26
     652:	13 96       	adiw	r26, 0x03	; 3
     654:	fc 93       	st	X, r31
     656:	ee 93       	st	-X, r30
     658:	12 97       	sbiw	r26, 0x02	; 2
     65a:	94 87       	std	Z+12, r25	; 0x0c
     65c:	83 87       	std	Z+11, r24	; 0x0b
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	2d 87       	std	Y+13, r18	; 0x0d
     662:	0c d2       	rcall	.+1048   	; 0xa7c <_port_switch>
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <chSchGoSleepTimeoutS>:
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	2a 97       	sbiw	r28, 0x0a	; 10
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	18 2f       	mov	r17, r24
     682:	6f 3f       	cpi	r22, 0xFF	; 255
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	78 07       	cpc	r23, r24
     688:	11 f1       	breq	.+68     	; 0x6ce <chSchGoSleepTimeoutS+0x64>
     68a:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <ch+0xb>
     68e:	30 91 33 03 	lds	r19, 0x0333	; 0x800333 <ch+0xc>
     692:	49 e9       	ldi	r20, 0x99	; 153
     694:	52 e0       	ldi	r21, 0x02	; 2
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	4e de       	rcall	.-868    	; 0x338 <chVTDoSetI>
     69c:	81 2f       	mov	r24, r17
     69e:	c9 df       	rcall	.-110    	; 0x632 <chSchGoSleepS>
     6a0:	8f 81       	ldd	r24, Y+7	; 0x07
     6a2:	98 85       	ldd	r25, Y+8	; 0x08
     6a4:	89 2b       	or	r24, r25
     6a6:	19 f0       	breq	.+6      	; 0x6ae <chSchGoSleepTimeoutS+0x44>
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	dd de       	rcall	.-582    	; 0x468 <chVTDoResetI>
     6ae:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <ch+0xb>
     6b2:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <ch+0xc>
     6b6:	80 89       	ldd	r24, Z+16	; 0x10
     6b8:	91 89       	ldd	r25, Z+17	; 0x11
     6ba:	2a 96       	adiw	r28, 0x0a	; 10
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	08 95       	ret
     6ce:	81 2f       	mov	r24, r17
     6d0:	b0 df       	rcall	.-160    	; 0x632 <chSchGoSleepS>
     6d2:	ed cf       	rjmp	.-38     	; 0x6ae <chSchGoSleepTimeoutS+0x44>

000006d4 <chSchWakeupS>:
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	dc 01       	movw	r26, r24
     6da:	c0 91 32 03 	lds	r28, 0x0332	; 0x800332 <ch+0xb>
     6de:	d0 91 33 03 	lds	r29, 0x0333	; 0x800333 <ch+0xc>
     6e2:	51 96       	adiw	r26, 0x11	; 17
     6e4:	7c 93       	st	X, r23
     6e6:	6e 93       	st	-X, r22
     6e8:	50 97       	sbiw	r26, 0x10	; 16
     6ea:	14 96       	adiw	r26, 0x04	; 4
     6ec:	2c 91       	ld	r18, X
     6ee:	14 97       	sbiw	r26, 0x04	; 4
     6f0:	8c 81       	ldd	r24, Y+4	; 0x04
     6f2:	82 17       	cp	r24, r18
     6f4:	d8 f0       	brcs	.+54     	; 0x72c <chSchWakeupS+0x58>
     6f6:	1d 96       	adiw	r26, 0x0d	; 13
     6f8:	1c 92       	st	X, r1
     6fa:	1d 97       	sbiw	r26, 0x0d	; 13
     6fc:	e7 e2       	ldi	r30, 0x27	; 39
     6fe:	f3 e0       	ldi	r31, 0x03	; 3
     700:	01 90       	ld	r0, Z+
     702:	f0 81       	ld	r31, Z
     704:	e0 2d       	mov	r30, r0
     706:	94 81       	ldd	r25, Z+4	; 0x04
     708:	92 17       	cp	r25, r18
     70a:	d0 f7       	brcc	.-12     	; 0x700 <chSchWakeupS+0x2c>
     70c:	11 96       	adiw	r26, 0x01	; 1
     70e:	fc 93       	st	X, r31
     710:	ee 93       	st	-X, r30
     712:	c2 81       	ldd	r28, Z+2	; 0x02
     714:	d3 81       	ldd	r29, Z+3	; 0x03
     716:	13 96       	adiw	r26, 0x03	; 3
     718:	dc 93       	st	X, r29
     71a:	ce 93       	st	-X, r28
     71c:	12 97       	sbiw	r26, 0x02	; 2
     71e:	b9 83       	std	Y+1, r27	; 0x01
     720:	a8 83       	st	Y, r26
     722:	b3 83       	std	Z+3, r27	; 0x03
     724:	a2 83       	std	Z+2, r26	; 0x02
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret
     72c:	1d 86       	std	Y+13, r1	; 0x0d
     72e:	e7 e2       	ldi	r30, 0x27	; 39
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	01 90       	ld	r0, Z+
     734:	f0 81       	ld	r31, Z
     736:	e0 2d       	mov	r30, r0
     738:	94 81       	ldd	r25, Z+4	; 0x04
     73a:	98 17       	cp	r25, r24
     73c:	d0 f7       	brcc	.-12     	; 0x732 <chSchWakeupS+0x5e>
     73e:	cd 01       	movw	r24, r26
     740:	f9 83       	std	Y+1, r31	; 0x01
     742:	e8 83       	st	Y, r30
     744:	a2 81       	ldd	r26, Z+2	; 0x02
     746:	b3 81       	ldd	r27, Z+3	; 0x03
     748:	bb 83       	std	Y+3, r27	; 0x03
     74a:	aa 83       	std	Y+2, r26	; 0x02
     74c:	cd 93       	st	X+, r28
     74e:	dc 93       	st	X, r29
     750:	d3 83       	std	Z+3, r29	; 0x03
     752:	c2 83       	std	Z+2, r28	; 0x02
     754:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <ch+0xc>
     758:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <ch+0xb>
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	fc 01       	movw	r30, r24
     760:	25 87       	std	Z+13, r18	; 0x0d
     762:	be 01       	movw	r22, r28
     764:	8b d1       	rcall	.+790    	; 0xa7c <_port_switch>
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <chSchIsPreemptionRequired>:
     76c:	a0 91 27 03 	lds	r26, 0x0327	; 0x800327 <ch>
     770:	b0 91 28 03 	lds	r27, 0x0328	; 0x800328 <ch+0x1>
     774:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <ch+0xb>
     778:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <ch+0xc>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	14 96       	adiw	r26, 0x04	; 4
     780:	2c 91       	ld	r18, X
     782:	94 81       	ldd	r25, Z+4	; 0x04
     784:	92 17       	cp	r25, r18
     786:	08 f0       	brcs	.+2      	; 0x78a <chSchIsPreemptionRequired+0x1e>
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	08 95       	ret

0000078c <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
  thread_t *otp = currp;
     790:	a0 91 32 03 	lds	r26, 0x0332	; 0x800332 <ch+0xb>
     794:	b0 91 33 03 	lds	r27, 0x0333	; 0x800333 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     798:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <ch>
     79c:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <ch+0x1>

  tqp->next             = tp->queue.next;
     7a0:	ea 01       	movw	r28, r20
     7a2:	e8 81       	ld	r30, Y
     7a4:	f9 81       	ldd	r31, Y+1	; 0x01
     7a6:	f0 93 28 03 	sts	0x0328, r31	; 0x800328 <ch+0x1>
     7aa:	e0 93 27 03 	sts	0x0327, r30	; 0x800327 <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     7ae:	87 e2       	ldi	r24, 0x27	; 39
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	93 83       	std	Z+3, r25	; 0x03
     7b4:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     7b6:	50 93 33 03 	sts	0x0333, r21	; 0x800333 <ch+0xc>
     7ba:	40 93 32 03 	sts	0x0332, r20	; 0x800332 <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     7c2:	1d 96       	adiw	r26, 0x0d	; 13
     7c4:	1c 92       	st	X, r1
     7c6:	1d 97       	sbiw	r26, 0x0d	; 13
     7c8:	14 96       	adiw	r26, 0x04	; 4
     7ca:	2c 91       	ld	r18, X
     7cc:	14 97       	sbiw	r26, 0x04	; 4
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <chSchDoReschedule+0x4a>
     7d0:	01 90       	ld	r0, Z+
     7d2:	f0 81       	ld	r31, Z
     7d4:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     7d6:	94 81       	ldd	r25, Z+4	; 0x04
     7d8:	29 17       	cp	r18, r25
     7da:	d0 f3       	brcs	.-12     	; 0x7d0 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     7dc:	11 96       	adiw	r26, 0x01	; 1
     7de:	fc 93       	st	X, r31
     7e0:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	13 96       	adiw	r26, 0x03	; 3
     7e8:	9c 93       	st	X, r25
     7ea:	8e 93       	st	-X, r24
     7ec:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     7ee:	ec 01       	movw	r28, r24
     7f0:	b9 83       	std	Y+1, r27	; 0x01
     7f2:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     7f4:	b3 83       	std	Z+3, r27	; 0x03
     7f6:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     7f8:	bd 01       	movw	r22, r26
     7fa:	ca 01       	movw	r24, r20
     7fc:	3f d1       	rcall	.+638    	; 0xa7c <_port_switch>
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	fc 01       	movw	r30, r24
     80a:	44 83       	std	Z+4, r20	; 0x04
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	85 87       	std	Z+13, r24	; 0x0d
     810:	16 86       	std	Z+14, r1	; 0x0e
     812:	43 8f       	std	Z+27, r20	; 0x1b
     814:	12 8e       	std	Z+26, r1	; 0x1a
     816:	11 8e       	std	Z+25, r1	; 0x19
     818:	10 8e       	std	Z+24, r1	; 0x18
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	87 87       	std	Z+15, r24	; 0x0f
     81e:	74 87       	std	Z+12, r23	; 0x0c
     820:	63 87       	std	Z+11, r22	; 0x0b
     822:	a7 e2       	ldi	r26, 0x27	; 39
     824:	b3 e0       	ldi	r27, 0x03	; 3
     826:	b0 87       	std	Z+8, r27	; 0x08
     828:	a7 83       	std	Z+7, r26	; 0x07
     82a:	19 96       	adiw	r26, 0x09	; 9
     82c:	cd 91       	ld	r28, X+
     82e:	dc 91       	ld	r29, X
     830:	1a 97       	sbiw	r26, 0x0a	; 10
     832:	d2 87       	std	Z+10, r29	; 0x0a
     834:	c1 87       	std	Z+9, r28	; 0x09
     836:	f8 87       	std	Y+8, r31	; 0x08
     838:	ef 83       	std	Y+7, r30	; 0x07
     83a:	1a 96       	adiw	r26, 0x0a	; 10
     83c:	fc 93       	st	X, r31
     83e:	ee 93       	st	-X, r30
     840:	19 97       	sbiw	r26, 0x09	; 9
     842:	cf 01       	movw	r24, r30
     844:	42 96       	adiw	r24, 0x12	; 18
     846:	93 8b       	std	Z+19, r25	; 0x13
     848:	82 8b       	std	Z+18, r24	; 0x12
     84a:	02 96       	adiw	r24, 0x02	; 2
     84c:	95 8b       	std	Z+21, r25	; 0x15
     84e:	84 8b       	std	Z+20, r24	; 0x14
     850:	97 8b       	std	Z+23, r25	; 0x17
     852:	86 8b       	std	Z+22, r24	; 0x16
     854:	cf 01       	movw	r24, r30
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <chThdCreateSuspendedI>:
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	dc 01       	movw	r26, r24
     862:	14 96       	adiw	r26, 0x04	; 4
     864:	4d 91       	ld	r20, X+
     866:	5c 91       	ld	r21, X
     868:	15 97       	sbiw	r26, 0x05	; 5
     86a:	fa 01       	movw	r30, r20
     86c:	7c 97       	sbiw	r30, 0x1c	; 28
     86e:	ea 01       	movw	r28, r20
     870:	e2 97       	sbiw	r28, 0x32	; 50
     872:	d6 83       	std	Z+6, r29	; 0x06
     874:	c5 83       	std	Z+5, r28	; 0x05
     876:	17 96       	adiw	r26, 0x07	; 7
     878:	2c 91       	ld	r18, X
     87a:	17 97       	sbiw	r26, 0x07	; 7
     87c:	2a 8b       	std	Y+18, r18	; 0x12
     87e:	18 96       	adiw	r26, 0x08	; 8
     880:	2c 91       	ld	r18, X
     882:	18 97       	sbiw	r26, 0x08	; 8
     884:	29 8b       	std	Y+17, r18	; 0x11
     886:	19 96       	adiw	r26, 0x09	; 9
     888:	2c 91       	ld	r18, X
     88a:	19 97       	sbiw	r26, 0x09	; 9
     88c:	28 8b       	std	Y+16, r18	; 0x10
     88e:	1a 96       	adiw	r26, 0x0a	; 10
     890:	2c 91       	ld	r18, X
     892:	1a 97       	sbiw	r26, 0x0a	; 10
     894:	2f 87       	std	Y+15, r18	; 0x0f
     896:	1b 8a       	std	Y+19, r1	; 0x13
     898:	2d e6       	ldi	r18, 0x6D	; 109
     89a:	35 e0       	ldi	r19, 0x05	; 5
     89c:	3c 8b       	std	Y+20, r19	; 0x14
     89e:	2d 8b       	std	Y+21, r18	; 0x15
     8a0:	16 96       	adiw	r26, 0x06	; 6
     8a2:	2c 91       	ld	r18, X
     8a4:	16 97       	sbiw	r26, 0x06	; 6
     8a6:	8d 91       	ld	r24, X+
     8a8:	9c 91       	ld	r25, X
     8aa:	24 83       	std	Z+4, r18	; 0x04
     8ac:	32 e0       	ldi	r19, 0x02	; 2
     8ae:	35 87       	std	Z+13, r19	; 0x0d
     8b0:	16 86       	std	Z+14, r1	; 0x0e
     8b2:	23 8f       	std	Z+27, r18	; 0x1b
     8b4:	12 8e       	std	Z+26, r1	; 0x1a
     8b6:	11 8e       	std	Z+25, r1	; 0x19
     8b8:	10 8e       	std	Z+24, r1	; 0x18
     8ba:	21 e0       	ldi	r18, 0x01	; 1
     8bc:	27 87       	std	Z+15, r18	; 0x0f
     8be:	94 87       	std	Z+12, r25	; 0x0c
     8c0:	83 87       	std	Z+11, r24	; 0x0b
     8c2:	c7 e2       	ldi	r28, 0x27	; 39
     8c4:	d3 e0       	ldi	r29, 0x03	; 3
     8c6:	d0 87       	std	Z+8, r29	; 0x08
     8c8:	c7 83       	std	Z+7, r28	; 0x07
     8ca:	89 85       	ldd	r24, Y+9	; 0x09
     8cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ce:	92 87       	std	Z+10, r25	; 0x0a
     8d0:	81 87       	std	Z+9, r24	; 0x09
     8d2:	dc 01       	movw	r26, r24
     8d4:	18 96       	adiw	r26, 0x08	; 8
     8d6:	fc 93       	st	X, r31
     8d8:	ee 93       	st	-X, r30
     8da:	17 97       	sbiw	r26, 0x07	; 7
     8dc:	fa 87       	std	Y+10, r31	; 0x0a
     8de:	e9 87       	std	Y+9, r30	; 0x09
     8e0:	ea 01       	movw	r28, r20
     8e2:	2a 97       	sbiw	r28, 0x0a	; 10
     8e4:	d9 83       	std	Y+1, r29	; 0x01
     8e6:	c8 83       	st	Y, r28
     8e8:	da 01       	movw	r26, r20
     8ea:	18 97       	sbiw	r26, 0x08	; 8
     8ec:	0b 2e       	mov	r0, r27
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	0c 92       	st	X, r0
     8f2:	11 97       	sbiw	r26, 0x01	; 1
     8f4:	ac 93       	st	X, r26
     8f6:	0a 2e       	mov	r0, r26
     8f8:	1b 2e       	mov	r1, r27
     8fa:	13 96       	adiw	r26, 0x03	; 3
     8fc:	1c 92       	st	X, r1
     8fe:	0e 92       	st	-X, r0
     900:	11 24       	eor	r1, r1
     902:	12 97       	sbiw	r26, 0x02	; 2
     904:	cf 01       	movw	r24, r30
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <chThdCreate>:
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	f8 94       	cli
     912:	a4 df       	rcall	.-184    	; 0x85c <chThdCreateSuspendedI>
     914:	ec 01       	movw	r28, r24
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	dc de       	rcall	.-584    	; 0x6d4 <chSchWakeupS>
     91c:	78 94       	sei
     91e:	ce 01       	movw	r24, r28
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <chThdExitS>:
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	c0 91 32 03 	lds	r28, 0x0332	; 0x800332 <ch+0xb>
     932:	d0 91 33 03 	lds	r29, 0x0333	; 0x800333 <ch+0xc>
     936:	99 8b       	std	Y+17, r25	; 0x11
     938:	88 8b       	std	Y+16, r24	; 0x10
     93a:	8e 01       	movw	r16, r28
     93c:	0e 5e       	subi	r16, 0xEE	; 238
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	8a 89       	ldd	r24, Y+18	; 0x12
     942:	9b 89       	ldd	r25, Y+19	; 0x13
     944:	08 17       	cp	r16, r24
     946:	19 07       	cpc	r17, r25
     948:	59 f0       	breq	.+22     	; 0x960 <chThdExitS+0x3a>
     94a:	fc 01       	movw	r30, r24
     94c:	20 81       	ld	r18, Z
     94e:	31 81       	ldd	r19, Z+1	; 0x01
     950:	3b 8b       	std	Y+19, r19	; 0x13
     952:	2a 8b       	std	Y+18, r18	; 0x12
     954:	4c de       	rcall	.-872    	; 0x5ee <chSchReadyI>
     956:	8a 89       	ldd	r24, Y+18	; 0x12
     958:	9b 89       	ldd	r25, Y+19	; 0x13
     95a:	80 17       	cp	r24, r16
     95c:	91 07       	cpc	r25, r17
     95e:	a9 f7       	brne	.-22     	; 0x94a <chThdExitS+0x24>
     960:	8f 85       	ldd	r24, Y+15	; 0x0f
     962:	81 11       	cpse	r24, r1
     964:	0c c0       	rjmp	.+24     	; 0x97e <chThdExitS+0x58>
     966:	e9 85       	ldd	r30, Y+9	; 0x09
     968:	fa 85       	ldd	r31, Y+10	; 0x0a
     96a:	8f 81       	ldd	r24, Y+7	; 0x07
     96c:	98 85       	ldd	r25, Y+8	; 0x08
     96e:	90 87       	std	Z+8, r25	; 0x08
     970:	87 83       	std	Z+7, r24	; 0x07
     972:	af 81       	ldd	r26, Y+7	; 0x07
     974:	b8 85       	ldd	r27, Y+8	; 0x08
     976:	1a 96       	adiw	r26, 0x0a	; 10
     978:	fc 93       	st	X, r31
     97a:	ee 93       	st	-X, r30
     97c:	19 97       	sbiw	r26, 0x09	; 9
     97e:	8f e0       	ldi	r24, 0x0F	; 15
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	54 ce       	rjmp	.-856    	; 0x632 <chSchGoSleepS>

0000098a <chThdExit>:
     98a:	f8 94       	cli
     98c:	cc cf       	rjmp	.-104    	; 0x926 <chThdExitS>

0000098e <chThdSleep>:
     98e:	f8 94       	cli
     990:	bc 01       	movw	r22, r24
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	6a de       	rcall	.-812    	; 0x66a <chSchGoSleepTimeoutS>
     996:	78 94       	sei
     998:	08 95       	ret

0000099a <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     99e:	61 15       	cp	r22, r1
     9a0:	71 05       	cpc	r23, r1
     9a2:	99 f0       	breq	.+38     	; 0x9ca <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     9a4:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <ch+0xb>
     9a8:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     9b0:	ec 01       	movw	r28, r24
     9b2:	aa 81       	ldd	r26, Y+2	; 0x02
     9b4:	bb 81       	ldd	r27, Y+3	; 0x03
     9b6:	b3 83       	std	Z+3, r27	; 0x03
     9b8:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     9ba:	ed 93       	st	X+, r30
     9bc:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     9be:	fb 83       	std	Y+3, r31	; 0x03
     9c0:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     9c2:	84 e0       	ldi	r24, 0x04	; 4
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     9c8:	50 ce       	rjmp	.-864    	; 0x66a <chSchGoSleepTimeoutS>
}
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	9f ef       	ldi	r25, 0xFF	; 255
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     9de:	e8 17       	cp	r30, r24
     9e0:	f9 07       	cpc	r31, r25
     9e2:	71 f0       	breq	.+28     	; 0xa00 <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     9e4:	ec 01       	movw	r28, r24
     9e6:	a8 81       	ld	r26, Y
     9e8:	b9 81       	ldd	r27, Y+1	; 0x01
     9ea:	b1 83       	std	Z+1, r27	; 0x01
     9ec:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	fc 93       	st	X, r31
     9f2:	ee 93       	st	-X, r30
     9f4:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     9f6:	79 8b       	std	Y+17, r23	; 0x11
     9f8:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
     9fe:	f7 cd       	rjmp	.-1042   	; 0x5ee <chSchReadyI>
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     a06:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     a08:	90 8d       	ldd	r25, Z+24	; 0x18
     a0a:	69 2b       	or	r22, r25
     a0c:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     a0e:	85 85       	ldd	r24, Z+13	; 0x0d
     a10:	8a 30       	cpi	r24, 0x0A	; 10
     a12:	59 f0       	breq	.+22     	; 0xa2a <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     a14:	8b 30       	cpi	r24, 0x0B	; 11
     a16:	09 f0       	breq	.+2      	; 0xa1a <chEvtSignalI+0x14>
     a18:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     a1a:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     a1c:	68 23       	and	r22, r24
     a1e:	86 13       	cpse	r24, r22
     a20:	fb cf       	rjmp	.-10     	; 0xa18 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     a22:	11 8a       	std	Z+17, r1	; 0x11
     a24:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     a26:	cf 01       	movw	r24, r30
     a28:	e2 cd       	rjmp	.-1084   	; 0x5ee <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     a2a:	80 89       	ldd	r24, Z+16	; 0x10
     a2c:	68 23       	and	r22, r24
     a2e:	c9 f7       	brne	.-14     	; 0xa22 <chEvtSignalI+0x1c>
     a30:	08 95       	ret

00000a32 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	7c 01       	movw	r14, r24
     a3e:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     a40:	fc 01       	movw	r30, r24
     a42:	c0 81       	ld	r28, Z
     a44:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     a46:	8c 17       	cp	r24, r28
     a48:	9d 07       	cpc	r25, r29
     a4a:	91 f0       	breq	.+36     	; 0xa70 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     a4c:	8d 81       	ldd	r24, Y+5	; 0x05
     a4e:	81 2b       	or	r24, r17
     a50:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     a52:	11 23       	and	r17, r17
     a54:	19 f0       	breq	.+6      	; 0xa5c <chEvtBroadcastFlagsI+0x2a>
     a56:	9e 81       	ldd	r25, Y+6	; 0x06
     a58:	89 23       	and	r24, r25
     a5a:	21 f0       	breq	.+8      	; 0xa64 <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     a5c:	6c 81       	ldd	r22, Y+4	; 0x04
     a5e:	8a 81       	ldd	r24, Y+2	; 0x02
     a60:	9b 81       	ldd	r25, Y+3	; 0x03
     a62:	d1 df       	rcall	.-94     	; 0xa06 <chEvtSignalI>
    }
    elp = elp->next;
     a64:	09 90       	ld	r0, Y+
     a66:	d8 81       	ld	r29, Y
     a68:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     a6a:	ec 16       	cp	r14, r28
     a6c:	fd 06       	cpc	r15, r29
     a6e:	71 f7       	brne	.-36     	; 0xa4c <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	08 95       	ret

00000a7c <_port_switch>:
#if !defined(__DOXYGEN__)
__attribute__((naked, weak))
#endif
void _port_switch(thread_t *ntp, thread_t *otp) {

  asm volatile ("push    r2");
     a7c:	2f 92       	push	r2
  asm volatile ("push    r3");
     a7e:	3f 92       	push	r3
  asm volatile ("push    r4");
     a80:	4f 92       	push	r4
  asm volatile ("push    r5");
     a82:	5f 92       	push	r5
  asm volatile ("push    r6");
     a84:	6f 92       	push	r6
  asm volatile ("push    r7");
     a86:	7f 92       	push	r7
  asm volatile ("push    r8");
     a88:	8f 92       	push	r8
  asm volatile ("push    r9");
     a8a:	9f 92       	push	r9
  asm volatile ("push    r10");
     a8c:	af 92       	push	r10
  asm volatile ("push    r11");
     a8e:	bf 92       	push	r11
  asm volatile ("push    r12");
     a90:	cf 92       	push	r12
  asm volatile ("push    r13");
     a92:	df 92       	push	r13
  asm volatile ("push    r14");
     a94:	ef 92       	push	r14
  asm volatile ("push    r15");
     a96:	ff 92       	push	r15
  asm volatile ("push    r16");
     a98:	0f 93       	push	r16
  asm volatile ("push    r17");
     a9a:	1f 93       	push	r17
  asm volatile ("push    r28");
     a9c:	cf 93       	push	r28
  asm volatile ("push    r29");
     a9e:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     aa0:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     aa2:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     aa4:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     aa6:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     aa8:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     aaa:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     aac:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     aae:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     ab0:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     ab2:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     ab4:	df 91       	pop	r29
  asm volatile ("pop     r28");
     ab6:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     ab8:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     aba:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     abc:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     abe:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     ac0:	df 90       	pop	r13
  asm volatile ("pop     r12");
     ac2:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     ac4:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     ac6:	af 90       	pop	r10
  asm volatile ("pop     r9");
     ac8:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     aca:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     acc:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     ace:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     ad0:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     ad2:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     ad4:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     ad6:	2f 90       	pop	r2
  asm volatile ("ret");
     ad8:	08 95       	ret

00000ada <_port_thread_start>:
     ada:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     adc:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     ade:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     ae0:	09 95       	icall
#if defined(_CHIBIOS_RT_)
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     ae2:	53 cf       	rjmp	.-346    	; 0x98a <chThdExit>

00000ae4 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
     ae4:	be d2       	rcall	.+1404   	; 0x1062 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
     ae6:	8b e3       	ldi	r24, 0x3B	; 59
     ae8:	92 e0       	ldi	r25, 0x02	; 2
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
     aea:	1b d4       	rcall	.+2102   	; 0x1322 <_pal_lld_init>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
     aec:	26 d2       	rcall	.+1100   	; 0xf3a <extInit>
     aee:	44 d2       	rcall	.+1160   	; 0xf78 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
     af0:	77 d5       	rcall	.+2798   	; 0x15e0 <boardInit>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <stInit>

00000af4 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
     af4:	a0 c4       	rjmp	.+2368   	; 0x1436 <st_lld_init>

00000af6 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     af6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     afa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	86 bb       	out	0x16, r24	; 22

  /* enable interrupt */
  TIMSK_REG = _BV(OCIE1A);
     b02:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
     b06:	08 95       	ret

00000b08 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
     b08:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
     b0c:	08 95       	ret

00000b0e <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     b0e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     b12:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     b16:	08 95       	ret

00000b18 <iqObjectInit>:
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	fc 01       	movw	r30, r24
     b1e:	91 83       	std	Z+1, r25	; 0x01
     b20:	80 83       	st	Z, r24
     b22:	93 83       	std	Z+3, r25	; 0x03
     b24:	82 83       	std	Z+2, r24	; 0x02
     b26:	15 82       	std	Z+5, r1	; 0x05
     b28:	14 82       	std	Z+4, r1	; 0x04
     b2a:	77 83       	std	Z+7, r23	; 0x07
     b2c:	66 83       	std	Z+6, r22	; 0x06
     b2e:	75 87       	std	Z+13, r23	; 0x0d
     b30:	64 87       	std	Z+12, r22	; 0x0c
     b32:	73 87       	std	Z+11, r23	; 0x0b
     b34:	62 87       	std	Z+10, r22	; 0x0a
     b36:	64 0f       	add	r22, r20
     b38:	75 1f       	adc	r23, r21
     b3a:	71 87       	std	Z+9, r23	; 0x09
     b3c:	60 87       	std	Z+8, r22	; 0x08
     b3e:	37 87       	std	Z+15, r19	; 0x0f
     b40:	26 87       	std	Z+14, r18	; 0x0e
     b42:	11 8b       	std	Z+17, r17	; 0x11
     b44:	00 8b       	std	Z+16, r16	; 0x10
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <iqPutI>:
     b4c:	fc 01       	movw	r30, r24
     b4e:	a2 85       	ldd	r26, Z+10	; 0x0a
     b50:	b3 85       	ldd	r27, Z+11	; 0x0b
     b52:	84 85       	ldd	r24, Z+12	; 0x0c
     b54:	95 85       	ldd	r25, Z+13	; 0x0d
     b56:	a8 17       	cp	r26, r24
     b58:	b9 07       	cpc	r27, r25
     b5a:	e1 f0       	breq	.+56     	; 0xb94 <iqPutI+0x48>
     b5c:	84 81       	ldd	r24, Z+4	; 0x04
     b5e:	95 81       	ldd	r25, Z+5	; 0x05
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	95 83       	std	Z+5, r25	; 0x05
     b64:	84 83       	std	Z+4, r24	; 0x04
     b66:	cd 01       	movw	r24, r26
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	93 87       	std	Z+11, r25	; 0x0b
     b6c:	82 87       	std	Z+10, r24	; 0x0a
     b6e:	6c 93       	st	X, r22
     b70:	22 85       	ldd	r18, Z+10	; 0x0a
     b72:	33 85       	ldd	r19, Z+11	; 0x0b
     b74:	80 85       	ldd	r24, Z+8	; 0x08
     b76:	91 85       	ldd	r25, Z+9	; 0x09
     b78:	28 17       	cp	r18, r24
     b7a:	39 07       	cpc	r19, r25
     b7c:	20 f0       	brcs	.+8      	; 0xb86 <iqPutI+0x3a>
     b7e:	86 81       	ldd	r24, Z+6	; 0x06
     b80:	97 81       	ldd	r25, Z+7	; 0x07
     b82:	93 87       	std	Z+11, r25	; 0x0b
     b84:	82 87       	std	Z+10, r24	; 0x0a
     b86:	cf 01       	movw	r24, r30
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	23 df       	rcall	.-442    	; 0x9d4 <chThdDequeueNextI>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	08 95       	ret
     b94:	84 81       	ldd	r24, Z+4	; 0x04
     b96:	95 81       	ldd	r25, Z+5	; 0x05
     b98:	89 2b       	or	r24, r25
     b9a:	01 f3       	breq	.-64     	; 0xb5c <iqPutI+0x10>
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	08 95       	ret

00000ba2 <iqGetTimeout>:
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ec 01       	movw	r28, r24
     bac:	8b 01       	movw	r16, r22
     bae:	f8 94       	cli
     bb0:	05 c0       	rjmp	.+10     	; 0xbbc <iqGetTimeout+0x1a>
     bb2:	b8 01       	movw	r22, r16
     bb4:	ce 01       	movw	r24, r28
     bb6:	f1 de       	rcall	.-542    	; 0x99a <chThdEnqueueTimeoutS>
     bb8:	97 fd       	sbrc	r25, 7
     bba:	27 c0       	rjmp	.+78     	; 0xc0a <iqGetTimeout+0x68>
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	89 2b       	or	r24, r25
     bc2:	b9 f3       	breq	.-18     	; 0xbb2 <iqGetTimeout+0x10>
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	9d 81       	ldd	r25, Y+5	; 0x05
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	9d 83       	std	Y+5, r25	; 0x05
     bcc:	8c 83       	std	Y+4, r24	; 0x04
     bce:	ec 85       	ldd	r30, Y+12	; 0x0c
     bd0:	fd 85       	ldd	r31, Y+13	; 0x0d
     bd2:	cf 01       	movw	r24, r30
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	9d 87       	std	Y+13, r25	; 0x0d
     bd8:	8c 87       	std	Y+12, r24	; 0x0c
     bda:	10 81       	ld	r17, Z
     bdc:	28 85       	ldd	r18, Y+8	; 0x08
     bde:	39 85       	ldd	r19, Y+9	; 0x09
     be0:	82 17       	cp	r24, r18
     be2:	93 07       	cpc	r25, r19
     be4:	20 f0       	brcs	.+8      	; 0xbee <iqGetTimeout+0x4c>
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	9f 81       	ldd	r25, Y+7	; 0x07
     bea:	9d 87       	std	Y+13, r25	; 0x0d
     bec:	8c 87       	std	Y+12, r24	; 0x0c
     bee:	ee 85       	ldd	r30, Y+14	; 0x0e
     bf0:	ff 85       	ldd	r31, Y+15	; 0x0f
     bf2:	30 97       	sbiw	r30, 0x00	; 0
     bf4:	11 f0       	breq	.+4      	; 0xbfa <iqGetTimeout+0x58>
     bf6:	ce 01       	movw	r24, r28
     bf8:	19 95       	eicall
     bfa:	78 94       	sei
     bfc:	81 2f       	mov	r24, r17
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	08 95       	ret
     c0a:	78 94       	sei
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <iqReadTimeout>:
     c16:	2f 92       	push	r2
     c18:	3f 92       	push	r3
     c1a:	4f 92       	push	r4
     c1c:	5f 92       	push	r5
     c1e:	6f 92       	push	r6
     c20:	7f 92       	push	r7
     c22:	8f 92       	push	r8
     c24:	9f 92       	push	r9
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ec 01       	movw	r28, r24
     c3c:	7b 01       	movw	r14, r22
     c3e:	8a 01       	movw	r16, r20
     c40:	39 01       	movw	r6, r18
     c42:	ae 84       	ldd	r10, Y+14	; 0x0e
     c44:	bf 84       	ldd	r11, Y+15	; 0x0f
     c46:	f8 94       	cli
     c48:	20 90 84 00 	lds	r2, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     c4c:	30 90 85 00 	lds	r3, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     c50:	22 0e       	add	r2, r18
     c52:	33 1e       	adc	r3, r19
     c54:	c1 2c       	mov	r12, r1
     c56:	d1 2c       	mov	r13, r1
     c58:	29 01       	movw	r4, r18
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	48 1a       	sub	r4, r24
     c5e:	51 08       	sbc	r5, r1
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	9d 81       	ldd	r25, Y+5	; 0x05
     c64:	89 2b       	or	r24, r25
     c66:	81 f1       	breq	.+96     	; 0xcc8 <iqReadTimeout+0xb2>
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9d 83       	std	Y+5, r25	; 0x05
     c70:	8c 83       	std	Y+4, r24	; 0x04
     c72:	47 01       	movw	r8, r14
     c74:	ff ef       	ldi	r31, 0xFF	; 255
     c76:	8f 1a       	sub	r8, r31
     c78:	9f 0a       	sbc	r9, r31
     c7a:	ec 85       	ldd	r30, Y+12	; 0x0c
     c7c:	fd 85       	ldd	r31, Y+13	; 0x0d
     c7e:	cf 01       	movw	r24, r30
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	9d 87       	std	Y+13, r25	; 0x0d
     c84:	8c 87       	std	Y+12, r24	; 0x0c
     c86:	80 81       	ld	r24, Z
     c88:	f7 01       	movw	r30, r14
     c8a:	80 83       	st	Z, r24
     c8c:	2c 85       	ldd	r18, Y+12	; 0x0c
     c8e:	3d 85       	ldd	r19, Y+13	; 0x0d
     c90:	88 85       	ldd	r24, Y+8	; 0x08
     c92:	99 85       	ldd	r25, Y+9	; 0x09
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	20 f0       	brcs	.+8      	; 0xca2 <iqReadTimeout+0x8c>
     c9a:	8e 81       	ldd	r24, Y+6	; 0x06
     c9c:	9f 81       	ldd	r25, Y+7	; 0x07
     c9e:	9d 87       	std	Y+13, r25	; 0x0d
     ca0:	8c 87       	std	Y+12, r24	; 0x0c
     ca2:	a1 14       	cp	r10, r1
     ca4:	b1 04       	cpc	r11, r1
     ca6:	19 f0       	breq	.+6      	; 0xcae <iqReadTimeout+0x98>
     ca8:	ce 01       	movw	r24, r28
     caa:	f5 01       	movw	r30, r10
     cac:	19 95       	eicall
     cae:	78 94       	sei
     cb0:	ff ef       	ldi	r31, 0xFF	; 255
     cb2:	cf 1a       	sub	r12, r31
     cb4:	df 0a       	sbc	r13, r31
     cb6:	01 50       	subi	r16, 0x01	; 1
     cb8:	11 09       	sbc	r17, r1
     cba:	d9 f0       	breq	.+54     	; 0xcf2 <iqReadTimeout+0xdc>
     cbc:	f8 94       	cli
     cbe:	74 01       	movw	r14, r8
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	9d 81       	ldd	r25, Y+5	; 0x05
     cc4:	89 2b       	or	r24, r25
     cc6:	81 f6       	brne	.-96     	; 0xc68 <iqReadTimeout+0x52>
     cc8:	ee ef       	ldi	r30, 0xFE	; 254
     cca:	4e 16       	cp	r4, r30
     ccc:	ef ef       	ldi	r30, 0xFF	; 255
     cce:	5e 06       	cpc	r5, r30
     cd0:	20 f5       	brcc	.+72     	; 0xd1a <iqReadTimeout+0x104>
     cd2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     cd6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     cda:	b1 01       	movw	r22, r2
     cdc:	68 1b       	sub	r22, r24
     cde:	79 0b       	sbc	r23, r25
     ce0:	66 16       	cp	r6, r22
     ce2:	77 06       	cpc	r7, r23
     ce4:	28 f0       	brcs	.+10     	; 0xcf0 <iqReadTimeout+0xda>
     ce6:	ce 01       	movw	r24, r28
     ce8:	58 de       	rcall	.-848    	; 0x99a <chThdEnqueueTimeoutS>
     cea:	89 2b       	or	r24, r25
     cec:	09 f4       	brne	.+2      	; 0xcf0 <iqReadTimeout+0xda>
     cee:	b8 cf       	rjmp	.-144    	; 0xc60 <iqReadTimeout+0x4a>
     cf0:	78 94       	sei
     cf2:	c6 01       	movw	r24, r12
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	9f 90       	pop	r9
     d0a:	8f 90       	pop	r8
     d0c:	7f 90       	pop	r7
     d0e:	6f 90       	pop	r6
     d10:	5f 90       	pop	r5
     d12:	4f 90       	pop	r4
     d14:	3f 90       	pop	r3
     d16:	2f 90       	pop	r2
     d18:	08 95       	ret
     d1a:	b3 01       	movw	r22, r6
     d1c:	ce 01       	movw	r24, r28
     d1e:	3d de       	rcall	.-902    	; 0x99a <chThdEnqueueTimeoutS>
     d20:	e4 cf       	rjmp	.-56     	; 0xcea <iqReadTimeout+0xd4>

00000d22 <oqObjectInit>:
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	fc 01       	movw	r30, r24
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
     d2c:	93 83       	std	Z+3, r25	; 0x03
     d2e:	82 83       	std	Z+2, r24	; 0x02
     d30:	55 83       	std	Z+5, r21	; 0x05
     d32:	44 83       	std	Z+4, r20	; 0x04
     d34:	77 83       	std	Z+7, r23	; 0x07
     d36:	66 83       	std	Z+6, r22	; 0x06
     d38:	75 87       	std	Z+13, r23	; 0x0d
     d3a:	64 87       	std	Z+12, r22	; 0x0c
     d3c:	73 87       	std	Z+11, r23	; 0x0b
     d3e:	62 87       	std	Z+10, r22	; 0x0a
     d40:	46 0f       	add	r20, r22
     d42:	57 1f       	adc	r21, r23
     d44:	51 87       	std	Z+9, r21	; 0x09
     d46:	40 87       	std	Z+8, r20	; 0x08
     d48:	37 87       	std	Z+15, r19	; 0x0f
     d4a:	26 87       	std	Z+14, r18	; 0x0e
     d4c:	11 8b       	std	Z+17, r17	; 0x11
     d4e:	00 8b       	std	Z+16, r16	; 0x10
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ec 01       	movw	r28, r24
     d62:	f6 2e       	mov	r15, r22
     d64:	8a 01       	movw	r16, r20
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     d66:	f8 94       	cli
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <oqPutTimeout+0x1e>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
     d6a:	b8 01       	movw	r22, r16
     d6c:	ce 01       	movw	r24, r28
     d6e:	15 de       	rcall	.-982    	; 0x99a <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
     d70:	97 fd       	sbrc	r25, 7
     d72:	2a c0       	rjmp	.+84     	; 0xdc8 <oqPutTimeout+0x72>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	89 2b       	or	r24, r25
     d7a:	b9 f3       	breq	.-18     	; 0xd6a <oqPutTimeout+0x14>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	9d 83       	std	Y+5, r25	; 0x05
     d84:	8c 83       	std	Y+4, r24	; 0x04
  *oqp->q_wrptr++ = b;
     d86:	ea 85       	ldd	r30, Y+10	; 0x0a
     d88:	fb 85       	ldd	r31, Y+11	; 0x0b
     d8a:	cf 01       	movw	r24, r30
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	9b 87       	std	Y+11, r25	; 0x0b
     d90:	8a 87       	std	Y+10, r24	; 0x0a
     d92:	f0 82       	st	Z, r15
  if (oqp->q_wrptr >= oqp->q_top) {
     d94:	2a 85       	ldd	r18, Y+10	; 0x0a
     d96:	3b 85       	ldd	r19, Y+11	; 0x0b
     d98:	88 85       	ldd	r24, Y+8	; 0x08
     d9a:	99 85       	ldd	r25, Y+9	; 0x09
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	20 f0       	brcs	.+8      	; 0xdaa <oqPutTimeout+0x54>
    oqp->q_wrptr = oqp->q_buffer;
     da2:	8e 81       	ldd	r24, Y+6	; 0x06
     da4:	9f 81       	ldd	r25, Y+7	; 0x07
     da6:	9b 87       	std	Y+11, r25	; 0x0b
     da8:	8a 87       	std	Y+10, r24	; 0x0a
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
     daa:	ee 85       	ldd	r30, Y+14	; 0x0e
     dac:	ff 85       	ldd	r31, Y+15	; 0x0f
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	11 f0       	breq	.+4      	; 0xdb6 <oqPutTimeout+0x60>
    oqp->q_notify(oqp);
     db2:	ce 01       	movw	r24, r28
     db4:	19 95       	eicall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     db6:	78 94       	sei
  }

  osalSysUnlock();

  return MSG_OK;
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	08 95       	ret
     dc8:	78 94       	sei
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	08 95       	ret

00000dd6 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
     dd6:	cf 93       	push	r28
     dd8:	fc 01       	movw	r30, r24
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
     dda:	a4 85       	ldd	r26, Z+12	; 0x0c
     ddc:	b5 85       	ldd	r27, Z+13	; 0x0d
     dde:	82 85       	ldd	r24, Z+10	; 0x0a
     de0:	93 85       	ldd	r25, Z+11	; 0x0b
     de2:	8a 17       	cp	r24, r26
     de4:	9b 07       	cpc	r25, r27
     de6:	e1 f0       	breq	.+56     	; 0xe20 <oqGetI+0x4a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
     de8:	84 81       	ldd	r24, Z+4	; 0x04
     dea:	95 81       	ldd	r25, Z+5	; 0x05
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	95 83       	std	Z+5, r25	; 0x05
     df0:	84 83       	std	Z+4, r24	; 0x04
  b = *oqp->q_rdptr++;
     df2:	cd 01       	movw	r24, r26
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	95 87       	std	Z+13, r25	; 0x0d
     df8:	84 87       	std	Z+12, r24	; 0x0c
     dfa:	cc 91       	ld	r28, X
  if (oqp->q_rdptr >= oqp->q_top) {
     dfc:	20 85       	ldd	r18, Z+8	; 0x08
     dfe:	31 85       	ldd	r19, Z+9	; 0x09
     e00:	82 17       	cp	r24, r18
     e02:	93 07       	cpc	r25, r19
     e04:	40 f4       	brcc	.+16     	; 0xe16 <oqGetI+0x40>
     e06:	cf 01       	movw	r24, r30
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	e3 dd       	rcall	.-1082   	; 0x9d4 <chThdDequeueNextI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

  return (msg_t)b;
     e0e:	8c 2f       	mov	r24, r28
     e10:	90 e0       	ldi	r25, 0x00	; 0
}
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
     e16:	86 81       	ldd	r24, Z+6	; 0x06
     e18:	97 81       	ldd	r25, Z+7	; 0x07
     e1a:	95 87       	std	Z+13, r25	; 0x0d
     e1c:	84 87       	std	Z+12, r24	; 0x0c
     e1e:	f3 cf       	rjmp	.-26     	; 0xe06 <oqGetI+0x30>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
     e20:	84 81       	ldd	r24, Z+4	; 0x04
     e22:	95 81       	ldd	r25, Z+5	; 0x05
     e24:	89 2b       	or	r24, r25
     e26:	01 f3       	breq	.-64     	; 0xde8 <oqGetI+0x12>
    return MSG_TIMEOUT;
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	9f ef       	ldi	r25, 0xFF	; 255
     e2c:	f2 cf       	rjmp	.-28     	; 0xe12 <oqGetI+0x3c>

00000e2e <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
     e2e:	2f 92       	push	r2
     e30:	3f 92       	push	r3
     e32:	4f 92       	push	r4
     e34:	5f 92       	push	r5
     e36:	6f 92       	push	r6
     e38:	7f 92       	push	r7
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
     e54:	7b 01       	movw	r14, r22
     e56:	8a 01       	movw	r16, r20
     e58:	39 01       	movw	r6, r18
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
     e5a:	ae 84       	ldd	r10, Y+14	; 0x0e
     e5c:	bf 84       	ldd	r11, Y+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     e5e:	f8 94       	cli
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     e60:	20 90 84 00 	lds	r2, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     e64:	30 90 85 00 	lds	r3, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
     e68:	22 0e       	add	r2, r18
     e6a:	33 1e       	adc	r3, r19
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
     e6c:	c1 2c       	mov	r12, r1
     e6e:	d1 2c       	mov	r13, r1
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
     e70:	29 01       	movw	r4, r18
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	48 1a       	sub	r4, r24
     e76:	51 08       	sbc	r5, r1
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	89 2b       	or	r24, r25
     e7e:	81 f1       	breq	.+96     	; 0xee0 <oqWriteTimeout+0xb2>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	9d 83       	std	Y+5, r25	; 0x05
     e88:	8c 83       	std	Y+4, r24	; 0x04
    *oqp->q_wrptr++ = *bp++;
     e8a:	ea 85       	ldd	r30, Y+10	; 0x0a
     e8c:	fb 85       	ldd	r31, Y+11	; 0x0b
     e8e:	cf 01       	movw	r24, r30
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	9b 87       	std	Y+11, r25	; 0x0b
     e94:	8a 87       	std	Y+10, r24	; 0x0a
     e96:	47 01       	movw	r8, r14
     e98:	bf ef       	ldi	r27, 0xFF	; 255
     e9a:	8b 1a       	sub	r8, r27
     e9c:	9b 0a       	sbc	r9, r27
     e9e:	d7 01       	movw	r26, r14
     ea0:	8c 91       	ld	r24, X
     ea2:	80 83       	st	Z, r24
    if (oqp->q_wrptr >= oqp->q_top) {
     ea4:	2a 85       	ldd	r18, Y+10	; 0x0a
     ea6:	3b 85       	ldd	r19, Y+11	; 0x0b
     ea8:	88 85       	ldd	r24, Y+8	; 0x08
     eaa:	99 85       	ldd	r25, Y+9	; 0x09
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	20 f0       	brcs	.+8      	; 0xeba <oqWriteTimeout+0x8c>
      oqp->q_wrptr = oqp->q_buffer;
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
     eb4:	9f 81       	ldd	r25, Y+7	; 0x07
     eb6:	9b 87       	std	Y+11, r25	; 0x0b
     eb8:	8a 87       	std	Y+10, r24	; 0x0a
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
     eba:	a1 14       	cp	r10, r1
     ebc:	b1 04       	cpc	r11, r1
     ebe:	19 f0       	breq	.+6      	; 0xec6 <oqWriteTimeout+0x98>
      nfy(oqp);
     ec0:	ce 01       	movw	r24, r28
     ec2:	f5 01       	movw	r30, r10
     ec4:	19 95       	eicall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     ec6:	78 94       	sei
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
     ec8:	ff ef       	ldi	r31, 0xFF	; 255
     eca:	cf 1a       	sub	r12, r31
     ecc:	df 0a       	sbc	r13, r31
    if (--n == 0U) {
     ece:	01 50       	subi	r16, 0x01	; 1
     ed0:	11 09       	sbc	r17, r1
     ed2:	d9 f0       	breq	.+54     	; 0xf0a <oqWriteTimeout+0xdc>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     ed4:	f8 94       	cli
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
     ed6:	74 01       	movw	r14, r8
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	89 2b       	or	r24, r25
     ede:	81 f6       	brne	.-96     	; 0xe80 <oqWriteTimeout+0x52>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
     ee0:	ae ef       	ldi	r26, 0xFE	; 254
     ee2:	4a 16       	cp	r4, r26
     ee4:	af ef       	ldi	r26, 0xFF	; 255
     ee6:	5a 06       	cpc	r5, r26
     ee8:	20 f5       	brcc	.+72     	; 0xf32 <oqWriteTimeout+0x104>
     eea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     eee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
     ef2:	b1 01       	movw	r22, r2
     ef4:	68 1b       	sub	r22, r24
     ef6:	79 0b       	sbc	r23, r25

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
     ef8:	66 16       	cp	r6, r22
     efa:	77 06       	cpc	r7, r23
     efc:	28 f0       	brcs	.+10     	; 0xf08 <oqWriteTimeout+0xda>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
     efe:	ce 01       	movw	r24, r28
     f00:	4c dd       	rcall	.-1384   	; 0x99a <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     f02:	89 2b       	or	r24, r25
     f04:	09 f4       	brne	.+2      	; 0xf08 <oqWriteTimeout+0xda>
     f06:	b8 cf       	rjmp	.-144    	; 0xe78 <oqWriteTimeout+0x4a>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     f08:	78 94       	sei
      return w;
    }

    osalSysLock();
  }
}
     f0a:	c6 01       	movw	r24, r12
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	9f 90       	pop	r9
     f22:	8f 90       	pop	r8
     f24:	7f 90       	pop	r7
     f26:	6f 90       	pop	r6
     f28:	5f 90       	pop	r5
     f2a:	4f 90       	pop	r4
     f2c:	3f 90       	pop	r3
     f2e:	2f 90       	pop	r2
     f30:	08 95       	ret
     f32:	b3 01       	movw	r22, r6
     f34:	ce 01       	movw	r24, r28
     f36:	31 dd       	rcall	.-1438   	; 0x99a <chThdEnqueueTimeoutS>
     f38:	e4 cf       	rjmp	.-56     	; 0xf02 <oqWriteTimeout+0xd4>

00000f3a <extInit>:
 *
 * @init
 */
void extInit(void) {

  ext_lld_init();
     f3a:	f0 c1       	rjmp	.+992    	; 0x131c <ext_lld_init>

00000f3c <extObjectInit>:
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
     f3c:	21 e0       	ldi	r18, 0x01	; 1
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
  extp->config = NULL;
     f42:	12 82       	std	Z+2, r1	; 0x02
     f44:	11 82       	std	Z+1, r1	; 0x01
     f46:	08 95       	ret

00000f48 <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     f48:	05 96       	adiw	r24, 0x05	; 5
     f4a:	65 ce       	rjmp	.-822    	; 0xc16 <iqReadTimeout>

00000f4c <_read>:
     f4c:	2f ef       	ldi	r18, 0xFF	; 255
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	05 96       	adiw	r24, 0x05	; 5
     f52:	61 ce       	rjmp	.-830    	; 0xc16 <iqReadTimeout>

00000f54 <_writet>:
     f54:	47 96       	adiw	r24, 0x17	; 23
     f56:	6b cf       	rjmp	.-298    	; 0xe2e <oqWriteTimeout>

00000f58 <_write>:
     f58:	2f ef       	ldi	r18, 0xFF	; 255
     f5a:	3f ef       	ldi	r19, 0xFF	; 255
     f5c:	47 96       	adiw	r24, 0x17	; 23
     f5e:	67 cf       	rjmp	.-306    	; 0xe2e <oqWriteTimeout>

00000f60 <_gett>:
     f60:	05 96       	adiw	r24, 0x05	; 5
     f62:	1f ce       	rjmp	.-962    	; 0xba2 <iqGetTimeout>

00000f64 <_get>:
     f64:	6f ef       	ldi	r22, 0xFF	; 255
     f66:	7f ef       	ldi	r23, 0xFF	; 255
     f68:	05 96       	adiw	r24, 0x05	; 5
     f6a:	1b ce       	rjmp	.-970    	; 0xba2 <iqGetTimeout>

00000f6c <_putt>:
     f6c:	47 96       	adiw	r24, 0x17	; 23
     f6e:	f3 ce       	rjmp	.-538    	; 0xd56 <oqPutTimeout>

00000f70 <_put>:
     f70:	4f ef       	ldi	r20, 0xFF	; 255
     f72:	5f ef       	ldi	r21, 0xFF	; 255
     f74:	47 96       	adiw	r24, 0x17	; 23
     f76:	ef ce       	rjmp	.-546    	; 0xd56 <oqPutTimeout>

00000f78 <sdInit>:
     f78:	fb c2       	rjmp	.+1526   	; 0x1570 <sd_lld_init>

00000f7a <sdObjectInit>:
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	ec 01       	movw	r28, r24
     f88:	9b 01       	movw	r18, r22
     f8a:	7a 01       	movw	r14, r20
     f8c:	fc 01       	movw	r30, r24
     f8e:	88 e2       	ldi	r24, 0x28	; 40
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	81 93       	st	Z+, r24
     f94:	91 93       	st	Z+, r25
     f96:	fb 83       	std	Y+3, r31	; 0x03
     f98:	ea 83       	std	Y+2, r30	; 0x02
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	8c 83       	std	Y+4, r24	; 0x04
     f9e:	be 01       	movw	r22, r28
     fa0:	67 5d       	subi	r22, 0xD7	; 215
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	8e 01       	movw	r16, r28
     fa6:	40 e1       	ldi	r20, 0x10	; 16
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	ce 01       	movw	r24, r28
     fac:	05 96       	adiw	r24, 0x05	; 5
     fae:	b4 dd       	rcall	.-1176   	; 0xb18 <iqObjectInit>
     fb0:	be 01       	movw	r22, r28
     fb2:	67 5c       	subi	r22, 0xC7	; 199
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	97 01       	movw	r18, r14
     fb8:	40 e1       	ldi	r20, 0x10	; 16
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	ce 01       	movw	r24, r28
     fbe:	47 96       	adiw	r24, 0x17	; 23
     fc0:	b0 de       	rcall	.-672    	; 0xd22 <oqObjectInit>
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	08 95       	ret

00000fd0 <sdStart>:
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
     fd6:	f8 94       	cli
     fd8:	d2 d2       	rcall	.+1444   	; 0x157e <sd_lld_start>
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	8c 83       	std	Y+4, r24	; 0x04
     fde:	78 94       	sei
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
     fee:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     ff0:	89 85       	ldd	r24, Y+9	; 0x09
     ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff4:	89 2b       	or	r24, r25
     ff6:	51 f0       	breq	.+20     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     ff8:	61 2f       	mov	r22, r17
     ffa:	ce 01       	movw	r24, r28
     ffc:	05 96       	adiw	r24, 0x05	; 5
     ffe:	a6 dd       	rcall	.-1204   	; 0xb4c <iqPutI>
    1000:	97 fd       	sbrc	r25, 7
    1002:	0e c0       	rjmp	.+28     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    100c:	64 e0       	ldi	r22, 0x04	; 4
    100e:	ce 01       	movw	r24, r28
    1010:	02 96       	adiw	r24, 0x02	; 2
    1012:	0f dd       	rcall	.-1506   	; 0xa32 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    1014:	61 2f       	mov	r22, r17
    1016:	ce 01       	movw	r24, r28
    1018:	05 96       	adiw	r24, 0x05	; 5
    101a:	98 dd       	rcall	.-1232   	; 0xb4c <iqPutI>
    101c:	97 ff       	sbrs	r25, 7
    101e:	f2 cf       	rjmp	.-28     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	ce 01       	movw	r24, r28
    1024:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	02 cd       	rjmp	.-1532   	; 0xa32 <chEvtBroadcastFlagsI>

0000102e <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
    1038:	47 96       	adiw	r24, 0x17	; 23
    103a:	cd de       	rcall	.-614    	; 0xdd6 <oqGetI>
    103c:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
    103e:	97 fd       	sbrc	r25, 7
    1040:	06 c0       	rjmp	.+12     	; 0x104e <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
    1042:	ce 01       	movw	r24, r28
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	08 95       	ret
    104e:	68 e0       	ldi	r22, 0x08	; 8
    1050:	c8 01       	movw	r24, r16
    1052:	02 96       	adiw	r24, 0x02	; 2
    1054:	ee dc       	rcall	.-1572   	; 0xa32 <chEvtBroadcastFlagsI>
    1056:	ce 01       	movw	r24, r28
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
    1062:	08 95       	ret

00001064 <__vector_1>:
  if (channel == INT3)
    EIMSK &= ~(1 << INT3);
#endif
#if AVR_EXT_USE_INT4 || defined(__DOXYGEN__)
  if (channel == INT4)
    EIMSK &= ~(1 << INT4);
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
    106e:	0b b6       	in	r0, 0x3b	; 59
    1070:	0f 92       	push	r0
    1072:	2f 93       	push	r18
    1074:	3f 93       	push	r19
    1076:	4f 93       	push	r20
    1078:	5f 93       	push	r21
    107a:	6f 93       	push	r22
    107c:	7f 93       	push	r23
    107e:	8f 93       	push	r24
    1080:	9f 93       	push	r25
    1082:	af 93       	push	r26
    1084:	bf 93       	push	r27
    1086:	ef 93       	push	r30
    1088:	ff 93       	push	r31
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>
    1090:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <EXTD1+0x1>
    1094:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <EXTD1+0x2>
    1098:	04 80       	ldd	r0, Z+4	; 0x04
    109a:	f5 81       	ldd	r31, Z+5	; 0x05
    109c:	e0 2d       	mov	r30, r0
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	8b e5       	ldi	r24, 0x5B	; 91
    10a4:	93 e0       	ldi	r25, 0x03	; 3
    10a6:	19 95       	eicall
    10a8:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    10ac:	5f db       	rcall	.-2370   	; 0x76c <chSchIsPreemptionRequired>
    10ae:	81 11       	cpse	r24, r1
    10b0:	6d db       	rcall	.-2342   	; 0x78c <chSchDoReschedule>
    10b2:	ff 91       	pop	r31
    10b4:	ef 91       	pop	r30
    10b6:	bf 91       	pop	r27
    10b8:	af 91       	pop	r26
    10ba:	9f 91       	pop	r25
    10bc:	8f 91       	pop	r24
    10be:	7f 91       	pop	r23
    10c0:	6f 91       	pop	r22
    10c2:	5f 91       	pop	r21
    10c4:	4f 91       	pop	r20
    10c6:	3f 91       	pop	r19
    10c8:	2f 91       	pop	r18
    10ca:	0f 90       	pop	r0
    10cc:	0b be       	out	0x3b, r0	; 59
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <__vector_2>:
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	0b b6       	in	r0, 0x3b	; 59
    10e4:	0f 92       	push	r0
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>
    1104:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <EXTD1+0x1>
    1108:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <EXTD1+0x2>
    110c:	02 84       	ldd	r0, Z+10	; 0x0a
    110e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1110:	e0 2d       	mov	r30, r0
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	8b e5       	ldi	r24, 0x5B	; 91
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	19 95       	eicall
    111c:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    1120:	25 db       	rcall	.-2486   	; 0x76c <chSchIsPreemptionRequired>
    1122:	81 11       	cpse	r24, r1
    1124:	33 db       	rcall	.-2458   	; 0x78c <chSchDoReschedule>
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0b be       	out	0x3b, r0	; 59
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <__vector_3>:
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	0b b6       	in	r0, 0x3b	; 59
    1158:	0f 92       	push	r0
    115a:	2f 93       	push	r18
    115c:	3f 93       	push	r19
    115e:	4f 93       	push	r20
    1160:	5f 93       	push	r21
    1162:	6f 93       	push	r22
    1164:	7f 93       	push	r23
    1166:	8f 93       	push	r24
    1168:	9f 93       	push	r25
    116a:	af 93       	push	r26
    116c:	bf 93       	push	r27
    116e:	ef 93       	push	r30
    1170:	ff 93       	push	r31
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>
    1178:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <EXTD1+0x1>
    117c:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <EXTD1+0x2>
    1180:	00 88       	ldd	r0, Z+16	; 0x10
    1182:	f1 89       	ldd	r31, Z+17	; 0x11
    1184:	e0 2d       	mov	r30, r0
    1186:	62 e0       	ldi	r22, 0x02	; 2
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	8b e5       	ldi	r24, 0x5B	; 91
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	19 95       	eicall
    1190:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    1194:	eb da       	rcall	.-2602   	; 0x76c <chSchIsPreemptionRequired>
    1196:	81 11       	cpse	r24, r1
    1198:	f9 da       	rcall	.-2574   	; 0x78c <chSchDoReschedule>
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0b be       	out	0x3b, r0	; 59
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0
    11bc:	1f 90       	pop	r1
    11be:	18 95       	reti

000011c0 <__vector_4>:
    11c0:	1f 92       	push	r1
    11c2:	0f 92       	push	r0
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	0f 92       	push	r0
    11c8:	11 24       	eor	r1, r1
    11ca:	0b b6       	in	r0, 0x3b	; 59
    11cc:	0f 92       	push	r0
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>
    11ec:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <EXTD1+0x1>
    11f0:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <EXTD1+0x2>
    11f4:	06 88       	ldd	r0, Z+22	; 0x16
    11f6:	f7 89       	ldd	r31, Z+23	; 0x17
    11f8:	e0 2d       	mov	r30, r0
    11fa:	63 e0       	ldi	r22, 0x03	; 3
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	8b e5       	ldi	r24, 0x5B	; 91
    1200:	93 e0       	ldi	r25, 0x03	; 3
    1202:	19 95       	eicall
    1204:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    1208:	b1 da       	rcall	.-2718   	; 0x76c <chSchIsPreemptionRequired>
    120a:	81 11       	cpse	r24, r1
    120c:	bf da       	rcall	.-2690   	; 0x78c <chSchDoReschedule>
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0b be       	out	0x3b, r0	; 59
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__vector_5>:
    1234:	1f 92       	push	r1
    1236:	0f 92       	push	r0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	0f 92       	push	r0
    123c:	11 24       	eor	r1, r1
    123e:	0b b6       	in	r0, 0x3b	; 59
    1240:	0f 92       	push	r0
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>
    1260:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <EXTD1+0x1>
    1264:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <EXTD1+0x2>
    1268:	04 8c       	ldd	r0, Z+28	; 0x1c
    126a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    126c:	e0 2d       	mov	r30, r0
    126e:	64 e0       	ldi	r22, 0x04	; 4
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	8b e5       	ldi	r24, 0x5B	; 91
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	19 95       	eicall
    1278:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    127c:	77 da       	rcall	.-2834   	; 0x76c <chSchIsPreemptionRequired>
    127e:	81 11       	cpse	r24, r1
    1280:	85 da       	rcall	.-2806   	; 0x78c <chSchDoReschedule>
    1282:	ff 91       	pop	r31
    1284:	ef 91       	pop	r30
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0b be       	out	0x3b, r0	; 59
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_6>:
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	0b b6       	in	r0, 0x3b	; 59
    12b4:	0f 92       	push	r0
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>
    12d4:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <EXTD1+0x1>
    12d8:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <EXTD1+0x2>
    12dc:	02 a0       	ldd	r0, Z+34	; 0x22
    12de:	f3 a1       	ldd	r31, Z+35	; 0x23
    12e0:	e0 2d       	mov	r30, r0
    12e2:	65 e0       	ldi	r22, 0x05	; 5
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	8b e5       	ldi	r24, 0x5B	; 91
    12e8:	93 e0       	ldi	r25, 0x03	; 3
    12ea:	19 95       	eicall
    12ec:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    12f0:	3d da       	rcall	.-2950   	; 0x76c <chSchIsPreemptionRequired>
    12f2:	81 11       	cpse	r24, r1
    12f4:	4b da       	rcall	.-2922   	; 0x78c <chSchDoReschedule>
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0b be       	out	0x3b, r0	; 59
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <ext_lld_init>:
 *
 * @notapi
 */
void ext_lld_init(void) {
  /* Driver initialization.*/
  extObjectInit(&EXTD1);
    131c:	8b e5       	ldi	r24, 0x5B	; 91
    131e:	93 e0       	ldi	r25, 0x03	; 3
    1320:	0d ce       	rjmp	.-998    	; 0xf3c <extObjectInit>

00001322 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    1322:	fc 01       	movw	r30, r24

#if defined(PORTA) || defined(__DOXYGEN__)
  PORTA = config->porta.out;
    1324:	80 81       	ld	r24, Z
    1326:	82 b9       	out	0x02, r24	; 2
  DDRA = config->porta.dir;
    1328:	81 81       	ldd	r24, Z+1	; 0x01
    132a:	81 b9       	out	0x01, r24	; 1
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
    1330:	83 81       	ldd	r24, Z+3	; 0x03
    1332:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
    1334:	84 81       	ldd	r24, Z+4	; 0x04
    1336:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
    1338:	85 81       	ldd	r24, Z+5	; 0x05
    133a:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
    133c:	86 81       	ldd	r24, Z+6	; 0x06
    133e:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
    1340:	87 81       	ldd	r24, Z+7	; 0x07
    1342:	8a b9       	out	0x0a, r24	; 10
#endif

#if defined(PORTE) || defined(__DOXYGEN__)
  PORTE = config->porte.out;
    1344:	80 85       	ldd	r24, Z+8	; 0x08
    1346:	8e b9       	out	0x0e, r24	; 14
  DDRE = config->porte.dir;
    1348:	81 85       	ldd	r24, Z+9	; 0x09
    134a:	8d b9       	out	0x0d, r24	; 13
#endif

#if defined(PORTF) || defined(__DOXYGEN__)
  PORTF = config->portf.out;
    134c:	82 85       	ldd	r24, Z+10	; 0x0a
    134e:	81 bb       	out	0x11, r24	; 17
  DDRF = config->portf.dir;
    1350:	83 85       	ldd	r24, Z+11	; 0x0b
    1352:	80 bb       	out	0x10, r24	; 16
#endif

#if defined(PORTG) || defined(__DOXYGEN__)
  PORTG = config->portg.out;
    1354:	84 85       	ldd	r24, Z+12	; 0x0c
    1356:	84 bb       	out	0x14, r24	; 20
  DDRG = config->portg.dir;
    1358:	85 85       	ldd	r24, Z+13	; 0x0d
    135a:	83 bb       	out	0x13, r24	; 19
#endif

#if defined(PORTH) || defined(__DOXYGEN__)
  PORTH = config->porth.out;
    135c:	86 85       	ldd	r24, Z+14	; 0x0e
    135e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
  DDRH = config->porth.dir;
    1362:	87 85       	ldd	r24, Z+15	; 0x0f
    1364:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
#endif

#if defined(PORTJ) || defined(__DOXYGEN__)
  PORTJ = config->portj.out;
    1368:	80 89       	ldd	r24, Z+16	; 0x10
    136a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
  DDRJ = config->portj.dir;
    136e:	81 89       	ldd	r24, Z+17	; 0x11
    1370:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
#endif

#if defined(PORTK) || defined(__DOXYGEN__)
  PORTK = config->portk.out;
    1374:	82 89       	ldd	r24, Z+18	; 0x12
    1376:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
  DDRK = config->portk.dir;
    137a:	83 89       	ldd	r24, Z+19	; 0x13
    137c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
#endif

#if defined(PORTL) || defined(__DOXYGEN__)
  PORTL = config->portl.out;
    1380:	84 89       	ldd	r24, Z+20	; 0x14
    1382:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
  DDRL = config->portl.dir;
    1386:	85 89       	ldd	r24, Z+21	; 0x15
    1388:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    138c:	08 95       	ret

0000138e <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
    138e:	fc 01       	movw	r30, r24

  switch (mode) {
    1390:	42 30       	cpi	r20, 0x02	; 2
    1392:	c9 f0       	breq	.+50     	; 0x13c6 <_pal_lld_setgroupmode+0x38>
    1394:	98 f0       	brcs	.+38     	; 0x13bc <_pal_lld_setgroupmode+0x2e>
    1396:	45 30       	cpi	r20, 0x05	; 5
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <_pal_lld_setgroupmode+0x38>
    139a:	46 30       	cpi	r20, 0x06	; 6
    139c:	21 f4       	brne	.+8      	; 0x13a6 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
    139e:	81 81       	ldd	r24, Z+1	; 0x01
    13a0:	68 2b       	or	r22, r24
    13a2:	61 83       	std	Z+1, r22	; 0x01
    13a4:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
    13a6:	43 30       	cpi	r20, 0x03	; 3
    13a8:	e9 f7       	brne	.-6      	; 0x13a4 <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    13aa:	81 81       	ldd	r24, Z+1	; 0x01
    13ac:	96 2f       	mov	r25, r22
    13ae:	90 95       	com	r25
    13b0:	89 23       	and	r24, r25
    13b2:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	68 2b       	or	r22, r24
    13b8:	62 83       	std	Z+2, r22	; 0x02
    break;
    13ba:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
    13bc:	44 23       	and	r20, r20
    13be:	19 f0       	breq	.+6      	; 0x13c6 <_pal_lld_setgroupmode+0x38>
    13c0:	41 30       	cpi	r20, 0x01	; 1
    13c2:	99 f3       	breq	.-26     	; 0x13aa <_pal_lld_setgroupmode+0x1c>
    13c4:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
    13c6:	81 81       	ldd	r24, Z+1	; 0x01
    13c8:	60 95       	com	r22
    13ca:	86 23       	and	r24, r22
    13cc:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	68 23       	and	r22, r24
    13d2:	62 83       	std	Z+2, r22	; 0x02
    break;
    13d4:	08 95       	ret

000013d6 <__vector_17>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	0b b6       	in	r0, 0x3b	; 59
    13e2:	0f 92       	push	r0
    13e4:	2f 93       	push	r18
    13e6:	3f 93       	push	r19
    13e8:	4f 93       	push	r20
    13ea:	5f 93       	push	r21
    13ec:	6f 93       	push	r22
    13ee:	7f 93       	push	r23
    13f0:	8f 93       	push	r24
    13f2:	9f 93       	push	r25
    13f4:	af 93       	push	r26
    13f6:	bf 93       	push	r27
    13f8:	ef 93       	push	r30
    13fa:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
    1402:	0e 94 25 01 	call	0x24a	; 0x24a <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1406:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    140a:	b0 d9       	rcall	.-3232   	; 0x76c <chSchIsPreemptionRequired>
    140c:	81 11       	cpse	r24, r1
    140e:	be d9       	rcall	.-3204   	; 0x78c <chSchDoReschedule>
    1410:	ff 91       	pop	r31
}
    1412:	ef 91       	pop	r30
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	7f 91       	pop	r23
    141e:	6f 91       	pop	r22
    1420:	5f 91       	pop	r21
    1422:	4f 91       	pop	r20
    1424:	3f 91       	pop	r19
    1426:	2f 91       	pop	r18
    1428:	0f 90       	pop	r0
    142a:	0b be       	out	0x3b, r0	; 59
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <st_lld_init>:
    1436:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source */
  TCCR1A     = 0;
  TCCR1B     = _BV(WGM12);
    143a:	e1 e8       	ldi	r30, 0x81	; 129
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	88 e0       	ldi	r24, 0x08	; 8
    1440:	80 83       	st	Z, r24

  /* start disabled */
  TCCR1C     = 0;
    1442:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7c0082>
  OCR1A      = 0;
    1446:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    144a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
  TCNT1      = 0;
    144e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    1452:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
  TIFR_REG   = _BV(OCF1A);                                  /* Reset pending.   */
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
    145a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
  TCCR1B     = PRESCALER;
    145e:	85 e0       	ldi	r24, 0x05	; 5
    1460:	80 83       	st	Z, r24
    1462:	08 95       	ret

00001464 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    1464:	e1 ec       	ldi	r30, 0xC1	; 193
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 62       	ori	r24, 0x20	; 32
    146c:	80 83       	st	Z, r24
    146e:	08 95       	ret

00001470 <__vector_25>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	0b b6       	in	r0, 0x3b	; 59
    147c:	0f 92       	push	r0
    147e:	2f 93       	push	r18
    1480:	3f 93       	push	r19
    1482:	4f 93       	push	r20
    1484:	5f 93       	push	r21
    1486:	6f 93       	push	r22
    1488:	7f 93       	push	r23
    148a:	8f 93       	push	r24
    148c:	9f 93       	push	r25
    148e:	af 93       	push	r26
    1490:	bf 93       	push	r27
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>

  sra = UCSR0A;
    149c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    14a0:	98 2f       	mov	r25, r24
    14a2:	9c 71       	andi	r25, 0x1C	; 28
    14a4:	e9 f4       	brne	.+58     	; 0x14e0 <__vector_25+0x70>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    14a6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    14aa:	8e e5       	ldi	r24, 0x5E	; 94
    14ac:	93 e0       	ldi	r25, 0x03	; 3
    14ae:	9b dd       	rcall	.-1226   	; 0xfe6 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    14b0:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    14b4:	5b d9       	rcall	.-3402   	; 0x76c <chSchIsPreemptionRequired>
    14b6:	81 11       	cpse	r24, r1
    14b8:	69 d9       	rcall	.-3374   	; 0x78c <chSchDoReschedule>
}
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	bf 91       	pop	r27
    14c0:	af 91       	pop	r26
    14c2:	9f 91       	pop	r25
    14c4:	8f 91       	pop	r24
    14c6:	7f 91       	pop	r23
    14c8:	6f 91       	pop	r22
    14ca:	5f 91       	pop	r21
    14cc:	4f 91       	pop	r20
    14ce:	3f 91       	pop	r19
    14d0:	2f 91       	pop	r18
    14d2:	0f 90       	pop	r0
    14d4:	0b be       	out	0x3b, r0	; 59
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    14e0:	83 fd       	sbrc	r24, 3
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <__vector_25+0x86>
/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    14e4:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    14e6:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    14e8:	60 62       	ori	r22, 0x20	; 32
  if (sra & fe)
    14ea:	84 fd       	sbrc	r24, 4
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    14ec:	60 64       	ori	r22, 0x40	; 64
    14ee:	80 e6       	ldi	r24, 0x60	; 96
    14f0:	93 e0       	ldi	r25, 0x03	; 3
    14f2:	9f da       	rcall	.-2754   	; 0xa32 <chEvtBroadcastFlagsI>
    14f4:	d8 cf       	rjmp	.-80     	; 0x14a6 <__vector_25+0x36>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    14f6:	60 e8       	ldi	r22, 0x80	; 128
    14f8:	f6 cf       	rjmp	.-20     	; 0x14e6 <__vector_25+0x76>

000014fa <__vector_26>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	0b b6       	in	r0, 0x3b	; 59
    1506:	0f 92       	push	r0
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    1526:	8e e5       	ldi	r24, 0x5E	; 94
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	81 dd       	rcall	.-1278   	; 0x102e <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    152c:	97 fd       	sbrc	r25, 7
    152e:	1a c0       	rjmp	.+52     	; 0x1564 <__vector_26+0x6a>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    1530:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

  OSAL_IRQ_EPILOGUE();
    1534:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__avr_in_isr>
    1538:	19 d9       	rcall	.-3534   	; 0x76c <chSchIsPreemptionRequired>
    153a:	81 11       	cpse	r24, r1
    153c:	27 d9       	rcall	.-3506   	; 0x78c <chSchDoReschedule>
}
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0b be       	out	0x3b, r0	; 59
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    1564:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    1568:	8f 7d       	andi	r24, 0xDF	; 223
    156a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    156e:	e2 cf       	rjmp	.-60     	; 0x1534 <__vector_26+0x3a>

00001570 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    1570:	42 e3       	ldi	r20, 0x32	; 50
    1572:	5a e0       	ldi	r21, 0x0A	; 10
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	8e e5       	ldi	r24, 0x5E	; 94
    157a:	93 e0       	ldi	r25, 0x03	; 3
    157c:	fe cc       	rjmp	.-1540   	; 0xf7a <sdObjectInit>

0000157e <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    157e:	61 15       	cp	r22, r1
    1580:	71 05       	cpc	r23, r1
    1582:	19 f1       	breq	.+70     	; 0x15ca <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    1584:	8e 55       	subi	r24, 0x5E	; 94
    1586:	93 40       	sbci	r25, 0x03	; 3
    1588:	09 f0       	breq	.+2      	; 0x158c <sd_lld_start+0xe>
    158a:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    158c:	fb 01       	movw	r30, r22
    158e:	80 81       	ld	r24, Z
    1590:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    1594:	81 81       	ldd	r24, Z+1	; 0x01
    1596:	8f 70       	andi	r24, 0x0F	; 15
    1598:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
  UCSR0A = (1 << U2X0);
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    15a2:	88 e9       	ldi	r24, 0x98	; 152
    15a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
  switch (config->sc_bits_per_char) {
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	b9 f0       	breq	.+46     	; 0x15dc <sd_lld_start+0x5e>
    15ae:	a0 f0       	brcs	.+40     	; 0x15d8 <sd_lld_start+0x5a>
    15b0:	82 30       	cpi	r24, 0x02	; 2
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <sd_lld_start+0x52>
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	71 f4       	brne	.+28     	; 0x15d4 <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    15b8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    15bc:	84 60       	ori	r24, 0x04	; 4
    15be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    15c2:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    15c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
    15c8:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    15ca:	68 e3       	ldi	r22, 0x38	; 56
    15cc:	72 e0       	ldi	r23, 0x02	; 2
    15ce:	da cf       	rjmp	.-76     	; 0x1584 <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	f8 cf       	rjmp	.-16     	; 0x15c4 <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    15d4:	86 e0       	ldi	r24, 0x06	; 6
    15d6:	f6 cf       	rjmp	.-20     	; 0x15c4 <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	f4 cf       	rjmp	.-24     	; 0x15c4 <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	f2 cf       	rjmp	.-28     	; 0x15c4 <sd_lld_start+0x46>

000015e0 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    15e0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
  EICRB  = 0x00;
    15e4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
  EIMSK  = 0x00;
    15e8:	1d ba       	out	0x1d, r1	; 29
    15ea:	08 95       	ret

000015ec <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    15ec:	2f 92       	push	r2
    15ee:	3f 92       	push	r3
    15f0:	4f 92       	push	r4
    15f2:	5f 92       	push	r5
    15f4:	6f 92       	push	r6
    15f6:	7f 92       	push	r7
    15f8:	8f 92       	push	r8
    15fa:	9f 92       	push	r9
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	cf 92       	push	r12
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	c7 54       	subi	r28, 0x47	; 71
    1616:	d1 09       	sbc	r29, r1
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	1c 01       	movw	r2, r24
    1624:	6b 01       	movw	r12, r22
    1626:	5d a3       	std	Y+37, r21	; 0x25
    1628:	4c a3       	std	Y+36, r20	; 0x24
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    162a:	1b a2       	std	Y+35, r1	; 0x23
    162c:	1a a2       	std	Y+34, r1	; 0x22
    162e:	9e 01       	movw	r18, r28
    1630:	2e 5f       	subi	r18, 0xFE	; 254
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	39 8f       	std	Y+25, r19	; 0x19
    1636:	28 8f       	std	Y+24, r18	; 0x18
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	9b 8f       	std	Y+27, r25	; 0x1b
    163e:	8a 8f       	std	Y+26, r24	; 0x1a
    1640:	28 1b       	sub	r18, r24
    1642:	39 0b       	sbc	r19, r25
    1644:	39 ab       	std	Y+49, r19	; 0x31
    1646:	28 ab       	std	Y+48, r18	; 0x30
    1648:	21 50       	subi	r18, 0x01	; 1
    164a:	31 09       	sbc	r19, r1
    164c:	3d ab       	std	Y+53, r19	; 0x35
    164e:	2c ab       	std	Y+52, r18	; 0x34
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1650:	de 01       	movw	r26, r28
    1652:	1c 96       	adiw	r26, 0x0c	; 12
    1654:	bd 8f       	std	Y+29, r27	; 0x1d
    1656:	ac 8f       	std	Y+28, r26	; 0x1c
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1658:	86 01       	movw	r16, r12
    165a:	0f 5f       	subi	r16, 0xFF	; 255
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	f6 01       	movw	r30, r12
    1660:	60 81       	ld	r22, Z
    if (c == 0)
    1662:	66 23       	and	r22, r22
    1664:	b9 f0       	breq	.+46     	; 0x1694 <chvprintf+0xa8>
      return n;
    if (c != '%') {
    1666:	65 32       	cpi	r22, 0x25	; 37
    1668:	89 f1       	breq	.+98     	; 0x16cc <chvprintf+0xe0>
      streamPut(chp, (uint8_t)c);
    166a:	d1 01       	movw	r26, r2
    166c:	ed 91       	ld	r30, X+
    166e:	fc 91       	ld	r31, X
    1670:	04 80       	ldd	r0, Z+4	; 0x04
    1672:	f5 81       	ldd	r31, Z+5	; 0x05
    1674:	e0 2d       	mov	r30, r0
    1676:	c1 01       	movw	r24, r2
    1678:	19 95       	eicall
      n++;
    167a:	ea a1       	ldd	r30, Y+34	; 0x22
    167c:	fb a1       	ldd	r31, Y+35	; 0x23
    167e:	31 96       	adiw	r30, 0x01	; 1
    1680:	fb a3       	std	Y+35, r31	; 0x23
    1682:	ea a3       	std	Y+34, r30	; 0x22
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1684:	68 01       	movw	r12, r16
    1686:	86 01       	movw	r16, r12
    1688:	0f 5f       	subi	r16, 0xFF	; 255
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	f6 01       	movw	r30, r12
    168e:	60 81       	ld	r22, Z
    if (c == 0)
    1690:	61 11       	cpse	r22, r1
    1692:	e9 cf       	rjmp	.-46     	; 0x1666 <chvprintf+0x7a>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    1694:	8a a1       	ldd	r24, Y+34	; 0x22
    1696:	9b a1       	ldd	r25, Y+35	; 0x23
    1698:	c9 5b       	subi	r28, 0xB9	; 185
    169a:	df 4f       	sbci	r29, 0xFF	; 255
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	bf 90       	pop	r11
    16b8:	af 90       	pop	r10
    16ba:	9f 90       	pop	r9
    16bc:	8f 90       	pop	r8
    16be:	7f 90       	pop	r7
    16c0:	6f 90       	pop	r6
    16c2:	5f 90       	pop	r5
    16c4:	4f 90       	pop	r4
    16c6:	3f 90       	pop	r3
    16c8:	2f 90       	pop	r2
    16ca:	08 95       	ret
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	9d 32       	cpi	r25, 0x2D	; 45
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <chvprintf+0xe8>
    16d2:	e7 c0       	rjmp	.+462    	; 0x18a2 <chvprintf+0x2b6>
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    16d4:	19 a6       	std	Y+41, r1	; 0x29
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
    16d6:	90 33       	cpi	r25, 0x30	; 48
    16d8:	09 f4       	brne	.+2      	; 0x16dc <chvprintf+0xf0>
    16da:	dc c0       	rjmp	.+440    	; 0x1894 <chvprintf+0x2a8>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    16dc:	20 e2       	ldi	r18, 0x20	; 32
    16de:	28 a7       	std	Y+40, r18	; 0x28
    16e0:	a8 01       	movw	r20, r16
    16e2:	4f 5f       	subi	r20, 0xFF	; 255
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
    16e6:	e1 2c       	mov	r14, r1
    16e8:	f1 2c       	mov	r15, r1
    16ea:	ec a1       	ldd	r30, Y+36	; 0x24
    16ec:	fd a1       	ldd	r31, Y+37	; 0x25
    16ee:	13 c0       	rjmp	.+38     	; 0x1716 <chvprintf+0x12a>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
    16f0:	80 81       	ld	r24, Z
    16f2:	32 96       	adiw	r30, 0x02	; 2
      else
        break;
      width = width * 10 + c;
    16f4:	97 01       	movw	r18, r14
    16f6:	22 0f       	add	r18, r18
    16f8:	33 1f       	adc	r19, r19
    16fa:	ee 0c       	add	r14, r14
    16fc:	ff 1c       	adc	r15, r15
    16fe:	ee 0c       	add	r14, r14
    1700:	ff 1c       	adc	r15, r15
    1702:	ee 0c       	add	r14, r14
    1704:	ff 1c       	adc	r15, r15
    1706:	e2 0e       	add	r14, r18
    1708:	f3 1e       	adc	r15, r19
    170a:	e8 0e       	add	r14, r24
    170c:	f1 1c       	adc	r15, r1
    170e:	4f 5f       	subi	r20, 0xFF	; 255
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	d6 01       	movw	r26, r12
    1714:	9c 91       	ld	r25, X
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
    1716:	6a 01       	movw	r12, r20
      if (c >= '0' && c <= '9')
    1718:	80 ed       	ldi	r24, 0xD0	; 208
    171a:	89 0f       	add	r24, r25
    171c:	8a 30       	cpi	r24, 0x0A	; 10
    171e:	50 f3       	brcs	.-44     	; 0x16f4 <chvprintf+0x108>
        c -= '0';
      else if (c == '*')
    1720:	9a 32       	cpi	r25, 0x2A	; 42
    1722:	31 f3       	breq	.-52     	; 0x16f0 <chvprintf+0x104>
    1724:	fd a3       	std	Y+37, r31	; 0x25
    1726:	ec a3       	std	Y+36, r30	; 0x24
    1728:	00 e0       	ldi	r16, 0x00	; 0
    172a:	10 e0       	ldi	r17, 0x00	; 0
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
    172c:	9e 32       	cpi	r25, 0x2E	; 46
    172e:	09 f4       	brne	.+2      	; 0x1732 <chvprintf+0x146>
    1730:	91 c0       	rjmp	.+290    	; 0x1854 <chvprintf+0x268>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    1732:	89 2f       	mov	r24, r25
    1734:	8f 7d       	andi	r24, 0xDF	; 223
    1736:	8c 34       	cpi	r24, 0x4C	; 76
    1738:	09 f4       	brne	.+2      	; 0x173c <chvprintf+0x150>
    173a:	79 c0       	rjmp	.+242    	; 0x182e <chvprintf+0x242>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
    173c:	3f eb       	ldi	r19, 0xBF	; 191
    173e:	39 0f       	add	r19, r25
    1740:	21 e0       	ldi	r18, 0x01	; 1
    1742:	3a 31       	cpi	r19, 0x1A	; 26
    1744:	08 f0       	brcs	.+2      	; 0x1748 <chvprintf+0x15c>
    1746:	20 e0       	ldi	r18, 0x00	; 0

    /* Command decoding.*/
    switch (c) {
    1748:	49 2f       	mov	r20, r25
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	fa 01       	movw	r30, r20
    174e:	e4 54       	subi	r30, 0x44	; 68
    1750:	f1 09       	sbc	r31, r1
    1752:	e5 33       	cpi	r30, 0x35	; 53
    1754:	f1 05       	cpc	r31, r1
    1756:	08 f4       	brcc	.+2      	; 0x175a <chvprintf+0x16e>
    1758:	ab c0       	rjmp	.+342    	; 0x18b0 <chvprintf+0x2c4>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    175a:	99 83       	std	Y+1, r25	; 0x01
    175c:	e8 a9       	ldd	r30, Y+48	; 0x30
    175e:	f9 a9       	ldd	r31, Y+49	; 0x31
      break;
    1760:	8c a8       	ldd	r8, Y+52	; 0x34
    1762:	9d a8       	ldd	r9, Y+53	; 0x35
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	5c 01       	movw	r10, r24
    176a:	87 01       	movw	r16, r14
    176c:	0e 1b       	sub	r16, r30
    176e:	1f 0b       	sbc	r17, r31
    1770:	17 fd       	sbrc	r17, 7
    1772:	d7 c0       	rjmp	.+430    	; 0x1922 <chvprintf+0x336>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1774:	99 a5       	ldd	r25, Y+41	; 0x29
    1776:	91 11       	cpse	r25, r1
    1778:	57 c0       	rjmp	.+174    	; 0x1828 <chvprintf+0x23c>
      width = -width;
    177a:	ee 24       	eor	r14, r14
    177c:	ff 24       	eor	r15, r15
    177e:	e0 1a       	sub	r14, r16
    1780:	f1 0a       	sbc	r15, r17
    if (width < 0) {
    1782:	09 f4       	brne	.+2      	; 0x1786 <chvprintf+0x19a>
    1784:	80 c2       	rjmp	.+1280   	; 0x1c86 <chvprintf+0x69a>
      if (*s == '-' && filler == '0') {
    1786:	d5 01       	movw	r26, r10
    1788:	8c 91       	ld	r24, X
    178a:	8d 32       	cpi	r24, 0x2D	; 45
    178c:	09 f4       	brne	.+2      	; 0x1790 <chvprintf+0x1a4>
    178e:	86 c2       	rjmp	.+1292   	; 0x1c9c <chvprintf+0x6b0>
    1790:	78 a4       	ldd	r7, Y+40	; 0x28
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    1792:	d1 01       	movw	r26, r2
    1794:	ed 91       	ld	r30, X+
    1796:	fc 91       	ld	r31, X
    1798:	04 80       	ldd	r0, Z+4	; 0x04
    179a:	f5 81       	ldd	r31, Z+5	; 0x05
    179c:	e0 2d       	mov	r30, r0
    179e:	67 2d       	mov	r22, r7
    17a0:	c1 01       	movw	r24, r2
    17a2:	19 95       	eicall
        n++;
      } while (++width != 0);
    17a4:	bf ef       	ldi	r27, 0xFF	; 255
    17a6:	eb 1a       	sub	r14, r27
    17a8:	fb 0a       	sbc	r15, r27
    17aa:	99 f7       	brne	.-26     	; 0x1792 <chvprintf+0x1a6>
    17ac:	2a a1       	ldd	r18, Y+34	; 0x22
    17ae:	3b a1       	ldd	r19, Y+35	; 0x23
    17b0:	20 0f       	add	r18, r16
    17b2:	31 1f       	adc	r19, r17
    17b4:	3b a3       	std	Y+35, r19	; 0x23
    17b6:	2a a3       	std	Y+34, r18	; 0x22
    }
    while (--i >= 0) {
    17b8:	97 fc       	sbrc	r9, 7
    17ba:	4e cf       	rjmp	.-356    	; 0x1658 <chvprintf+0x6c>
    17bc:	00 e0       	ldi	r16, 0x00	; 0
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	74 01       	movw	r14, r8
      streamPut(chp, (uint8_t)*s++);
    17c2:	f5 01       	movw	r30, r10
    17c4:	61 91       	ld	r22, Z+
    17c6:	5f 01       	movw	r10, r30
    17c8:	d1 01       	movw	r26, r2
    17ca:	ed 91       	ld	r30, X+
    17cc:	fc 91       	ld	r31, X
    17ce:	04 80       	ldd	r0, Z+4	; 0x04
    17d0:	f5 81       	ldd	r31, Z+5	; 0x05
    17d2:	e0 2d       	mov	r30, r0
    17d4:	c1 01       	movw	r24, r2
    17d6:	19 95       	eicall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    17d8:	b1 e0       	ldi	r27, 0x01	; 1
    17da:	eb 1a       	sub	r14, r27
    17dc:	f1 08       	sbc	r15, r1
    17de:	88 f7       	brcc	.-30     	; 0x17c2 <chvprintf+0x1d6>
    17e0:	8a a1       	ldd	r24, Y+34	; 0x22
    17e2:	9b a1       	ldd	r25, Y+35	; 0x23
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	97 fc       	sbrc	r9, 7
    17e8:	56 c2       	rjmp	.+1196   	; 0x1c96 <chvprintf+0x6aa>
    17ea:	94 01       	movw	r18, r8
    17ec:	28 0f       	add	r18, r24
    17ee:	39 1f       	adc	r19, r25
    17f0:	3b a3       	std	Y+35, r19	; 0x23
    17f2:	2a a3       	std	Y+34, r18	; 0x22
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    17f4:	01 15       	cp	r16, r1
    17f6:	11 05       	cpc	r17, r1
    17f8:	09 f4       	brne	.+2      	; 0x17fc <chvprintf+0x210>
    17fa:	2e cf       	rjmp	.-420    	; 0x1658 <chvprintf+0x6c>
    17fc:	78 01       	movw	r14, r16
    17fe:	b8 a4       	ldd	r11, Y+40	; 0x28
      streamPut(chp, (uint8_t)filler);
    1800:	d1 01       	movw	r26, r2
    1802:	ed 91       	ld	r30, X+
    1804:	fc 91       	ld	r31, X
    1806:	04 80       	ldd	r0, Z+4	; 0x04
    1808:	f5 81       	ldd	r31, Z+5	; 0x05
    180a:	e0 2d       	mov	r30, r0
    180c:	6b 2d       	mov	r22, r11
    180e:	c1 01       	movw	r24, r2
    1810:	19 95       	eicall
      n++;
      width--;
    1812:	b1 e0       	ldi	r27, 0x01	; 1
    1814:	eb 1a       	sub	r14, r27
    1816:	f1 08       	sbc	r15, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1818:	99 f7       	brne	.-26     	; 0x1800 <chvprintf+0x214>
    181a:	ea a1       	ldd	r30, Y+34	; 0x22
    181c:	fb a1       	ldd	r31, Y+35	; 0x23
    181e:	e0 0f       	add	r30, r16
    1820:	f1 1f       	adc	r31, r17
    1822:	fb a3       	std	Y+35, r31	; 0x23
    1824:	ea a3       	std	Y+34, r30	; 0x22
    1826:	18 cf       	rjmp	.-464    	; 0x1658 <chvprintf+0x6c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1828:	97 fe       	sbrs	r9, 7
    182a:	ca cf       	rjmp	.-108    	; 0x17c0 <chvprintf+0x1d4>
    182c:	e3 cf       	rjmp	.-58     	; 0x17f4 <chvprintf+0x208>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
    182e:	d6 01       	movw	r26, r12
    1830:	2c 91       	ld	r18, X
    1832:	22 23       	and	r18, r18
    1834:	09 f4       	brne	.+2      	; 0x1838 <chvprintf+0x24c>
    1836:	91 cf       	rjmp	.-222    	; 0x175a <chvprintf+0x16e>
        c = *fmt++;
    1838:	ff ef       	ldi	r31, 0xFF	; 255
    183a:	cf 1a       	sub	r12, r31
    183c:	df 0a       	sbc	r13, r31
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    183e:	82 2f       	mov	r24, r18
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	fc 01       	movw	r30, r24
    1844:	e4 54       	subi	r30, 0x44	; 68
    1846:	f1 09       	sbc	r31, r1
    1848:	e5 33       	cpi	r30, 0x35	; 53
    184a:	f1 05       	cpc	r31, r1
    184c:	08 f4       	brcc	.+2      	; 0x1850 <chvprintf+0x264>
    184e:	1e c2       	rjmp	.+1084   	; 0x1c8c <chvprintf+0x6a0>
    1850:	92 2f       	mov	r25, r18
    1852:	83 cf       	rjmp	.-250    	; 0x175a <chvprintf+0x16e>
    1854:	df 01       	movw	r26, r30
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <chvprintf+0x28a>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
    1858:	8c 91       	ld	r24, X
    185a:	12 96       	adiw	r26, 0x02	; 2
        else
          break;
        precision *= 10;
    185c:	98 01       	movw	r18, r16
    185e:	22 0f       	add	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	00 0f       	add	r16, r16
    1864:	11 1f       	adc	r17, r17
    1866:	00 0f       	add	r16, r16
    1868:	11 1f       	adc	r17, r17
    186a:	00 0f       	add	r16, r16
    186c:	11 1f       	adc	r17, r17
    186e:	02 0f       	add	r16, r18
    1870:	13 1f       	adc	r17, r19
        precision += c;
    1872:	08 0f       	add	r16, r24
    1874:	11 1d       	adc	r17, r1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
    1876:	ef ef       	ldi	r30, 0xFF	; 255
    1878:	ce 1a       	sub	r12, r30
    187a:	de 0a       	sbc	r13, r30
    187c:	f6 01       	movw	r30, r12
    187e:	31 97       	sbiw	r30, 0x01	; 1
    1880:	90 81       	ld	r25, Z
        if (c >= '0' && c <= '9')
    1882:	80 ed       	ldi	r24, 0xD0	; 208
    1884:	89 0f       	add	r24, r25
    1886:	8a 30       	cpi	r24, 0x0A	; 10
    1888:	48 f3       	brcs	.-46     	; 0x185c <chvprintf+0x270>
          c -= '0';
        else if (c == '*')
    188a:	9a 32       	cpi	r25, 0x2A	; 42
    188c:	29 f3       	breq	.-54     	; 0x1858 <chvprintf+0x26c>
    188e:	bd a3       	std	Y+37, r27	; 0x25
    1890:	ac a3       	std	Y+36, r26	; 0x24
    1892:	4f cf       	rjmp	.-354    	; 0x1732 <chvprintf+0x146>
    1894:	f8 01       	movw	r30, r16
    1896:	91 81       	ldd	r25, Z+1	; 0x01
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
    1898:	0f 5f       	subi	r16, 0xFF	; 255
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    189c:	f0 e3       	ldi	r31, 0x30	; 48
    189e:	f8 a7       	std	Y+40, r31	; 0x28
    18a0:	1f cf       	rjmp	.-450    	; 0x16e0 <chvprintf+0xf4>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
    18a2:	86 01       	movw	r16, r12
    18a4:	0e 5f       	subi	r16, 0xFE	; 254
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	92 81       	ldd	r25, Z+2	; 0x02
      left_align = TRUE;
    18aa:	b1 e0       	ldi	r27, 0x01	; 1
    18ac:	b9 a7       	std	Y+41, r27	; 0x29
    18ae:	13 cf       	rjmp	.-474    	; 0x16d6 <chvprintf+0xea>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    18b0:	88 27       	eor	r24, r24
    18b2:	ee 58       	subi	r30, 0x8E	; 142
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	8f 4f       	sbci	r24, 0xFF	; 255
    18b8:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__tablejump2__>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    18bc:	8c a1       	ldd	r24, Y+36	; 0x24
    18be:	9d a1       	ldd	r25, Y+37	; 0x25
    18c0:	02 96       	adiw	r24, 0x02	; 2
    18c2:	ac a1       	ldd	r26, Y+36	; 0x24
    18c4:	bd a1       	ldd	r27, Y+37	; 0x25
    18c6:	ad 90       	ld	r10, X+
    18c8:	bc 90       	ld	r11, X
    18ca:	a1 14       	cp	r10, r1
    18cc:	b1 04       	cpc	r11, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <chvprintf+0x2e6>
    18d0:	c3 c2       	rjmp	.+1414   	; 0x1e58 <chvprintf+0x86c>
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    18d2:	f5 01       	movw	r30, r10
    18d4:	20 81       	ld	r18, Z
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
    18d6:	01 15       	cp	r16, r1
    18d8:	11 05       	cpc	r17, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <chvprintf+0x2f2>
    18dc:	f9 c1       	rjmp	.+1010   	; 0x1cd0 <chvprintf+0x6e4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    18de:	22 23       	and	r18, r18
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <chvprintf+0x2f8>
    18e2:	bf c2       	rjmp	.+1406   	; 0x1e62 <chvprintf+0x876>
    18e4:	01 50       	subi	r16, 0x01	; 1
    18e6:	11 09       	sbc	r17, r1
    18e8:	f5 01       	movw	r30, r10
    18ea:	31 96       	adiw	r30, 0x01	; 1
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <chvprintf+0x30c>
    18ee:	01 50       	subi	r16, 0x01	; 1
    18f0:	11 09       	sbc	r17, r1
    18f2:	08 f4       	brcc	.+2      	; 0x18f6 <chvprintf+0x30a>
    18f4:	96 c2       	rjmp	.+1324   	; 0x1e22 <chvprintf+0x836>
    18f6:	fa 01       	movw	r30, r20
    18f8:	af 01       	movw	r20, r30
    18fa:	4f 5f       	subi	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	20 81       	ld	r18, Z
    1900:	21 11       	cpse	r18, r1
    1902:	f5 cf       	rjmp	.-22     	; 0x18ee <chvprintf+0x302>
    1904:	ea 19       	sub	r30, r10
    1906:	fb 09       	sbc	r31, r11
    1908:	4f 01       	movw	r8, r30
    190a:	21 e0       	ldi	r18, 0x01	; 1
    190c:	82 1a       	sub	r8, r18
    190e:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1910:	9d a3       	std	Y+37, r25	; 0x25
    1912:	8c a3       	std	Y+36, r24	; 0x24
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1914:	30 e2       	ldi	r19, 0x20	; 32
    1916:	38 a7       	std	Y+40, r19	; 0x28
    1918:	87 01       	movw	r16, r14
    191a:	0e 1b       	sub	r16, r30
    191c:	1f 0b       	sbc	r17, r31
    191e:	17 ff       	sbrs	r17, 7
    1920:	29 cf       	rjmp	.-430    	; 0x1774 <chvprintf+0x188>
    1922:	00 e0       	ldi	r16, 0x00	; 0
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	26 cf       	rjmp	.-436    	; 0x1774 <chvprintf+0x188>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
    1928:	ec a1       	ldd	r30, Y+36	; 0x24
    192a:	fd a1       	ldd	r31, Y+37	; 0x25
    192c:	34 96       	adiw	r30, 0x04	; 4
    192e:	fd af       	std	Y+61, r31	; 0x3d
    1930:	ec af       	std	Y+60, r30	; 0x3c
    1932:	ac a1       	ldd	r26, Y+36	; 0x24
    1934:	bd a1       	ldd	r27, Y+37	; 0x25
    1936:	8d 91       	ld	r24, X+
    1938:	9d 91       	ld	r25, X+
    193a:	0d 90       	ld	r0, X+
    193c:	bc 91       	ld	r27, X
    193e:	a0 2d       	mov	r26, r0
    1940:	8c a3       	std	Y+36, r24	; 0x24
    1942:	9d a3       	std	Y+37, r25	; 0x25
    1944:	ae a3       	std	Y+38, r26	; 0x26
    1946:	bf a3       	std	Y+39, r27	; 0x27
      if (f < 0) {
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	a9 01       	movw	r20, r18
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	88 d6       	rcall	.+3344   	; 0x2664 <__cmpsf2>
    1954:	87 fd       	sbrc	r24, 7
    1956:	70 c2       	rjmp	.+1248   	; 0x1e38 <chvprintf+0x84c>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    1958:	fe 01       	movw	r30, r28
    195a:	31 96       	adiw	r30, 0x01	; 1
    195c:	ff a7       	std	Y+47, r31	; 0x2f
    195e:	ee a7       	std	Y+46, r30	; 0x2e
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    1960:	01 2e       	mov	r0, r17
    1962:	00 0c       	add	r0, r0
    1964:	22 0b       	sbc	r18, r18
    1966:	33 0b       	sbc	r19, r19
    1968:	01 50       	subi	r16, 0x01	; 1
    196a:	11 09       	sbc	r17, r1
    196c:	21 09       	sbc	r18, r1
    196e:	31 09       	sbc	r19, r1
    1970:	09 30       	cpi	r16, 0x09	; 9
    1972:	11 05       	cpc	r17, r1
    1974:	21 05       	cpc	r18, r1
    1976:	31 05       	cpc	r19, r1
    1978:	08 f0       	brcs	.+2      	; 0x197c <chvprintf+0x390>
    197a:	39 c2       	rjmp	.+1138   	; 0x1dee <chvprintf+0x802>
    197c:	00 0f       	add	r16, r16
    197e:	11 1f       	adc	r17, r17
    1980:	00 0f       	add	r16, r16
    1982:	11 1f       	adc	r17, r17
    1984:	f8 01       	movw	r30, r16
    1986:	e8 5a       	subi	r30, 0xA8	; 168
    1988:	fd 4f       	sbci	r31, 0xFD	; 253
    198a:	80 80       	ld	r8, Z
    198c:	91 80       	ldd	r9, Z+1	; 0x01
    198e:	a2 80       	ldd	r10, Z+2	; 0x02
    1990:	b3 80       	ldd	r11, Z+3	; 0x03
    1992:	c5 01       	movw	r24, r10
    1994:	b4 01       	movw	r22, r8
    1996:	9b d6       	rcall	.+3382   	; 0x26ce <__floatunsisf>
    1998:	28 96       	adiw	r28, 0x08	; 8
    199a:	6c af       	std	Y+60, r22	; 0x3c
    199c:	7d af       	std	Y+61, r23	; 0x3d
    199e:	8e af       	std	Y+62, r24	; 0x3e
    19a0:	9f af       	std	Y+63, r25	; 0x3f
    19a2:	28 97       	sbiw	r28, 0x08	; 8
    19a4:	c5 01       	movw	r24, r10
    19a6:	b4 01       	movw	r22, r8
    19a8:	2a e0       	ldi	r18, 0x0A	; 10
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	a3 d7       	rcall	.+3910   	; 0x28f8 <__udivmodsi4>
    19b2:	28 af       	std	Y+56, r18	; 0x38
    19b4:	39 af       	std	Y+57, r19	; 0x39
    19b6:	4a af       	std	Y+58, r20	; 0x3a
    19b8:	5b af       	std	Y+59, r21	; 0x3b
    19ba:	29 01       	movw	r4, r18
    19bc:	3a 01       	movw	r6, r20
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
    19be:	6c a1       	ldd	r22, Y+36	; 0x24
    19c0:	7d a1       	ldd	r23, Y+37	; 0x25
    19c2:	8e a1       	ldd	r24, Y+38	; 0x26
    19c4:	9f a1       	ldd	r25, Y+39	; 0x27
    19c6:	52 d6       	rcall	.+3236   	; 0x266c <__fixsfsi>
    19c8:	6a a7       	std	Y+42, r22	; 0x2a
    19ca:	7c a7       	std	Y+44, r23	; 0x2c
    19cc:	8a ab       	std	Y+50, r24	; 0x32
    19ce:	9b ab       	std	Y+51, r25	; 0x33
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    19d0:	ae a5       	ldd	r26, Y+46	; 0x2e
    19d2:	bf a5       	ldd	r27, Y+47	; 0x2f
    19d4:	1b 96       	adiw	r26, 0x0b	; 11
    19d6:	bf ab       	std	Y+55, r27	; 0x37
    19d8:	ae ab       	std	Y+54, r26	; 0x36
    19da:	4b 01       	movw	r8, r22
    19dc:	5c 01       	movw	r10, r24
                                         long divisor) {
  int i;
  char *q;
  long l, ll;

  l = num;
    19de:	85 01       	movw	r16, r10
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    19e0:	bf 8f       	std	Y+31, r27	; 0x1f
    19e2:	ae 8f       	std	Y+30, r26	; 0x1e
    19e4:	ff ae       	std	Y+63, r15	; 0x3f
    19e6:	ee ae       	std	Y+62, r14	; 0x3e
    19e8:	22 96       	adiw	r28, 0x02	; 2
    19ea:	3f ae       	std	Y+63, r3	; 0x3f
    19ec:	2e ae       	std	Y+62, r2	; 0x3e
    19ee:	22 97       	sbiw	r28, 0x02	; 2
    19f0:	24 96       	adiw	r28, 0x04	; 4
    19f2:	df ae       	std	Y+63, r13	; 0x3f
    19f4:	ce ae       	std	Y+62, r12	; 0x3e
    19f6:	24 97       	sbiw	r28, 0x04	; 4
    19f8:	fa 2c       	mov	r15, r10
    19fa:	09 2d       	mov	r16, r9
    19fc:	d1 2e       	mov	r13, r17
    19fe:	16 2f       	mov	r17, r22
  do {
    i = (int)(l % radix);
    1a00:	61 2f       	mov	r22, r17
    1a02:	70 2f       	mov	r23, r16
    1a04:	8f 2d       	mov	r24, r15
    1a06:	9d 2d       	mov	r25, r13
    1a08:	2a e0       	ldi	r18, 0x0A	; 10
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	95 d7       	rcall	.+3882   	; 0x293c <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1a12:	60 5d       	subi	r22, 0xD0	; 208
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	36 2e       	mov	r3, r22
    1a18:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1a1a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1a1c:	62 93       	st	-Z, r22
    1a1e:	ff 8f       	std	Y+31, r31	; 0x1f
    1a20:	ee 8f       	std	Y+30, r30	; 0x1e
    l /= radix;
    1a22:	12 2f       	mov	r17, r18
    1a24:	03 2f       	mov	r16, r19
    1a26:	f4 2e       	mov	r15, r20
    1a28:	d5 2e       	mov	r13, r21
  } while ((ll /= radix) != 0);
    1a2a:	c5 01       	movw	r24, r10
    1a2c:	b4 01       	movw	r22, r8
    1a2e:	2a e0       	ldi	r18, 0x0A	; 10
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	82 d7       	rcall	.+3844   	; 0x293c <__divmodsi4>
    1a38:	49 01       	movw	r8, r18
    1a3a:	5a 01       	movw	r10, r20
    1a3c:	23 2b       	or	r18, r19
    1a3e:	24 2b       	or	r18, r20
    1a40:	25 2b       	or	r18, r21
    1a42:	f1 f6       	brne	.-68     	; 0x1a00 <chvprintf+0x414>
    1a44:	ee ac       	ldd	r14, Y+62	; 0x3e
    1a46:	ff ac       	ldd	r15, Y+63	; 0x3f
    1a48:	83 2d       	mov	r24, r3
    1a4a:	22 96       	adiw	r28, 0x02	; 2
    1a4c:	2e ac       	ldd	r2, Y+62	; 0x3e
    1a4e:	3f ac       	ldd	r3, Y+63	; 0x3f
    1a50:	22 97       	sbiw	r28, 0x02	; 2
    1a52:	24 96       	adiw	r28, 0x04	; 4
    1a54:	ce ac       	ldd	r12, Y+62	; 0x3e
    1a56:	df ac       	ldd	r13, Y+63	; 0x3f
    1a58:	24 97       	sbiw	r28, 0x04	; 4
    1a5a:	ee a5       	ldd	r30, Y+46	; 0x2e
    1a5c:	ff a5       	ldd	r31, Y+47	; 0x2f
    1a5e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1a60:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1a62:	11 96       	adiw	r26, 0x01	; 1
    1a64:	0e a9       	ldd	r16, Y+54	; 0x36
    1a66:	1f a9       	ldd	r17, Y+55	; 0x37
    1a68:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1a6a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1a6c:	02 1b       	sub	r16, r18
    1a6e:	13 0b       	sbc	r17, r19
    1a70:	0e 0f       	add	r16, r30
    1a72:	1f 1f       	adc	r17, r31
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <chvprintf+0x48c>
    1a76:	8d 91       	ld	r24, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    1a78:	81 93       	st	Z+, r24
  while (--i);
    1a7a:	e0 17       	cp	r30, r16
    1a7c:	f1 07       	cpc	r31, r17
    1a7e:	d9 f7       	brne	.-10     	; 0x1a76 <chvprintf+0x48a>
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
    1a80:	c8 01       	movw	r24, r16
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	9f a7       	std	Y+47, r25	; 0x2f
    1a86:	8e a7       	std	Y+46, r24	; 0x2e
    1a88:	8e e2       	ldi	r24, 0x2E	; 46
    1a8a:	d8 01       	movw	r26, r16
  l = (long)((num - l) * precision);
    1a8c:	8c 93       	st	X, r24
    1a8e:	6a a5       	ldd	r22, Y+42	; 0x2a
    1a90:	7c a5       	ldd	r23, Y+44	; 0x2c
    1a92:	8a a9       	ldd	r24, Y+50	; 0x32
    1a94:	9b a9       	ldd	r25, Y+51	; 0x33
    1a96:	1d d6       	rcall	.+3130   	; 0x26d2 <__floatsisf>
    1a98:	9b 01       	movw	r18, r22
    1a9a:	ac 01       	movw	r20, r24
    1a9c:	6c a1       	ldd	r22, Y+36	; 0x24
    1a9e:	7d a1       	ldd	r23, Y+37	; 0x25
    1aa0:	8e a1       	ldd	r24, Y+38	; 0x26
    1aa2:	9f a1       	ldd	r25, Y+39	; 0x27
    1aa4:	7a d5       	rcall	.+2804   	; 0x259a <__subsf3>
    1aa6:	28 96       	adiw	r28, 0x08	; 8
    1aa8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1aaa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1aac:	4e ad       	ldd	r20, Y+62	; 0x3e
    1aae:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ab0:	28 97       	sbiw	r28, 0x08	; 8
    1ab2:	bf d6       	rcall	.+3454   	; 0x2832 <__mulsf3>
    1ab4:	db d5       	rcall	.+2998   	; 0x266c <__fixsfsi>
    1ab6:	86 2e       	mov	r8, r22
    1ab8:	b8 2e       	mov	r11, r24
    1aba:	a9 2e       	mov	r10, r25
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    1abc:	88 ad       	ldd	r24, Y+56	; 0x38
    1abe:	99 ad       	ldd	r25, Y+57	; 0x39
    1ac0:	aa ad       	ldd	r26, Y+58	; 0x3a
    1ac2:	bb ad       	ldd	r27, Y+59	; 0x3b
    1ac4:	89 2b       	or	r24, r25
    1ac6:	8a 2b       	or	r24, r26
    1ac8:	8b 2b       	or	r24, r27
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <chvprintf+0x4e8>
    ll = num;
    1acc:	48 2c       	mov	r4, r8
    1ace:	57 2e       	mov	r5, r23
    1ad0:	6b 2c       	mov	r6, r11
    1ad2:	7a 2c       	mov	r7, r10
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1ad4:	d8 01       	movw	r26, r16
    1ad6:	1c 96       	adiw	r26, 0x0c	; 12
    1ad8:	bf 8f       	std	Y+31, r27	; 0x1f
    1ada:	ae 8f       	std	Y+30, r26	; 0x1e
    1adc:	8d 01       	movw	r16, r26
    1ade:	fd a2       	std	Y+37, r15	; 0x25
    1ae0:	ec a2       	std	Y+36, r14	; 0x24
    1ae2:	97 2e       	mov	r9, r23
  do {
    i = (int)(l % radix);
    1ae4:	fa 2c       	mov	r15, r10
    1ae6:	b4 01       	movw	r22, r8
    1ae8:	8b 2d       	mov	r24, r11
    1aea:	9f 2d       	mov	r25, r15
    1aec:	2a e0       	ldi	r18, 0x0A	; 10
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	23 d7       	rcall	.+3654   	; 0x293c <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1af6:	60 5d       	subi	r22, 0xD0	; 208
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	a6 2e       	mov	r10, r22
    1afc:	f8 01       	movw	r30, r16
    1afe:	62 93       	st	-Z, r22
    l /= radix;
    1b00:	8f 01       	movw	r16, r30
    1b02:	49 01       	movw	r8, r18
    1b04:	b4 2e       	mov	r11, r20
  } while ((ll /= radix) != 0);
    1b06:	f5 2e       	mov	r15, r21
    1b08:	c3 01       	movw	r24, r6
    1b0a:	b2 01       	movw	r22, r4
    1b0c:	2a e0       	ldi	r18, 0x0A	; 10
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	13 d7       	rcall	.+3622   	; 0x293c <__divmodsi4>
    1b16:	29 01       	movw	r4, r18
    1b18:	3a 01       	movw	r6, r20
    1b1a:	23 2b       	or	r18, r19
    1b1c:	24 2b       	or	r18, r20
    1b1e:	25 2b       	or	r18, r21
    1b20:	11 f7       	brne	.-60     	; 0x1ae6 <chvprintf+0x4fa>
    1b22:	ec a0       	ldd	r14, Y+36	; 0x24
    1b24:	fd a0       	ldd	r15, Y+37	; 0x25
    1b26:	9a 2c       	mov	r9, r10
    1b28:	ee a5       	ldd	r30, Y+46	; 0x2e
    1b2a:	ff a5       	ldd	r31, Y+47	; 0x2f
    1b2c:	d8 01       	movw	r26, r16
    1b2e:	11 96       	adiw	r26, 0x01	; 1
    1b30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b34:	80 1b       	sub	r24, r16
    1b36:	91 0b       	sbc	r25, r17
    1b38:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1b3a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <chvprintf+0x554>
    1b3e:	9d 90       	ld	r9, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    1b40:	91 92       	st	Z+, r9
  while (--i);
    1b42:	a2 17       	cp	r26, r18
    1b44:	b3 07       	cpc	r27, r19
    1b46:	d9 f7       	brne	.-10     	; 0x1b3e <chvprintf+0x552>
    1b48:	ee a5       	ldd	r30, Y+46	; 0x2e
    1b4a:	ff a5       	ldd	r31, Y+47	; 0x2f
    1b4c:	e8 0f       	add	r30, r24
    1b4e:	f9 1f       	adc	r31, r25
    1b50:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1b52:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1b54:	e2 1b       	sub	r30, r18
    1b56:	f3 0b       	sbc	r31, r19
    1b58:	4f 01       	movw	r8, r30
    1b5a:	31 e0       	ldi	r19, 0x01	; 1
    1b5c:	83 1a       	sub	r8, r19
    1b5e:	91 08       	sbc	r9, r1
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
    1b60:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b62:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b64:	9d a3       	std	Y+37, r25	; 0x25
    1b66:	8c a3       	std	Y+36, r24	; 0x24
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1b68:	de 01       	movw	r26, r28
    1b6a:	11 96       	adiw	r26, 0x01	; 1
    1b6c:	5d 01       	movw	r10, r26
    1b6e:	fd cd       	rjmp	.-1030   	; 0x176a <chvprintf+0x17e>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1b70:	ac a1       	ldd	r26, Y+36	; 0x24
    1b72:	bd a1       	ldd	r27, Y+37	; 0x25
    1b74:	8c 91       	ld	r24, X
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	e8 a9       	ldd	r30, Y+48	; 0x30
    1b7a:	f9 a9       	ldd	r31, Y+49	; 0x31
      break;
    1b7c:	8c a8       	ldd	r8, Y+52	; 0x34
    1b7e:	9d a8       	ldd	r9, Y+53	; 0x35

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1b80:	12 96       	adiw	r26, 0x02	; 2
    1b82:	bd a3       	std	Y+37, r27	; 0x25
    1b84:	ac a3       	std	Y+36, r26	; 0x24
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    1b86:	b0 e2       	ldi	r27, 0x20	; 32
    1b88:	b8 a7       	std	Y+40, r27	; 0x28
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1b8a:	9e 01       	movw	r18, r28
    1b8c:	2f 5f       	subi	r18, 0xFF	; 255
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	59 01       	movw	r10, r18
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    1b92:	eb cd       	rjmp	.-1066   	; 0x176a <chvprintf+0x17e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1b94:	21 e0       	ldi	r18, 0x01	; 1
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    1b96:	8a e0       	ldi	r24, 0x0A	; 10
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 e0       	ldi	r26, 0x00	; 0
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	8e 8f       	std	Y+30, r24	; 0x1e
    1ba0:	9f 8f       	std	Y+31, r25	; 0x1f
    1ba2:	a8 a3       	std	Y+32, r26	; 0x20
    1ba4:	b9 a3       	std	Y+33, r27	; 0x21
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1ba6:	21 11       	cpse	r18, r1
    1ba8:	63 c0       	rjmp	.+198    	; 0x1c70 <chvprintf+0x684>
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
    1baa:	ec a1       	ldd	r30, Y+36	; 0x24
    1bac:	fd a1       	ldd	r31, Y+37	; 0x25
    1bae:	80 80       	ld	r8, Z
    1bb0:	91 80       	ldd	r9, Z+1	; 0x01
    1bb2:	a1 2c       	mov	r10, r1
    1bb4:	b1 2c       	mov	r11, r1
    1bb6:	32 96       	adiw	r30, 0x02	; 2
    1bb8:	fd a3       	std	Y+37, r31	; 0x25
    1bba:	ec a3       	std	Y+36, r30	; 0x24
    1bbc:	24 01       	movw	r4, r8
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1bbe:	35 01       	movw	r6, r10
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	3c 96       	adiw	r30, 0x0c	; 12
    1bc4:	fb a6       	std	Y+43, r15	; 0x2b
    1bc6:	ea a6       	std	Y+42, r14	; 0x2a
  do {
    i = (int)(l % radix);
    1bc8:	8f 01       	movw	r16, r30
    1bca:	c5 01       	movw	r24, r10
    1bcc:	b4 01       	movw	r22, r8
    1bce:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1bd0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1bd2:	48 a1       	ldd	r20, Y+32	; 0x20
    1bd4:	59 a1       	ldd	r21, Y+33	; 0x21
    1bd6:	b2 d6       	rcall	.+3428   	; 0x293c <__divmodsi4>
    i += '0';
    1bd8:	9b 01       	movw	r18, r22
    1bda:	20 5d       	subi	r18, 0xD0	; 208
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    if (i > '9')
    1bde:	2a 33       	cpi	r18, 0x3A	; 58
    1be0:	31 05       	cpc	r19, r1
      i += 'A' - '0' - 10;
    1be2:	14 f0       	brlt	.+4      	; 0x1be8 <chvprintf+0x5fc>
    1be4:	29 5f       	subi	r18, 0xF9	; 249
    *--q = i;
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	f2 2e       	mov	r15, r18
    1bea:	d8 01       	movw	r26, r16
    1bec:	2e 93       	st	-X, r18
    l /= radix;
    1bee:	8d 01       	movw	r16, r26
    1bf0:	c5 01       	movw	r24, r10
    1bf2:	b4 01       	movw	r22, r8
    1bf4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1bf6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1bf8:	48 a1       	ldd	r20, Y+32	; 0x20
    1bfa:	59 a1       	ldd	r21, Y+33	; 0x21
    1bfc:	9f d6       	rcall	.+3390   	; 0x293c <__divmodsi4>
    1bfe:	49 01       	movw	r8, r18
  } while ((ll /= radix) != 0);
    1c00:	5a 01       	movw	r10, r20
    1c02:	c3 01       	movw	r24, r6
    1c04:	b2 01       	movw	r22, r4
    1c06:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1c08:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1c0a:	48 a1       	ldd	r20, Y+32	; 0x20
    1c0c:	59 a1       	ldd	r21, Y+33	; 0x21
    1c0e:	96 d6       	rcall	.+3372   	; 0x293c <__divmodsi4>
    1c10:	29 01       	movw	r4, r18
    1c12:	3a 01       	movw	r6, r20
    1c14:	23 2b       	or	r18, r19
    1c16:	24 2b       	or	r18, r20
    1c18:	25 2b       	or	r18, r21
    1c1a:	b9 f6       	brne	.-82     	; 0x1bca <chvprintf+0x5de>
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	1f 2d       	mov	r17, r15
    1c20:	ea a4       	ldd	r14, Y+42	; 0x2a
    1c22:	fb a4       	ldd	r15, Y+43	; 0x2b

  i = (int)(p + MAX_FILLER - q);
    1c24:	4c 8c       	ldd	r4, Y+28	; 0x1c
    1c26:	5d 8c       	ldd	r5, Y+29	; 0x1d
    1c28:	4e 1a       	sub	r4, r30
    1c2a:	5f 0a       	sbc	r5, r31
    1c2c:	de 01       	movw	r26, r28
    1c2e:	11 96       	adiw	r26, 0x01	; 1
    1c30:	31 96       	adiw	r30, 0x01	; 1
    1c32:	cd 01       	movw	r24, r26
    1c34:	84 0d       	add	r24, r4
    1c36:	95 1d       	adc	r25, r5
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <chvprintf+0x650>
    1c3a:	11 91       	ld	r17, Z+
  do
    *p++ = *q++;
    1c3c:	1d 93       	st	X+, r17
  while (--i);
    1c3e:	a8 17       	cp	r26, r24
    1c40:	b9 07       	cpc	r27, r25
    1c42:	d9 f7       	brne	.-10     	; 0x1c3a <chvprintf+0x64e>
    1c44:	42 01       	movw	r8, r4
    1c46:	b1 e0       	ldi	r27, 0x01	; 1
    1c48:	8b 1a       	sub	r8, r27
    1c4a:	91 08       	sbc	r9, r1
    1c4c:	f2 01       	movw	r30, r4
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1c4e:	9e 01       	movw	r18, r28
    1c50:	2f 5f       	subi	r18, 0xFF	; 255
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	59 01       	movw	r10, r18
    1c56:	89 cd       	rjmp	.-1262   	; 0x176a <chvprintf+0x17e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1c58:	21 e0       	ldi	r18, 0x01	; 1
    1c5a:	88 e0       	ldi	r24, 0x08	; 8
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e0       	ldi	r26, 0x00	; 0
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	8e 8f       	std	Y+30, r24	; 0x1e
    1c64:	9f 8f       	std	Y+31, r25	; 0x1f
    1c66:	a8 a3       	std	Y+32, r26	; 0x20
    1c68:	b9 a3       	std	Y+33, r27	; 0x21
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1c6a:	22 23       	and	r18, r18
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <chvprintf+0x684>
    1c6e:	9d cf       	rjmp	.-198    	; 0x1baa <chvprintf+0x5be>
        l = va_arg(ap, unsigned long);
    1c70:	ac a1       	ldd	r26, Y+36	; 0x24
    1c72:	bd a1       	ldd	r27, Y+37	; 0x25
    1c74:	8d 90       	ld	r8, X+
    1c76:	9d 90       	ld	r9, X+
    1c78:	ad 90       	ld	r10, X+
    1c7a:	bc 90       	ld	r11, X
    1c7c:	13 97       	sbiw	r26, 0x03	; 3
    1c7e:	14 96       	adiw	r26, 0x04	; 4
    1c80:	bd a3       	std	Y+37, r27	; 0x25
    1c82:	ac a3       	std	Y+36, r26	; 0x24
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1c84:	9b cf       	rjmp	.-202    	; 0x1bbc <chvprintf+0x5d0>
    1c86:	97 fe       	sbrs	r9, 7
    1c88:	99 cd       	rjmp	.-1230   	; 0x17bc <chvprintf+0x1d0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1c8a:	e6 cc       	rjmp	.-1588   	; 0x1658 <chvprintf+0x6c>
    1c8c:	88 27       	eor	r24, r24
    1c8e:	e9 55       	subi	r30, 0x59	; 89
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	8f 4f       	sbci	r24, 0xFF	; 255
    1c94:	6f c6       	rjmp	.+3294   	; 0x2974 <__tablejump2__>
    1c96:	81 2c       	mov	r8, r1
    1c98:	91 2c       	mov	r9, r1
    1c9a:	a7 cd       	rjmp	.-1202   	; 0x17ea <chvprintf+0x1fe>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
    1c9c:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c9e:	b0 33       	cpi	r27, 0x30	; 48
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <chvprintf+0x6b8>
    1ca2:	76 cd       	rjmp	.-1300   	; 0x1790 <chvprintf+0x1a4>
        streamPut(chp, (uint8_t)*s++);
    1ca4:	ef ef       	ldi	r30, 0xFF	; 255
    1ca6:	ae 1a       	sub	r10, r30
    1ca8:	be 0a       	sbc	r11, r30
    1caa:	d1 01       	movw	r26, r2
    1cac:	ed 91       	ld	r30, X+
    1cae:	fc 91       	ld	r31, X
    1cb0:	04 80       	ldd	r0, Z+4	; 0x04
    1cb2:	f5 81       	ldd	r31, Z+5	; 0x05
    1cb4:	e0 2d       	mov	r30, r0
    1cb6:	6d e2       	ldi	r22, 0x2D	; 45
    1cb8:	c1 01       	movw	r24, r2
    1cba:	19 95       	eicall
        n++;
    1cbc:	ea a1       	ldd	r30, Y+34	; 0x22
    1cbe:	fb a1       	ldd	r31, Y+35	; 0x23
    1cc0:	31 96       	adiw	r30, 0x01	; 1
    1cc2:	fb a3       	std	Y+35, r31	; 0x23
    1cc4:	ea a3       	std	Y+34, r30	; 0x22
    1cc6:	f1 e0       	ldi	r31, 0x01	; 1
    1cc8:	8f 1a       	sub	r8, r31
    1cca:	91 08       	sbc	r9, r1
    1ccc:	78 a4       	ldd	r7, Y+40	; 0x28
    1cce:	61 cd       	rjmp	.-1342   	; 0x1792 <chvprintf+0x1a6>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1cd0:	22 23       	and	r18, r18
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <chvprintf+0x6ea>
    1cd4:	c6 c0       	rjmp	.+396    	; 0x1e62 <chvprintf+0x876>
    1cd6:	0e ef       	ldi	r16, 0xFE	; 254
    1cd8:	1f e7       	ldi	r17, 0x7F	; 127
    1cda:	06 ce       	rjmp	.-1012   	; 0x18e8 <chvprintf+0x2fc>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1cdc:	80 e1       	ldi	r24, 0x10	; 16
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a0 e0       	ldi	r26, 0x00	; 0
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ce6:	9f 8f       	std	Y+31, r25	; 0x1f
    1ce8:	a8 a3       	std	Y+32, r26	; 0x20
    1cea:	b9 a3       	std	Y+33, r27	; 0x21
    1cec:	5c cf       	rjmp	.-328    	; 0x1ba6 <chvprintf+0x5ba>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
    1cee:	3a 31       	cpi	r19, 0x1A	; 26
    1cf0:	08 f4       	brcc	.+2      	; 0x1cf4 <chvprintf+0x708>
    1cf2:	58 c0       	rjmp	.+176    	; 0x1da4 <chvprintf+0x7b8>
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
    1cf4:	ec a1       	ldd	r30, Y+36	; 0x24
    1cf6:	fd a1       	ldd	r31, Y+37	; 0x25
    1cf8:	80 80       	ld	r8, Z
    1cfa:	91 80       	ldd	r9, Z+1	; 0x01
    1cfc:	09 2c       	mov	r0, r9
    1cfe:	00 0c       	add	r0, r0
    1d00:	aa 08       	sbc	r10, r10
    1d02:	bb 08       	sbc	r11, r11
    1d04:	32 96       	adiw	r30, 0x02	; 2
    1d06:	fd a3       	std	Y+37, r31	; 0x25
    1d08:	ec a3       	std	Y+36, r30	; 0x24
      if (l < 0) {
    1d0a:	b7 fc       	sbrc	r11, 7
    1d0c:	57 c0       	rjmp	.+174    	; 0x1dbc <chvprintf+0x7d0>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    1d0e:	ce 01       	movw	r24, r28
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	9f 8f       	std	Y+31, r25	; 0x1f
    1d14:	8e 8f       	std	Y+30, r24	; 0x1e
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1d16:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1d18:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1d1a:	1b 96       	adiw	r26, 0x0b	; 11
    1d1c:	bb a7       	std	Y+43, r27	; 0x2b
    1d1e:	aa a7       	std	Y+42, r26	; 0x2a
    1d20:	24 01       	movw	r4, r8
    1d22:	35 01       	movw	r6, r10
    1d24:	fd a6       	std	Y+45, r15	; 0x2d
    1d26:	ec a6       	std	Y+44, r14	; 0x2c
  do {
    i = (int)(l % radix);
    1d28:	8d 01       	movw	r16, r26
    1d2a:	c5 01       	movw	r24, r10
    1d2c:	b4 01       	movw	r22, r8
    1d2e:	2a e0       	ldi	r18, 0x0A	; 10
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1d36:	02 d6       	rcall	.+3076   	; 0x293c <__divmodsi4>
    1d38:	60 5d       	subi	r22, 0xD0	; 208
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	f6 2e       	mov	r15, r22
    1d3e:	f8 01       	movw	r30, r16
    1d40:	62 93       	st	-Z, r22
    l /= radix;
    1d42:	8f 01       	movw	r16, r30
    1d44:	49 01       	movw	r8, r18
  } while ((ll /= radix) != 0);
    1d46:	5a 01       	movw	r10, r20
    1d48:	c3 01       	movw	r24, r6
    1d4a:	b2 01       	movw	r22, r4
    1d4c:	2a e0       	ldi	r18, 0x0A	; 10
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	f3 d5       	rcall	.+3046   	; 0x293c <__divmodsi4>
    1d56:	29 01       	movw	r4, r18
    1d58:	3a 01       	movw	r6, r20
    1d5a:	23 2b       	or	r18, r19
    1d5c:	24 2b       	or	r18, r20
    1d5e:	25 2b       	or	r18, r21
    1d60:	21 f7       	brne	.-56     	; 0x1d2a <chvprintf+0x73e>
    1d62:	c8 01       	movw	r24, r16
    1d64:	1f 2d       	mov	r17, r15
    1d66:	ec a4       	ldd	r14, Y+44	; 0x2c
    1d68:	fd a4       	ldd	r15, Y+45	; 0x2d
    1d6a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d6c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d6e:	dc 01       	movw	r26, r24
    1d70:	11 96       	adiw	r26, 0x01	; 1
    1d72:	2a a5       	ldd	r18, Y+42	; 0x2a
    1d74:	3b a5       	ldd	r19, Y+43	; 0x2b
    1d76:	28 1b       	sub	r18, r24
    1d78:	39 0b       	sbc	r19, r25
    1d7a:	c9 01       	movw	r24, r18
    1d7c:	8e 0f       	add	r24, r30
    1d7e:	9f 1f       	adc	r25, r31
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <chvprintf+0x798>
    1d82:	1d 91       	ld	r17, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    1d84:	11 93       	st	Z+, r17
  while (--i);
    1d86:	e8 17       	cp	r30, r24
    1d88:	f9 07       	cpc	r31, r25
    1d8a:	d9 f7       	brne	.-10     	; 0x1d82 <chvprintf+0x796>
    1d8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d90:	e8 1b       	sub	r30, r24
    1d92:	f9 0b       	sbc	r31, r25
    1d94:	4f 01       	movw	r8, r30
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	89 1a       	sub	r8, r25
    1d9a:	91 08       	sbc	r9, r1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1d9c:	de 01       	movw	r26, r28
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	5d 01       	movw	r10, r26
    1da2:	e3 cc       	rjmp	.-1594   	; 0x176a <chvprintf+0x17e>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
    1da4:	ac a1       	ldd	r26, Y+36	; 0x24
    1da6:	bd a1       	ldd	r27, Y+37	; 0x25
    1da8:	8d 90       	ld	r8, X+
    1daa:	9d 90       	ld	r9, X+
    1dac:	ad 90       	ld	r10, X+
    1dae:	bc 90       	ld	r11, X
    1db0:	13 97       	sbiw	r26, 0x03	; 3
    1db2:	14 96       	adiw	r26, 0x04	; 4
    1db4:	bd a3       	std	Y+37, r27	; 0x25
    1db6:	ac a3       	std	Y+36, r26	; 0x24
      else
        l = va_arg(ap, int);
      if (l < 0) {
    1db8:	b7 fe       	sbrs	r11, 7
    1dba:	a9 cf       	rjmp	.-174    	; 0x1d0e <chvprintf+0x722>
        *p++ = '-';
    1dbc:	8d e2       	ldi	r24, 0x2D	; 45
    1dbe:	89 83       	std	Y+1, r24	; 0x01
        l = -l;
    1dc0:	b0 94       	com	r11
    1dc2:	a0 94       	com	r10
    1dc4:	90 94       	com	r9
    1dc6:	80 94       	com	r8
    1dc8:	81 1c       	adc	r8, r1
    1dca:	91 1c       	adc	r9, r1
    1dcc:	a1 1c       	adc	r10, r1
    1dce:	b1 1c       	adc	r11, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2e 5f       	subi	r18, 0xFE	; 254
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	3f 8f       	std	Y+31, r19	; 0x1f
    1dd8:	2e 8f       	std	Y+30, r18	; 0x1e
    1dda:	9d cf       	rjmp	.-198    	; 0x1d16 <chvprintf+0x72a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1ddc:	80 e1       	ldi	r24, 0x10	; 16
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e0       	ldi	r26, 0x00	; 0
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	8e 8f       	std	Y+30, r24	; 0x1e
    1de6:	9f 8f       	std	Y+31, r25	; 0x1f
    1de8:	a8 a3       	std	Y+32, r26	; 0x20
    1dea:	b9 a3       	std	Y+33, r27	; 0x21
    1dec:	41 cf       	rjmp	.-382    	; 0x1c70 <chvprintf+0x684>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    1dee:	41 2c       	mov	r4, r1
    1df0:	91 ee       	ldi	r25, 0xE1	; 225
    1df2:	59 2e       	mov	r5, r25
    1df4:	95 ef       	ldi	r25, 0xF5	; 245
    1df6:	69 2e       	mov	r6, r25
    1df8:	95 e0       	ldi	r25, 0x05	; 5
    1dfa:	79 2e       	mov	r7, r25
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	91 ee       	ldi	r25, 0xE1	; 225
    1e00:	a5 ef       	ldi	r26, 0xF5	; 245
    1e02:	b5 e0       	ldi	r27, 0x05	; 5
    1e04:	88 af       	std	Y+56, r24	; 0x38
    1e06:	99 af       	std	Y+57, r25	; 0x39
    1e08:	aa af       	std	Y+58, r26	; 0x3a
    1e0a:	bb af       	std	Y+59, r27	; 0x3b
    1e0c:	88 e2       	ldi	r24, 0x28	; 40
    1e0e:	9b e6       	ldi	r25, 0x6B	; 107
    1e10:	ae e6       	ldi	r26, 0x6E	; 110
    1e12:	be e4       	ldi	r27, 0x4E	; 78
    1e14:	28 96       	adiw	r28, 0x08	; 8
    1e16:	8c af       	std	Y+60, r24	; 0x3c
    1e18:	9d af       	std	Y+61, r25	; 0x3d
    1e1a:	ae af       	std	Y+62, r26	; 0x3e
    1e1c:	bf af       	std	Y+63, r27	; 0x3f
    1e1e:	28 97       	sbiw	r28, 0x08	; 8
    1e20:	ce cd       	rjmp	.-1124   	; 0x19be <chvprintf+0x3d2>
    1e22:	ea 19       	sub	r30, r10
    1e24:	fb 09       	sbc	r31, r11
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1e26:	4f 01       	movw	r8, r30
    1e28:	b1 e0       	ldi	r27, 0x01	; 1
    1e2a:	8b 1a       	sub	r8, r27
    1e2c:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1e2e:	9d a3       	std	Y+37, r25	; 0x25
    1e30:	8c a3       	std	Y+36, r24	; 0x24
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1e32:	20 e2       	ldi	r18, 0x20	; 32
    1e34:	28 a7       	std	Y+40, r18	; 0x28
    1e36:	99 cc       	rjmp	.-1742   	; 0x176a <chvprintf+0x17e>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
    1e38:	8d e2       	ldi	r24, 0x2D	; 45
    1e3a:	89 83       	std	Y+1, r24	; 0x01
        f = -f;
    1e3c:	8c a1       	ldd	r24, Y+36	; 0x24
    1e3e:	9d a1       	ldd	r25, Y+37	; 0x25
    1e40:	ae a1       	ldd	r26, Y+38	; 0x26
    1e42:	bf a1       	ldd	r27, Y+39	; 0x27
    1e44:	b0 58       	subi	r27, 0x80	; 128
    1e46:	8c a3       	std	Y+36, r24	; 0x24
    1e48:	9d a3       	std	Y+37, r25	; 0x25
    1e4a:	ae a3       	std	Y+38, r26	; 0x26
    1e4c:	bf a3       	std	Y+39, r27	; 0x27
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
    1e4e:	de 01       	movw	r26, r28
    1e50:	12 96       	adiw	r26, 0x02	; 2
    1e52:	bf a7       	std	Y+47, r27	; 0x2f
    1e54:	ae a7       	std	Y+46, r26	; 0x2e
    1e56:	84 cd       	rjmp	.-1272   	; 0x1960 <chvprintf+0x374>
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
    1e58:	31 e5       	ldi	r19, 0x51	; 81
    1e5a:	a3 2e       	mov	r10, r19
    1e5c:	32 e0       	ldi	r19, 0x02	; 2
    1e5e:	b3 2e       	mov	r11, r19
    1e60:	38 cd       	rjmp	.-1424   	; 0x18d2 <chvprintf+0x2e6>
    1e62:	87 01       	movw	r16, r14
    1e64:	f7 fc       	sbrc	r15, 7
    1e66:	0e c0       	rjmp	.+28     	; 0x1e84 <chvprintf+0x898>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1e68:	39 a5       	ldd	r19, Y+41	; 0x29
    1e6a:	9d a3       	std	Y+37, r25	; 0x25
    1e6c:	8c a3       	std	Y+36, r24	; 0x24
    1e6e:	31 11       	cpse	r19, r1
    1e70:	06 c0       	rjmp	.+12     	; 0x1e7e <chvprintf+0x892>
    1e72:	88 24       	eor	r8, r8
    1e74:	8a 94       	dec	r8
    1e76:	98 2c       	mov	r9, r8
    1e78:	80 e2       	ldi	r24, 0x20	; 32
    1e7a:	88 a7       	std	Y+40, r24	; 0x28
    1e7c:	7e cc       	rjmp	.-1796   	; 0x177a <chvprintf+0x18e>
    1e7e:	30 e2       	ldi	r19, 0x20	; 32
    1e80:	38 a7       	std	Y+40, r19	; 0x28
    1e82:	b8 cc       	rjmp	.-1680   	; 0x17f4 <chvprintf+0x208>
    1e84:	00 e0       	ldi	r16, 0x00	; 0
    1e86:	10 e0       	ldi	r17, 0x00	; 0
    1e88:	ef cf       	rjmp	.-34     	; 0x1e68 <chvprintf+0x87c>

00001e8a <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    1e92:	ae 01       	movw	r20, r28
    1e94:	46 5f       	subi	r20, 0xF6	; 246
    1e96:	5f 4f       	sbci	r21, 0xFF	; 255
    1e98:	68 85       	ldd	r22, Y+8	; 0x08
    1e9a:	79 85       	ldd	r23, Y+9	; 0x09
    1e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea0:	a5 db       	rcall	.-2230   	; 0x15ec <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <main>:
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
    1ea8:	0e 94 72 05 	call	0xae4	; 0xae4 <halInit>
  chSysInit();
    1eac:	0e 94 10 01 	call	0x220	; 0x220 <chSysInit>


  /*
   * External interrupt on the Pin D2 of the Arduino Mega2560.
   */
  palSetPadMode(IOPORT5, PD0, PAL_MODE_INPUT); // INT0
    1eb0:	42 e0       	ldi	r20, 0x02	; 2
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	8c e2       	ldi	r24, 0x2C	; 44
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	6a da       	rcall	.-2860   	; 0x138e <_pal_lld_setgroupmode>

  /*
   * Start the serial driver.
   */
  sdStart(&SD1, NULL);
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	8e e5       	ldi	r24, 0x5E	; 94
    1ec0:	93 e0       	ldi	r25, 0x03	; 3
    1ec2:	86 d8       	rcall	.-3828   	; 0xfd0 <sdStart>

  palClearPad(IOPORT2, PORTB_LED1);
    1ec4:	2f 98       	cbi	0x05, 7	; 5
  chprintf(chp, "\n\r EXT hal test started...");
    1ec6:	8c e7       	ldi	r24, 0x7C	; 124
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	9f 93       	push	r25
    1ecc:	8f 93       	push	r24
    1ece:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1ed2:	8f 93       	push	r24
    1ed4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1ed8:	8f 93       	push	r24
    1eda:	d7 df       	rcall	.-82     	; 0x1e8a <chprintf>
  //cli();

  //PCICR |= 1; // ENABLE PCINT7 to PCINT0
  //PCMSK0 = 0xFF; // PCINT7 to PCINT0 are enabled

  PCICR   |= (1 << PCIE0); // ENABLE PCINT7 to PCINT0
    1edc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    1ee0:	81 60       	ori	r24, 0x01	; 1
    1ee2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
  PCMSK0  |= (1 << PCINT5); // PCINT5
    1ee6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7c006b>
    1eea:	80 62       	ori	r24, 0x20	; 32
    1eec:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7c006b>
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
   * Normal main() thread activity, in this demo it print IRQ counter every
   * seconde.
   */
  while (TRUE) {
    chThdSleepMilliseconds(1000);
    chprintf(chp, "\n\r index = %d, ISR Counter = %d", index, isrCpt);
    1ef8:	c7 e9       	ldi	r28, 0x97	; 151
    1efa:	d2 e0       	ldi	r29, 0x02	; 2
  /*
   * Normal main() thread activity, in this demo it print IRQ counter every
   * seconde.
   */
  while (TRUE) {
    chThdSleepMilliseconds(1000);
    1efc:	88 e0       	ldi	r24, 0x08	; 8
    1efe:	9d e3       	ldi	r25, 0x3D	; 61
    1f00:	0e 94 c7 04 	call	0x98e	; 0x98e <chThdSleep>
    chprintf(chp, "\n\r index = %d, ISR Counter = %d", index, isrCpt);
    1f04:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <isrCpt+0x1>
    1f08:	8f 93       	push	r24
    1f0a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <isrCpt>
    1f0e:	8f 93       	push	r24
    1f10:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <__data_end+0x1>
    1f14:	8f 93       	push	r24
    1f16:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end>
    1f1a:	8f 93       	push	r24
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1f24:	8f 93       	push	r24
    1f26:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1f2a:	8f 93       	push	r24
    1f2c:	ae df       	rcall	.-164    	; 0x1e8a <chprintf>
    index++;
    1f2e:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end>
    1f32:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__data_end+0x1>
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <__data_end+0x1>
    1f3c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end>
    1f40:	8d b7       	in	r24, 0x3d	; 61
    1f42:	9e b7       	in	r25, 0x3e	; 62
    1f44:	08 96       	adiw	r24, 0x08	; 8
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	9e bf       	out	0x3e, r25	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	8d bf       	out	0x3d, r24	; 61
    1f50:	d5 cf       	rjmp	.-86     	; 0x1efc <main+0x54>

00001f52 <__vector_9>:
  }
}

ISR(PCINT0_vect) {
    1f52:	1f 92       	push	r1
    1f54:	0f 92       	push	r0
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	0f 92       	push	r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	8f 93       	push	r24
    1f5e:	9f 93       	push	r25
  isrCpt++;
    1f60:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <isrCpt>
    1f64:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <isrCpt+0x1>
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <isrCpt+0x1>
    1f6e:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <isrCpt>
}
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	0f 90       	pop	r0
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	0f 90       	pop	r0
    1f7c:	1f 90       	pop	r1
    1f7e:	18 95       	reti

00001f80 <vfprintf>:
    1f80:	6f 92       	push	r6
    1f82:	7f 92       	push	r7
    1f84:	8f 92       	push	r8
    1f86:	9f 92       	push	r9
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	2b 97       	sbiw	r28, 0x0b	; 11
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	6c 01       	movw	r12, r24
    1fae:	7b 01       	movw	r14, r22
    1fb0:	3a 01       	movw	r6, r20
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	17 82       	std	Z+7, r1	; 0x07
    1fb6:	16 82       	std	Z+6, r1	; 0x06
    1fb8:	83 81       	ldd	r24, Z+3	; 0x03
    1fba:	81 ff       	sbrs	r24, 1
    1fbc:	f9 c0       	rjmp	.+498    	; 0x21b0 <__DATA_REGION_LENGTH__+0x1b0>
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	4c 01       	movw	r8, r24
    1fc4:	f6 01       	movw	r30, r12
    1fc6:	b3 80       	ldd	r11, Z+3	; 0x03
    1fc8:	f7 01       	movw	r30, r14
    1fca:	b3 fc       	sbrc	r11, 3
    1fcc:	05 91       	lpm	r16, Z+
    1fce:	b3 fe       	sbrs	r11, 3
    1fd0:	01 91       	ld	r16, Z+
    1fd2:	7f 01       	movw	r14, r30
    1fd4:	00 23       	and	r16, r16
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <vfprintf+0x5a>
    1fd8:	e7 c0       	rjmp	.+462    	; 0x21a8 <__DATA_REGION_LENGTH__+0x1a8>
    1fda:	05 32       	cpi	r16, 0x25	; 37
    1fdc:	49 f4       	brne	.+18     	; 0x1ff0 <vfprintf+0x70>
    1fde:	b3 fc       	sbrc	r11, 3
    1fe0:	05 91       	lpm	r16, Z+
    1fe2:	b3 fe       	sbrs	r11, 3
    1fe4:	01 91       	ld	r16, Z+
    1fe6:	7f 01       	movw	r14, r30
    1fe8:	05 32       	cpi	r16, 0x25	; 37
    1fea:	11 f0       	breq	.+4      	; 0x1ff0 <vfprintf+0x70>
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	17 c0       	rjmp	.+46     	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    1ff0:	b6 01       	movw	r22, r12
    1ff2:	80 2f       	mov	r24, r16
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	17 d5       	rcall	.+2606   	; 0x2a26 <fputc>
    1ff8:	53 01       	movw	r10, r6
    1ffa:	35 01       	movw	r6, r10
    1ffc:	e3 cf       	rjmp	.-58     	; 0x1fc4 <vfprintf+0x44>
    1ffe:	00 23       	and	r16, r16
    2000:	09 f4       	brne	.+2      	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    2002:	d2 c0       	rjmp	.+420    	; 0x21a8 <__DATA_REGION_LENGTH__+0x1a8>
    2004:	60 2f       	mov	r22, r16
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	8f eb       	ldi	r24, 0xBF	; 191
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	c3 d4       	rcall	.+2438   	; 0x2994 <strchr_P>
    200e:	89 2b       	or	r24, r25
    2010:	49 f0       	breq	.+18     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    2012:	f7 01       	movw	r30, r14
    2014:	b3 fc       	sbrc	r11, 3
    2016:	05 91       	lpm	r16, Z+
    2018:	b3 fe       	sbrs	r11, 3
    201a:	01 91       	ld	r16, Z+
    201c:	7f 01       	movw	r14, r30
    201e:	17 ff       	sbrs	r17, 7
    2020:	ee cf       	rjmp	.-36     	; 0x1ffe <vfprintf+0x7e>
    2022:	04 c0       	rjmp	.+8      	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    2024:	03 32       	cpi	r16, 0x23	; 35
    2026:	39 f0       	breq	.+14     	; 0x2036 <__DATA_REGION_LENGTH__+0x36>
    2028:	0c 36       	cpi	r16, 0x6C	; 108
    202a:	19 f0       	breq	.+6      	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    202c:	01 11       	cpse	r16, r1
    202e:	05 c0       	rjmp	.+10     	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    2030:	bb c0       	rjmp	.+374    	; 0x21a8 <__DATA_REGION_LENGTH__+0x1a8>
    2032:	10 68       	ori	r17, 0x80	; 128
    2034:	ee cf       	rjmp	.-36     	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    2036:	10 e1       	ldi	r17, 0x10	; 16
    2038:	ec cf       	rjmp	.-40     	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    203a:	60 2f       	mov	r22, r16
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	88 eb       	ldi	r24, 0xB8	; 184
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	a8 d4       	rcall	.+2384   	; 0x2994 <strchr_P>
    2044:	89 2b       	or	r24, r25
    2046:	41 f0       	breq	.+16     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2048:	53 01       	movw	r10, r6
    204a:	f4 e0       	ldi	r31, 0x04	; 4
    204c:	af 0e       	add	r10, r31
    204e:	b1 1c       	adc	r11, r1
    2050:	b6 01       	movw	r22, r12
    2052:	8f e3       	ldi	r24, 0x3F	; 63
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	10 c0       	rjmp	.+32     	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2058:	03 36       	cpi	r16, 0x63	; 99
    205a:	31 f0       	breq	.+12     	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    205c:	03 37       	cpi	r16, 0x73	; 115
    205e:	71 f0       	breq	.+28     	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    2060:	03 35       	cpi	r16, 0x53	; 83
    2062:	01 f5       	brne	.+64     	; 0x20a4 <__DATA_REGION_LENGTH__+0xa4>
    2064:	11 60       	ori	r17, 0x01	; 1
    2066:	0a c0       	rjmp	.+20     	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    2068:	53 01       	movw	r10, r6
    206a:	82 e0       	ldi	r24, 0x02	; 2
    206c:	a8 0e       	add	r10, r24
    206e:	b1 1c       	adc	r11, r1
    2070:	b6 01       	movw	r22, r12
    2072:	f3 01       	movw	r30, r6
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	d6 d4       	rcall	.+2476   	; 0x2a26 <fputc>
    207a:	bf cf       	rjmp	.-130    	; 0x1ffa <vfprintf+0x7a>
    207c:	53 01       	movw	r10, r6
    207e:	f2 e0       	ldi	r31, 0x02	; 2
    2080:	af 0e       	add	r10, r31
    2082:	b1 1c       	adc	r11, r1
    2084:	f3 01       	movw	r30, r6
    2086:	60 80       	ld	r6, Z
    2088:	71 80       	ldd	r7, Z+1	; 0x01
    208a:	f3 01       	movw	r30, r6
    208c:	10 fd       	sbrc	r17, 0
    208e:	85 91       	lpm	r24, Z+
    2090:	10 ff       	sbrs	r17, 0
    2092:	81 91       	ld	r24, Z+
    2094:	3f 01       	movw	r6, r30
    2096:	88 23       	and	r24, r24
    2098:	09 f4       	brne	.+2      	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
    209a:	af cf       	rjmp	.-162    	; 0x1ffa <vfprintf+0x7a>
    209c:	b6 01       	movw	r22, r12
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	c2 d4       	rcall	.+2436   	; 0x2a26 <fputc>
    20a2:	f3 cf       	rjmp	.-26     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    20a4:	04 36       	cpi	r16, 0x64	; 100
    20a6:	11 f0       	breq	.+4      	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    20a8:	09 36       	cpi	r16, 0x69	; 105
    20aa:	21 f5       	brne	.+72     	; 0x20f4 <__DATA_REGION_LENGTH__+0xf4>
    20ac:	53 01       	movw	r10, r6
    20ae:	17 ff       	sbrs	r17, 7
    20b0:	09 c0       	rjmp	.+18     	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    20b2:	f4 e0       	ldi	r31, 0x04	; 4
    20b4:	af 0e       	add	r10, r31
    20b6:	b1 1c       	adc	r11, r1
    20b8:	f3 01       	movw	r30, r6
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	0a c0       	rjmp	.+20     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20c4:	f2 e0       	ldi	r31, 0x02	; 2
    20c6:	af 0e       	add	r10, r31
    20c8:	b1 1c       	adc	r11, r1
    20ca:	f3 01       	movw	r30, r6
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	07 2e       	mov	r0, r23
    20d2:	00 0c       	add	r0, r0
    20d4:	88 0b       	sbc	r24, r24
    20d6:	99 0b       	sbc	r25, r25
    20d8:	1f 7e       	andi	r17, 0xEF	; 239
    20da:	97 ff       	sbrs	r25, 7
    20dc:	08 c0       	rjmp	.+16     	; 0x20ee <__DATA_REGION_LENGTH__+0xee>
    20de:	90 95       	com	r25
    20e0:	80 95       	com	r24
    20e2:	70 95       	com	r23
    20e4:	61 95       	neg	r22
    20e6:	7f 4f       	sbci	r23, 0xFF	; 255
    20e8:	8f 4f       	sbci	r24, 0xFF	; 255
    20ea:	9f 4f       	sbci	r25, 0xFF	; 255
    20ec:	10 64       	ori	r17, 0x40	; 64
    20ee:	2a e0       	ldi	r18, 0x0A	; 10
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	30 c0       	rjmp	.+96     	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
    20f4:	00 37       	cpi	r16, 0x70	; 112
    20f6:	91 f0       	breq	.+36     	; 0x211c <__DATA_REGION_LENGTH__+0x11c>
    20f8:	40 f4       	brcc	.+16     	; 0x210a <__DATA_REGION_LENGTH__+0x10a>
    20fa:	08 35       	cpi	r16, 0x58	; 88
    20fc:	a1 f0       	breq	.+40     	; 0x2126 <__DATA_REGION_LENGTH__+0x126>
    20fe:	0f 36       	cpi	r16, 0x6F	; 111
    2100:	09 f0       	breq	.+2      	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    2102:	52 c0       	rjmp	.+164    	; 0x21a8 <__DATA_REGION_LENGTH__+0x1a8>
    2104:	28 e0       	ldi	r18, 0x08	; 8
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	11 c0       	rjmp	.+34     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    210a:	05 37       	cpi	r16, 0x75	; 117
    210c:	19 f0       	breq	.+6      	; 0x2114 <__DATA_REGION_LENGTH__+0x114>
    210e:	08 37       	cpi	r16, 0x78	; 120
    2110:	31 f0       	breq	.+12     	; 0x211e <__DATA_REGION_LENGTH__+0x11e>
    2112:	4a c0       	rjmp	.+148    	; 0x21a8 <__DATA_REGION_LENGTH__+0x1a8>
    2114:	1f 7e       	andi	r17, 0xEF	; 239
    2116:	2a e0       	ldi	r18, 0x0A	; 10
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	08 c0       	rjmp	.+16     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    211c:	10 61       	ori	r17, 0x10	; 16
    211e:	14 62       	ori	r17, 0x24	; 36
    2120:	20 e1       	ldi	r18, 0x10	; 16
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	03 c0       	rjmp	.+6      	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    2126:	14 60       	ori	r17, 0x04	; 4
    2128:	20 e1       	ldi	r18, 0x10	; 16
    212a:	32 e0       	ldi	r19, 0x02	; 2
    212c:	53 01       	movw	r10, r6
    212e:	17 ff       	sbrs	r17, 7
    2130:	09 c0       	rjmp	.+18     	; 0x2144 <__DATA_REGION_LENGTH__+0x144>
    2132:	f4 e0       	ldi	r31, 0x04	; 4
    2134:	af 0e       	add	r10, r31
    2136:	b1 1c       	adc	r11, r1
    2138:	f3 01       	movw	r30, r6
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	08 c0       	rjmp	.+16     	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
    2144:	f2 e0       	ldi	r31, 0x02	; 2
    2146:	af 0e       	add	r10, r31
    2148:	b1 1c       	adc	r11, r1
    214a:	f3 01       	movw	r30, r6
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a4 01       	movw	r20, r8
    2156:	bc d4       	rcall	.+2424   	; 0x2ad0 <__ultoa_invert>
    2158:	08 2f       	mov	r16, r24
    215a:	08 19       	sub	r16, r8
    215c:	16 ff       	sbrs	r17, 6
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <__DATA_REGION_LENGTH__+0x168>
    2160:	b6 01       	movw	r22, r12
    2162:	8d e2       	ldi	r24, 0x2D	; 45
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	5f d4       	rcall	.+2238   	; 0x2a26 <fputc>
    2168:	14 ff       	sbrs	r17, 4
    216a:	13 c0       	rjmp	.+38     	; 0x2192 <__DATA_REGION_LENGTH__+0x192>
    216c:	fe 01       	movw	r30, r28
    216e:	e0 0f       	add	r30, r16
    2170:	f1 1d       	adc	r31, r1
    2172:	80 81       	ld	r24, Z
    2174:	80 33       	cpi	r24, 0x30	; 48
    2176:	69 f0       	breq	.+26     	; 0x2192 <__DATA_REGION_LENGTH__+0x192>
    2178:	b6 01       	movw	r22, r12
    217a:	80 e3       	ldi	r24, 0x30	; 48
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	53 d4       	rcall	.+2214   	; 0x2a26 <fputc>
    2180:	12 ff       	sbrs	r17, 2
    2182:	07 c0       	rjmp	.+14     	; 0x2192 <__DATA_REGION_LENGTH__+0x192>
    2184:	10 72       	andi	r17, 0x20	; 32
    2186:	81 2f       	mov	r24, r17
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	b6 01       	movw	r22, r12
    218c:	88 5a       	subi	r24, 0xA8	; 168
    218e:	9f 4f       	sbci	r25, 0xFF	; 255
    2190:	4a d4       	rcall	.+2196   	; 0x2a26 <fputc>
    2192:	01 50       	subi	r16, 0x01	; 1
    2194:	f4 01       	movw	r30, r8
    2196:	e0 0f       	add	r30, r16
    2198:	f1 1d       	adc	r31, r1
    219a:	80 81       	ld	r24, Z
    219c:	b6 01       	movw	r22, r12
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	42 d4       	rcall	.+2180   	; 0x2a26 <fputc>
    21a2:	01 11       	cpse	r16, r1
    21a4:	f6 cf       	rjmp	.-20     	; 0x2192 <__DATA_REGION_LENGTH__+0x192>
    21a6:	29 cf       	rjmp	.-430    	; 0x1ffa <vfprintf+0x7a>
    21a8:	f6 01       	movw	r30, r12
    21aa:	86 81       	ldd	r24, Z+6	; 0x06
    21ac:	97 81       	ldd	r25, Z+7	; 0x07
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <__DATA_REGION_LENGTH__+0x1b4>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	9f ef       	ldi	r25, 0xFF	; 255
    21b4:	2b 96       	adiw	r28, 0x0b	; 11
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	bf 90       	pop	r11
    21d2:	af 90       	pop	r10
    21d4:	9f 90       	pop	r9
    21d6:	8f 90       	pop	r8
    21d8:	7f 90       	pop	r7
    21da:	6f 90       	pop	r6
    21dc:	08 95       	ret

000021de <putval>:
    21de:	20 fd       	sbrc	r18, 0
    21e0:	09 c0       	rjmp	.+18     	; 0x21f4 <putval+0x16>
    21e2:	fc 01       	movw	r30, r24
    21e4:	23 fd       	sbrc	r18, 3
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <putval+0x14>
    21e8:	22 ff       	sbrs	r18, 2
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <putval+0x12>
    21ec:	73 83       	std	Z+3, r23	; 0x03
    21ee:	62 83       	std	Z+2, r22	; 0x02
    21f0:	51 83       	std	Z+1, r21	; 0x01
    21f2:	40 83       	st	Z, r20
    21f4:	08 95       	ret

000021f6 <mulacc>:
    21f6:	44 fd       	sbrc	r20, 4
    21f8:	17 c0       	rjmp	.+46     	; 0x2228 <__stack+0x29>
    21fa:	46 fd       	sbrc	r20, 6
    21fc:	17 c0       	rjmp	.+46     	; 0x222c <__stack+0x2d>
    21fe:	ab 01       	movw	r20, r22
    2200:	bc 01       	movw	r22, r24
    2202:	da 01       	movw	r26, r20
    2204:	fb 01       	movw	r30, r22
    2206:	aa 0f       	add	r26, r26
    2208:	bb 1f       	adc	r27, r27
    220a:	ee 1f       	adc	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	10 94       	com	r1
    2210:	d1 f7       	brne	.-12     	; 0x2206 <__stack+0x7>
    2212:	4a 0f       	add	r20, r26
    2214:	5b 1f       	adc	r21, r27
    2216:	6e 1f       	adc	r22, r30
    2218:	7f 1f       	adc	r23, r31
    221a:	cb 01       	movw	r24, r22
    221c:	ba 01       	movw	r22, r20
    221e:	66 0f       	add	r22, r22
    2220:	77 1f       	adc	r23, r23
    2222:	88 1f       	adc	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	09 c0       	rjmp	.+18     	; 0x223a <__stack+0x3b>
    2228:	33 e0       	ldi	r19, 0x03	; 3
    222a:	01 c0       	rjmp	.+2      	; 0x222e <__stack+0x2f>
    222c:	34 e0       	ldi	r19, 0x04	; 4
    222e:	66 0f       	add	r22, r22
    2230:	77 1f       	adc	r23, r23
    2232:	88 1f       	adc	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	31 50       	subi	r19, 0x01	; 1
    2238:	d1 f7       	brne	.-12     	; 0x222e <__stack+0x2f>
    223a:	62 0f       	add	r22, r18
    223c:	71 1d       	adc	r23, r1
    223e:	81 1d       	adc	r24, r1
    2240:	91 1d       	adc	r25, r1
    2242:	08 95       	ret

00002244 <skip_spaces>:
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	8c 01       	movw	r16, r24
    224e:	c8 01       	movw	r24, r16
    2250:	ac d3       	rcall	.+1880   	; 0x29aa <fgetc>
    2252:	ec 01       	movw	r28, r24
    2254:	97 fd       	sbrc	r25, 7
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <skip_spaces+0x20>
    2258:	95 d3       	rcall	.+1834   	; 0x2984 <isspace>
    225a:	89 2b       	or	r24, r25
    225c:	c1 f7       	brne	.-16     	; 0x224e <skip_spaces+0xa>
    225e:	b8 01       	movw	r22, r16
    2260:	ce 01       	movw	r24, r28
    2262:	1d d4       	rcall	.+2106   	; 0x2a9e <ungetc>
    2264:	ce 01       	movw	r24, r28
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	08 95       	ret

00002270 <conv_int>:
    2270:	8f 92       	push	r8
    2272:	9f 92       	push	r9
    2274:	af 92       	push	r10
    2276:	bf 92       	push	r11
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	8c 01       	movw	r16, r24
    2286:	d6 2f       	mov	r29, r22
    2288:	7a 01       	movw	r14, r20
    228a:	b2 2e       	mov	r11, r18
    228c:	8e d3       	rcall	.+1820   	; 0x29aa <fgetc>
    228e:	9c 01       	movw	r18, r24
    2290:	33 27       	eor	r19, r19
    2292:	2b 32       	cpi	r18, 0x2B	; 43
    2294:	31 05       	cpc	r19, r1
    2296:	31 f0       	breq	.+12     	; 0x22a4 <conv_int+0x34>
    2298:	2d 32       	cpi	r18, 0x2D	; 45
    229a:	31 05       	cpc	r19, r1
    229c:	59 f4       	brne	.+22     	; 0x22b4 <conv_int+0x44>
    229e:	8b 2d       	mov	r24, r11
    22a0:	80 68       	ori	r24, 0x80	; 128
    22a2:	b8 2e       	mov	r11, r24
    22a4:	d1 50       	subi	r29, 0x01	; 1
    22a6:	11 f4       	brne	.+4      	; 0x22ac <conv_int+0x3c>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	61 c0       	rjmp	.+194    	; 0x236e <conv_int+0xfe>
    22ac:	c8 01       	movw	r24, r16
    22ae:	7d d3       	rcall	.+1786   	; 0x29aa <fgetc>
    22b0:	97 fd       	sbrc	r25, 7
    22b2:	fa cf       	rjmp	.-12     	; 0x22a8 <conv_int+0x38>
    22b4:	cb 2d       	mov	r28, r11
    22b6:	cd 7f       	andi	r28, 0xFD	; 253
    22b8:	2b 2d       	mov	r18, r11
    22ba:	20 73       	andi	r18, 0x30	; 48
    22bc:	f9 f4       	brne	.+62     	; 0x22fc <conv_int+0x8c>
    22be:	80 33       	cpi	r24, 0x30	; 48
    22c0:	e9 f4       	brne	.+58     	; 0x22fc <conv_int+0x8c>
    22c2:	aa 24       	eor	r10, r10
    22c4:	aa 94       	dec	r10
    22c6:	ad 0e       	add	r10, r29
    22c8:	09 f4       	brne	.+2      	; 0x22cc <conv_int+0x5c>
    22ca:	3e c0       	rjmp	.+124    	; 0x2348 <conv_int+0xd8>
    22cc:	c8 01       	movw	r24, r16
    22ce:	6d d3       	rcall	.+1754   	; 0x29aa <fgetc>
    22d0:	97 fd       	sbrc	r25, 7
    22d2:	3a c0       	rjmp	.+116    	; 0x2348 <conv_int+0xd8>
    22d4:	9c 01       	movw	r18, r24
    22d6:	2f 7d       	andi	r18, 0xDF	; 223
    22d8:	33 27       	eor	r19, r19
    22da:	28 35       	cpi	r18, 0x58	; 88
    22dc:	31 05       	cpc	r19, r1
    22de:	41 f4       	brne	.+16     	; 0x22f0 <conv_int+0x80>
    22e0:	c2 64       	ori	r28, 0x42	; 66
    22e2:	d2 50       	subi	r29, 0x02	; 2
    22e4:	89 f1       	breq	.+98     	; 0x2348 <conv_int+0xd8>
    22e6:	c8 01       	movw	r24, r16
    22e8:	60 d3       	rcall	.+1728   	; 0x29aa <fgetc>
    22ea:	97 ff       	sbrs	r25, 7
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <conv_int+0x8c>
    22ee:	2c c0       	rjmp	.+88     	; 0x2348 <conv_int+0xd8>
    22f0:	b6 fe       	sbrs	r11, 6
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <conv_int+0x88>
    22f4:	c2 60       	ori	r28, 0x02	; 2
    22f6:	01 c0       	rjmp	.+2      	; 0x22fa <conv_int+0x8a>
    22f8:	c2 61       	ori	r28, 0x12	; 18
    22fa:	da 2d       	mov	r29, r10
    22fc:	81 2c       	mov	r8, r1
    22fe:	91 2c       	mov	r9, r1
    2300:	54 01       	movw	r10, r8
    2302:	20 ed       	ldi	r18, 0xD0	; 208
    2304:	28 0f       	add	r18, r24
    2306:	28 30       	cpi	r18, 0x08	; 8
    2308:	78 f0       	brcs	.+30     	; 0x2328 <conv_int+0xb8>
    230a:	c4 ff       	sbrs	r28, 4
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <conv_int+0xa4>
    230e:	b8 01       	movw	r22, r16
    2310:	c6 d3       	rcall	.+1932   	; 0x2a9e <ungetc>
    2312:	17 c0       	rjmp	.+46     	; 0x2342 <conv_int+0xd2>
    2314:	2a 30       	cpi	r18, 0x0A	; 10
    2316:	40 f0       	brcs	.+16     	; 0x2328 <conv_int+0xb8>
    2318:	c6 ff       	sbrs	r28, 6
    231a:	f9 cf       	rjmp	.-14     	; 0x230e <conv_int+0x9e>
    231c:	2f 7d       	andi	r18, 0xDF	; 223
    231e:	3f ee       	ldi	r19, 0xEF	; 239
    2320:	32 0f       	add	r19, r18
    2322:	36 30       	cpi	r19, 0x06	; 6
    2324:	a0 f7       	brcc	.-24     	; 0x230e <conv_int+0x9e>
    2326:	27 50       	subi	r18, 0x07	; 7
    2328:	4c 2f       	mov	r20, r28
    232a:	c5 01       	movw	r24, r10
    232c:	b4 01       	movw	r22, r8
    232e:	63 df       	rcall	.-314    	; 0x21f6 <mulacc>
    2330:	4b 01       	movw	r8, r22
    2332:	5c 01       	movw	r10, r24
    2334:	c2 60       	ori	r28, 0x02	; 2
    2336:	d1 50       	subi	r29, 0x01	; 1
    2338:	51 f0       	breq	.+20     	; 0x234e <conv_int+0xde>
    233a:	c8 01       	movw	r24, r16
    233c:	36 d3       	rcall	.+1644   	; 0x29aa <fgetc>
    233e:	97 ff       	sbrs	r25, 7
    2340:	e0 cf       	rjmp	.-64     	; 0x2302 <conv_int+0x92>
    2342:	c1 fd       	sbrc	r28, 1
    2344:	04 c0       	rjmp	.+8      	; 0x234e <conv_int+0xde>
    2346:	b0 cf       	rjmp	.-160    	; 0x22a8 <conv_int+0x38>
    2348:	81 2c       	mov	r8, r1
    234a:	91 2c       	mov	r9, r1
    234c:	54 01       	movw	r10, r8
    234e:	c7 ff       	sbrs	r28, 7
    2350:	08 c0       	rjmp	.+16     	; 0x2362 <conv_int+0xf2>
    2352:	b0 94       	com	r11
    2354:	a0 94       	com	r10
    2356:	90 94       	com	r9
    2358:	80 94       	com	r8
    235a:	81 1c       	adc	r8, r1
    235c:	91 1c       	adc	r9, r1
    235e:	a1 1c       	adc	r10, r1
    2360:	b1 1c       	adc	r11, r1
    2362:	2c 2f       	mov	r18, r28
    2364:	b5 01       	movw	r22, r10
    2366:	a4 01       	movw	r20, r8
    2368:	c7 01       	movw	r24, r14
    236a:	39 df       	rcall	.-398    	; 0x21de <putval>
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	1f 91       	pop	r17
    2374:	0f 91       	pop	r16
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	bf 90       	pop	r11
    237c:	af 90       	pop	r10
    237e:	9f 90       	pop	r9
    2380:	8f 90       	pop	r8
    2382:	08 95       	ret

00002384 <vfscanf>:
    2384:	5f 92       	push	r5
    2386:	6f 92       	push	r6
    2388:	7f 92       	push	r7
    238a:	8f 92       	push	r8
    238c:	9f 92       	push	r9
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	cf 92       	push	r12
    2394:	df 92       	push	r13
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	6c 01       	movw	r12, r24
    23a4:	eb 01       	movw	r28, r22
    23a6:	5a 01       	movw	r10, r20
    23a8:	fc 01       	movw	r30, r24
    23aa:	17 82       	std	Z+7, r1	; 0x07
    23ac:	16 82       	std	Z+6, r1	; 0x06
    23ae:	51 2c       	mov	r5, r1
    23b0:	f6 01       	movw	r30, r12
    23b2:	f3 80       	ldd	r15, Z+3	; 0x03
    23b4:	fe 01       	movw	r30, r28
    23b6:	f3 fc       	sbrc	r15, 3
    23b8:	85 91       	lpm	r24, Z+
    23ba:	f3 fe       	sbrs	r15, 3
    23bc:	81 91       	ld	r24, Z+
    23be:	18 2f       	mov	r17, r24
    23c0:	ef 01       	movw	r28, r30
    23c2:	88 23       	and	r24, r24
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <vfscanf+0x44>
    23c6:	d4 c0       	rjmp	.+424    	; 0x2570 <vfscanf+0x1ec>
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	dc d2       	rcall	.+1464   	; 0x2984 <isspace>
    23cc:	89 2b       	or	r24, r25
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <vfscanf+0x52>
    23d0:	c6 01       	movw	r24, r12
    23d2:	38 df       	rcall	.-400    	; 0x2244 <skip_spaces>
    23d4:	ed cf       	rjmp	.-38     	; 0x23b0 <vfscanf+0x2c>
    23d6:	15 32       	cpi	r17, 0x25	; 37
    23d8:	41 f4       	brne	.+16     	; 0x23ea <vfscanf+0x66>
    23da:	fe 01       	movw	r30, r28
    23dc:	f3 fc       	sbrc	r15, 3
    23de:	15 91       	lpm	r17, Z+
    23e0:	f3 fe       	sbrs	r15, 3
    23e2:	11 91       	ld	r17, Z+
    23e4:	ef 01       	movw	r28, r30
    23e6:	15 32       	cpi	r17, 0x25	; 37
    23e8:	71 f4       	brne	.+28     	; 0x2406 <vfscanf+0x82>
    23ea:	c6 01       	movw	r24, r12
    23ec:	de d2       	rcall	.+1468   	; 0x29aa <fgetc>
    23ee:	97 fd       	sbrc	r25, 7
    23f0:	bd c0       	rjmp	.+378    	; 0x256c <vfscanf+0x1e8>
    23f2:	41 2f       	mov	r20, r17
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	9c 01       	movw	r18, r24
    23f8:	33 27       	eor	r19, r19
    23fa:	24 17       	cp	r18, r20
    23fc:	35 07       	cpc	r19, r21
    23fe:	c1 f2       	breq	.-80     	; 0x23b0 <vfscanf+0x2c>
    2400:	b6 01       	movw	r22, r12
    2402:	4d d3       	rcall	.+1690   	; 0x2a9e <ungetc>
    2404:	b5 c0       	rjmp	.+362    	; 0x2570 <vfscanf+0x1ec>
    2406:	1a 32       	cpi	r17, 0x2A	; 42
    2408:	39 f4       	brne	.+14     	; 0x2418 <vfscanf+0x94>
    240a:	f3 fc       	sbrc	r15, 3
    240c:	15 91       	lpm	r17, Z+
    240e:	f3 fe       	sbrs	r15, 3
    2410:	11 91       	ld	r17, Z+
    2412:	ef 01       	movw	r28, r30
    2414:	01 e0       	ldi	r16, 0x01	; 1
    2416:	01 c0       	rjmp	.+2      	; 0x241a <vfscanf+0x96>
    2418:	00 e0       	ldi	r16, 0x00	; 0
    241a:	e1 2c       	mov	r14, r1
    241c:	20 ed       	ldi	r18, 0xD0	; 208
    241e:	21 0f       	add	r18, r17
    2420:	2a 30       	cpi	r18, 0x0A	; 10
    2422:	78 f4       	brcc	.+30     	; 0x2442 <vfscanf+0xbe>
    2424:	02 60       	ori	r16, 0x02	; 2
    2426:	6e 2d       	mov	r22, r14
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	e2 de       	rcall	.-572    	; 0x21f6 <mulacc>
    2432:	e6 2e       	mov	r14, r22
    2434:	fe 01       	movw	r30, r28
    2436:	f3 fc       	sbrc	r15, 3
    2438:	15 91       	lpm	r17, Z+
    243a:	f3 fe       	sbrs	r15, 3
    243c:	11 91       	ld	r17, Z+
    243e:	ef 01       	movw	r28, r30
    2440:	ed cf       	rjmp	.-38     	; 0x241c <vfscanf+0x98>
    2442:	01 ff       	sbrs	r16, 1
    2444:	03 c0       	rjmp	.+6      	; 0x244c <vfscanf+0xc8>
    2446:	e1 10       	cpse	r14, r1
    2448:	03 c0       	rjmp	.+6      	; 0x2450 <vfscanf+0xcc>
    244a:	92 c0       	rjmp	.+292    	; 0x2570 <vfscanf+0x1ec>
    244c:	ee 24       	eor	r14, r14
    244e:	ea 94       	dec	r14
    2450:	18 36       	cpi	r17, 0x68	; 104
    2452:	19 f0       	breq	.+6      	; 0x245a <vfscanf+0xd6>
    2454:	1c 36       	cpi	r17, 0x6C	; 108
    2456:	51 f0       	breq	.+20     	; 0x246c <vfscanf+0xe8>
    2458:	10 c0       	rjmp	.+32     	; 0x247a <vfscanf+0xf6>
    245a:	fe 01       	movw	r30, r28
    245c:	f3 fc       	sbrc	r15, 3
    245e:	15 91       	lpm	r17, Z+
    2460:	f3 fe       	sbrs	r15, 3
    2462:	11 91       	ld	r17, Z+
    2464:	ef 01       	movw	r28, r30
    2466:	18 36       	cpi	r17, 0x68	; 104
    2468:	41 f4       	brne	.+16     	; 0x247a <vfscanf+0xf6>
    246a:	08 60       	ori	r16, 0x08	; 8
    246c:	04 60       	ori	r16, 0x04	; 4
    246e:	fe 01       	movw	r30, r28
    2470:	f3 fc       	sbrc	r15, 3
    2472:	15 91       	lpm	r17, Z+
    2474:	f3 fe       	sbrs	r15, 3
    2476:	11 91       	ld	r17, Z+
    2478:	ef 01       	movw	r28, r30
    247a:	11 23       	and	r17, r17
    247c:	09 f4       	brne	.+2      	; 0x2480 <vfscanf+0xfc>
    247e:	78 c0       	rjmp	.+240    	; 0x2570 <vfscanf+0x1ec>
    2480:	61 2f       	mov	r22, r17
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	8f ec       	ldi	r24, 0xCF	; 207
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	85 d2       	rcall	.+1290   	; 0x2994 <strchr_P>
    248a:	89 2b       	or	r24, r25
    248c:	09 f4       	brne	.+2      	; 0x2490 <vfscanf+0x10c>
    248e:	70 c0       	rjmp	.+224    	; 0x2570 <vfscanf+0x1ec>
    2490:	00 fd       	sbrc	r16, 0
    2492:	07 c0       	rjmp	.+14     	; 0x24a2 <vfscanf+0x11e>
    2494:	f5 01       	movw	r30, r10
    2496:	80 80       	ld	r8, Z
    2498:	91 80       	ldd	r9, Z+1	; 0x01
    249a:	c5 01       	movw	r24, r10
    249c:	02 96       	adiw	r24, 0x02	; 2
    249e:	5c 01       	movw	r10, r24
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <vfscanf+0x122>
    24a2:	81 2c       	mov	r8, r1
    24a4:	91 2c       	mov	r9, r1
    24a6:	1e 36       	cpi	r17, 0x6E	; 110
    24a8:	49 f4       	brne	.+18     	; 0x24bc <vfscanf+0x138>
    24aa:	f6 01       	movw	r30, r12
    24ac:	46 81       	ldd	r20, Z+6	; 0x06
    24ae:	57 81       	ldd	r21, Z+7	; 0x07
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	20 2f       	mov	r18, r16
    24b6:	c4 01       	movw	r24, r8
    24b8:	92 de       	rcall	.-732    	; 0x21de <putval>
    24ba:	7a cf       	rjmp	.-268    	; 0x23b0 <vfscanf+0x2c>
    24bc:	13 36       	cpi	r17, 0x63	; 99
    24be:	a1 f4       	brne	.+40     	; 0x24e8 <vfscanf+0x164>
    24c0:	01 fd       	sbrc	r16, 1
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <vfscanf+0x144>
    24c4:	ee 24       	eor	r14, r14
    24c6:	e3 94       	inc	r14
    24c8:	c6 01       	movw	r24, r12
    24ca:	6f d2       	rcall	.+1246   	; 0x29aa <fgetc>
    24cc:	97 fd       	sbrc	r25, 7
    24ce:	4e c0       	rjmp	.+156    	; 0x256c <vfscanf+0x1e8>
    24d0:	81 14       	cp	r8, r1
    24d2:	91 04       	cpc	r9, r1
    24d4:	29 f0       	breq	.+10     	; 0x24e0 <vfscanf+0x15c>
    24d6:	f4 01       	movw	r30, r8
    24d8:	80 83       	st	Z, r24
    24da:	c4 01       	movw	r24, r8
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	4c 01       	movw	r8, r24
    24e0:	ea 94       	dec	r14
    24e2:	e1 10       	cpse	r14, r1
    24e4:	f1 cf       	rjmp	.-30     	; 0x24c8 <vfscanf+0x144>
    24e6:	3e c0       	rjmp	.+124    	; 0x2564 <vfscanf+0x1e0>
    24e8:	c6 01       	movw	r24, r12
    24ea:	ac de       	rcall	.-680    	; 0x2244 <skip_spaces>
    24ec:	97 fd       	sbrc	r25, 7
    24ee:	3e c0       	rjmp	.+124    	; 0x256c <vfscanf+0x1e8>
    24f0:	1f 36       	cpi	r17, 0x6F	; 111
    24f2:	49 f1       	breq	.+82     	; 0x2546 <vfscanf+0x1c2>
    24f4:	28 f4       	brcc	.+10     	; 0x2500 <vfscanf+0x17c>
    24f6:	14 36       	cpi	r17, 0x64	; 100
    24f8:	21 f1       	breq	.+72     	; 0x2542 <vfscanf+0x1be>
    24fa:	19 36       	cpi	r17, 0x69	; 105
    24fc:	39 f1       	breq	.+78     	; 0x254c <vfscanf+0x1c8>
    24fe:	25 c0       	rjmp	.+74     	; 0x254a <vfscanf+0x1c6>
    2500:	13 37       	cpi	r17, 0x73	; 115
    2502:	71 f0       	breq	.+28     	; 0x2520 <vfscanf+0x19c>
    2504:	15 37       	cpi	r17, 0x75	; 117
    2506:	e9 f0       	breq	.+58     	; 0x2542 <vfscanf+0x1be>
    2508:	20 c0       	rjmp	.+64     	; 0x254a <vfscanf+0x1c6>
    250a:	81 14       	cp	r8, r1
    250c:	91 04       	cpc	r9, r1
    250e:	29 f0       	breq	.+10     	; 0x251a <vfscanf+0x196>
    2510:	f4 01       	movw	r30, r8
    2512:	60 82       	st	Z, r6
    2514:	c4 01       	movw	r24, r8
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	4c 01       	movw	r8, r24
    251a:	ea 94       	dec	r14
    251c:	ee 20       	and	r14, r14
    251e:	59 f0       	breq	.+22     	; 0x2536 <vfscanf+0x1b2>
    2520:	c6 01       	movw	r24, r12
    2522:	43 d2       	rcall	.+1158   	; 0x29aa <fgetc>
    2524:	3c 01       	movw	r6, r24
    2526:	97 fd       	sbrc	r25, 7
    2528:	06 c0       	rjmp	.+12     	; 0x2536 <vfscanf+0x1b2>
    252a:	2c d2       	rcall	.+1112   	; 0x2984 <isspace>
    252c:	89 2b       	or	r24, r25
    252e:	69 f3       	breq	.-38     	; 0x250a <vfscanf+0x186>
    2530:	b6 01       	movw	r22, r12
    2532:	c3 01       	movw	r24, r6
    2534:	b4 d2       	rcall	.+1384   	; 0x2a9e <ungetc>
    2536:	81 14       	cp	r8, r1
    2538:	91 04       	cpc	r9, r1
    253a:	a1 f0       	breq	.+40     	; 0x2564 <vfscanf+0x1e0>
    253c:	f4 01       	movw	r30, r8
    253e:	10 82       	st	Z, r1
    2540:	11 c0       	rjmp	.+34     	; 0x2564 <vfscanf+0x1e0>
    2542:	00 62       	ori	r16, 0x20	; 32
    2544:	03 c0       	rjmp	.+6      	; 0x254c <vfscanf+0x1c8>
    2546:	00 61       	ori	r16, 0x10	; 16
    2548:	01 c0       	rjmp	.+2      	; 0x254c <vfscanf+0x1c8>
    254a:	00 64       	ori	r16, 0x40	; 64
    254c:	20 2f       	mov	r18, r16
    254e:	a4 01       	movw	r20, r8
    2550:	6e 2d       	mov	r22, r14
    2552:	c6 01       	movw	r24, r12
    2554:	8d de       	rcall	.-742    	; 0x2270 <conv_int>
    2556:	81 11       	cpse	r24, r1
    2558:	05 c0       	rjmp	.+10     	; 0x2564 <vfscanf+0x1e0>
    255a:	f6 01       	movw	r30, r12
    255c:	83 81       	ldd	r24, Z+3	; 0x03
    255e:	80 73       	andi	r24, 0x30	; 48
    2560:	29 f4       	brne	.+10     	; 0x256c <vfscanf+0x1e8>
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <vfscanf+0x1ec>
    2564:	00 fd       	sbrc	r16, 0
    2566:	24 cf       	rjmp	.-440    	; 0x23b0 <vfscanf+0x2c>
    2568:	53 94       	inc	r5
    256a:	22 cf       	rjmp	.-444    	; 0x23b0 <vfscanf+0x2c>
    256c:	55 20       	and	r5, r5
    256e:	19 f0       	breq	.+6      	; 0x2576 <vfscanf+0x1f2>
    2570:	85 2d       	mov	r24, r5
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	02 c0       	rjmp	.+4      	; 0x257a <vfscanf+0x1f6>
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	9f ef       	ldi	r25, 0xFF	; 255
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	1f 91       	pop	r17
    2580:	0f 91       	pop	r16
    2582:	ff 90       	pop	r15
    2584:	ef 90       	pop	r14
    2586:	df 90       	pop	r13
    2588:	cf 90       	pop	r12
    258a:	bf 90       	pop	r11
    258c:	af 90       	pop	r10
    258e:	9f 90       	pop	r9
    2590:	8f 90       	pop	r8
    2592:	7f 90       	pop	r7
    2594:	6f 90       	pop	r6
    2596:	5f 90       	pop	r5
    2598:	08 95       	ret

0000259a <__subsf3>:
    259a:	50 58       	subi	r21, 0x80	; 128

0000259c <__addsf3>:
    259c:	bb 27       	eor	r27, r27
    259e:	aa 27       	eor	r26, r26
    25a0:	0e d0       	rcall	.+28     	; 0x25be <__addsf3x>
    25a2:	0d c1       	rjmp	.+538    	; 0x27be <__fp_round>
    25a4:	fe d0       	rcall	.+508    	; 0x27a2 <__fp_pscA>
    25a6:	30 f0       	brcs	.+12     	; 0x25b4 <__addsf3+0x18>
    25a8:	03 d1       	rcall	.+518    	; 0x27b0 <__fp_pscB>
    25aa:	20 f0       	brcs	.+8      	; 0x25b4 <__addsf3+0x18>
    25ac:	31 f4       	brne	.+12     	; 0x25ba <__addsf3+0x1e>
    25ae:	9f 3f       	cpi	r25, 0xFF	; 255
    25b0:	11 f4       	brne	.+4      	; 0x25b6 <__addsf3+0x1a>
    25b2:	1e f4       	brtc	.+6      	; 0x25ba <__addsf3+0x1e>
    25b4:	f3 c0       	rjmp	.+486    	; 0x279c <__fp_nan>
    25b6:	0e f4       	brtc	.+2      	; 0x25ba <__addsf3+0x1e>
    25b8:	e0 95       	com	r30
    25ba:	e7 fb       	bst	r30, 7
    25bc:	e9 c0       	rjmp	.+466    	; 0x2790 <__fp_inf>

000025be <__addsf3x>:
    25be:	e9 2f       	mov	r30, r25
    25c0:	0f d1       	rcall	.+542    	; 0x27e0 <__fp_split3>
    25c2:	80 f3       	brcs	.-32     	; 0x25a4 <__addsf3+0x8>
    25c4:	ba 17       	cp	r27, r26
    25c6:	62 07       	cpc	r22, r18
    25c8:	73 07       	cpc	r23, r19
    25ca:	84 07       	cpc	r24, r20
    25cc:	95 07       	cpc	r25, r21
    25ce:	18 f0       	brcs	.+6      	; 0x25d6 <__addsf3x+0x18>
    25d0:	71 f4       	brne	.+28     	; 0x25ee <__addsf3x+0x30>
    25d2:	9e f5       	brtc	.+102    	; 0x263a <__addsf3x+0x7c>
    25d4:	27 c1       	rjmp	.+590    	; 0x2824 <__fp_zero>
    25d6:	0e f4       	brtc	.+2      	; 0x25da <__addsf3x+0x1c>
    25d8:	e0 95       	com	r30
    25da:	0b 2e       	mov	r0, r27
    25dc:	ba 2f       	mov	r27, r26
    25de:	a0 2d       	mov	r26, r0
    25e0:	0b 01       	movw	r0, r22
    25e2:	b9 01       	movw	r22, r18
    25e4:	90 01       	movw	r18, r0
    25e6:	0c 01       	movw	r0, r24
    25e8:	ca 01       	movw	r24, r20
    25ea:	a0 01       	movw	r20, r0
    25ec:	11 24       	eor	r1, r1
    25ee:	ff 27       	eor	r31, r31
    25f0:	59 1b       	sub	r21, r25
    25f2:	99 f0       	breq	.+38     	; 0x261a <__addsf3x+0x5c>
    25f4:	59 3f       	cpi	r21, 0xF9	; 249
    25f6:	50 f4       	brcc	.+20     	; 0x260c <__addsf3x+0x4e>
    25f8:	50 3e       	cpi	r21, 0xE0	; 224
    25fa:	68 f1       	brcs	.+90     	; 0x2656 <__addsf3x+0x98>
    25fc:	1a 16       	cp	r1, r26
    25fe:	f0 40       	sbci	r31, 0x00	; 0
    2600:	a2 2f       	mov	r26, r18
    2602:	23 2f       	mov	r18, r19
    2604:	34 2f       	mov	r19, r20
    2606:	44 27       	eor	r20, r20
    2608:	58 5f       	subi	r21, 0xF8	; 248
    260a:	f3 cf       	rjmp	.-26     	; 0x25f2 <__addsf3x+0x34>
    260c:	46 95       	lsr	r20
    260e:	37 95       	ror	r19
    2610:	27 95       	ror	r18
    2612:	a7 95       	ror	r26
    2614:	f0 40       	sbci	r31, 0x00	; 0
    2616:	53 95       	inc	r21
    2618:	c9 f7       	brne	.-14     	; 0x260c <__addsf3x+0x4e>
    261a:	7e f4       	brtc	.+30     	; 0x263a <__addsf3x+0x7c>
    261c:	1f 16       	cp	r1, r31
    261e:	ba 0b       	sbc	r27, r26
    2620:	62 0b       	sbc	r22, r18
    2622:	73 0b       	sbc	r23, r19
    2624:	84 0b       	sbc	r24, r20
    2626:	ba f0       	brmi	.+46     	; 0x2656 <__addsf3x+0x98>
    2628:	91 50       	subi	r25, 0x01	; 1
    262a:	a1 f0       	breq	.+40     	; 0x2654 <__addsf3x+0x96>
    262c:	ff 0f       	add	r31, r31
    262e:	bb 1f       	adc	r27, r27
    2630:	66 1f       	adc	r22, r22
    2632:	77 1f       	adc	r23, r23
    2634:	88 1f       	adc	r24, r24
    2636:	c2 f7       	brpl	.-16     	; 0x2628 <__addsf3x+0x6a>
    2638:	0e c0       	rjmp	.+28     	; 0x2656 <__addsf3x+0x98>
    263a:	ba 0f       	add	r27, r26
    263c:	62 1f       	adc	r22, r18
    263e:	73 1f       	adc	r23, r19
    2640:	84 1f       	adc	r24, r20
    2642:	48 f4       	brcc	.+18     	; 0x2656 <__addsf3x+0x98>
    2644:	87 95       	ror	r24
    2646:	77 95       	ror	r23
    2648:	67 95       	ror	r22
    264a:	b7 95       	ror	r27
    264c:	f7 95       	ror	r31
    264e:	9e 3f       	cpi	r25, 0xFE	; 254
    2650:	08 f0       	brcs	.+2      	; 0x2654 <__addsf3x+0x96>
    2652:	b3 cf       	rjmp	.-154    	; 0x25ba <__addsf3+0x1e>
    2654:	93 95       	inc	r25
    2656:	88 0f       	add	r24, r24
    2658:	08 f0       	brcs	.+2      	; 0x265c <__addsf3x+0x9e>
    265a:	99 27       	eor	r25, r25
    265c:	ee 0f       	add	r30, r30
    265e:	97 95       	ror	r25
    2660:	87 95       	ror	r24
    2662:	08 95       	ret

00002664 <__cmpsf2>:
    2664:	71 d0       	rcall	.+226    	; 0x2748 <__fp_cmp>
    2666:	08 f4       	brcc	.+2      	; 0x266a <__cmpsf2+0x6>
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	08 95       	ret

0000266c <__fixsfsi>:
    266c:	04 d0       	rcall	.+8      	; 0x2676 <__fixunssfsi>
    266e:	68 94       	set
    2670:	b1 11       	cpse	r27, r1
    2672:	d9 c0       	rjmp	.+434    	; 0x2826 <__fp_szero>
    2674:	08 95       	ret

00002676 <__fixunssfsi>:
    2676:	bc d0       	rcall	.+376    	; 0x27f0 <__fp_splitA>
    2678:	88 f0       	brcs	.+34     	; 0x269c <__fixunssfsi+0x26>
    267a:	9f 57       	subi	r25, 0x7F	; 127
    267c:	90 f0       	brcs	.+36     	; 0x26a2 <__fixunssfsi+0x2c>
    267e:	b9 2f       	mov	r27, r25
    2680:	99 27       	eor	r25, r25
    2682:	b7 51       	subi	r27, 0x17	; 23
    2684:	a0 f0       	brcs	.+40     	; 0x26ae <__fixunssfsi+0x38>
    2686:	d1 f0       	breq	.+52     	; 0x26bc <__fixunssfsi+0x46>
    2688:	66 0f       	add	r22, r22
    268a:	77 1f       	adc	r23, r23
    268c:	88 1f       	adc	r24, r24
    268e:	99 1f       	adc	r25, r25
    2690:	1a f0       	brmi	.+6      	; 0x2698 <__fixunssfsi+0x22>
    2692:	ba 95       	dec	r27
    2694:	c9 f7       	brne	.-14     	; 0x2688 <__fixunssfsi+0x12>
    2696:	12 c0       	rjmp	.+36     	; 0x26bc <__fixunssfsi+0x46>
    2698:	b1 30       	cpi	r27, 0x01	; 1
    269a:	81 f0       	breq	.+32     	; 0x26bc <__fixunssfsi+0x46>
    269c:	c3 d0       	rcall	.+390    	; 0x2824 <__fp_zero>
    269e:	b1 e0       	ldi	r27, 0x01	; 1
    26a0:	08 95       	ret
    26a2:	c0 c0       	rjmp	.+384    	; 0x2824 <__fp_zero>
    26a4:	67 2f       	mov	r22, r23
    26a6:	78 2f       	mov	r23, r24
    26a8:	88 27       	eor	r24, r24
    26aa:	b8 5f       	subi	r27, 0xF8	; 248
    26ac:	39 f0       	breq	.+14     	; 0x26bc <__fixunssfsi+0x46>
    26ae:	b9 3f       	cpi	r27, 0xF9	; 249
    26b0:	cc f3       	brlt	.-14     	; 0x26a4 <__fixunssfsi+0x2e>
    26b2:	86 95       	lsr	r24
    26b4:	77 95       	ror	r23
    26b6:	67 95       	ror	r22
    26b8:	b3 95       	inc	r27
    26ba:	d9 f7       	brne	.-10     	; 0x26b2 <__fixunssfsi+0x3c>
    26bc:	3e f4       	brtc	.+14     	; 0x26cc <__fixunssfsi+0x56>
    26be:	90 95       	com	r25
    26c0:	80 95       	com	r24
    26c2:	70 95       	com	r23
    26c4:	61 95       	neg	r22
    26c6:	7f 4f       	sbci	r23, 0xFF	; 255
    26c8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ca:	9f 4f       	sbci	r25, 0xFF	; 255
    26cc:	08 95       	ret

000026ce <__floatunsisf>:
    26ce:	e8 94       	clt
    26d0:	09 c0       	rjmp	.+18     	; 0x26e4 <__floatsisf+0x12>

000026d2 <__floatsisf>:
    26d2:	97 fb       	bst	r25, 7
    26d4:	3e f4       	brtc	.+14     	; 0x26e4 <__floatsisf+0x12>
    26d6:	90 95       	com	r25
    26d8:	80 95       	com	r24
    26da:	70 95       	com	r23
    26dc:	61 95       	neg	r22
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	8f 4f       	sbci	r24, 0xFF	; 255
    26e2:	9f 4f       	sbci	r25, 0xFF	; 255
    26e4:	99 23       	and	r25, r25
    26e6:	a9 f0       	breq	.+42     	; 0x2712 <__floatsisf+0x40>
    26e8:	f9 2f       	mov	r31, r25
    26ea:	96 e9       	ldi	r25, 0x96	; 150
    26ec:	bb 27       	eor	r27, r27
    26ee:	93 95       	inc	r25
    26f0:	f6 95       	lsr	r31
    26f2:	87 95       	ror	r24
    26f4:	77 95       	ror	r23
    26f6:	67 95       	ror	r22
    26f8:	b7 95       	ror	r27
    26fa:	f1 11       	cpse	r31, r1
    26fc:	f8 cf       	rjmp	.-16     	; 0x26ee <__floatsisf+0x1c>
    26fe:	fa f4       	brpl	.+62     	; 0x273e <__floatsisf+0x6c>
    2700:	bb 0f       	add	r27, r27
    2702:	11 f4       	brne	.+4      	; 0x2708 <__floatsisf+0x36>
    2704:	60 ff       	sbrs	r22, 0
    2706:	1b c0       	rjmp	.+54     	; 0x273e <__floatsisf+0x6c>
    2708:	6f 5f       	subi	r22, 0xFF	; 255
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	8f 4f       	sbci	r24, 0xFF	; 255
    270e:	9f 4f       	sbci	r25, 0xFF	; 255
    2710:	16 c0       	rjmp	.+44     	; 0x273e <__floatsisf+0x6c>
    2712:	88 23       	and	r24, r24
    2714:	11 f0       	breq	.+4      	; 0x271a <__floatsisf+0x48>
    2716:	96 e9       	ldi	r25, 0x96	; 150
    2718:	11 c0       	rjmp	.+34     	; 0x273c <__floatsisf+0x6a>
    271a:	77 23       	and	r23, r23
    271c:	21 f0       	breq	.+8      	; 0x2726 <__floatsisf+0x54>
    271e:	9e e8       	ldi	r25, 0x8E	; 142
    2720:	87 2f       	mov	r24, r23
    2722:	76 2f       	mov	r23, r22
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <__floatsisf+0x5e>
    2726:	66 23       	and	r22, r22
    2728:	71 f0       	breq	.+28     	; 0x2746 <__floatsisf+0x74>
    272a:	96 e8       	ldi	r25, 0x86	; 134
    272c:	86 2f       	mov	r24, r22
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	2a f0       	brmi	.+10     	; 0x273e <__floatsisf+0x6c>
    2734:	9a 95       	dec	r25
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	88 1f       	adc	r24, r24
    273c:	da f7       	brpl	.-10     	; 0x2734 <__floatsisf+0x62>
    273e:	88 0f       	add	r24, r24
    2740:	96 95       	lsr	r25
    2742:	87 95       	ror	r24
    2744:	97 f9       	bld	r25, 7
    2746:	08 95       	ret

00002748 <__fp_cmp>:
    2748:	99 0f       	add	r25, r25
    274a:	00 08       	sbc	r0, r0
    274c:	55 0f       	add	r21, r21
    274e:	aa 0b       	sbc	r26, r26
    2750:	e0 e8       	ldi	r30, 0x80	; 128
    2752:	fe ef       	ldi	r31, 0xFE	; 254
    2754:	16 16       	cp	r1, r22
    2756:	17 06       	cpc	r1, r23
    2758:	e8 07       	cpc	r30, r24
    275a:	f9 07       	cpc	r31, r25
    275c:	c0 f0       	brcs	.+48     	; 0x278e <__fp_cmp+0x46>
    275e:	12 16       	cp	r1, r18
    2760:	13 06       	cpc	r1, r19
    2762:	e4 07       	cpc	r30, r20
    2764:	f5 07       	cpc	r31, r21
    2766:	98 f0       	brcs	.+38     	; 0x278e <__fp_cmp+0x46>
    2768:	62 1b       	sub	r22, r18
    276a:	73 0b       	sbc	r23, r19
    276c:	84 0b       	sbc	r24, r20
    276e:	95 0b       	sbc	r25, r21
    2770:	39 f4       	brne	.+14     	; 0x2780 <__fp_cmp+0x38>
    2772:	0a 26       	eor	r0, r26
    2774:	61 f0       	breq	.+24     	; 0x278e <__fp_cmp+0x46>
    2776:	23 2b       	or	r18, r19
    2778:	24 2b       	or	r18, r20
    277a:	25 2b       	or	r18, r21
    277c:	21 f4       	brne	.+8      	; 0x2786 <__fp_cmp+0x3e>
    277e:	08 95       	ret
    2780:	0a 26       	eor	r0, r26
    2782:	09 f4       	brne	.+2      	; 0x2786 <__fp_cmp+0x3e>
    2784:	a1 40       	sbci	r26, 0x01	; 1
    2786:	a6 95       	lsr	r26
    2788:	8f ef       	ldi	r24, 0xFF	; 255
    278a:	81 1d       	adc	r24, r1
    278c:	81 1d       	adc	r24, r1
    278e:	08 95       	ret

00002790 <__fp_inf>:
    2790:	97 f9       	bld	r25, 7
    2792:	9f 67       	ori	r25, 0x7F	; 127
    2794:	80 e8       	ldi	r24, 0x80	; 128
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	08 95       	ret

0000279c <__fp_nan>:
    279c:	9f ef       	ldi	r25, 0xFF	; 255
    279e:	80 ec       	ldi	r24, 0xC0	; 192
    27a0:	08 95       	ret

000027a2 <__fp_pscA>:
    27a2:	00 24       	eor	r0, r0
    27a4:	0a 94       	dec	r0
    27a6:	16 16       	cp	r1, r22
    27a8:	17 06       	cpc	r1, r23
    27aa:	18 06       	cpc	r1, r24
    27ac:	09 06       	cpc	r0, r25
    27ae:	08 95       	ret

000027b0 <__fp_pscB>:
    27b0:	00 24       	eor	r0, r0
    27b2:	0a 94       	dec	r0
    27b4:	12 16       	cp	r1, r18
    27b6:	13 06       	cpc	r1, r19
    27b8:	14 06       	cpc	r1, r20
    27ba:	05 06       	cpc	r0, r21
    27bc:	08 95       	ret

000027be <__fp_round>:
    27be:	09 2e       	mov	r0, r25
    27c0:	03 94       	inc	r0
    27c2:	00 0c       	add	r0, r0
    27c4:	11 f4       	brne	.+4      	; 0x27ca <__fp_round+0xc>
    27c6:	88 23       	and	r24, r24
    27c8:	52 f0       	brmi	.+20     	; 0x27de <__fp_round+0x20>
    27ca:	bb 0f       	add	r27, r27
    27cc:	40 f4       	brcc	.+16     	; 0x27de <__fp_round+0x20>
    27ce:	bf 2b       	or	r27, r31
    27d0:	11 f4       	brne	.+4      	; 0x27d6 <__fp_round+0x18>
    27d2:	60 ff       	sbrs	r22, 0
    27d4:	04 c0       	rjmp	.+8      	; 0x27de <__fp_round+0x20>
    27d6:	6f 5f       	subi	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	8f 4f       	sbci	r24, 0xFF	; 255
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	08 95       	ret

000027e0 <__fp_split3>:
    27e0:	57 fd       	sbrc	r21, 7
    27e2:	90 58       	subi	r25, 0x80	; 128
    27e4:	44 0f       	add	r20, r20
    27e6:	55 1f       	adc	r21, r21
    27e8:	59 f0       	breq	.+22     	; 0x2800 <__fp_splitA+0x10>
    27ea:	5f 3f       	cpi	r21, 0xFF	; 255
    27ec:	71 f0       	breq	.+28     	; 0x280a <__fp_splitA+0x1a>
    27ee:	47 95       	ror	r20

000027f0 <__fp_splitA>:
    27f0:	88 0f       	add	r24, r24
    27f2:	97 fb       	bst	r25, 7
    27f4:	99 1f       	adc	r25, r25
    27f6:	61 f0       	breq	.+24     	; 0x2810 <__fp_splitA+0x20>
    27f8:	9f 3f       	cpi	r25, 0xFF	; 255
    27fa:	79 f0       	breq	.+30     	; 0x281a <__fp_splitA+0x2a>
    27fc:	87 95       	ror	r24
    27fe:	08 95       	ret
    2800:	12 16       	cp	r1, r18
    2802:	13 06       	cpc	r1, r19
    2804:	14 06       	cpc	r1, r20
    2806:	55 1f       	adc	r21, r21
    2808:	f2 cf       	rjmp	.-28     	; 0x27ee <__fp_split3+0xe>
    280a:	46 95       	lsr	r20
    280c:	f1 df       	rcall	.-30     	; 0x27f0 <__fp_splitA>
    280e:	08 c0       	rjmp	.+16     	; 0x2820 <__fp_splitA+0x30>
    2810:	16 16       	cp	r1, r22
    2812:	17 06       	cpc	r1, r23
    2814:	18 06       	cpc	r1, r24
    2816:	99 1f       	adc	r25, r25
    2818:	f1 cf       	rjmp	.-30     	; 0x27fc <__fp_splitA+0xc>
    281a:	86 95       	lsr	r24
    281c:	71 05       	cpc	r23, r1
    281e:	61 05       	cpc	r22, r1
    2820:	08 94       	sec
    2822:	08 95       	ret

00002824 <__fp_zero>:
    2824:	e8 94       	clt

00002826 <__fp_szero>:
    2826:	bb 27       	eor	r27, r27
    2828:	66 27       	eor	r22, r22
    282a:	77 27       	eor	r23, r23
    282c:	cb 01       	movw	r24, r22
    282e:	97 f9       	bld	r25, 7
    2830:	08 95       	ret

00002832 <__mulsf3>:
    2832:	0b d0       	rcall	.+22     	; 0x284a <__mulsf3x>
    2834:	c4 cf       	rjmp	.-120    	; 0x27be <__fp_round>
    2836:	b5 df       	rcall	.-150    	; 0x27a2 <__fp_pscA>
    2838:	28 f0       	brcs	.+10     	; 0x2844 <__mulsf3+0x12>
    283a:	ba df       	rcall	.-140    	; 0x27b0 <__fp_pscB>
    283c:	18 f0       	brcs	.+6      	; 0x2844 <__mulsf3+0x12>
    283e:	95 23       	and	r25, r21
    2840:	09 f0       	breq	.+2      	; 0x2844 <__mulsf3+0x12>
    2842:	a6 cf       	rjmp	.-180    	; 0x2790 <__fp_inf>
    2844:	ab cf       	rjmp	.-170    	; 0x279c <__fp_nan>
    2846:	11 24       	eor	r1, r1
    2848:	ee cf       	rjmp	.-36     	; 0x2826 <__fp_szero>

0000284a <__mulsf3x>:
    284a:	ca df       	rcall	.-108    	; 0x27e0 <__fp_split3>
    284c:	a0 f3       	brcs	.-24     	; 0x2836 <__mulsf3+0x4>

0000284e <__mulsf3_pse>:
    284e:	95 9f       	mul	r25, r21
    2850:	d1 f3       	breq	.-12     	; 0x2846 <__mulsf3+0x14>
    2852:	95 0f       	add	r25, r21
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	55 1f       	adc	r21, r21
    2858:	62 9f       	mul	r22, r18
    285a:	f0 01       	movw	r30, r0
    285c:	72 9f       	mul	r23, r18
    285e:	bb 27       	eor	r27, r27
    2860:	f0 0d       	add	r31, r0
    2862:	b1 1d       	adc	r27, r1
    2864:	63 9f       	mul	r22, r19
    2866:	aa 27       	eor	r26, r26
    2868:	f0 0d       	add	r31, r0
    286a:	b1 1d       	adc	r27, r1
    286c:	aa 1f       	adc	r26, r26
    286e:	64 9f       	mul	r22, r20
    2870:	66 27       	eor	r22, r22
    2872:	b0 0d       	add	r27, r0
    2874:	a1 1d       	adc	r26, r1
    2876:	66 1f       	adc	r22, r22
    2878:	82 9f       	mul	r24, r18
    287a:	22 27       	eor	r18, r18
    287c:	b0 0d       	add	r27, r0
    287e:	a1 1d       	adc	r26, r1
    2880:	62 1f       	adc	r22, r18
    2882:	73 9f       	mul	r23, r19
    2884:	b0 0d       	add	r27, r0
    2886:	a1 1d       	adc	r26, r1
    2888:	62 1f       	adc	r22, r18
    288a:	83 9f       	mul	r24, r19
    288c:	a0 0d       	add	r26, r0
    288e:	61 1d       	adc	r22, r1
    2890:	22 1f       	adc	r18, r18
    2892:	74 9f       	mul	r23, r20
    2894:	33 27       	eor	r19, r19
    2896:	a0 0d       	add	r26, r0
    2898:	61 1d       	adc	r22, r1
    289a:	23 1f       	adc	r18, r19
    289c:	84 9f       	mul	r24, r20
    289e:	60 0d       	add	r22, r0
    28a0:	21 1d       	adc	r18, r1
    28a2:	82 2f       	mov	r24, r18
    28a4:	76 2f       	mov	r23, r22
    28a6:	6a 2f       	mov	r22, r26
    28a8:	11 24       	eor	r1, r1
    28aa:	9f 57       	subi	r25, 0x7F	; 127
    28ac:	50 40       	sbci	r21, 0x00	; 0
    28ae:	8a f0       	brmi	.+34     	; 0x28d2 <__mulsf3_pse+0x84>
    28b0:	e1 f0       	breq	.+56     	; 0x28ea <__mulsf3_pse+0x9c>
    28b2:	88 23       	and	r24, r24
    28b4:	4a f0       	brmi	.+18     	; 0x28c8 <__mulsf3_pse+0x7a>
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	bb 1f       	adc	r27, r27
    28bc:	66 1f       	adc	r22, r22
    28be:	77 1f       	adc	r23, r23
    28c0:	88 1f       	adc	r24, r24
    28c2:	91 50       	subi	r25, 0x01	; 1
    28c4:	50 40       	sbci	r21, 0x00	; 0
    28c6:	a9 f7       	brne	.-22     	; 0x28b2 <__mulsf3_pse+0x64>
    28c8:	9e 3f       	cpi	r25, 0xFE	; 254
    28ca:	51 05       	cpc	r21, r1
    28cc:	70 f0       	brcs	.+28     	; 0x28ea <__mulsf3_pse+0x9c>
    28ce:	60 cf       	rjmp	.-320    	; 0x2790 <__fp_inf>
    28d0:	aa cf       	rjmp	.-172    	; 0x2826 <__fp_szero>
    28d2:	5f 3f       	cpi	r21, 0xFF	; 255
    28d4:	ec f3       	brlt	.-6      	; 0x28d0 <__mulsf3_pse+0x82>
    28d6:	98 3e       	cpi	r25, 0xE8	; 232
    28d8:	dc f3       	brlt	.-10     	; 0x28d0 <__mulsf3_pse+0x82>
    28da:	86 95       	lsr	r24
    28dc:	77 95       	ror	r23
    28de:	67 95       	ror	r22
    28e0:	b7 95       	ror	r27
    28e2:	f7 95       	ror	r31
    28e4:	e7 95       	ror	r30
    28e6:	9f 5f       	subi	r25, 0xFF	; 255
    28e8:	c1 f7       	brne	.-16     	; 0x28da <__mulsf3_pse+0x8c>
    28ea:	fe 2b       	or	r31, r30
    28ec:	88 0f       	add	r24, r24
    28ee:	91 1d       	adc	r25, r1
    28f0:	96 95       	lsr	r25
    28f2:	87 95       	ror	r24
    28f4:	97 f9       	bld	r25, 7
    28f6:	08 95       	ret

000028f8 <__udivmodsi4>:
    28f8:	a1 e2       	ldi	r26, 0x21	; 33
    28fa:	1a 2e       	mov	r1, r26
    28fc:	aa 1b       	sub	r26, r26
    28fe:	bb 1b       	sub	r27, r27
    2900:	fd 01       	movw	r30, r26
    2902:	0d c0       	rjmp	.+26     	; 0x291e <__udivmodsi4_ep>

00002904 <__udivmodsi4_loop>:
    2904:	aa 1f       	adc	r26, r26
    2906:	bb 1f       	adc	r27, r27
    2908:	ee 1f       	adc	r30, r30
    290a:	ff 1f       	adc	r31, r31
    290c:	a2 17       	cp	r26, r18
    290e:	b3 07       	cpc	r27, r19
    2910:	e4 07       	cpc	r30, r20
    2912:	f5 07       	cpc	r31, r21
    2914:	20 f0       	brcs	.+8      	; 0x291e <__udivmodsi4_ep>
    2916:	a2 1b       	sub	r26, r18
    2918:	b3 0b       	sbc	r27, r19
    291a:	e4 0b       	sbc	r30, r20
    291c:	f5 0b       	sbc	r31, r21

0000291e <__udivmodsi4_ep>:
    291e:	66 1f       	adc	r22, r22
    2920:	77 1f       	adc	r23, r23
    2922:	88 1f       	adc	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	1a 94       	dec	r1
    2928:	69 f7       	brne	.-38     	; 0x2904 <__udivmodsi4_loop>
    292a:	60 95       	com	r22
    292c:	70 95       	com	r23
    292e:	80 95       	com	r24
    2930:	90 95       	com	r25
    2932:	9b 01       	movw	r18, r22
    2934:	ac 01       	movw	r20, r24
    2936:	bd 01       	movw	r22, r26
    2938:	cf 01       	movw	r24, r30
    293a:	08 95       	ret

0000293c <__divmodsi4>:
    293c:	05 2e       	mov	r0, r21
    293e:	97 fb       	bst	r25, 7
    2940:	16 f4       	brtc	.+4      	; 0x2946 <__divmodsi4+0xa>
    2942:	00 94       	com	r0
    2944:	0f d0       	rcall	.+30     	; 0x2964 <__negsi2>
    2946:	57 fd       	sbrc	r21, 7
    2948:	05 d0       	rcall	.+10     	; 0x2954 <__divmodsi4_neg2>
    294a:	d6 df       	rcall	.-84     	; 0x28f8 <__udivmodsi4>
    294c:	07 fc       	sbrc	r0, 7
    294e:	02 d0       	rcall	.+4      	; 0x2954 <__divmodsi4_neg2>
    2950:	46 f4       	brtc	.+16     	; 0x2962 <__divmodsi4_exit>
    2952:	08 c0       	rjmp	.+16     	; 0x2964 <__negsi2>

00002954 <__divmodsi4_neg2>:
    2954:	50 95       	com	r21
    2956:	40 95       	com	r20
    2958:	30 95       	com	r19
    295a:	21 95       	neg	r18
    295c:	3f 4f       	sbci	r19, 0xFF	; 255
    295e:	4f 4f       	sbci	r20, 0xFF	; 255
    2960:	5f 4f       	sbci	r21, 0xFF	; 255

00002962 <__divmodsi4_exit>:
    2962:	08 95       	ret

00002964 <__negsi2>:
    2964:	90 95       	com	r25
    2966:	80 95       	com	r24
    2968:	70 95       	com	r23
    296a:	61 95       	neg	r22
    296c:	7f 4f       	sbci	r23, 0xFF	; 255
    296e:	8f 4f       	sbci	r24, 0xFF	; 255
    2970:	9f 4f       	sbci	r25, 0xFF	; 255
    2972:	08 95       	ret

00002974 <__tablejump2__>:
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	88 1f       	adc	r24, r24
    297a:	8b bf       	out	0x3b, r24	; 59
    297c:	07 90       	elpm	r0, Z+
    297e:	f6 91       	elpm	r31, Z
    2980:	e0 2d       	mov	r30, r0
    2982:	19 94       	eijmp

00002984 <isspace>:
    2984:	91 11       	cpse	r25, r1
    2986:	02 c1       	rjmp	.+516    	; 0x2b8c <__ctype_isfalse>
    2988:	80 32       	cpi	r24, 0x20	; 32
    298a:	19 f0       	breq	.+6      	; 0x2992 <isspace+0xe>
    298c:	89 50       	subi	r24, 0x09	; 9
    298e:	85 50       	subi	r24, 0x05	; 5
    2990:	d0 f7       	brcc	.-12     	; 0x2986 <isspace+0x2>
    2992:	08 95       	ret

00002994 <strchr_P>:
    2994:	fc 01       	movw	r30, r24
    2996:	05 90       	lpm	r0, Z+
    2998:	06 16       	cp	r0, r22
    299a:	21 f0       	breq	.+8      	; 0x29a4 <strchr_P+0x10>
    299c:	00 20       	and	r0, r0
    299e:	d9 f7       	brne	.-10     	; 0x2996 <strchr_P+0x2>
    29a0:	c0 01       	movw	r24, r0
    29a2:	08 95       	ret
    29a4:	31 97       	sbiw	r30, 0x01	; 1
    29a6:	cf 01       	movw	r24, r30
    29a8:	08 95       	ret

000029aa <fgetc>:
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	ec 01       	movw	r28, r24
    29b0:	2b 81       	ldd	r18, Y+3	; 0x03
    29b2:	20 ff       	sbrs	r18, 0
    29b4:	33 c0       	rjmp	.+102    	; 0x2a1c <fgetc+0x72>
    29b6:	26 ff       	sbrs	r18, 6
    29b8:	0a c0       	rjmp	.+20     	; 0x29ce <fgetc+0x24>
    29ba:	2f 7b       	andi	r18, 0xBF	; 191
    29bc:	2b 83       	std	Y+3, r18	; 0x03
    29be:	8e 81       	ldd	r24, Y+6	; 0x06
    29c0:	9f 81       	ldd	r25, Y+7	; 0x07
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	9f 83       	std	Y+7, r25	; 0x07
    29c6:	8e 83       	std	Y+6, r24	; 0x06
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	29 c0       	rjmp	.+82     	; 0x2a20 <fgetc+0x76>
    29ce:	22 ff       	sbrs	r18, 2
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <fgetc+0x46>
    29d2:	e8 81       	ld	r30, Y
    29d4:	f9 81       	ldd	r31, Y+1	; 0x01
    29d6:	80 81       	ld	r24, Z
    29d8:	08 2e       	mov	r0, r24
    29da:	00 0c       	add	r0, r0
    29dc:	99 0b       	sbc	r25, r25
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	19 f4       	brne	.+6      	; 0x29e8 <fgetc+0x3e>
    29e2:	20 62       	ori	r18, 0x20	; 32
    29e4:	2b 83       	std	Y+3, r18	; 0x03
    29e6:	1a c0       	rjmp	.+52     	; 0x2a1c <fgetc+0x72>
    29e8:	31 96       	adiw	r30, 0x01	; 1
    29ea:	f9 83       	std	Y+1, r31	; 0x01
    29ec:	e8 83       	st	Y, r30
    29ee:	0e c0       	rjmp	.+28     	; 0x2a0c <fgetc+0x62>
    29f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    29f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    29f4:	19 95       	eicall
    29f6:	97 ff       	sbrs	r25, 7
    29f8:	09 c0       	rjmp	.+18     	; 0x2a0c <fgetc+0x62>
    29fa:	2b 81       	ldd	r18, Y+3	; 0x03
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	11 f0       	breq	.+4      	; 0x2a04 <fgetc+0x5a>
    2a00:	80 e2       	ldi	r24, 0x20	; 32
    2a02:	01 c0       	rjmp	.+2      	; 0x2a06 <fgetc+0x5c>
    2a04:	80 e1       	ldi	r24, 0x10	; 16
    2a06:	82 2b       	or	r24, r18
    2a08:	8b 83       	std	Y+3, r24	; 0x03
    2a0a:	08 c0       	rjmp	.+16     	; 0x2a1c <fgetc+0x72>
    2a0c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a0e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a10:	2f 5f       	subi	r18, 0xFF	; 255
    2a12:	3f 4f       	sbci	r19, 0xFF	; 255
    2a14:	3f 83       	std	Y+7, r19	; 0x07
    2a16:	2e 83       	std	Y+6, r18	; 0x06
    2a18:	99 27       	eor	r25, r25
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <fgetc+0x76>
    2a1c:	8f ef       	ldi	r24, 0xFF	; 255
    2a1e:	9f ef       	ldi	r25, 0xFF	; 255
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	08 95       	ret

00002a26 <fputc>:
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	fb 01       	movw	r30, r22
    2a30:	23 81       	ldd	r18, Z+3	; 0x03
    2a32:	21 fd       	sbrc	r18, 1
    2a34:	03 c0       	rjmp	.+6      	; 0x2a3c <fputc+0x16>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	9f ef       	ldi	r25, 0xFF	; 255
    2a3a:	2c c0       	rjmp	.+88     	; 0x2a94 <fputc+0x6e>
    2a3c:	22 ff       	sbrs	r18, 2
    2a3e:	16 c0       	rjmp	.+44     	; 0x2a6c <fputc+0x46>
    2a40:	46 81       	ldd	r20, Z+6	; 0x06
    2a42:	57 81       	ldd	r21, Z+7	; 0x07
    2a44:	24 81       	ldd	r18, Z+4	; 0x04
    2a46:	35 81       	ldd	r19, Z+5	; 0x05
    2a48:	42 17       	cp	r20, r18
    2a4a:	53 07       	cpc	r21, r19
    2a4c:	44 f4       	brge	.+16     	; 0x2a5e <fputc+0x38>
    2a4e:	a0 81       	ld	r26, Z
    2a50:	b1 81       	ldd	r27, Z+1	; 0x01
    2a52:	9d 01       	movw	r18, r26
    2a54:	2f 5f       	subi	r18, 0xFF	; 255
    2a56:	3f 4f       	sbci	r19, 0xFF	; 255
    2a58:	31 83       	std	Z+1, r19	; 0x01
    2a5a:	20 83       	st	Z, r18
    2a5c:	8c 93       	st	X, r24
    2a5e:	26 81       	ldd	r18, Z+6	; 0x06
    2a60:	37 81       	ldd	r19, Z+7	; 0x07
    2a62:	2f 5f       	subi	r18, 0xFF	; 255
    2a64:	3f 4f       	sbci	r19, 0xFF	; 255
    2a66:	37 83       	std	Z+7, r19	; 0x07
    2a68:	26 83       	std	Z+6, r18	; 0x06
    2a6a:	14 c0       	rjmp	.+40     	; 0x2a94 <fputc+0x6e>
    2a6c:	8b 01       	movw	r16, r22
    2a6e:	ec 01       	movw	r28, r24
    2a70:	fb 01       	movw	r30, r22
    2a72:	00 84       	ldd	r0, Z+8	; 0x08
    2a74:	f1 85       	ldd	r31, Z+9	; 0x09
    2a76:	e0 2d       	mov	r30, r0
    2a78:	19 95       	eicall
    2a7a:	89 2b       	or	r24, r25
    2a7c:	e1 f6       	brne	.-72     	; 0x2a36 <fputc+0x10>
    2a7e:	d8 01       	movw	r26, r16
    2a80:	16 96       	adiw	r26, 0x06	; 6
    2a82:	8d 91       	ld	r24, X+
    2a84:	9c 91       	ld	r25, X
    2a86:	17 97       	sbiw	r26, 0x07	; 7
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	17 96       	adiw	r26, 0x07	; 7
    2a8c:	9c 93       	st	X, r25
    2a8e:	8e 93       	st	-X, r24
    2a90:	16 97       	sbiw	r26, 0x06	; 6
    2a92:	ce 01       	movw	r24, r28
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	08 95       	ret

00002a9e <ungetc>:
    2a9e:	fb 01       	movw	r30, r22
    2aa0:	23 81       	ldd	r18, Z+3	; 0x03
    2aa2:	20 ff       	sbrs	r18, 0
    2aa4:	12 c0       	rjmp	.+36     	; 0x2aca <ungetc+0x2c>
    2aa6:	26 fd       	sbrc	r18, 6
    2aa8:	10 c0       	rjmp	.+32     	; 0x2aca <ungetc+0x2c>
    2aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	93 07       	cpc	r25, r19
    2ab0:	61 f0       	breq	.+24     	; 0x2aca <ungetc+0x2c>
    2ab2:	82 83       	std	Z+2, r24	; 0x02
    2ab4:	2f 7d       	andi	r18, 0xDF	; 223
    2ab6:	20 64       	ori	r18, 0x40	; 64
    2ab8:	23 83       	std	Z+3, r18	; 0x03
    2aba:	26 81       	ldd	r18, Z+6	; 0x06
    2abc:	37 81       	ldd	r19, Z+7	; 0x07
    2abe:	21 50       	subi	r18, 0x01	; 1
    2ac0:	31 09       	sbc	r19, r1
    2ac2:	37 83       	std	Z+7, r19	; 0x07
    2ac4:	26 83       	std	Z+6, r18	; 0x06
    2ac6:	99 27       	eor	r25, r25
    2ac8:	08 95       	ret
    2aca:	8f ef       	ldi	r24, 0xFF	; 255
    2acc:	9f ef       	ldi	r25, 0xFF	; 255
    2ace:	08 95       	ret

00002ad0 <__ultoa_invert>:
    2ad0:	fa 01       	movw	r30, r20
    2ad2:	aa 27       	eor	r26, r26
    2ad4:	28 30       	cpi	r18, 0x08	; 8
    2ad6:	51 f1       	breq	.+84     	; 0x2b2c <__ultoa_invert+0x5c>
    2ad8:	20 31       	cpi	r18, 0x10	; 16
    2ada:	81 f1       	breq	.+96     	; 0x2b3c <__ultoa_invert+0x6c>
    2adc:	e8 94       	clt
    2ade:	6f 93       	push	r22
    2ae0:	6e 7f       	andi	r22, 0xFE	; 254
    2ae2:	6e 5f       	subi	r22, 0xFE	; 254
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	af 4f       	sbci	r26, 0xFF	; 255
    2aec:	b1 e0       	ldi	r27, 0x01	; 1
    2aee:	3e d0       	rcall	.+124    	; 0x2b6c <__ultoa_invert+0x9c>
    2af0:	b4 e0       	ldi	r27, 0x04	; 4
    2af2:	3c d0       	rcall	.+120    	; 0x2b6c <__ultoa_invert+0x9c>
    2af4:	67 0f       	add	r22, r23
    2af6:	78 1f       	adc	r23, r24
    2af8:	89 1f       	adc	r24, r25
    2afa:	9a 1f       	adc	r25, r26
    2afc:	a1 1d       	adc	r26, r1
    2afe:	68 0f       	add	r22, r24
    2b00:	79 1f       	adc	r23, r25
    2b02:	8a 1f       	adc	r24, r26
    2b04:	91 1d       	adc	r25, r1
    2b06:	a1 1d       	adc	r26, r1
    2b08:	6a 0f       	add	r22, r26
    2b0a:	71 1d       	adc	r23, r1
    2b0c:	81 1d       	adc	r24, r1
    2b0e:	91 1d       	adc	r25, r1
    2b10:	a1 1d       	adc	r26, r1
    2b12:	20 d0       	rcall	.+64     	; 0x2b54 <__ultoa_invert+0x84>
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <__ultoa_invert+0x48>
    2b16:	68 94       	set
    2b18:	3f 91       	pop	r19
    2b1a:	2a e0       	ldi	r18, 0x0A	; 10
    2b1c:	26 9f       	mul	r18, r22
    2b1e:	11 24       	eor	r1, r1
    2b20:	30 19       	sub	r19, r0
    2b22:	30 5d       	subi	r19, 0xD0	; 208
    2b24:	31 93       	st	Z+, r19
    2b26:	de f6       	brtc	.-74     	; 0x2ade <__ultoa_invert+0xe>
    2b28:	cf 01       	movw	r24, r30
    2b2a:	08 95       	ret
    2b2c:	46 2f       	mov	r20, r22
    2b2e:	47 70       	andi	r20, 0x07	; 7
    2b30:	40 5d       	subi	r20, 0xD0	; 208
    2b32:	41 93       	st	Z+, r20
    2b34:	b3 e0       	ldi	r27, 0x03	; 3
    2b36:	0f d0       	rcall	.+30     	; 0x2b56 <__ultoa_invert+0x86>
    2b38:	c9 f7       	brne	.-14     	; 0x2b2c <__ultoa_invert+0x5c>
    2b3a:	f6 cf       	rjmp	.-20     	; 0x2b28 <__ultoa_invert+0x58>
    2b3c:	46 2f       	mov	r20, r22
    2b3e:	4f 70       	andi	r20, 0x0F	; 15
    2b40:	40 5d       	subi	r20, 0xD0	; 208
    2b42:	4a 33       	cpi	r20, 0x3A	; 58
    2b44:	18 f0       	brcs	.+6      	; 0x2b4c <__ultoa_invert+0x7c>
    2b46:	49 5d       	subi	r20, 0xD9	; 217
    2b48:	31 fd       	sbrc	r19, 1
    2b4a:	40 52       	subi	r20, 0x20	; 32
    2b4c:	41 93       	st	Z+, r20
    2b4e:	02 d0       	rcall	.+4      	; 0x2b54 <__ultoa_invert+0x84>
    2b50:	a9 f7       	brne	.-22     	; 0x2b3c <__ultoa_invert+0x6c>
    2b52:	ea cf       	rjmp	.-44     	; 0x2b28 <__ultoa_invert+0x58>
    2b54:	b4 e0       	ldi	r27, 0x04	; 4
    2b56:	a6 95       	lsr	r26
    2b58:	97 95       	ror	r25
    2b5a:	87 95       	ror	r24
    2b5c:	77 95       	ror	r23
    2b5e:	67 95       	ror	r22
    2b60:	ba 95       	dec	r27
    2b62:	c9 f7       	brne	.-14     	; 0x2b56 <__ultoa_invert+0x86>
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	61 05       	cpc	r22, r1
    2b68:	71 05       	cpc	r23, r1
    2b6a:	08 95       	ret
    2b6c:	9b 01       	movw	r18, r22
    2b6e:	ac 01       	movw	r20, r24
    2b70:	0a 2e       	mov	r0, r26
    2b72:	06 94       	lsr	r0
    2b74:	57 95       	ror	r21
    2b76:	47 95       	ror	r20
    2b78:	37 95       	ror	r19
    2b7a:	27 95       	ror	r18
    2b7c:	ba 95       	dec	r27
    2b7e:	c9 f7       	brne	.-14     	; 0x2b72 <__ultoa_invert+0xa2>
    2b80:	62 0f       	add	r22, r18
    2b82:	73 1f       	adc	r23, r19
    2b84:	84 1f       	adc	r24, r20
    2b86:	95 1f       	adc	r25, r21
    2b88:	a0 1d       	adc	r26, r0
    2b8a:	08 95       	ret

00002b8c <__ctype_isfalse>:
    2b8c:	99 27       	eor	r25, r25
    2b8e:	88 27       	eor	r24, r24

00002b90 <__ctype_istrue>:
    2b90:	08 95       	ret

00002b92 <_exit>:
    2b92:	f8 94       	cli

00002b94 <__stop_program>:
    2b94:	ff cf       	rjmp	.-2      	; 0x2b94 <__stop_program>

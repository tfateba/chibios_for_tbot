
ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800200  00002f3a  00002fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ef  008002dc  008002dc  000030aa  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000030aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001116b  00000000  00000000  0000372c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f82  00000000  00000000  00014897  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a6d  00000000  00000000  00018819  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001254  00000000  00000000  0001d288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b68  00000000  00000000  0001e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006097  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  000260db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ec c0       	rjmp	.+472    	; 0x1da <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_1>
       8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_2>
       c:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_3>
      10:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_4>
      14:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_5>
      18:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_6>
      1c:	ff c0       	rjmp	.+510    	; 0x21c <__bad_interrupt>
      1e:	00 00       	nop
      20:	fd c0       	rjmp	.+506    	; 0x21c <__bad_interrupt>
      22:	00 00       	nop
      24:	fb c0       	rjmp	.+502    	; 0x21c <__bad_interrupt>
      26:	00 00       	nop
      28:	f9 c0       	rjmp	.+498    	; 0x21c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f7 c0       	rjmp	.+494    	; 0x21c <__bad_interrupt>
      2e:	00 00       	nop
      30:	f5 c0       	rjmp	.+490    	; 0x21c <__bad_interrupt>
      32:	00 00       	nop
      34:	f3 c0       	rjmp	.+486    	; 0x21c <__bad_interrupt>
      36:	00 00       	nop
      38:	f1 c0       	rjmp	.+482    	; 0x21c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ef c0       	rjmp	.+478    	; 0x21c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ed c0       	rjmp	.+474    	; 0x21c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_17>
      48:	e9 c0       	rjmp	.+466    	; 0x21c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e7 c0       	rjmp	.+462    	; 0x21c <__bad_interrupt>
      4e:	00 00       	nop
      50:	e5 c0       	rjmp	.+458    	; 0x21c <__bad_interrupt>
      52:	00 00       	nop
      54:	e3 c0       	rjmp	.+454    	; 0x21c <__bad_interrupt>
      56:	00 00       	nop
      58:	e1 c0       	rjmp	.+450    	; 0x21c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	df c0       	rjmp	.+446    	; 0x21c <__bad_interrupt>
      5e:	00 00       	nop
      60:	dd c0       	rjmp	.+442    	; 0x21c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_25>
      68:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_26>
      6c:	d7 c0       	rjmp	.+430    	; 0x21c <__bad_interrupt>
      6e:	00 00       	nop
      70:	d5 c0       	rjmp	.+426    	; 0x21c <__bad_interrupt>
      72:	00 00       	nop
      74:	d3 c0       	rjmp	.+422    	; 0x21c <__bad_interrupt>
      76:	00 00       	nop
      78:	d1 c0       	rjmp	.+418    	; 0x21c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cf c0       	rjmp	.+414    	; 0x21c <__bad_interrupt>
      7e:	00 00       	nop
      80:	cd c0       	rjmp	.+410    	; 0x21c <__bad_interrupt>
      82:	00 00       	nop
      84:	cb c0       	rjmp	.+406    	; 0x21c <__bad_interrupt>
      86:	00 00       	nop
      88:	c9 c0       	rjmp	.+402    	; 0x21c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c7 c0       	rjmp	.+398    	; 0x21c <__bad_interrupt>
      8e:	00 00       	nop
      90:	c5 c0       	rjmp	.+394    	; 0x21c <__bad_interrupt>
      92:	00 00       	nop
      94:	c3 c0       	rjmp	.+390    	; 0x21c <__bad_interrupt>
      96:	00 00       	nop
      98:	c1 c0       	rjmp	.+386    	; 0x21c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bf c0       	rjmp	.+382    	; 0x21c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bd c0       	rjmp	.+378    	; 0x21c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bb c0       	rjmp	.+374    	; 0x21c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b9 c0       	rjmp	.+370    	; 0x21c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b7 c0       	rjmp	.+366    	; 0x21c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b5 c0       	rjmp	.+362    	; 0x21c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b3 c0       	rjmp	.+358    	; 0x21c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b1 c0       	rjmp	.+354    	; 0x21c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	af c0       	rjmp	.+350    	; 0x21c <__bad_interrupt>
      be:	00 00       	nop
      c0:	ad c0       	rjmp	.+346    	; 0x21c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ab c0       	rjmp	.+342    	; 0x21c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a9 c0       	rjmp	.+338    	; 0x21c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a7 c0       	rjmp	.+334    	; 0x21c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a5 c0       	rjmp	.+330    	; 0x21c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a3 c0       	rjmp	.+326    	; 0x21c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a1 c0       	rjmp	.+322    	; 0x21c <__bad_interrupt>
      da:	00 00       	nop
      dc:	9f c0       	rjmp	.+318    	; 0x21c <__bad_interrupt>
      de:	00 00       	nop
      e0:	9d c0       	rjmp	.+314    	; 0x21c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	37 10       	cpse	r3, r7
      e6:	6d 0d       	add	r22, r13
      e8:	6d 0d       	add	r22, r13
      ea:	6d 0d       	add	r22, r13
      ec:	6d 0d       	add	r22, r13
      ee:	37 10       	cpse	r3, r7
      f0:	6d 0d       	add	r22, r13
      f2:	6d 0d       	add	r22, r13
      f4:	6d 0d       	add	r22, r13
      f6:	6d 0d       	add	r22, r13
      f8:	6d 0d       	add	r22, r13
      fa:	ed 0f       	add	r30, r29
      fc:	6d 0d       	add	r22, r13
      fe:	6d 0d       	add	r22, r13
     100:	6d 0d       	add	r22, r13
     102:	6d 0d       	add	r22, r13
     104:	6d 0d       	add	r22, r13
     106:	8b 0f       	add	r24, r27
     108:	6d 0d       	add	r22, r13
     10a:	6d 0d       	add	r22, r13
     10c:	2e 10       	cpse	r2, r14
     10e:	6d 0d       	add	r22, r13
     110:	6d 0d       	add	r22, r13
     112:	6d 0d       	add	r22, r13
     114:	6d 0d       	add	r22, r13
     116:	6d 0d       	add	r22, r13
     118:	6d 0d       	add	r22, r13
     11a:	6d 0d       	add	r22, r13
     11c:	6d 0d       	add	r22, r13
     11e:	6d 0d       	add	r22, r13
     120:	6d 0d       	add	r22, r13
     122:	78 0f       	add	r23, r24
     124:	37 10       	cpse	r3, r7
     126:	6d 0d       	add	r22, r13
     128:	54 0e       	add	r5, r20
     12a:	6d 0d       	add	r22, r13
     12c:	6d 0d       	add	r22, r13
     12e:	37 10       	cpse	r3, r7
     130:	6d 0d       	add	r22, r13
     132:	6d 0d       	add	r22, r13
     134:	6d 0d       	add	r22, r13
     136:	6d 0d       	add	r22, r13
     138:	6d 0d       	add	r22, r13
     13a:	ed 0f       	add	r30, r29
     13c:	6d 0d       	add	r22, r13
     13e:	6d 0d       	add	r22, r13
     140:	6d 0d       	add	r22, r13
     142:	1e 0e       	add	r1, r30
     144:	6d 0d       	add	r22, r13
     146:	8b 0f       	add	r24, r27
     148:	6d 0d       	add	r22, r13
     14a:	6d 0d       	add	r22, r13
     14c:	2e 10       	cpse	r2, r14
     14e:	92 10       	cpse	r9, r2
     150:	e8 0d       	add	r30, r8
     152:	e8 0d       	add	r30, r8
     154:	e8 0d       	add	r30, r8
     156:	e8 0d       	add	r30, r8
     158:	92 10       	cpse	r9, r2
     15a:	e8 0d       	add	r30, r8
     15c:	e8 0d       	add	r30, r8
     15e:	e8 0d       	add	r30, r8
     160:	e8 0d       	add	r30, r8
     162:	e8 0d       	add	r30, r8
     164:	ec 0f       	add	r30, r28
     166:	e8 0d       	add	r30, r8
     168:	e8 0d       	add	r30, r8
     16a:	e8 0d       	add	r30, r8
     16c:	e8 0d       	add	r30, r8
     16e:	e8 0d       	add	r30, r8
     170:	8a 0f       	add	r24, r26
     172:	e8 0d       	add	r30, r8
     174:	e8 0d       	add	r30, r8
     176:	ae 10       	cpse	r10, r14
     178:	e8 0d       	add	r30, r8
     17a:	e8 0d       	add	r30, r8
     17c:	e8 0d       	add	r30, r8
     17e:	e8 0d       	add	r30, r8
     180:	e8 0d       	add	r30, r8
     182:	e8 0d       	add	r30, r8
     184:	e8 0d       	add	r30, r8
     186:	e8 0d       	add	r30, r8
     188:	e8 0d       	add	r30, r8
     18a:	e8 0d       	add	r30, r8
     18c:	78 0f       	add	r23, r24
     18e:	92 10       	cpse	r9, r2
     190:	e8 0d       	add	r30, r8
     192:	54 0e       	add	r5, r20
     194:	e8 0d       	add	r30, r8
     196:	e8 0d       	add	r30, r8
     198:	92 10       	cpse	r9, r2
     19a:	e8 0d       	add	r30, r8
     19c:	e8 0d       	add	r30, r8
     19e:	e8 0d       	add	r30, r8
     1a0:	e8 0d       	add	r30, r8
     1a2:	e8 0d       	add	r30, r8
     1a4:	ec 0f       	add	r30, r28
     1a6:	e8 0d       	add	r30, r8
     1a8:	e8 0d       	add	r30, r8
     1aa:	e8 0d       	add	r30, r8
     1ac:	1e 0e       	add	r1, r30
     1ae:	e8 0d       	add	r30, r8
     1b0:	8a 0f       	add	r24, r26
     1b2:	e8 0d       	add	r30, r8
     1b4:	e8 0d       	add	r30, r8
     1b6:	ae 10       	cpse	r10, r14

000001b8 <__trampolines_end>:
     1b8:	45 46       	sbci	r20, 0x65	; 101
     1ba:	47 65       	ori	r20, 0x57	; 87
     1bc:	66 67       	ori	r22, 0x76	; 118
	...

000001bf <__c.2314>:
     1bf:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000001cf <__c.2449>:
     1cf:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

000001da <__ctors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	d1 e2       	ldi	r29, 0x21	; 33
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0c bf       	out	0x3c, r16	; 60

000001ea <__do_copy_data>:
     1ea:	12 e0       	ldi	r17, 0x02	; 2
     1ec:	a0 e0       	ldi	r26, 0x00	; 0
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	ea e3       	ldi	r30, 0x3A	; 58
     1f2:	ff e2       	ldi	r31, 0x2F	; 47
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0b bf       	out	0x3b, r16	; 59
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__do_copy_data+0x14>
     1fa:	07 90       	elpm	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	ac 3d       	cpi	r26, 0xDC	; 220
     200:	b1 07       	cpc	r27, r17
     202:	d9 f7       	brne	.-10     	; 0x1fa <__do_copy_data+0x10>

00000204 <__do_clear_bss>:
     204:	23 e0       	ldi	r18, 0x03	; 3
     206:	ac ed       	ldi	r26, 0xDC	; 220
     208:	b2 e0       	ldi	r27, 0x02	; 2
     20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
     20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
     20e:	ab 3c       	cpi	r26, 0xCB	; 203
     210:	b2 07       	cpc	r27, r18
     212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>
     214:	0e 94 21 11 	call	0x2242	; 0x2242 <main>
     218:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <_exit>

0000021c <__bad_interrupt>:
     21c:	f1 ce       	rjmp	.-542    	; 0x0 <__vectors>

0000021e <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     21e:	ff cf       	rjmp	.-2      	; 0x21e <_idle_thread>

00000220 <chSysInit>:
     220:	da d1       	rcall	.+948    	; 0x5d6 <_scheduler_init>
     222:	7b d0       	rcall	.+246    	; 0x31a <_vt_init>
     224:	40 e8       	ldi	r20, 0x80	; 128
     226:	62 e1       	ldi	r22, 0x12	; 18
     228:	72 e0       	ldi	r23, 0x02	; 2
     22a:	82 e6       	ldi	r24, 0x62	; 98
     22c:	93 e0       	ldi	r25, 0x03	; 3
     22e:	ea d2       	rcall	.+1492   	; 0x804 <_thread_init>
     230:	fc 01       	movw	r30, r24
     232:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <ch+0xc>
     236:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <ch+0xb>
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	95 87       	std	Z+13, r25	; 0x0d
     23e:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <__avr_in_isr>
     242:	78 94       	sei
     244:	87 e0       	ldi	r24, 0x07	; 7
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	61 c3       	rjmp	.+1730   	; 0x90c <chThdCreate>

0000024a <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
     256:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <ch+0xd>
     25a:	d0 91 59 03 	lds	r29, 0x0359	; 0x800359 <ch+0xe>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     25e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     262:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
     266:	4c 81       	ldd	r20, Y+4	; 0x04
     268:	5d 81       	ldd	r21, Y+5	; 0x05
     26a:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <ch+0x13>
     26e:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <ch+0x14>
     272:	bc 01       	movw	r22, r24
     274:	62 1b       	sub	r22, r18
     276:	73 0b       	sbc	r23, r19
     278:	64 17       	cp	r22, r20
     27a:	75 07       	cpc	r23, r21
     27c:	78 f1       	brcs	.+94     	; 0x2dc <chSysTimerHandlerI+0x92>
     27e:	08 e5       	ldi	r16, 0x58	; 88
     280:	13 e0       	ldi	r17, 0x03	; 3
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
     282:	24 0f       	add	r18, r20
     284:	35 1f       	adc	r19, r21
     286:	30 93 5f 03 	sts	0x035F, r19	; 0x80035f <ch+0x14>
     28a:	20 93 5e 03 	sts	0x035E, r18	; 0x80035e <ch+0x13>

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     28e:	e8 81       	ld	r30, Y
     290:	f9 81       	ldd	r31, Y+1	; 0x01
     292:	13 83       	std	Z+3, r17	; 0x03
     294:	02 83       	std	Z+2, r16	; 0x02
    ch.vtlist.next = vtp->next;
     296:	f0 93 59 03 	sts	0x0359, r31	; 0x800359 <ch+0xe>
     29a:	e0 93 58 03 	sts	0x0358, r30	; 0x800358 <ch+0xd>
    fn = vtp->func;
     29e:	ee 80       	ldd	r14, Y+6	; 0x06
     2a0:	ff 80       	ldd	r15, Y+7	; 0x07
    vtp->func = NULL;
     2a2:	1f 82       	std	Y+7, r1	; 0x07
     2a4:	1e 82       	std	Y+6, r1	; 0x06

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     2a6:	e8 55       	subi	r30, 0x58	; 88
     2a8:	f3 40       	sbci	r31, 0x03	; 3
     2aa:	59 f1       	breq	.+86     	; 0x302 <chSysTimerHandlerI+0xb8>
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
     2ac:	88 85       	ldd	r24, Y+8	; 0x08
     2ae:	99 85       	ldd	r25, Y+9	; 0x09
     2b0:	f7 01       	movw	r30, r14
     2b2:	19 95       	eicall
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
     2b4:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <ch+0xd>
     2b8:	d0 91 59 03 	lds	r29, 0x0359	; 0x800359 <ch+0xe>
     2bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     2c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
     2c4:	4c 81       	ldd	r20, Y+4	; 0x04
     2c6:	5d 81       	ldd	r21, Y+5	; 0x05
     2c8:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <ch+0x13>
     2cc:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <ch+0x14>
     2d0:	bc 01       	movw	r22, r24
     2d2:	62 1b       	sub	r22, r18
     2d4:	73 0b       	sbc	r23, r19
     2d6:	64 17       	cp	r22, r20
     2d8:	75 07       	cpc	r23, r21
     2da:	98 f6       	brcc	.-90     	; 0x282 <chSysTimerHandlerI+0x38>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     2dc:	c8 55       	subi	r28, 0x58	; 88
     2de:	d3 40       	sbci	r29, 0x03	; 3
     2e0:	a9 f0       	breq	.+42     	; 0x30c <chSysTimerHandlerI+0xc2>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
     2e2:	24 0f       	add	r18, r20
     2e4:	35 1f       	adc	r19, r21
     2e6:	28 1b       	sub	r18, r24
     2e8:	39 0b       	sbc	r19, r25
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
     2ea:	22 30       	cpi	r18, 0x02	; 2
     2ec:	31 05       	cpc	r19, r1
     2ee:	58 f0       	brcs	.+22     	; 0x306 <chSysTimerHandlerI+0xbc>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     2f0:	82 0f       	add	r24, r18
     2f2:	93 1f       	adc	r25, r19
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	06 c4       	rjmp	.+2060   	; 0xb0e <stSetAlarm>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     302:	02 d4       	rcall	.+2052   	; 0xb08 <stStopAlarm>
     304:	d3 cf       	rjmp	.-90     	; 0x2ac <chSysTimerHandlerI+0x62>
     306:	22 e0       	ldi	r18, 0x02	; 2
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f2 cf       	rjmp	.-28     	; 0x2f0 <chSysTimerHandlerI+0xa6>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	08 95       	ret

0000031a <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     31a:	eb e4       	ldi	r30, 0x4B	; 75
     31c:	f3 e0       	ldi	r31, 0x03	; 3
     31e:	88 e5       	ldi	r24, 0x58	; 88
     320:	93 e0       	ldi	r25, 0x03	; 3
     322:	96 87       	std	Z+14, r25	; 0x0e
     324:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     326:	90 8b       	std	Z+16, r25	; 0x10
     328:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (systime_t)-1;
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	9f ef       	ldi	r25, 0xFF	; 255
     32e:	92 8b       	std	Z+18, r25	; 0x12
     330:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
     332:	14 8a       	std	Z+20, r1	; 0x14
     334:	13 8a       	std	Z+19, r1	; 0x13
     336:	08 95       	ret

00000338 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	7c 01       	movw	r14, r24
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     346:	dc 01       	movw	r26, r24
     348:	19 96       	adiw	r26, 0x09	; 9
     34a:	3c 93       	st	X, r19
     34c:	2e 93       	st	-X, r18
     34e:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     350:	17 96       	adiw	r26, 0x07	; 7
     352:	5c 93       	st	X, r21
     354:	4e 93       	st	-X, r20
     356:	16 97       	sbiw	r26, 0x06	; 6
     358:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     35c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
     360:	62 30       	cpi	r22, 0x02	; 2
     362:	71 05       	cpc	r23, r1
     364:	08 f4       	brcc	.+2      	; 0x368 <chVTDoSetI+0x30>
     366:	59 c0       	rjmp	.+178    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     368:	00 91 58 03 	lds	r16, 0x0358	; 0x800358 <ch+0xd>
     36c:	10 91 59 03 	lds	r17, 0x0359	; 0x800359 <ch+0xe>
     370:	b3 e0       	ldi	r27, 0x03	; 3
     372:	08 35       	cpi	r16, 0x58	; 88
     374:	1b 07       	cpc	r17, r27
     376:	09 f4       	brne	.+2      	; 0x37a <chVTDoSetI+0x42>
     378:	5a c0       	rjmp	.+180    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
     37a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <ch+0x13>
     37e:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <ch+0x14>
     382:	28 1b       	sub	r18, r24
     384:	39 0b       	sbc	r19, r25
     386:	eb 01       	movw	r28, r22
     388:	c2 0f       	add	r28, r18
     38a:	d3 1f       	adc	r29, r19

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     38c:	d8 01       	movw	r26, r16

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;

    if (delta < now - ch.vtlist.lasttime) {
     38e:	c2 17       	cp	r28, r18
     390:	d3 07       	cpc	r29, r19
     392:	e0 f1       	brcs	.+120    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
     394:	14 96       	adiw	r26, 0x04	; 4
     396:	2d 91       	ld	r18, X+
     398:	3c 91       	ld	r19, X
     39a:	15 97       	sbiw	r26, 0x05	; 5
     39c:	c2 17       	cp	r28, r18
     39e:	d3 07       	cpc	r29, r19
     3a0:	48 f4       	brcc	.+18     	; 0x3b4 <chVTDoSetI+0x7c>
     3a2:	3e c0       	rjmp	.+124    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
     3a4:	c2 1b       	sub	r28, r18
     3a6:	d3 0b       	sbc	r29, r19
    p = p->next;
     3a8:	d8 01       	movw	r26, r16
    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
     3aa:	0d 91       	ld	r16, X+
     3ac:	1c 91       	ld	r17, X
     3ae:	f8 01       	movw	r30, r16
     3b0:	24 81       	ldd	r18, Z+4	; 0x04
     3b2:	35 81       	ldd	r19, Z+5	; 0x05
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     3b4:	2c 17       	cp	r18, r28
     3b6:	3d 07       	cpc	r19, r29
     3b8:	a8 f3       	brcs	.-22     	; 0x3a4 <chVTDoSetI+0x6c>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     3ba:	d7 01       	movw	r26, r14
     3bc:	0d 93       	st	X+, r16
     3be:	1c 93       	st	X, r17
  vtp->prev = vtp->next->prev;
     3c0:	d8 01       	movw	r26, r16
     3c2:	12 96       	adiw	r26, 0x02	; 2
     3c4:	ed 91       	ld	r30, X+
     3c6:	fc 91       	ld	r31, X
     3c8:	13 97       	sbiw	r26, 0x03	; 3
     3ca:	d7 01       	movw	r26, r14
     3cc:	13 96       	adiw	r26, 0x03	; 3
     3ce:	fc 93       	st	X, r31
     3d0:	ee 93       	st	-X, r30
     3d2:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     3d4:	f1 82       	std	Z+1, r15	; 0x01
     3d6:	e0 82       	st	Z, r14
  p->prev = vtp;
     3d8:	f8 01       	movw	r30, r16
     3da:	f3 82       	std	Z+3, r15	; 0x03
     3dc:	e2 82       	std	Z+2, r14	; 0x02
  vtp->delta = delta
     3de:	15 96       	adiw	r26, 0x05	; 5
     3e0:	dc 93       	st	X, r29
     3e2:	ce 93       	st	-X, r28
     3e4:	14 97       	sbiw	r26, 0x04	; 4

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
     3e6:	84 81       	ldd	r24, Z+4	; 0x04
     3e8:	95 81       	ldd	r25, Z+5	; 0x05
     3ea:	8c 1b       	sub	r24, r28
     3ec:	9d 0b       	sbc	r25, r29
     3ee:	95 83       	std	Z+5, r25	; 0x05
     3f0:	84 83       	std	Z+4, r24	; 0x04
  ch.vtlist.delta = (systime_t)-1;
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	9f ef       	ldi	r25, 0xFF	; 255
     3f6:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <ch+0x12>
     3fa:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <ch+0x11>
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	08 95       	ret

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     40c:	14 96       	adiw	r26, 0x04	; 4
     40e:	8d 91       	ld	r24, X+
     410:	9c 91       	ld	r25, X
     412:	15 97       	sbiw	r26, 0x05	; 5
     414:	c8 1b       	sub	r28, r24
     416:	d9 0b       	sbc	r29, r25
     418:	c8 cf       	rjmp	.-112    	; 0x3aa <chVTDoSetI+0x72>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
     41a:	62 e0       	ldi	r22, 0x02	; 2
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	a4 cf       	rjmp	.-184    	; 0x368 <chVTDoSetI+0x30>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     420:	8c 0f       	add	r24, r28
     422:	9d 1f       	adc	r25, r29
     424:	74 d3       	rcall	.+1768   	; 0xb0e <stSetAlarm>
     426:	f8 01       	movw	r30, r16
     428:	24 81       	ldd	r18, Z+4	; 0x04
     42a:	35 81       	ldd	r19, Z+5	; 0x05
     42c:	c3 cf       	rjmp	.-122    	; 0x3b4 <chVTDoSetI+0x7c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
     42e:	30 93 5f 03 	sts	0x035F, r19	; 0x80035f <ch+0x14>
     432:	20 93 5e 03 	sts	0x035E, r18	; 0x80035e <ch+0x13>
      ch.vtlist.next = vtp;
     436:	f0 92 59 03 	sts	0x0359, r15	; 0x800359 <ch+0xe>
     43a:	e0 92 58 03 	sts	0x0358, r14	; 0x800358 <ch+0xd>
      ch.vtlist.prev = vtp;
     43e:	f0 92 5b 03 	sts	0x035B, r15	; 0x80035b <ch+0x10>
     442:	e0 92 5a 03 	sts	0x035A, r14	; 0x80035a <ch+0xf>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
     446:	f7 01       	movw	r30, r14
     448:	11 83       	std	Z+1, r17	; 0x01
     44a:	00 83       	st	Z, r16
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
     44c:	13 83       	std	Z+3, r17	; 0x03
     44e:	02 83       	std	Z+2, r16	; 0x02
      vtp->delta = delay;
     450:	75 83       	std	Z+5, r23	; 0x05
     452:	64 83       	std	Z+4, r22	; 0x04
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
     454:	cb 01       	movw	r24, r22
     456:	82 0f       	add	r24, r18
     458:	93 1f       	adc	r25, r19

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	47 c3       	rjmp	.+1678   	; 0xaf6 <stStartAlarm>

00000468 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	fc 01       	movw	r30, r24
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
     46e:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <ch+0xd>
     472:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <ch+0xe>
     476:	a8 17       	cp	r26, r24
     478:	b9 07       	cpc	r27, r25
     47a:	09 f1       	breq	.+66     	; 0x4be <chVTDoResetI+0x56>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
     47c:	c2 81       	ldd	r28, Z+2	; 0x02
     47e:	d3 81       	ldd	r29, Z+3	; 0x03
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	99 83       	std	Y+1, r25	; 0x01
     486:	88 83       	st	Y, r24
    vtp->next->prev = vtp->prev;
     488:	a0 81       	ld	r26, Z
     48a:	b1 81       	ldd	r27, Z+1	; 0x01
     48c:	13 96       	adiw	r26, 0x03	; 3
     48e:	dc 93       	st	X, r29
     490:	ce 93       	st	-X, r28
     492:	12 97       	sbiw	r26, 0x02	; 2
    vtp->func = NULL;
     494:	17 82       	std	Z+7, r1	; 0x07
     496:	16 82       	std	Z+6, r1	; 0x06

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
     498:	63 e0       	ldi	r22, 0x03	; 3
     49a:	a8 35       	cpi	r26, 0x58	; 88
     49c:	b6 07       	cpc	r27, r22
     49e:	61 f0       	breq	.+24     	; 0x4b8 <chVTDoResetI+0x50>
      vtp->next->delta += vtp->delta;
     4a0:	14 96       	adiw	r26, 0x04	; 4
     4a2:	2d 91       	ld	r18, X+
     4a4:	3c 91       	ld	r19, X
     4a6:	15 97       	sbiw	r26, 0x05	; 5
     4a8:	84 81       	ldd	r24, Z+4	; 0x04
     4aa:	95 81       	ldd	r25, Z+5	; 0x05
     4ac:	82 0f       	add	r24, r18
     4ae:	93 1f       	adc	r25, r19
     4b0:	15 96       	adiw	r26, 0x05	; 5
     4b2:	9c 93       	st	X, r25
     4b4:	8e 93       	st	-X, r24
     4b6:	14 97       	sbiw	r26, 0x04	; 4
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
     4be:	ed 91       	ld	r30, X+
     4c0:	fc 91       	ld	r31, X
     4c2:	11 97       	sbiw	r26, 0x01	; 1
     4c4:	f0 93 59 03 	sts	0x0359, r31	; 0x800359 <ch+0xe>
     4c8:	e0 93 58 03 	sts	0x0358, r30	; 0x800358 <ch+0xd>
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
     4cc:	88 e5       	ldi	r24, 0x58	; 88
     4ce:	93 e0       	ldi	r25, 0x03	; 3
     4d0:	93 83       	std	Z+3, r25	; 0x03
     4d2:	82 83       	std	Z+2, r24	; 0x02
  vtp->func = NULL;
     4d4:	17 96       	adiw	r26, 0x07	; 7
     4d6:	1c 92       	st	X, r1
     4d8:	1e 92       	st	-X, r1
     4da:	16 97       	sbiw	r26, 0x06	; 6

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     4dc:	e8 17       	cp	r30, r24
     4de:	f9 07       	cpc	r31, r25
     4e0:	29 f1       	breq	.+74     	; 0x52c <chVTDoResetI+0xc4>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
     4e2:	24 81       	ldd	r18, Z+4	; 0x04
     4e4:	35 81       	ldd	r19, Z+5	; 0x05
     4e6:	14 96       	adiw	r26, 0x04	; 4
     4e8:	8d 91       	ld	r24, X+
     4ea:	9c 91       	ld	r25, X
     4ec:	15 97       	sbiw	r26, 0x05	; 5
     4ee:	28 0f       	add	r18, r24
     4f0:	39 1f       	adc	r19, r25
     4f2:	35 83       	std	Z+5, r19	; 0x05
     4f4:	24 83       	std	Z+4, r18	; 0x04
     4f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     4fa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
     4fe:	40 91 5e 03 	lds	r20, 0x035E	; 0x80035e <ch+0x13>
     502:	50 91 5f 03 	lds	r21, 0x035F	; 0x80035f <ch+0x14>
     506:	bc 01       	movw	r22, r24
     508:	64 1b       	sub	r22, r20
     50a:	75 0b       	sbc	r23, r21

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
     50c:	62 17       	cp	r22, r18
     50e:	73 07       	cpc	r23, r19
     510:	98 f6       	brcc	.-90     	; 0x4b8 <chVTDoResetI+0x50>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
     512:	26 1b       	sub	r18, r22
     514:	37 0b       	sbc	r19, r23

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
     516:	22 30       	cpi	r18, 0x02	; 2
     518:	31 05       	cpc	r19, r1
     51a:	28 f0       	brcs	.+10     	; 0x526 <chVTDoResetI+0xbe>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	f4 c2       	rjmp	.+1512   	; 0xb0e <stSetAlarm>
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
     526:	22 e0       	ldi	r18, 0x02	; 2
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f8 cf       	rjmp	.-16     	; 0x51c <chVTDoResetI+0xb4>
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     52c:	df 91       	pop	r29
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     52e:	cf 91       	pop	r28
     530:	eb c2       	rjmp	.+1494   	; 0xb08 <stStopAlarm>

00000532 <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	dc 01       	movw	r26, r24
     538:	1d 96       	adiw	r26, 0x0d	; 13
     53a:	8c 91       	ld	r24, X
     53c:	1d 97       	sbiw	r26, 0x0d	; 13
     53e:	84 30       	cpi	r24, 0x04	; 4
     540:	99 f1       	breq	.+102    	; 0x5a8 <wakeup+0x76>
     542:	70 f5       	brcc	.+92     	; 0x5a0 <wakeup+0x6e>
     544:	88 23       	and	r24, r24
     546:	49 f1       	breq	.+82     	; 0x59a <wakeup+0x68>
     548:	83 30       	cpi	r24, 0x03	; 3
     54a:	31 f4       	brne	.+12     	; 0x558 <wakeup+0x26>
     54c:	50 96       	adiw	r26, 0x10	; 16
     54e:	ed 91       	ld	r30, X+
     550:	fc 91       	ld	r31, X
     552:	51 97       	sbiw	r26, 0x11	; 17
     554:	11 82       	std	Z+1, r1	; 0x01
     556:	10 82       	st	Z, r1
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	9f ef       	ldi	r25, 0xFF	; 255
     55c:	51 96       	adiw	r26, 0x11	; 17
     55e:	9c 93       	st	X, r25
     560:	8e 93       	st	-X, r24
     562:	50 97       	sbiw	r26, 0x10	; 16
     564:	1d 96       	adiw	r26, 0x0d	; 13
     566:	1c 92       	st	X, r1
     568:	1d 97       	sbiw	r26, 0x0d	; 13
     56a:	14 96       	adiw	r26, 0x04	; 4
     56c:	2c 91       	ld	r18, X
     56e:	14 97       	sbiw	r26, 0x04	; 4
     570:	eb e4       	ldi	r30, 0x4B	; 75
     572:	f3 e0       	ldi	r31, 0x03	; 3
     574:	01 90       	ld	r0, Z+
     576:	f0 81       	ld	r31, Z
     578:	e0 2d       	mov	r30, r0
     57a:	94 81       	ldd	r25, Z+4	; 0x04
     57c:	92 17       	cp	r25, r18
     57e:	d0 f7       	brcc	.-12     	; 0x574 <wakeup+0x42>
     580:	11 96       	adiw	r26, 0x01	; 1
     582:	fc 93       	st	X, r31
     584:	ee 93       	st	-X, r30
     586:	c2 81       	ldd	r28, Z+2	; 0x02
     588:	d3 81       	ldd	r29, Z+3	; 0x03
     58a:	13 96       	adiw	r26, 0x03	; 3
     58c:	dc 93       	st	X, r29
     58e:	ce 93       	st	-X, r28
     590:	12 97       	sbiw	r26, 0x02	; 2
     592:	b9 83       	std	Y+1, r27	; 0x01
     594:	a8 83       	st	Y, r26
     596:	b3 83       	std	Z+3, r27	; 0x03
     598:	a2 83       	std	Z+2, r26	; 0x02
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret
     5a0:	85 30       	cpi	r24, 0x05	; 5
     5a2:	89 f0       	breq	.+34     	; 0x5c6 <wakeup+0x94>
     5a4:	87 30       	cpi	r24, 0x07	; 7
     5a6:	c1 f6       	brne	.-80     	; 0x558 <wakeup+0x26>
     5a8:	12 96       	adiw	r26, 0x02	; 2
     5aa:	ed 91       	ld	r30, X+
     5ac:	fc 91       	ld	r31, X
     5ae:	13 97       	sbiw	r26, 0x03	; 3
     5b0:	8d 91       	ld	r24, X+
     5b2:	9c 91       	ld	r25, X
     5b4:	11 97       	sbiw	r26, 0x01	; 1
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	80 83       	st	Z, r24
     5ba:	cd 91       	ld	r28, X+
     5bc:	dc 91       	ld	r29, X
     5be:	11 97       	sbiw	r26, 0x01	; 1
     5c0:	fb 83       	std	Y+3, r31	; 0x03
     5c2:	ea 83       	std	Y+2, r30	; 0x02
     5c4:	c9 cf       	rjmp	.-110    	; 0x558 <wakeup+0x26>
     5c6:	50 96       	adiw	r26, 0x10	; 16
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	51 97       	sbiw	r26, 0x11	; 17
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	84 83       	std	Z+4, r24	; 0x04
     5d4:	e9 cf       	rjmp	.-46     	; 0x5a8 <wakeup+0x76>

000005d6 <_scheduler_init>:
     5d6:	eb e4       	ldi	r30, 0x4B	; 75
     5d8:	f3 e0       	ldi	r31, 0x03	; 3
     5da:	f1 83       	std	Z+1, r31	; 0x01
     5dc:	e0 83       	st	Z, r30
     5de:	f3 83       	std	Z+3, r31	; 0x03
     5e0:	e2 83       	std	Z+2, r30	; 0x02
     5e2:	14 82       	std	Z+4, r1	; 0x04
     5e4:	f0 87       	std	Z+8, r31	; 0x08
     5e6:	e7 83       	std	Z+7, r30	; 0x07
     5e8:	f2 87       	std	Z+10, r31	; 0x0a
     5ea:	e1 87       	std	Z+9, r30	; 0x09
     5ec:	08 95       	ret

000005ee <chSchReadyI>:
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	dc 01       	movw	r26, r24
     5f4:	1d 96       	adiw	r26, 0x0d	; 13
     5f6:	1c 92       	st	X, r1
     5f8:	1d 97       	sbiw	r26, 0x0d	; 13
     5fa:	14 96       	adiw	r26, 0x04	; 4
     5fc:	2c 91       	ld	r18, X
     5fe:	14 97       	sbiw	r26, 0x04	; 4
     600:	eb e4       	ldi	r30, 0x4B	; 75
     602:	f3 e0       	ldi	r31, 0x03	; 3
     604:	01 90       	ld	r0, Z+
     606:	f0 81       	ld	r31, Z
     608:	e0 2d       	mov	r30, r0
     60a:	94 81       	ldd	r25, Z+4	; 0x04
     60c:	92 17       	cp	r25, r18
     60e:	d0 f7       	brcc	.-12     	; 0x604 <chSchReadyI+0x16>
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	fc 93       	st	X, r31
     614:	ee 93       	st	-X, r30
     616:	c2 81       	ldd	r28, Z+2	; 0x02
     618:	d3 81       	ldd	r29, Z+3	; 0x03
     61a:	13 96       	adiw	r26, 0x03	; 3
     61c:	dc 93       	st	X, r29
     61e:	ce 93       	st	-X, r28
     620:	12 97       	sbiw	r26, 0x02	; 2
     622:	b9 83       	std	Y+1, r27	; 0x01
     624:	a8 83       	st	Y, r26
     626:	b3 83       	std	Z+3, r27	; 0x03
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	cd 01       	movw	r24, r26
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <chSchGoSleepS>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	eb e4       	ldi	r30, 0x4B	; 75
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	63 85       	ldd	r22, Z+11	; 0x0b
     63c:	74 85       	ldd	r23, Z+12	; 0x0c
     63e:	db 01       	movw	r26, r22
     640:	1d 96       	adiw	r26, 0x0d	; 13
     642:	8c 93       	st	X, r24
     644:	80 81       	ld	r24, Z
     646:	91 81       	ldd	r25, Z+1	; 0x01
     648:	ec 01       	movw	r28, r24
     64a:	a8 81       	ld	r26, Y
     64c:	b9 81       	ldd	r27, Y+1	; 0x01
     64e:	b1 83       	std	Z+1, r27	; 0x01
     650:	a0 83       	st	Z, r26
     652:	13 96       	adiw	r26, 0x03	; 3
     654:	fc 93       	st	X, r31
     656:	ee 93       	st	-X, r30
     658:	12 97       	sbiw	r26, 0x02	; 2
     65a:	94 87       	std	Z+12, r25	; 0x0c
     65c:	83 87       	std	Z+11, r24	; 0x0b
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	2d 87       	std	Y+13, r18	; 0x0d
     662:	0c d2       	rcall	.+1048   	; 0xa7c <_port_switch>
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <chSchGoSleepTimeoutS>:
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	2a 97       	sbiw	r28, 0x0a	; 10
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	18 2f       	mov	r17, r24
     682:	6f 3f       	cpi	r22, 0xFF	; 255
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	78 07       	cpc	r23, r24
     688:	11 f1       	breq	.+68     	; 0x6ce <chSchGoSleepTimeoutS+0x64>
     68a:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <ch+0xb>
     68e:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <ch+0xc>
     692:	49 e9       	ldi	r20, 0x99	; 153
     694:	52 e0       	ldi	r21, 0x02	; 2
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	4e de       	rcall	.-868    	; 0x338 <chVTDoSetI>
     69c:	81 2f       	mov	r24, r17
     69e:	c9 df       	rcall	.-110    	; 0x632 <chSchGoSleepS>
     6a0:	8f 81       	ldd	r24, Y+7	; 0x07
     6a2:	98 85       	ldd	r25, Y+8	; 0x08
     6a4:	89 2b       	or	r24, r25
     6a6:	19 f0       	breq	.+6      	; 0x6ae <chSchGoSleepTimeoutS+0x44>
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	dd de       	rcall	.-582    	; 0x468 <chVTDoResetI>
     6ae:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <ch+0xb>
     6b2:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <ch+0xc>
     6b6:	80 89       	ldd	r24, Z+16	; 0x10
     6b8:	91 89       	ldd	r25, Z+17	; 0x11
     6ba:	2a 96       	adiw	r28, 0x0a	; 10
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	08 95       	ret
     6ce:	81 2f       	mov	r24, r17
     6d0:	b0 df       	rcall	.-160    	; 0x632 <chSchGoSleepS>
     6d2:	ed cf       	rjmp	.-38     	; 0x6ae <chSchGoSleepTimeoutS+0x44>

000006d4 <chSchWakeupS>:
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	dc 01       	movw	r26, r24
     6da:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <ch+0xb>
     6de:	d0 91 57 03 	lds	r29, 0x0357	; 0x800357 <ch+0xc>
     6e2:	51 96       	adiw	r26, 0x11	; 17
     6e4:	7c 93       	st	X, r23
     6e6:	6e 93       	st	-X, r22
     6e8:	50 97       	sbiw	r26, 0x10	; 16
     6ea:	14 96       	adiw	r26, 0x04	; 4
     6ec:	2c 91       	ld	r18, X
     6ee:	14 97       	sbiw	r26, 0x04	; 4
     6f0:	8c 81       	ldd	r24, Y+4	; 0x04
     6f2:	82 17       	cp	r24, r18
     6f4:	d8 f0       	brcs	.+54     	; 0x72c <chSchWakeupS+0x58>
     6f6:	1d 96       	adiw	r26, 0x0d	; 13
     6f8:	1c 92       	st	X, r1
     6fa:	1d 97       	sbiw	r26, 0x0d	; 13
     6fc:	eb e4       	ldi	r30, 0x4B	; 75
     6fe:	f3 e0       	ldi	r31, 0x03	; 3
     700:	01 90       	ld	r0, Z+
     702:	f0 81       	ld	r31, Z
     704:	e0 2d       	mov	r30, r0
     706:	94 81       	ldd	r25, Z+4	; 0x04
     708:	92 17       	cp	r25, r18
     70a:	d0 f7       	brcc	.-12     	; 0x700 <chSchWakeupS+0x2c>
     70c:	11 96       	adiw	r26, 0x01	; 1
     70e:	fc 93       	st	X, r31
     710:	ee 93       	st	-X, r30
     712:	c2 81       	ldd	r28, Z+2	; 0x02
     714:	d3 81       	ldd	r29, Z+3	; 0x03
     716:	13 96       	adiw	r26, 0x03	; 3
     718:	dc 93       	st	X, r29
     71a:	ce 93       	st	-X, r28
     71c:	12 97       	sbiw	r26, 0x02	; 2
     71e:	b9 83       	std	Y+1, r27	; 0x01
     720:	a8 83       	st	Y, r26
     722:	b3 83       	std	Z+3, r27	; 0x03
     724:	a2 83       	std	Z+2, r26	; 0x02
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret
     72c:	1d 86       	std	Y+13, r1	; 0x0d
     72e:	eb e4       	ldi	r30, 0x4B	; 75
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	01 90       	ld	r0, Z+
     734:	f0 81       	ld	r31, Z
     736:	e0 2d       	mov	r30, r0
     738:	94 81       	ldd	r25, Z+4	; 0x04
     73a:	98 17       	cp	r25, r24
     73c:	d0 f7       	brcc	.-12     	; 0x732 <chSchWakeupS+0x5e>
     73e:	cd 01       	movw	r24, r26
     740:	f9 83       	std	Y+1, r31	; 0x01
     742:	e8 83       	st	Y, r30
     744:	a2 81       	ldd	r26, Z+2	; 0x02
     746:	b3 81       	ldd	r27, Z+3	; 0x03
     748:	bb 83       	std	Y+3, r27	; 0x03
     74a:	aa 83       	std	Y+2, r26	; 0x02
     74c:	cd 93       	st	X+, r28
     74e:	dc 93       	st	X, r29
     750:	d3 83       	std	Z+3, r29	; 0x03
     752:	c2 83       	std	Z+2, r28	; 0x02
     754:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <ch+0xc>
     758:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <ch+0xb>
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	fc 01       	movw	r30, r24
     760:	25 87       	std	Z+13, r18	; 0x0d
     762:	be 01       	movw	r22, r28
     764:	8b d1       	rcall	.+790    	; 0xa7c <_port_switch>
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <chSchIsPreemptionRequired>:
     76c:	a0 91 4b 03 	lds	r26, 0x034B	; 0x80034b <ch>
     770:	b0 91 4c 03 	lds	r27, 0x034C	; 0x80034c <ch+0x1>
     774:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <ch+0xb>
     778:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <ch+0xc>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	14 96       	adiw	r26, 0x04	; 4
     780:	2c 91       	ld	r18, X
     782:	94 81       	ldd	r25, Z+4	; 0x04
     784:	92 17       	cp	r25, r18
     786:	08 f0       	brcs	.+2      	; 0x78a <chSchIsPreemptionRequired+0x1e>
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	08 95       	ret

0000078c <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
  thread_t *otp = currp;
     790:	a0 91 56 03 	lds	r26, 0x0356	; 0x800356 <ch+0xb>
     794:	b0 91 57 03 	lds	r27, 0x0357	; 0x800357 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     798:	40 91 4b 03 	lds	r20, 0x034B	; 0x80034b <ch>
     79c:	50 91 4c 03 	lds	r21, 0x034C	; 0x80034c <ch+0x1>

  tqp->next             = tp->queue.next;
     7a0:	ea 01       	movw	r28, r20
     7a2:	e8 81       	ld	r30, Y
     7a4:	f9 81       	ldd	r31, Y+1	; 0x01
     7a6:	f0 93 4c 03 	sts	0x034C, r31	; 0x80034c <ch+0x1>
     7aa:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     7ae:	8b e4       	ldi	r24, 0x4B	; 75
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	93 83       	std	Z+3, r25	; 0x03
     7b4:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     7b6:	50 93 57 03 	sts	0x0357, r21	; 0x800357 <ch+0xc>
     7ba:	40 93 56 03 	sts	0x0356, r20	; 0x800356 <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     7c2:	1d 96       	adiw	r26, 0x0d	; 13
     7c4:	1c 92       	st	X, r1
     7c6:	1d 97       	sbiw	r26, 0x0d	; 13
     7c8:	14 96       	adiw	r26, 0x04	; 4
     7ca:	2c 91       	ld	r18, X
     7cc:	14 97       	sbiw	r26, 0x04	; 4
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <chSchDoReschedule+0x4a>
     7d0:	01 90       	ld	r0, Z+
     7d2:	f0 81       	ld	r31, Z
     7d4:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     7d6:	94 81       	ldd	r25, Z+4	; 0x04
     7d8:	29 17       	cp	r18, r25
     7da:	d0 f3       	brcs	.-12     	; 0x7d0 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     7dc:	11 96       	adiw	r26, 0x01	; 1
     7de:	fc 93       	st	X, r31
     7e0:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	13 96       	adiw	r26, 0x03	; 3
     7e8:	9c 93       	st	X, r25
     7ea:	8e 93       	st	-X, r24
     7ec:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     7ee:	ec 01       	movw	r28, r24
     7f0:	b9 83       	std	Y+1, r27	; 0x01
     7f2:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     7f4:	b3 83       	std	Z+3, r27	; 0x03
     7f6:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     7f8:	bd 01       	movw	r22, r26
     7fa:	ca 01       	movw	r24, r20
     7fc:	3f d1       	rcall	.+638    	; 0xa7c <_port_switch>
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	fc 01       	movw	r30, r24
     80a:	44 83       	std	Z+4, r20	; 0x04
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	85 87       	std	Z+13, r24	; 0x0d
     810:	16 86       	std	Z+14, r1	; 0x0e
     812:	43 8f       	std	Z+27, r20	; 0x1b
     814:	12 8e       	std	Z+26, r1	; 0x1a
     816:	11 8e       	std	Z+25, r1	; 0x19
     818:	10 8e       	std	Z+24, r1	; 0x18
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	87 87       	std	Z+15, r24	; 0x0f
     81e:	74 87       	std	Z+12, r23	; 0x0c
     820:	63 87       	std	Z+11, r22	; 0x0b
     822:	ab e4       	ldi	r26, 0x4B	; 75
     824:	b3 e0       	ldi	r27, 0x03	; 3
     826:	b0 87       	std	Z+8, r27	; 0x08
     828:	a7 83       	std	Z+7, r26	; 0x07
     82a:	19 96       	adiw	r26, 0x09	; 9
     82c:	cd 91       	ld	r28, X+
     82e:	dc 91       	ld	r29, X
     830:	1a 97       	sbiw	r26, 0x0a	; 10
     832:	d2 87       	std	Z+10, r29	; 0x0a
     834:	c1 87       	std	Z+9, r28	; 0x09
     836:	f8 87       	std	Y+8, r31	; 0x08
     838:	ef 83       	std	Y+7, r30	; 0x07
     83a:	1a 96       	adiw	r26, 0x0a	; 10
     83c:	fc 93       	st	X, r31
     83e:	ee 93       	st	-X, r30
     840:	19 97       	sbiw	r26, 0x09	; 9
     842:	cf 01       	movw	r24, r30
     844:	42 96       	adiw	r24, 0x12	; 18
     846:	93 8b       	std	Z+19, r25	; 0x13
     848:	82 8b       	std	Z+18, r24	; 0x12
     84a:	02 96       	adiw	r24, 0x02	; 2
     84c:	95 8b       	std	Z+21, r25	; 0x15
     84e:	84 8b       	std	Z+20, r24	; 0x14
     850:	97 8b       	std	Z+23, r25	; 0x17
     852:	86 8b       	std	Z+22, r24	; 0x16
     854:	cf 01       	movw	r24, r30
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <chThdCreateSuspendedI>:
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	dc 01       	movw	r26, r24
     862:	14 96       	adiw	r26, 0x04	; 4
     864:	4d 91       	ld	r20, X+
     866:	5c 91       	ld	r21, X
     868:	15 97       	sbiw	r26, 0x05	; 5
     86a:	fa 01       	movw	r30, r20
     86c:	7c 97       	sbiw	r30, 0x1c	; 28
     86e:	ea 01       	movw	r28, r20
     870:	e2 97       	sbiw	r28, 0x32	; 50
     872:	d6 83       	std	Z+6, r29	; 0x06
     874:	c5 83       	std	Z+5, r28	; 0x05
     876:	17 96       	adiw	r26, 0x07	; 7
     878:	2c 91       	ld	r18, X
     87a:	17 97       	sbiw	r26, 0x07	; 7
     87c:	2a 8b       	std	Y+18, r18	; 0x12
     87e:	18 96       	adiw	r26, 0x08	; 8
     880:	2c 91       	ld	r18, X
     882:	18 97       	sbiw	r26, 0x08	; 8
     884:	29 8b       	std	Y+17, r18	; 0x11
     886:	19 96       	adiw	r26, 0x09	; 9
     888:	2c 91       	ld	r18, X
     88a:	19 97       	sbiw	r26, 0x09	; 9
     88c:	28 8b       	std	Y+16, r18	; 0x10
     88e:	1a 96       	adiw	r26, 0x0a	; 10
     890:	2c 91       	ld	r18, X
     892:	1a 97       	sbiw	r26, 0x0a	; 10
     894:	2f 87       	std	Y+15, r18	; 0x0f
     896:	1b 8a       	std	Y+19, r1	; 0x13
     898:	2d e6       	ldi	r18, 0x6D	; 109
     89a:	35 e0       	ldi	r19, 0x05	; 5
     89c:	3c 8b       	std	Y+20, r19	; 0x14
     89e:	2d 8b       	std	Y+21, r18	; 0x15
     8a0:	16 96       	adiw	r26, 0x06	; 6
     8a2:	2c 91       	ld	r18, X
     8a4:	16 97       	sbiw	r26, 0x06	; 6
     8a6:	8d 91       	ld	r24, X+
     8a8:	9c 91       	ld	r25, X
     8aa:	24 83       	std	Z+4, r18	; 0x04
     8ac:	32 e0       	ldi	r19, 0x02	; 2
     8ae:	35 87       	std	Z+13, r19	; 0x0d
     8b0:	16 86       	std	Z+14, r1	; 0x0e
     8b2:	23 8f       	std	Z+27, r18	; 0x1b
     8b4:	12 8e       	std	Z+26, r1	; 0x1a
     8b6:	11 8e       	std	Z+25, r1	; 0x19
     8b8:	10 8e       	std	Z+24, r1	; 0x18
     8ba:	21 e0       	ldi	r18, 0x01	; 1
     8bc:	27 87       	std	Z+15, r18	; 0x0f
     8be:	94 87       	std	Z+12, r25	; 0x0c
     8c0:	83 87       	std	Z+11, r24	; 0x0b
     8c2:	cb e4       	ldi	r28, 0x4B	; 75
     8c4:	d3 e0       	ldi	r29, 0x03	; 3
     8c6:	d0 87       	std	Z+8, r29	; 0x08
     8c8:	c7 83       	std	Z+7, r28	; 0x07
     8ca:	89 85       	ldd	r24, Y+9	; 0x09
     8cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ce:	92 87       	std	Z+10, r25	; 0x0a
     8d0:	81 87       	std	Z+9, r24	; 0x09
     8d2:	dc 01       	movw	r26, r24
     8d4:	18 96       	adiw	r26, 0x08	; 8
     8d6:	fc 93       	st	X, r31
     8d8:	ee 93       	st	-X, r30
     8da:	17 97       	sbiw	r26, 0x07	; 7
     8dc:	fa 87       	std	Y+10, r31	; 0x0a
     8de:	e9 87       	std	Y+9, r30	; 0x09
     8e0:	ea 01       	movw	r28, r20
     8e2:	2a 97       	sbiw	r28, 0x0a	; 10
     8e4:	d9 83       	std	Y+1, r29	; 0x01
     8e6:	c8 83       	st	Y, r28
     8e8:	da 01       	movw	r26, r20
     8ea:	18 97       	sbiw	r26, 0x08	; 8
     8ec:	0b 2e       	mov	r0, r27
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	0c 92       	st	X, r0
     8f2:	11 97       	sbiw	r26, 0x01	; 1
     8f4:	ac 93       	st	X, r26
     8f6:	0a 2e       	mov	r0, r26
     8f8:	1b 2e       	mov	r1, r27
     8fa:	13 96       	adiw	r26, 0x03	; 3
     8fc:	1c 92       	st	X, r1
     8fe:	0e 92       	st	-X, r0
     900:	11 24       	eor	r1, r1
     902:	12 97       	sbiw	r26, 0x02	; 2
     904:	cf 01       	movw	r24, r30
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <chThdCreate>:
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	f8 94       	cli
     912:	a4 df       	rcall	.-184    	; 0x85c <chThdCreateSuspendedI>
     914:	ec 01       	movw	r28, r24
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	dc de       	rcall	.-584    	; 0x6d4 <chSchWakeupS>
     91c:	78 94       	sei
     91e:	ce 01       	movw	r24, r28
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <chThdExitS>:
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <ch+0xb>
     932:	d0 91 57 03 	lds	r29, 0x0357	; 0x800357 <ch+0xc>
     936:	99 8b       	std	Y+17, r25	; 0x11
     938:	88 8b       	std	Y+16, r24	; 0x10
     93a:	8e 01       	movw	r16, r28
     93c:	0e 5e       	subi	r16, 0xEE	; 238
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	8a 89       	ldd	r24, Y+18	; 0x12
     942:	9b 89       	ldd	r25, Y+19	; 0x13
     944:	08 17       	cp	r16, r24
     946:	19 07       	cpc	r17, r25
     948:	59 f0       	breq	.+22     	; 0x960 <chThdExitS+0x3a>
     94a:	fc 01       	movw	r30, r24
     94c:	20 81       	ld	r18, Z
     94e:	31 81       	ldd	r19, Z+1	; 0x01
     950:	3b 8b       	std	Y+19, r19	; 0x13
     952:	2a 8b       	std	Y+18, r18	; 0x12
     954:	4c de       	rcall	.-872    	; 0x5ee <chSchReadyI>
     956:	8a 89       	ldd	r24, Y+18	; 0x12
     958:	9b 89       	ldd	r25, Y+19	; 0x13
     95a:	80 17       	cp	r24, r16
     95c:	91 07       	cpc	r25, r17
     95e:	a9 f7       	brne	.-22     	; 0x94a <chThdExitS+0x24>
     960:	8f 85       	ldd	r24, Y+15	; 0x0f
     962:	81 11       	cpse	r24, r1
     964:	0c c0       	rjmp	.+24     	; 0x97e <chThdExitS+0x58>
     966:	e9 85       	ldd	r30, Y+9	; 0x09
     968:	fa 85       	ldd	r31, Y+10	; 0x0a
     96a:	8f 81       	ldd	r24, Y+7	; 0x07
     96c:	98 85       	ldd	r25, Y+8	; 0x08
     96e:	90 87       	std	Z+8, r25	; 0x08
     970:	87 83       	std	Z+7, r24	; 0x07
     972:	af 81       	ldd	r26, Y+7	; 0x07
     974:	b8 85       	ldd	r27, Y+8	; 0x08
     976:	1a 96       	adiw	r26, 0x0a	; 10
     978:	fc 93       	st	X, r31
     97a:	ee 93       	st	-X, r30
     97c:	19 97       	sbiw	r26, 0x09	; 9
     97e:	8f e0       	ldi	r24, 0x0F	; 15
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	54 ce       	rjmp	.-856    	; 0x632 <chSchGoSleepS>

0000098a <chThdExit>:
     98a:	f8 94       	cli
     98c:	cc cf       	rjmp	.-104    	; 0x926 <chThdExitS>

0000098e <chThdSleep>:
     98e:	f8 94       	cli
     990:	bc 01       	movw	r22, r24
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	6a de       	rcall	.-812    	; 0x66a <chSchGoSleepTimeoutS>
     996:	78 94       	sei
     998:	08 95       	ret

0000099a <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     99e:	61 15       	cp	r22, r1
     9a0:	71 05       	cpc	r23, r1
     9a2:	99 f0       	breq	.+38     	; 0x9ca <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     9a4:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <ch+0xb>
     9a8:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     9b0:	ec 01       	movw	r28, r24
     9b2:	aa 81       	ldd	r26, Y+2	; 0x02
     9b4:	bb 81       	ldd	r27, Y+3	; 0x03
     9b6:	b3 83       	std	Z+3, r27	; 0x03
     9b8:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     9ba:	ed 93       	st	X+, r30
     9bc:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     9be:	fb 83       	std	Y+3, r31	; 0x03
     9c0:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     9c2:	84 e0       	ldi	r24, 0x04	; 4
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     9c8:	50 ce       	rjmp	.-864    	; 0x66a <chSchGoSleepTimeoutS>
}
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	9f ef       	ldi	r25, 0xFF	; 255
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     9de:	e8 17       	cp	r30, r24
     9e0:	f9 07       	cpc	r31, r25
     9e2:	71 f0       	breq	.+28     	; 0xa00 <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     9e4:	ec 01       	movw	r28, r24
     9e6:	a8 81       	ld	r26, Y
     9e8:	b9 81       	ldd	r27, Y+1	; 0x01
     9ea:	b1 83       	std	Z+1, r27	; 0x01
     9ec:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	fc 93       	st	X, r31
     9f2:	ee 93       	st	-X, r30
     9f4:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     9f6:	79 8b       	std	Y+17, r23	; 0x11
     9f8:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
     9fe:	f7 cd       	rjmp	.-1042   	; 0x5ee <chSchReadyI>
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     a06:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     a08:	90 8d       	ldd	r25, Z+24	; 0x18
     a0a:	69 2b       	or	r22, r25
     a0c:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     a0e:	85 85       	ldd	r24, Z+13	; 0x0d
     a10:	8a 30       	cpi	r24, 0x0A	; 10
     a12:	59 f0       	breq	.+22     	; 0xa2a <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     a14:	8b 30       	cpi	r24, 0x0B	; 11
     a16:	09 f0       	breq	.+2      	; 0xa1a <chEvtSignalI+0x14>
     a18:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     a1a:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     a1c:	68 23       	and	r22, r24
     a1e:	86 13       	cpse	r24, r22
     a20:	fb cf       	rjmp	.-10     	; 0xa18 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     a22:	11 8a       	std	Z+17, r1	; 0x11
     a24:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     a26:	cf 01       	movw	r24, r30
     a28:	e2 cd       	rjmp	.-1084   	; 0x5ee <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     a2a:	80 89       	ldd	r24, Z+16	; 0x10
     a2c:	68 23       	and	r22, r24
     a2e:	c9 f7       	brne	.-14     	; 0xa22 <chEvtSignalI+0x1c>
     a30:	08 95       	ret

00000a32 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	7c 01       	movw	r14, r24
     a3e:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     a40:	fc 01       	movw	r30, r24
     a42:	c0 81       	ld	r28, Z
     a44:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     a46:	8c 17       	cp	r24, r28
     a48:	9d 07       	cpc	r25, r29
     a4a:	91 f0       	breq	.+36     	; 0xa70 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     a4c:	8d 81       	ldd	r24, Y+5	; 0x05
     a4e:	81 2b       	or	r24, r17
     a50:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     a52:	11 23       	and	r17, r17
     a54:	19 f0       	breq	.+6      	; 0xa5c <chEvtBroadcastFlagsI+0x2a>
     a56:	9e 81       	ldd	r25, Y+6	; 0x06
     a58:	89 23       	and	r24, r25
     a5a:	21 f0       	breq	.+8      	; 0xa64 <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     a5c:	6c 81       	ldd	r22, Y+4	; 0x04
     a5e:	8a 81       	ldd	r24, Y+2	; 0x02
     a60:	9b 81       	ldd	r25, Y+3	; 0x03
     a62:	d1 df       	rcall	.-94     	; 0xa06 <chEvtSignalI>
    }
    elp = elp->next;
     a64:	09 90       	ld	r0, Y+
     a66:	d8 81       	ld	r29, Y
     a68:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     a6a:	ec 16       	cp	r14, r28
     a6c:	fd 06       	cpc	r15, r29
     a6e:	71 f7       	brne	.-36     	; 0xa4c <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	08 95       	ret

00000a7c <_port_switch>:
#if !defined(__DOXYGEN__)
__attribute__((naked, weak))
#endif
void _port_switch(thread_t *ntp, thread_t *otp) {

  asm volatile ("push    r2");
     a7c:	2f 92       	push	r2
  asm volatile ("push    r3");
     a7e:	3f 92       	push	r3
  asm volatile ("push    r4");
     a80:	4f 92       	push	r4
  asm volatile ("push    r5");
     a82:	5f 92       	push	r5
  asm volatile ("push    r6");
     a84:	6f 92       	push	r6
  asm volatile ("push    r7");
     a86:	7f 92       	push	r7
  asm volatile ("push    r8");
     a88:	8f 92       	push	r8
  asm volatile ("push    r9");
     a8a:	9f 92       	push	r9
  asm volatile ("push    r10");
     a8c:	af 92       	push	r10
  asm volatile ("push    r11");
     a8e:	bf 92       	push	r11
  asm volatile ("push    r12");
     a90:	cf 92       	push	r12
  asm volatile ("push    r13");
     a92:	df 92       	push	r13
  asm volatile ("push    r14");
     a94:	ef 92       	push	r14
  asm volatile ("push    r15");
     a96:	ff 92       	push	r15
  asm volatile ("push    r16");
     a98:	0f 93       	push	r16
  asm volatile ("push    r17");
     a9a:	1f 93       	push	r17
  asm volatile ("push    r28");
     a9c:	cf 93       	push	r28
  asm volatile ("push    r29");
     a9e:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     aa0:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     aa2:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     aa4:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     aa6:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     aa8:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     aaa:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     aac:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     aae:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     ab0:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     ab2:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     ab4:	df 91       	pop	r29
  asm volatile ("pop     r28");
     ab6:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     ab8:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     aba:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     abc:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     abe:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     ac0:	df 90       	pop	r13
  asm volatile ("pop     r12");
     ac2:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     ac4:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     ac6:	af 90       	pop	r10
  asm volatile ("pop     r9");
     ac8:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     aca:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     acc:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     ace:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     ad0:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     ad2:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     ad4:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     ad6:	2f 90       	pop	r2
  asm volatile ("ret");
     ad8:	08 95       	ret

00000ada <_port_thread_start>:
     ada:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     adc:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     ade:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     ae0:	09 95       	icall
#if defined(_CHIBIOS_RT_)
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     ae2:	53 cf       	rjmp	.-346    	; 0x98a <chThdExit>

00000ae4 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
     ae4:	cf d2       	rcall	.+1438   	; 0x1084 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
     ae6:	8b e3       	ldi	r24, 0x3B	; 59
     ae8:	92 e0       	ldi	r25, 0x02	; 2
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
     aea:	d6 d5       	rcall	.+2988   	; 0x1698 <_pal_lld_init>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
     aec:	26 d2       	rcall	.+1100   	; 0xf3a <extInit>
     aee:	55 d2       	rcall	.+1194   	; 0xf9a <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
     af0:	37 d7       	rcall	.+3694   	; 0x1960 <boardInit>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <stInit>

00000af4 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
     af4:	5c c6       	rjmp	.+3256   	; 0x17ae <st_lld_init>

00000af6 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     af6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     afa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	86 bb       	out	0x16, r24	; 22

  /* enable interrupt */
  TIMSK_REG = _BV(OCIE1A);
     b02:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
     b06:	08 95       	ret

00000b08 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
     b08:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
     b0c:	08 95       	ret

00000b0e <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     b0e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     b12:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     b16:	08 95       	ret

00000b18 <iqObjectInit>:
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	fc 01       	movw	r30, r24
     b1e:	91 83       	std	Z+1, r25	; 0x01
     b20:	80 83       	st	Z, r24
     b22:	93 83       	std	Z+3, r25	; 0x03
     b24:	82 83       	std	Z+2, r24	; 0x02
     b26:	15 82       	std	Z+5, r1	; 0x05
     b28:	14 82       	std	Z+4, r1	; 0x04
     b2a:	77 83       	std	Z+7, r23	; 0x07
     b2c:	66 83       	std	Z+6, r22	; 0x06
     b2e:	75 87       	std	Z+13, r23	; 0x0d
     b30:	64 87       	std	Z+12, r22	; 0x0c
     b32:	73 87       	std	Z+11, r23	; 0x0b
     b34:	62 87       	std	Z+10, r22	; 0x0a
     b36:	64 0f       	add	r22, r20
     b38:	75 1f       	adc	r23, r21
     b3a:	71 87       	std	Z+9, r23	; 0x09
     b3c:	60 87       	std	Z+8, r22	; 0x08
     b3e:	37 87       	std	Z+15, r19	; 0x0f
     b40:	26 87       	std	Z+14, r18	; 0x0e
     b42:	11 8b       	std	Z+17, r17	; 0x11
     b44:	00 8b       	std	Z+16, r16	; 0x10
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <iqPutI>:
     b4c:	fc 01       	movw	r30, r24
     b4e:	a2 85       	ldd	r26, Z+10	; 0x0a
     b50:	b3 85       	ldd	r27, Z+11	; 0x0b
     b52:	84 85       	ldd	r24, Z+12	; 0x0c
     b54:	95 85       	ldd	r25, Z+13	; 0x0d
     b56:	a8 17       	cp	r26, r24
     b58:	b9 07       	cpc	r27, r25
     b5a:	e1 f0       	breq	.+56     	; 0xb94 <iqPutI+0x48>
     b5c:	84 81       	ldd	r24, Z+4	; 0x04
     b5e:	95 81       	ldd	r25, Z+5	; 0x05
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	95 83       	std	Z+5, r25	; 0x05
     b64:	84 83       	std	Z+4, r24	; 0x04
     b66:	cd 01       	movw	r24, r26
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	93 87       	std	Z+11, r25	; 0x0b
     b6c:	82 87       	std	Z+10, r24	; 0x0a
     b6e:	6c 93       	st	X, r22
     b70:	22 85       	ldd	r18, Z+10	; 0x0a
     b72:	33 85       	ldd	r19, Z+11	; 0x0b
     b74:	80 85       	ldd	r24, Z+8	; 0x08
     b76:	91 85       	ldd	r25, Z+9	; 0x09
     b78:	28 17       	cp	r18, r24
     b7a:	39 07       	cpc	r19, r25
     b7c:	20 f0       	brcs	.+8      	; 0xb86 <iqPutI+0x3a>
     b7e:	86 81       	ldd	r24, Z+6	; 0x06
     b80:	97 81       	ldd	r25, Z+7	; 0x07
     b82:	93 87       	std	Z+11, r25	; 0x0b
     b84:	82 87       	std	Z+10, r24	; 0x0a
     b86:	cf 01       	movw	r24, r30
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	23 df       	rcall	.-442    	; 0x9d4 <chThdDequeueNextI>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	08 95       	ret
     b94:	84 81       	ldd	r24, Z+4	; 0x04
     b96:	95 81       	ldd	r25, Z+5	; 0x05
     b98:	89 2b       	or	r24, r25
     b9a:	01 f3       	breq	.-64     	; 0xb5c <iqPutI+0x10>
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	08 95       	ret

00000ba2 <iqGetTimeout>:
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ec 01       	movw	r28, r24
     bac:	8b 01       	movw	r16, r22
     bae:	f8 94       	cli
     bb0:	05 c0       	rjmp	.+10     	; 0xbbc <iqGetTimeout+0x1a>
     bb2:	b8 01       	movw	r22, r16
     bb4:	ce 01       	movw	r24, r28
     bb6:	f1 de       	rcall	.-542    	; 0x99a <chThdEnqueueTimeoutS>
     bb8:	97 fd       	sbrc	r25, 7
     bba:	27 c0       	rjmp	.+78     	; 0xc0a <iqGetTimeout+0x68>
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	89 2b       	or	r24, r25
     bc2:	b9 f3       	breq	.-18     	; 0xbb2 <iqGetTimeout+0x10>
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	9d 81       	ldd	r25, Y+5	; 0x05
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	9d 83       	std	Y+5, r25	; 0x05
     bcc:	8c 83       	std	Y+4, r24	; 0x04
     bce:	ec 85       	ldd	r30, Y+12	; 0x0c
     bd0:	fd 85       	ldd	r31, Y+13	; 0x0d
     bd2:	cf 01       	movw	r24, r30
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	9d 87       	std	Y+13, r25	; 0x0d
     bd8:	8c 87       	std	Y+12, r24	; 0x0c
     bda:	10 81       	ld	r17, Z
     bdc:	28 85       	ldd	r18, Y+8	; 0x08
     bde:	39 85       	ldd	r19, Y+9	; 0x09
     be0:	82 17       	cp	r24, r18
     be2:	93 07       	cpc	r25, r19
     be4:	20 f0       	brcs	.+8      	; 0xbee <iqGetTimeout+0x4c>
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	9f 81       	ldd	r25, Y+7	; 0x07
     bea:	9d 87       	std	Y+13, r25	; 0x0d
     bec:	8c 87       	std	Y+12, r24	; 0x0c
     bee:	ee 85       	ldd	r30, Y+14	; 0x0e
     bf0:	ff 85       	ldd	r31, Y+15	; 0x0f
     bf2:	30 97       	sbiw	r30, 0x00	; 0
     bf4:	11 f0       	breq	.+4      	; 0xbfa <iqGetTimeout+0x58>
     bf6:	ce 01       	movw	r24, r28
     bf8:	19 95       	eicall
     bfa:	78 94       	sei
     bfc:	81 2f       	mov	r24, r17
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	08 95       	ret
     c0a:	78 94       	sei
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <iqReadTimeout>:
     c16:	2f 92       	push	r2
     c18:	3f 92       	push	r3
     c1a:	4f 92       	push	r4
     c1c:	5f 92       	push	r5
     c1e:	6f 92       	push	r6
     c20:	7f 92       	push	r7
     c22:	8f 92       	push	r8
     c24:	9f 92       	push	r9
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ec 01       	movw	r28, r24
     c3c:	7b 01       	movw	r14, r22
     c3e:	8a 01       	movw	r16, r20
     c40:	39 01       	movw	r6, r18
     c42:	ae 84       	ldd	r10, Y+14	; 0x0e
     c44:	bf 84       	ldd	r11, Y+15	; 0x0f
     c46:	f8 94       	cli
     c48:	20 90 84 00 	lds	r2, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     c4c:	30 90 85 00 	lds	r3, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     c50:	22 0e       	add	r2, r18
     c52:	33 1e       	adc	r3, r19
     c54:	c1 2c       	mov	r12, r1
     c56:	d1 2c       	mov	r13, r1
     c58:	29 01       	movw	r4, r18
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	48 1a       	sub	r4, r24
     c5e:	51 08       	sbc	r5, r1
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	9d 81       	ldd	r25, Y+5	; 0x05
     c64:	89 2b       	or	r24, r25
     c66:	81 f1       	breq	.+96     	; 0xcc8 <iqReadTimeout+0xb2>
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9d 83       	std	Y+5, r25	; 0x05
     c70:	8c 83       	std	Y+4, r24	; 0x04
     c72:	47 01       	movw	r8, r14
     c74:	ff ef       	ldi	r31, 0xFF	; 255
     c76:	8f 1a       	sub	r8, r31
     c78:	9f 0a       	sbc	r9, r31
     c7a:	ec 85       	ldd	r30, Y+12	; 0x0c
     c7c:	fd 85       	ldd	r31, Y+13	; 0x0d
     c7e:	cf 01       	movw	r24, r30
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	9d 87       	std	Y+13, r25	; 0x0d
     c84:	8c 87       	std	Y+12, r24	; 0x0c
     c86:	80 81       	ld	r24, Z
     c88:	f7 01       	movw	r30, r14
     c8a:	80 83       	st	Z, r24
     c8c:	2c 85       	ldd	r18, Y+12	; 0x0c
     c8e:	3d 85       	ldd	r19, Y+13	; 0x0d
     c90:	88 85       	ldd	r24, Y+8	; 0x08
     c92:	99 85       	ldd	r25, Y+9	; 0x09
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	20 f0       	brcs	.+8      	; 0xca2 <iqReadTimeout+0x8c>
     c9a:	8e 81       	ldd	r24, Y+6	; 0x06
     c9c:	9f 81       	ldd	r25, Y+7	; 0x07
     c9e:	9d 87       	std	Y+13, r25	; 0x0d
     ca0:	8c 87       	std	Y+12, r24	; 0x0c
     ca2:	a1 14       	cp	r10, r1
     ca4:	b1 04       	cpc	r11, r1
     ca6:	19 f0       	breq	.+6      	; 0xcae <iqReadTimeout+0x98>
     ca8:	ce 01       	movw	r24, r28
     caa:	f5 01       	movw	r30, r10
     cac:	19 95       	eicall
     cae:	78 94       	sei
     cb0:	ff ef       	ldi	r31, 0xFF	; 255
     cb2:	cf 1a       	sub	r12, r31
     cb4:	df 0a       	sbc	r13, r31
     cb6:	01 50       	subi	r16, 0x01	; 1
     cb8:	11 09       	sbc	r17, r1
     cba:	d9 f0       	breq	.+54     	; 0xcf2 <iqReadTimeout+0xdc>
     cbc:	f8 94       	cli
     cbe:	74 01       	movw	r14, r8
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	9d 81       	ldd	r25, Y+5	; 0x05
     cc4:	89 2b       	or	r24, r25
     cc6:	81 f6       	brne	.-96     	; 0xc68 <iqReadTimeout+0x52>
     cc8:	ee ef       	ldi	r30, 0xFE	; 254
     cca:	4e 16       	cp	r4, r30
     ccc:	ef ef       	ldi	r30, 0xFF	; 255
     cce:	5e 06       	cpc	r5, r30
     cd0:	20 f5       	brcc	.+72     	; 0xd1a <iqReadTimeout+0x104>
     cd2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     cd6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     cda:	b1 01       	movw	r22, r2
     cdc:	68 1b       	sub	r22, r24
     cde:	79 0b       	sbc	r23, r25
     ce0:	66 16       	cp	r6, r22
     ce2:	77 06       	cpc	r7, r23
     ce4:	28 f0       	brcs	.+10     	; 0xcf0 <iqReadTimeout+0xda>
     ce6:	ce 01       	movw	r24, r28
     ce8:	58 de       	rcall	.-848    	; 0x99a <chThdEnqueueTimeoutS>
     cea:	89 2b       	or	r24, r25
     cec:	09 f4       	brne	.+2      	; 0xcf0 <iqReadTimeout+0xda>
     cee:	b8 cf       	rjmp	.-144    	; 0xc60 <iqReadTimeout+0x4a>
     cf0:	78 94       	sei
     cf2:	c6 01       	movw	r24, r12
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	9f 90       	pop	r9
     d0a:	8f 90       	pop	r8
     d0c:	7f 90       	pop	r7
     d0e:	6f 90       	pop	r6
     d10:	5f 90       	pop	r5
     d12:	4f 90       	pop	r4
     d14:	3f 90       	pop	r3
     d16:	2f 90       	pop	r2
     d18:	08 95       	ret
     d1a:	b3 01       	movw	r22, r6
     d1c:	ce 01       	movw	r24, r28
     d1e:	3d de       	rcall	.-902    	; 0x99a <chThdEnqueueTimeoutS>
     d20:	e4 cf       	rjmp	.-56     	; 0xcea <iqReadTimeout+0xd4>

00000d22 <oqObjectInit>:
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	fc 01       	movw	r30, r24
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
     d2c:	93 83       	std	Z+3, r25	; 0x03
     d2e:	82 83       	std	Z+2, r24	; 0x02
     d30:	55 83       	std	Z+5, r21	; 0x05
     d32:	44 83       	std	Z+4, r20	; 0x04
     d34:	77 83       	std	Z+7, r23	; 0x07
     d36:	66 83       	std	Z+6, r22	; 0x06
     d38:	75 87       	std	Z+13, r23	; 0x0d
     d3a:	64 87       	std	Z+12, r22	; 0x0c
     d3c:	73 87       	std	Z+11, r23	; 0x0b
     d3e:	62 87       	std	Z+10, r22	; 0x0a
     d40:	46 0f       	add	r20, r22
     d42:	57 1f       	adc	r21, r23
     d44:	51 87       	std	Z+9, r21	; 0x09
     d46:	40 87       	std	Z+8, r20	; 0x08
     d48:	37 87       	std	Z+15, r19	; 0x0f
     d4a:	26 87       	std	Z+14, r18	; 0x0e
     d4c:	11 8b       	std	Z+17, r17	; 0x11
     d4e:	00 8b       	std	Z+16, r16	; 0x10
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ec 01       	movw	r28, r24
     d62:	f6 2e       	mov	r15, r22
     d64:	8a 01       	movw	r16, r20
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     d66:	f8 94       	cli
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <oqPutTimeout+0x1e>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
     d6a:	b8 01       	movw	r22, r16
     d6c:	ce 01       	movw	r24, r28
     d6e:	15 de       	rcall	.-982    	; 0x99a <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
     d70:	97 fd       	sbrc	r25, 7
     d72:	2a c0       	rjmp	.+84     	; 0xdc8 <oqPutTimeout+0x72>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	89 2b       	or	r24, r25
     d7a:	b9 f3       	breq	.-18     	; 0xd6a <oqPutTimeout+0x14>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	9d 83       	std	Y+5, r25	; 0x05
     d84:	8c 83       	std	Y+4, r24	; 0x04
  *oqp->q_wrptr++ = b;
     d86:	ea 85       	ldd	r30, Y+10	; 0x0a
     d88:	fb 85       	ldd	r31, Y+11	; 0x0b
     d8a:	cf 01       	movw	r24, r30
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	9b 87       	std	Y+11, r25	; 0x0b
     d90:	8a 87       	std	Y+10, r24	; 0x0a
     d92:	f0 82       	st	Z, r15
  if (oqp->q_wrptr >= oqp->q_top) {
     d94:	2a 85       	ldd	r18, Y+10	; 0x0a
     d96:	3b 85       	ldd	r19, Y+11	; 0x0b
     d98:	88 85       	ldd	r24, Y+8	; 0x08
     d9a:	99 85       	ldd	r25, Y+9	; 0x09
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	20 f0       	brcs	.+8      	; 0xdaa <oqPutTimeout+0x54>
    oqp->q_wrptr = oqp->q_buffer;
     da2:	8e 81       	ldd	r24, Y+6	; 0x06
     da4:	9f 81       	ldd	r25, Y+7	; 0x07
     da6:	9b 87       	std	Y+11, r25	; 0x0b
     da8:	8a 87       	std	Y+10, r24	; 0x0a
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
     daa:	ee 85       	ldd	r30, Y+14	; 0x0e
     dac:	ff 85       	ldd	r31, Y+15	; 0x0f
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	11 f0       	breq	.+4      	; 0xdb6 <oqPutTimeout+0x60>
    oqp->q_notify(oqp);
     db2:	ce 01       	movw	r24, r28
     db4:	19 95       	eicall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     db6:	78 94       	sei
  }

  osalSysUnlock();

  return MSG_OK;
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	08 95       	ret
     dc8:	78 94       	sei
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	08 95       	ret

00000dd6 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
     dd6:	cf 93       	push	r28
     dd8:	fc 01       	movw	r30, r24
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
     dda:	a4 85       	ldd	r26, Z+12	; 0x0c
     ddc:	b5 85       	ldd	r27, Z+13	; 0x0d
     dde:	82 85       	ldd	r24, Z+10	; 0x0a
     de0:	93 85       	ldd	r25, Z+11	; 0x0b
     de2:	8a 17       	cp	r24, r26
     de4:	9b 07       	cpc	r25, r27
     de6:	e1 f0       	breq	.+56     	; 0xe20 <oqGetI+0x4a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
     de8:	84 81       	ldd	r24, Z+4	; 0x04
     dea:	95 81       	ldd	r25, Z+5	; 0x05
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	95 83       	std	Z+5, r25	; 0x05
     df0:	84 83       	std	Z+4, r24	; 0x04
  b = *oqp->q_rdptr++;
     df2:	cd 01       	movw	r24, r26
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	95 87       	std	Z+13, r25	; 0x0d
     df8:	84 87       	std	Z+12, r24	; 0x0c
     dfa:	cc 91       	ld	r28, X
  if (oqp->q_rdptr >= oqp->q_top) {
     dfc:	20 85       	ldd	r18, Z+8	; 0x08
     dfe:	31 85       	ldd	r19, Z+9	; 0x09
     e00:	82 17       	cp	r24, r18
     e02:	93 07       	cpc	r25, r19
     e04:	40 f4       	brcc	.+16     	; 0xe16 <oqGetI+0x40>
     e06:	cf 01       	movw	r24, r30
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	e3 dd       	rcall	.-1082   	; 0x9d4 <chThdDequeueNextI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

  return (msg_t)b;
     e0e:	8c 2f       	mov	r24, r28
     e10:	90 e0       	ldi	r25, 0x00	; 0
}
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
     e16:	86 81       	ldd	r24, Z+6	; 0x06
     e18:	97 81       	ldd	r25, Z+7	; 0x07
     e1a:	95 87       	std	Z+13, r25	; 0x0d
     e1c:	84 87       	std	Z+12, r24	; 0x0c
     e1e:	f3 cf       	rjmp	.-26     	; 0xe06 <oqGetI+0x30>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
     e20:	84 81       	ldd	r24, Z+4	; 0x04
     e22:	95 81       	ldd	r25, Z+5	; 0x05
     e24:	89 2b       	or	r24, r25
     e26:	01 f3       	breq	.-64     	; 0xde8 <oqGetI+0x12>
    return MSG_TIMEOUT;
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	9f ef       	ldi	r25, 0xFF	; 255
     e2c:	f2 cf       	rjmp	.-28     	; 0xe12 <oqGetI+0x3c>

00000e2e <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
     e2e:	2f 92       	push	r2
     e30:	3f 92       	push	r3
     e32:	4f 92       	push	r4
     e34:	5f 92       	push	r5
     e36:	6f 92       	push	r6
     e38:	7f 92       	push	r7
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
     e54:	7b 01       	movw	r14, r22
     e56:	8a 01       	movw	r16, r20
     e58:	39 01       	movw	r6, r18
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
     e5a:	ae 84       	ldd	r10, Y+14	; 0x0e
     e5c:	bf 84       	ldd	r11, Y+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     e5e:	f8 94       	cli
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     e60:	20 90 84 00 	lds	r2, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     e64:	30 90 85 00 	lds	r3, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
     e68:	22 0e       	add	r2, r18
     e6a:	33 1e       	adc	r3, r19
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
     e6c:	c1 2c       	mov	r12, r1
     e6e:	d1 2c       	mov	r13, r1
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
     e70:	29 01       	movw	r4, r18
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	48 1a       	sub	r4, r24
     e76:	51 08       	sbc	r5, r1
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	89 2b       	or	r24, r25
     e7e:	81 f1       	breq	.+96     	; 0xee0 <oqWriteTimeout+0xb2>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	9d 83       	std	Y+5, r25	; 0x05
     e88:	8c 83       	std	Y+4, r24	; 0x04
    *oqp->q_wrptr++ = *bp++;
     e8a:	ea 85       	ldd	r30, Y+10	; 0x0a
     e8c:	fb 85       	ldd	r31, Y+11	; 0x0b
     e8e:	cf 01       	movw	r24, r30
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	9b 87       	std	Y+11, r25	; 0x0b
     e94:	8a 87       	std	Y+10, r24	; 0x0a
     e96:	47 01       	movw	r8, r14
     e98:	bf ef       	ldi	r27, 0xFF	; 255
     e9a:	8b 1a       	sub	r8, r27
     e9c:	9b 0a       	sbc	r9, r27
     e9e:	d7 01       	movw	r26, r14
     ea0:	8c 91       	ld	r24, X
     ea2:	80 83       	st	Z, r24
    if (oqp->q_wrptr >= oqp->q_top) {
     ea4:	2a 85       	ldd	r18, Y+10	; 0x0a
     ea6:	3b 85       	ldd	r19, Y+11	; 0x0b
     ea8:	88 85       	ldd	r24, Y+8	; 0x08
     eaa:	99 85       	ldd	r25, Y+9	; 0x09
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	20 f0       	brcs	.+8      	; 0xeba <oqWriteTimeout+0x8c>
      oqp->q_wrptr = oqp->q_buffer;
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
     eb4:	9f 81       	ldd	r25, Y+7	; 0x07
     eb6:	9b 87       	std	Y+11, r25	; 0x0b
     eb8:	8a 87       	std	Y+10, r24	; 0x0a
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
     eba:	a1 14       	cp	r10, r1
     ebc:	b1 04       	cpc	r11, r1
     ebe:	19 f0       	breq	.+6      	; 0xec6 <oqWriteTimeout+0x98>
      nfy(oqp);
     ec0:	ce 01       	movw	r24, r28
     ec2:	f5 01       	movw	r30, r10
     ec4:	19 95       	eicall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     ec6:	78 94       	sei
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
     ec8:	ff ef       	ldi	r31, 0xFF	; 255
     eca:	cf 1a       	sub	r12, r31
     ecc:	df 0a       	sbc	r13, r31
    if (--n == 0U) {
     ece:	01 50       	subi	r16, 0x01	; 1
     ed0:	11 09       	sbc	r17, r1
     ed2:	d9 f0       	breq	.+54     	; 0xf0a <oqWriteTimeout+0xdc>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     ed4:	f8 94       	cli
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
     ed6:	74 01       	movw	r14, r8
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	89 2b       	or	r24, r25
     ede:	81 f6       	brne	.-96     	; 0xe80 <oqWriteTimeout+0x52>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
     ee0:	ae ef       	ldi	r26, 0xFE	; 254
     ee2:	4a 16       	cp	r4, r26
     ee4:	af ef       	ldi	r26, 0xFF	; 255
     ee6:	5a 06       	cpc	r5, r26
     ee8:	20 f5       	brcc	.+72     	; 0xf32 <oqWriteTimeout+0x104>
     eea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     eee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
     ef2:	b1 01       	movw	r22, r2
     ef4:	68 1b       	sub	r22, r24
     ef6:	79 0b       	sbc	r23, r25

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
     ef8:	66 16       	cp	r6, r22
     efa:	77 06       	cpc	r7, r23
     efc:	28 f0       	brcs	.+10     	; 0xf08 <oqWriteTimeout+0xda>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
     efe:	ce 01       	movw	r24, r28
     f00:	4c dd       	rcall	.-1384   	; 0x99a <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     f02:	89 2b       	or	r24, r25
     f04:	09 f4       	brne	.+2      	; 0xf08 <oqWriteTimeout+0xda>
     f06:	b8 cf       	rjmp	.-144    	; 0xe78 <oqWriteTimeout+0x4a>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     f08:	78 94       	sei
      return w;
    }

    osalSysLock();
  }
}
     f0a:	c6 01       	movw	r24, r12
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	9f 90       	pop	r9
     f22:	8f 90       	pop	r8
     f24:	7f 90       	pop	r7
     f26:	6f 90       	pop	r6
     f28:	5f 90       	pop	r5
     f2a:	4f 90       	pop	r4
     f2c:	3f 90       	pop	r3
     f2e:	2f 90       	pop	r2
     f30:	08 95       	ret
     f32:	b3 01       	movw	r22, r6
     f34:	ce 01       	movw	r24, r28
     f36:	31 dd       	rcall	.-1438   	; 0x99a <chThdEnqueueTimeoutS>
     f38:	e4 cf       	rjmp	.-56     	; 0xf02 <oqWriteTimeout+0xd4>

00000f3a <extInit>:
  ext_lld_stop(extp);
  extp->config = NULL;
  extp->state  = EXT_STOP;

  osalSysUnlock();
}
     f3a:	92 c3       	rjmp	.+1828   	; 0x1660 <ext_lld_init>

00000f3c <extObjectInit>:
     f3c:	21 e0       	ldi	r18, 0x01	; 1
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
     f42:	12 82       	std	Z+2, r1	; 0x02
     f44:	11 82       	std	Z+1, r1	; 0x01
     f46:	08 95       	ret

00000f48 <extStart>:
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	ec 01       	movw	r28, r24
     f4e:	f8 94       	cli
     f50:	7a 83       	std	Y+2, r23	; 0x02
     f52:	69 83       	std	Y+1, r22	; 0x01
     f54:	88 d3       	rcall	.+1808   	; 0x1666 <ext_lld_start>
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	88 83       	st	Y, r24
     f5a:	78 94       	sei
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <extChannelEnable>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     f62:	f8 94       	cli
  osalSysLock();
  osalDbgAssert((extp->state == EXT_ACTIVE) &&
                ((extp->config->channels[channel].mode &
                  EXT_CH_MODE_EDGES_MASK) != EXT_CH_MODE_DISABLED),
                "invalid state");
  extChannelEnableI(extp, channel);
     f64:	11 d3       	rcall	.+1570   	; 0x1588 <ext_lld_channel_enable>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     f66:	78 94       	sei
     f68:	08 95       	ret

00000f6a <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     f6a:	05 96       	adiw	r24, 0x05	; 5
     f6c:	54 ce       	rjmp	.-856    	; 0xc16 <iqReadTimeout>

00000f6e <_read>:
     f6e:	2f ef       	ldi	r18, 0xFF	; 255
     f70:	3f ef       	ldi	r19, 0xFF	; 255
     f72:	05 96       	adiw	r24, 0x05	; 5
     f74:	50 ce       	rjmp	.-864    	; 0xc16 <iqReadTimeout>

00000f76 <_writet>:
     f76:	47 96       	adiw	r24, 0x17	; 23
     f78:	5a cf       	rjmp	.-332    	; 0xe2e <oqWriteTimeout>

00000f7a <_write>:
     f7a:	2f ef       	ldi	r18, 0xFF	; 255
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	47 96       	adiw	r24, 0x17	; 23
     f80:	56 cf       	rjmp	.-340    	; 0xe2e <oqWriteTimeout>

00000f82 <_gett>:
     f82:	05 96       	adiw	r24, 0x05	; 5
     f84:	0e ce       	rjmp	.-996    	; 0xba2 <iqGetTimeout>

00000f86 <_get>:
     f86:	6f ef       	ldi	r22, 0xFF	; 255
     f88:	7f ef       	ldi	r23, 0xFF	; 255
     f8a:	05 96       	adiw	r24, 0x05	; 5
     f8c:	0a ce       	rjmp	.-1004   	; 0xba2 <iqGetTimeout>

00000f8e <_putt>:
     f8e:	47 96       	adiw	r24, 0x17	; 23
     f90:	e2 ce       	rjmp	.-572    	; 0xd56 <oqPutTimeout>

00000f92 <_put>:
     f92:	4f ef       	ldi	r20, 0xFF	; 255
     f94:	5f ef       	ldi	r21, 0xFF	; 255
     f96:	47 96       	adiw	r24, 0x17	; 23
     f98:	de ce       	rjmp	.-580    	; 0xd56 <oqPutTimeout>

00000f9a <sdInit>:
     f9a:	aa c4       	rjmp	.+2388   	; 0x18f0 <sd_lld_init>

00000f9c <sdObjectInit>:
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	ec 01       	movw	r28, r24
     faa:	9b 01       	movw	r18, r22
     fac:	7a 01       	movw	r14, r20
     fae:	fc 01       	movw	r30, r24
     fb0:	88 e2       	ldi	r24, 0x28	; 40
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	81 93       	st	Z+, r24
     fb6:	91 93       	st	Z+, r25
     fb8:	fb 83       	std	Y+3, r31	; 0x03
     fba:	ea 83       	std	Y+2, r30	; 0x02
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	8c 83       	std	Y+4, r24	; 0x04
     fc0:	be 01       	movw	r22, r28
     fc2:	67 5d       	subi	r22, 0xD7	; 215
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8e 01       	movw	r16, r28
     fc8:	40 e1       	ldi	r20, 0x10	; 16
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	ce 01       	movw	r24, r28
     fce:	05 96       	adiw	r24, 0x05	; 5
     fd0:	a3 dd       	rcall	.-1210   	; 0xb18 <iqObjectInit>
     fd2:	be 01       	movw	r22, r28
     fd4:	67 5c       	subi	r22, 0xC7	; 199
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	97 01       	movw	r18, r14
     fda:	40 e1       	ldi	r20, 0x10	; 16
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	ce 01       	movw	r24, r28
     fe0:	47 96       	adiw	r24, 0x17	; 23
     fe2:	9f de       	rcall	.-706    	; 0xd22 <oqObjectInit>
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	08 95       	ret

00000ff2 <sdStart>:
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	ec 01       	movw	r28, r24
     ff8:	f8 94       	cli
     ffa:	81 d4       	rcall	.+2306   	; 0x18fe <sd_lld_start>
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	8c 83       	std	Y+4, r24	; 0x04
    1000:	78 94       	sei
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	ec 01       	movw	r28, r24
    1010:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    1012:	89 85       	ldd	r24, Y+9	; 0x09
    1014:	9a 85       	ldd	r25, Y+10	; 0x0a
    1016:	89 2b       	or	r24, r25
    1018:	51 f0       	breq	.+20     	; 0x102e <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    101a:	61 2f       	mov	r22, r17
    101c:	ce 01       	movw	r24, r28
    101e:	05 96       	adiw	r24, 0x05	; 5
    1020:	95 dd       	rcall	.-1238   	; 0xb4c <iqPutI>
    1022:	97 fd       	sbrc	r25, 7
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    102e:	64 e0       	ldi	r22, 0x04	; 4
    1030:	ce 01       	movw	r24, r28
    1032:	02 96       	adiw	r24, 0x02	; 2
    1034:	fe dc       	rcall	.-1540   	; 0xa32 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    1036:	61 2f       	mov	r22, r17
    1038:	ce 01       	movw	r24, r28
    103a:	05 96       	adiw	r24, 0x05	; 5
    103c:	87 dd       	rcall	.-1266   	; 0xb4c <iqPutI>
    103e:	97 ff       	sbrs	r25, 7
    1040:	f2 cf       	rjmp	.-28     	; 0x1026 <sdIncomingDataI+0x1e>
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	ce 01       	movw	r24, r28
    1046:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	f1 cc       	rjmp	.-1566   	; 0xa32 <chEvtBroadcastFlagsI>

00001050 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
    105a:	47 96       	adiw	r24, 0x17	; 23
    105c:	bc de       	rcall	.-648    	; 0xdd6 <oqGetI>
    105e:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
    1060:	97 fd       	sbrc	r25, 7
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
    1064:	ce 01       	movw	r24, r28
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret
    1070:	68 e0       	ldi	r22, 0x08	; 8
    1072:	c8 01       	movw	r24, r16
    1074:	02 96       	adiw	r24, 0x02	; 2
    1076:	dd dc       	rcall	.-1606   	; 0xa32 <chEvtBroadcastFlagsI>
    1078:	ce 01       	movw	r24, r28
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	08 95       	ret

00001084 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
    1084:	08 95       	ret

00001086 <ext_lld_set_intx_edges>:
  if (channel == INT3)
    EIMSK &= ~(1 << INT3);
#endif
#if AVR_EXT_USE_INT4 || defined(__DOXYGEN__)
  if (channel == INT4)
    EIMSK &= ~(1 << INT4);
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	51 f5       	brne	.+84     	; 0x10de <ext_lld_set_intx_edges+0x58>
    108a:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    108e:	61 30       	cpi	r22, 0x01	; 1
    1090:	09 f4       	brne	.+2      	; 0x1094 <ext_lld_set_intx_edges+0xe>
    1092:	52 c0       	rjmp	.+164    	; 0x1138 <ext_lld_set_intx_edges+0xb2>
    1094:	62 30       	cpi	r22, 0x02	; 2
    1096:	09 f4       	brne	.+2      	; 0x109a <ext_lld_set_intx_edges+0x14>
    1098:	74 c0       	rjmp	.+232    	; 0x1182 <ext_lld_set_intx_edges+0xfc>
    109a:	63 30       	cpi	r22, 0x03	; 3
    109c:	09 f4       	brne	.+2      	; 0x10a0 <ext_lld_set_intx_edges+0x1a>
    109e:	55 c0       	rjmp	.+170    	; 0x114a <ext_lld_set_intx_edges+0xc4>
    10a0:	2e 7f       	andi	r18, 0xFE	; 254
    10a2:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    10a6:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    10aa:	2d 7f       	andi	r18, 0xFD	; 253
    10ac:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    10b0:	05 97       	sbiw	r24, 0x05	; 5
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <ext_lld_set_intx_edges+0x30>
    10b4:	65 c0       	rjmp	.+202    	; 0x1180 <ext_lld_set_intx_edges+0xfa>
    10b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    10ba:	61 30       	cpi	r22, 0x01	; 1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <ext_lld_set_intx_edges+0x3a>
    10be:	7c c0       	rjmp	.+248    	; 0x11b8 <ext_lld_set_intx_edges+0x132>
    10c0:	62 30       	cpi	r22, 0x02	; 2
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <ext_lld_set_intx_edges+0x40>
    10c4:	82 c0       	rjmp	.+260    	; 0x11ca <ext_lld_set_intx_edges+0x144>
    10c6:	63 30       	cpi	r22, 0x03	; 3
    10c8:	09 f4       	brne	.+2      	; 0x10cc <ext_lld_set_intx_edges+0x46>
    10ca:	88 c0       	rjmp	.+272    	; 0x11dc <ext_lld_set_intx_edges+0x156>
    10cc:	8b 7f       	andi	r24, 0xFB	; 251
    10ce:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    10d2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    10d6:	87 7f       	andi	r24, 0xF7	; 247
    10d8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    10dc:	08 95       	ret
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	91 05       	cpc	r25, r1
    10e2:	99 f4       	brne	.+38     	; 0x110a <ext_lld_set_intx_edges+0x84>
    10e4:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    10e8:	61 30       	cpi	r22, 0x01	; 1
    10ea:	09 f4       	brne	.+2      	; 0x10ee <ext_lld_set_intx_edges+0x68>
    10ec:	53 c0       	rjmp	.+166    	; 0x1194 <ext_lld_set_intx_edges+0x10e>
    10ee:	62 30       	cpi	r22, 0x02	; 2
    10f0:	a9 f1       	breq	.+106    	; 0x115c <ext_lld_set_intx_edges+0xd6>
    10f2:	63 30       	cpi	r22, 0x03	; 3
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <ext_lld_set_intx_edges+0x72>
    10f6:	7b c0       	rjmp	.+246    	; 0x11ee <ext_lld_set_intx_edges+0x168>
    10f8:	2b 7f       	andi	r18, 0xFB	; 251
    10fa:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    10fe:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1102:	27 7f       	andi	r18, 0xF7	; 247
    1104:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1108:	d3 cf       	rjmp	.-90     	; 0x10b0 <ext_lld_set_intx_edges+0x2a>
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	91 05       	cpc	r25, r1
    110e:	09 f0       	breq	.+2      	; 0x1112 <ext_lld_set_intx_edges+0x8c>
    1110:	80 c0       	rjmp	.+256    	; 0x1212 <ext_lld_set_intx_edges+0x18c>
    1112:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1116:	61 30       	cpi	r22, 0x01	; 1
    1118:	09 f4       	brne	.+2      	; 0x111c <ext_lld_set_intx_edges+0x96>
    111a:	45 c0       	rjmp	.+138    	; 0x11a6 <ext_lld_set_intx_edges+0x120>
    111c:	62 30       	cpi	r22, 0x02	; 2
    111e:	39 f1       	breq	.+78     	; 0x116e <ext_lld_set_intx_edges+0xe8>
    1120:	63 30       	cpi	r22, 0x03	; 3
    1122:	09 f4       	brne	.+2      	; 0x1126 <ext_lld_set_intx_edges+0xa0>
    1124:	6d c0       	rjmp	.+218    	; 0x1200 <ext_lld_set_intx_edges+0x17a>
    1126:	8f 7e       	andi	r24, 0xEF	; 239
    1128:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    112c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1130:	8f 7d       	andi	r24, 0xDF	; 223
    1132:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1136:	08 95       	ret
    1138:	21 60       	ori	r18, 0x01	; 1
    113a:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    113e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1142:	22 60       	ori	r18, 0x02	; 2
    1144:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1148:	b3 cf       	rjmp	.-154    	; 0x10b0 <ext_lld_set_intx_edges+0x2a>
    114a:	21 60       	ori	r18, 0x01	; 1
    114c:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1150:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1154:	2d 7f       	andi	r18, 0xFD	; 253
    1156:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    115a:	aa cf       	rjmp	.-172    	; 0x10b0 <ext_lld_set_intx_edges+0x2a>
    115c:	2b 7f       	andi	r18, 0xFB	; 251
    115e:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1162:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1166:	28 60       	ori	r18, 0x08	; 8
    1168:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    116c:	a1 cf       	rjmp	.-190    	; 0x10b0 <ext_lld_set_intx_edges+0x2a>
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1174:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1178:	80 62       	ori	r24, 0x20	; 32
    117a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    117e:	08 95       	ret
    1180:	08 95       	ret
    1182:	2e 7f       	andi	r18, 0xFE	; 254
    1184:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1188:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    118c:	22 60       	ori	r18, 0x02	; 2
    118e:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1192:	8e cf       	rjmp	.-228    	; 0x10b0 <ext_lld_set_intx_edges+0x2a>
    1194:	24 60       	ori	r18, 0x04	; 4
    1196:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    119a:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    119e:	28 60       	ori	r18, 0x08	; 8
    11a0:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    11a4:	85 cf       	rjmp	.-246    	; 0x10b0 <ext_lld_set_intx_edges+0x2a>
    11a6:	80 61       	ori	r24, 0x10	; 16
    11a8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    11ac:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    11b0:	80 62       	ori	r24, 0x20	; 32
    11b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    11b6:	08 95       	ret
    11b8:	84 60       	ori	r24, 0x04	; 4
    11ba:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11c2:	88 60       	ori	r24, 0x08	; 8
    11c4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11c8:	08 95       	ret
    11ca:	8b 7f       	andi	r24, 0xFB	; 251
    11cc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11d4:	88 60       	ori	r24, 0x08	; 8
    11d6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11da:	08 95       	ret
    11dc:	84 60       	ori	r24, 0x04	; 4
    11de:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11e6:	87 7f       	andi	r24, 0xF7	; 247
    11e8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    11ec:	08 95       	ret
    11ee:	24 60       	ori	r18, 0x04	; 4
    11f0:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    11f4:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    11f8:	27 7f       	andi	r18, 0xF7	; 247
    11fa:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    11fe:	58 cf       	rjmp	.-336    	; 0x10b0 <ext_lld_set_intx_edges+0x2a>
    1200:	80 61       	ori	r24, 0x10	; 16
    1202:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1206:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    120a:	8f 7d       	andi	r24, 0xDF	; 223
    120c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1210:	08 95       	ret
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	61 f5       	brne	.+88     	; 0x1270 <ext_lld_set_intx_edges+0x1ea>
    1218:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    121c:	61 30       	cpi	r22, 0x01	; 1
    121e:	69 f0       	breq	.+26     	; 0x123a <ext_lld_set_intx_edges+0x1b4>
    1220:	62 30       	cpi	r22, 0x02	; 2
    1222:	a1 f0       	breq	.+40     	; 0x124c <ext_lld_set_intx_edges+0x1c6>
    1224:	63 30       	cpi	r22, 0x03	; 3
    1226:	d9 f0       	breq	.+54     	; 0x125e <ext_lld_set_intx_edges+0x1d8>
    1228:	8f 7b       	andi	r24, 0xBF	; 191
    122a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    122e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1232:	8f 77       	andi	r24, 0x7F	; 127
    1234:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1238:	08 95       	ret
    123a:	80 64       	ori	r24, 0x40	; 64
    123c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1240:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1244:	80 68       	ori	r24, 0x80	; 128
    1246:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    124a:	08 95       	ret
    124c:	8f 7b       	andi	r24, 0xBF	; 191
    124e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1252:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    125c:	08 95       	ret
    125e:	80 64       	ori	r24, 0x40	; 64
    1260:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1264:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    1268:	8f 77       	andi	r24, 0x7F	; 127
    126a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    126e:	08 95       	ret
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	91 05       	cpc	r25, r1
    1274:	09 f0       	breq	.+2      	; 0x1278 <ext_lld_set_intx_edges+0x1f2>
    1276:	1c cf       	rjmp	.-456    	; 0x10b0 <ext_lld_set_intx_edges+0x2a>
    1278:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    127c:	61 30       	cpi	r22, 0x01	; 1
    127e:	69 f0       	breq	.+26     	; 0x129a <ext_lld_set_intx_edges+0x214>
    1280:	62 30       	cpi	r22, 0x02	; 2
    1282:	a1 f0       	breq	.+40     	; 0x12ac <ext_lld_set_intx_edges+0x226>
    1284:	63 30       	cpi	r22, 0x03	; 3
    1286:	d9 f0       	breq	.+54     	; 0x12be <ext_lld_set_intx_edges+0x238>
    1288:	8e 7f       	andi	r24, 0xFE	; 254
    128a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    128e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    1292:	8d 7f       	andi	r24, 0xFD	; 253
    1294:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    1298:	08 95       	ret
    129a:	81 60       	ori	r24, 0x01	; 1
    129c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12a0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12a4:	82 60       	ori	r24, 0x02	; 2
    12a6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12aa:	08 95       	ret
    12ac:	8e 7f       	andi	r24, 0xFE	; 254
    12ae:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12b6:	82 60       	ori	r24, 0x02	; 2
    12b8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12bc:	08 95       	ret
    12be:	81 60       	ori	r24, 0x01	; 1
    12c0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12c4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12c8:	8d 7f       	andi	r24, 0xFD	; 253
    12ca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    12ce:	08 95       	ret

000012d0 <__vector_1>:
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	0b b6       	in	r0, 0x3b	; 59
    12dc:	0f 92       	push	r0
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>
    12fc:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <EXTD1+0x1>
    1300:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <EXTD1+0x2>
    1304:	04 80       	ldd	r0, Z+4	; 0x04
    1306:	f5 81       	ldd	r31, Z+5	; 0x05
    1308:	e0 2d       	mov	r30, r0
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	8f e7       	ldi	r24, 0x7F	; 127
    1310:	93 e0       	ldi	r25, 0x03	; 3
    1312:	19 95       	eicall
    1314:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    1318:	29 da       	rcall	.-2990   	; 0x76c <chSchIsPreemptionRequired>
    131a:	81 11       	cpse	r24, r1
    131c:	37 da       	rcall	.-2962   	; 0x78c <chSchDoReschedule>
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	bf 91       	pop	r27
    1324:	af 91       	pop	r26
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	7f 91       	pop	r23
    132c:	6f 91       	pop	r22
    132e:	5f 91       	pop	r21
    1330:	4f 91       	pop	r20
    1332:	3f 91       	pop	r19
    1334:	2f 91       	pop	r18
    1336:	0f 90       	pop	r0
    1338:	0b be       	out	0x3b, r0	; 59
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_2>:
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	0b b6       	in	r0, 0x3b	; 59
    1350:	0f 92       	push	r0
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>
    1370:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <EXTD1+0x1>
    1374:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <EXTD1+0x2>
    1378:	02 84       	ldd	r0, Z+10	; 0x0a
    137a:	f3 85       	ldd	r31, Z+11	; 0x0b
    137c:	e0 2d       	mov	r30, r0
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	8f e7       	ldi	r24, 0x7F	; 127
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	19 95       	eicall
    1388:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    138c:	ef d9       	rcall	.-3106   	; 0x76c <chSchIsPreemptionRequired>
    138e:	81 11       	cpse	r24, r1
    1390:	fd d9       	rcall	.-3078   	; 0x78c <chSchDoReschedule>
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0b be       	out	0x3b, r0	; 59
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <__vector_3>:
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	0b b6       	in	r0, 0x3b	; 59
    13c4:	0f 92       	push	r0
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>
    13e4:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <EXTD1+0x1>
    13e8:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <EXTD1+0x2>
    13ec:	00 88       	ldd	r0, Z+16	; 0x10
    13ee:	f1 89       	ldd	r31, Z+17	; 0x11
    13f0:	e0 2d       	mov	r30, r0
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	8f e7       	ldi	r24, 0x7F	; 127
    13f8:	93 e0       	ldi	r25, 0x03	; 3
    13fa:	19 95       	eicall
    13fc:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    1400:	b5 d9       	rcall	.-3222   	; 0x76c <chSchIsPreemptionRequired>
    1402:	81 11       	cpse	r24, r1
    1404:	c3 d9       	rcall	.-3194   	; 0x78c <chSchDoReschedule>
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0b be       	out	0x3b, r0	; 59
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <__vector_4>:
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	0b b6       	in	r0, 0x3b	; 59
    1438:	0f 92       	push	r0
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>
    1458:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <EXTD1+0x1>
    145c:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <EXTD1+0x2>
    1460:	06 88       	ldd	r0, Z+22	; 0x16
    1462:	f7 89       	ldd	r31, Z+23	; 0x17
    1464:	e0 2d       	mov	r30, r0
    1466:	63 e0       	ldi	r22, 0x03	; 3
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	8f e7       	ldi	r24, 0x7F	; 127
    146c:	93 e0       	ldi	r25, 0x03	; 3
    146e:	19 95       	eicall
    1470:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    1474:	7b d9       	rcall	.-3338   	; 0x76c <chSchIsPreemptionRequired>
    1476:	81 11       	cpse	r24, r1
    1478:	89 d9       	rcall	.-3310   	; 0x78c <chSchDoReschedule>
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0b be       	out	0x3b, r0	; 59
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_5>:
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	0b b6       	in	r0, 0x3b	; 59
    14ac:	0f 92       	push	r0
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>
    14cc:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <EXTD1+0x1>
    14d0:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <EXTD1+0x2>
    14d4:	04 8c       	ldd	r0, Z+28	; 0x1c
    14d6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    14d8:	e0 2d       	mov	r30, r0
    14da:	64 e0       	ldi	r22, 0x04	; 4
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	8f e7       	ldi	r24, 0x7F	; 127
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	19 95       	eicall
    14e4:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    14e8:	41 d9       	rcall	.-3454   	; 0x76c <chSchIsPreemptionRequired>
    14ea:	81 11       	cpse	r24, r1
    14ec:	4f d9       	rcall	.-3426   	; 0x78c <chSchDoReschedule>
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0b be       	out	0x3b, r0	; 59
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <__vector_6>:
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	0b b6       	in	r0, 0x3b	; 59
    1520:	0f 92       	push	r0
    1522:	2f 93       	push	r18
    1524:	3f 93       	push	r19
    1526:	4f 93       	push	r20
    1528:	5f 93       	push	r21
    152a:	6f 93       	push	r22
    152c:	7f 93       	push	r23
    152e:	8f 93       	push	r24
    1530:	9f 93       	push	r25
    1532:	af 93       	push	r26
    1534:	bf 93       	push	r27
    1536:	ef 93       	push	r30
    1538:	ff 93       	push	r31
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>
    1540:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <EXTD1+0x1>
    1544:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <EXTD1+0x2>
    1548:	02 a0       	ldd	r0, Z+34	; 0x22
    154a:	f3 a1       	ldd	r31, Z+35	; 0x23
    154c:	e0 2d       	mov	r30, r0
    154e:	65 e0       	ldi	r22, 0x05	; 5
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	8f e7       	ldi	r24, 0x7F	; 127
    1554:	93 e0       	ldi	r25, 0x03	; 3
    1556:	19 95       	eicall
    1558:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    155c:	07 d9       	rcall	.-3570   	; 0x76c <chSchIsPreemptionRequired>
    155e:	81 11       	cpse	r24, r1
    1560:	15 d9       	rcall	.-3542   	; 0x78c <chSchDoReschedule>
    1562:	ff 91       	pop	r31
    1564:	ef 91       	pop	r30
    1566:	bf 91       	pop	r27
    1568:	af 91       	pop	r26
    156a:	9f 91       	pop	r25
    156c:	8f 91       	pop	r24
    156e:	7f 91       	pop	r23
    1570:	6f 91       	pop	r22
    1572:	5f 91       	pop	r21
    1574:	4f 91       	pop	r20
    1576:	3f 91       	pop	r19
    1578:	2f 91       	pop	r18
    157a:	0f 90       	pop	r0
    157c:	0b be       	out	0x3b, r0	; 59
    157e:	0f 90       	pop	r0
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	0f 90       	pop	r0
    1584:	1f 90       	pop	r1
    1586:	18 95       	reti

00001588 <ext_lld_channel_enable>:
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	8c 01       	movw	r16, r24
    1592:	eb 01       	movw	r28, r22
    1594:	20 97       	sbiw	r28, 0x00	; 0
    1596:	a9 f0       	breq	.+42     	; 0x15c2 <ext_lld_channel_enable+0x3a>
    1598:	61 30       	cpi	r22, 0x01	; 1
    159a:	71 05       	cpc	r23, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <ext_lld_channel_enable+0x18>
    159e:	55 c0       	rjmp	.+170    	; 0x164a <ext_lld_channel_enable+0xc2>
    15a0:	62 30       	cpi	r22, 0x02	; 2
    15a2:	71 05       	cpc	r23, r1
    15a4:	b1 f1       	breq	.+108    	; 0x1612 <ext_lld_channel_enable+0x8a>
    15a6:	63 30       	cpi	r22, 0x03	; 3
    15a8:	71 05       	cpc	r23, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <ext_lld_channel_enable+0x26>
    15ac:	40 c0       	rjmp	.+128    	; 0x162e <ext_lld_channel_enable+0xa6>
    15ae:	64 30       	cpi	r22, 0x04	; 4
    15b0:	71 05       	cpc	r23, r1
    15b2:	09 f1       	breq	.+66     	; 0x15f6 <ext_lld_channel_enable+0x6e>
    15b4:	25 97       	sbiw	r28, 0x05	; 5
    15b6:	89 f0       	breq	.+34     	; 0x15da <ext_lld_channel_enable+0x52>
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	08 95       	ret
    15c2:	e8 9a       	sbi	0x1d, 0	; 29
    15c4:	dc 01       	movw	r26, r24
    15c6:	11 96       	adiw	r26, 0x01	; 1
    15c8:	ed 91       	ld	r30, X+
    15ca:	fc 91       	ld	r31, X
    15cc:	12 97       	sbiw	r26, 0x02	; 2
    15ce:	60 81       	ld	r22, Z
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	58 dd       	rcall	.-1360   	; 0x1086 <ext_lld_set_intx_edges>
    15d6:	25 97       	sbiw	r28, 0x05	; 5
    15d8:	79 f7       	brne	.-34     	; 0x15b8 <ext_lld_channel_enable+0x30>
    15da:	ed 9a       	sbi	0x1d, 5	; 29
    15dc:	d8 01       	movw	r26, r16
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	ed 91       	ld	r30, X+
    15e2:	fc 91       	ld	r31, X
    15e4:	12 97       	sbiw	r26, 0x02	; 2
    15e6:	66 8d       	ldd	r22, Z+30	; 0x1e
    15e8:	85 e0       	ldi	r24, 0x05	; 5
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	48 cd       	rjmp	.-1392   	; 0x1086 <ext_lld_set_intx_edges>
    15f6:	ec 9a       	sbi	0x1d, 4	; 29
    15f8:	dc 01       	movw	r26, r24
    15fa:	11 96       	adiw	r26, 0x01	; 1
    15fc:	ed 91       	ld	r30, X+
    15fe:	fc 91       	ld	r31, X
    1600:	12 97       	sbiw	r26, 0x02	; 2
    1602:	60 8d       	ldd	r22, Z+24	; 0x18
    1604:	84 e0       	ldi	r24, 0x04	; 4
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	3a cd       	rjmp	.-1420   	; 0x1086 <ext_lld_set_intx_edges>
    1612:	ea 9a       	sbi	0x1d, 2	; 29
    1614:	dc 01       	movw	r26, r24
    1616:	11 96       	adiw	r26, 0x01	; 1
    1618:	ed 91       	ld	r30, X+
    161a:	fc 91       	ld	r31, X
    161c:	12 97       	sbiw	r26, 0x02	; 2
    161e:	64 85       	ldd	r22, Z+12	; 0x0c
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	2c cd       	rjmp	.-1448   	; 0x1086 <ext_lld_set_intx_edges>
    162e:	eb 9a       	sbi	0x1d, 3	; 29
    1630:	dc 01       	movw	r26, r24
    1632:	11 96       	adiw	r26, 0x01	; 1
    1634:	ed 91       	ld	r30, X+
    1636:	fc 91       	ld	r31, X
    1638:	12 97       	sbiw	r26, 0x02	; 2
    163a:	62 89       	ldd	r22, Z+18	; 0x12
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	1e cd       	rjmp	.-1476   	; 0x1086 <ext_lld_set_intx_edges>
    164a:	e9 9a       	sbi	0x1d, 1	; 29
    164c:	dc 01       	movw	r26, r24
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	ed 91       	ld	r30, X+
    1652:	fc 91       	ld	r31, X
    1654:	12 97       	sbiw	r26, 0x02	; 2
    1656:	66 81       	ldd	r22, Z+6	; 0x06
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	14 dd       	rcall	.-1496   	; 0x1086 <ext_lld_set_intx_edges>
    165e:	aa cf       	rjmp	.-172    	; 0x15b4 <ext_lld_channel_enable+0x2c>

00001660 <ext_lld_init>:
 *
 * @notapi
 */
void ext_lld_init(void) {
  /* Driver initialization.*/
  extObjectInit(&EXTD1);
    1660:	8f e7       	ldi	r24, 0x7F	; 127
    1662:	93 e0       	ldi	r25, 0x03	; 3
    1664:	6b cc       	rjmp	.-1834   	; 0xf3c <extObjectInit>

00001666 <ext_lld_start>:
 *
 * @param[in] extp  pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	8c 01       	movw	r16, r24
  expchannel_t line;

  if (extp->state == EXT_STOP)
    1670:	fc 01       	movw	r30, r24
    1672:	80 81       	ld	r24, Z
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	71 f0       	breq	.+28     	; 0x1694 <ext_lld_start+0x2e>
 *
 * @param[in] extp  pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
    1678:	c0 e0       	ldi	r28, 0x00	; 0
    167a:	d0 e0       	ldi	r29, 0x00	; 0
    osalSysUnlock();

  /* Configuration of automatic channels. */
  for (line = 0; line < EXT_MAX_CHANNELS; line++) {
    //if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
      ext_lld_channel_enable(extp, line);
    167c:	be 01       	movw	r22, r28
    167e:	c8 01       	movw	r24, r16
    1680:	83 df       	rcall	.-250    	; 0x1588 <ext_lld_channel_enable>

  if (extp->state == EXT_STOP)
    osalSysUnlock();

  /* Configuration of automatic channels. */
  for (line = 0; line < EXT_MAX_CHANNELS; line++) {
    1682:	21 96       	adiw	r28, 0x01	; 1
    1684:	c6 30       	cpi	r28, 0x06	; 6
    1686:	d1 05       	cpc	r29, r1
    1688:	c9 f7       	brne	.-14     	; 0x167c <ext_lld_start+0x16>
    //if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
      ext_lld_channel_enable(extp, line);
    //else
    //  ext_lld_channel_disable(extp, line);
  }
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	08 95       	ret
    1694:	78 94       	sei
    1696:	f0 cf       	rjmp	.-32     	; 0x1678 <ext_lld_start+0x12>

00001698 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    1698:	fc 01       	movw	r30, r24

#if defined(PORTA) || defined(__DOXYGEN__)
  PORTA = config->porta.out;
    169a:	80 81       	ld	r24, Z
    169c:	82 b9       	out	0x02, r24	; 2
  DDRA = config->porta.dir;
    169e:	81 81       	ldd	r24, Z+1	; 0x01
    16a0:	81 b9       	out	0x01, r24	; 1
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
    16a6:	83 81       	ldd	r24, Z+3	; 0x03
    16a8:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
    16aa:	84 81       	ldd	r24, Z+4	; 0x04
    16ac:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
    16ae:	85 81       	ldd	r24, Z+5	; 0x05
    16b0:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
    16b2:	86 81       	ldd	r24, Z+6	; 0x06
    16b4:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
    16b6:	87 81       	ldd	r24, Z+7	; 0x07
    16b8:	8a b9       	out	0x0a, r24	; 10
#endif

#if defined(PORTE) || defined(__DOXYGEN__)
  PORTE = config->porte.out;
    16ba:	80 85       	ldd	r24, Z+8	; 0x08
    16bc:	8e b9       	out	0x0e, r24	; 14
  DDRE = config->porte.dir;
    16be:	81 85       	ldd	r24, Z+9	; 0x09
    16c0:	8d b9       	out	0x0d, r24	; 13
#endif

#if defined(PORTF) || defined(__DOXYGEN__)
  PORTF = config->portf.out;
    16c2:	82 85       	ldd	r24, Z+10	; 0x0a
    16c4:	81 bb       	out	0x11, r24	; 17
  DDRF = config->portf.dir;
    16c6:	83 85       	ldd	r24, Z+11	; 0x0b
    16c8:	80 bb       	out	0x10, r24	; 16
#endif

#if defined(PORTG) || defined(__DOXYGEN__)
  PORTG = config->portg.out;
    16ca:	84 85       	ldd	r24, Z+12	; 0x0c
    16cc:	84 bb       	out	0x14, r24	; 20
  DDRG = config->portg.dir;
    16ce:	85 85       	ldd	r24, Z+13	; 0x0d
    16d0:	83 bb       	out	0x13, r24	; 19
#endif

#if defined(PORTH) || defined(__DOXYGEN__)
  PORTH = config->porth.out;
    16d2:	86 85       	ldd	r24, Z+14	; 0x0e
    16d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
  DDRH = config->porth.dir;
    16d8:	87 85       	ldd	r24, Z+15	; 0x0f
    16da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
#endif

#if defined(PORTJ) || defined(__DOXYGEN__)
  PORTJ = config->portj.out;
    16de:	80 89       	ldd	r24, Z+16	; 0x10
    16e0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
  DDRJ = config->portj.dir;
    16e4:	81 89       	ldd	r24, Z+17	; 0x11
    16e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
#endif

#if defined(PORTK) || defined(__DOXYGEN__)
  PORTK = config->portk.out;
    16ea:	82 89       	ldd	r24, Z+18	; 0x12
    16ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
  DDRK = config->portk.dir;
    16f0:	83 89       	ldd	r24, Z+19	; 0x13
    16f2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
#endif

#if defined(PORTL) || defined(__DOXYGEN__)
  PORTL = config->portl.out;
    16f6:	84 89       	ldd	r24, Z+20	; 0x14
    16f8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
  DDRL = config->portl.dir;
    16fc:	85 89       	ldd	r24, Z+21	; 0x15
    16fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    1702:	08 95       	ret

00001704 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
    1704:	fc 01       	movw	r30, r24

  switch (mode) {
    1706:	42 30       	cpi	r20, 0x02	; 2
    1708:	c9 f0       	breq	.+50     	; 0x173c <_pal_lld_setgroupmode+0x38>
    170a:	98 f0       	brcs	.+38     	; 0x1732 <_pal_lld_setgroupmode+0x2e>
    170c:	45 30       	cpi	r20, 0x05	; 5
    170e:	b1 f0       	breq	.+44     	; 0x173c <_pal_lld_setgroupmode+0x38>
    1710:	46 30       	cpi	r20, 0x06	; 6
    1712:	21 f4       	brne	.+8      	; 0x171c <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
    1714:	81 81       	ldd	r24, Z+1	; 0x01
    1716:	68 2b       	or	r22, r24
    1718:	61 83       	std	Z+1, r22	; 0x01
    171a:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
    171c:	43 30       	cpi	r20, 0x03	; 3
    171e:	e9 f7       	brne	.-6      	; 0x171a <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    1720:	81 81       	ldd	r24, Z+1	; 0x01
    1722:	96 2f       	mov	r25, r22
    1724:	90 95       	com	r25
    1726:	89 23       	and	r24, r25
    1728:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	68 2b       	or	r22, r24
    172e:	62 83       	std	Z+2, r22	; 0x02
    break;
    1730:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
    1732:	44 23       	and	r20, r20
    1734:	19 f0       	breq	.+6      	; 0x173c <_pal_lld_setgroupmode+0x38>
    1736:	41 30       	cpi	r20, 0x01	; 1
    1738:	99 f3       	breq	.-26     	; 0x1720 <_pal_lld_setgroupmode+0x1c>
    173a:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
    173c:	81 81       	ldd	r24, Z+1	; 0x01
    173e:	60 95       	com	r22
    1740:	86 23       	and	r24, r22
    1742:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	68 23       	and	r22, r24
    1748:	62 83       	std	Z+2, r22	; 0x02
    break;
    174a:	08 95       	ret

0000174c <__vector_17>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	0b b6       	in	r0, 0x3b	; 59
    1758:	0f 92       	push	r0
    175a:	2f 93       	push	r18
    175c:	3f 93       	push	r19
    175e:	4f 93       	push	r20
    1760:	5f 93       	push	r21
    1762:	6f 93       	push	r22
    1764:	7f 93       	push	r23
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	af 93       	push	r26
    176c:	bf 93       	push	r27
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
    1778:	0e 94 25 01 	call	0x24a	; 0x24a <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    177c:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    1780:	0e 94 b6 03 	call	0x76c	; 0x76c <chSchIsPreemptionRequired>
    1784:	81 11       	cpse	r24, r1
    1786:	02 d8       	rcall	.-4092   	; 0x78c <chSchDoReschedule>
}
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0b be       	out	0x3b, r0	; 59
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <st_lld_init>:
  /*
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source */
  TCCR1A     = 0;
    17ae:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
  TCCR1B     = _BV(WGM12);
    17b2:	e1 e8       	ldi	r30, 0x81	; 129
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	88 e0       	ldi	r24, 0x08	; 8
    17b8:	80 83       	st	Z, r24

  /* start disabled */
  TCCR1C     = 0;
    17ba:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7c0082>
  OCR1A      = 0;
    17be:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    17c2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
  TCNT1      = 0;
    17c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    17ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
  TIFR_REG   = _BV(OCF1A);                                  /* Reset pending.   */
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
    17d2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
  TCCR1B     = PRESCALER;
    17d6:	85 e0       	ldi	r24, 0x05	; 5
    17d8:	80 83       	st	Z, r24
    17da:	08 95       	ret

000017dc <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    17dc:	e1 ec       	ldi	r30, 0xC1	; 193
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 62       	ori	r24, 0x20	; 32
    17e4:	80 83       	st	Z, r24
    17e6:	08 95       	ret

000017e8 <__vector_25>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	0b b6       	in	r0, 0x3b	; 59
    17f4:	0f 92       	push	r0
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>

  sra = UCSR0A;
    1814:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    1818:	98 2f       	mov	r25, r24
    181a:	9c 71       	andi	r25, 0x1C	; 28
    181c:	f9 f4       	brne	.+62     	; 0x185c <__vector_25+0x74>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    181e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1822:	82 e8       	ldi	r24, 0x82	; 130
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	f0 db       	rcall	.-2080   	; 0x1008 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1828:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    182c:	0e 94 b6 03 	call	0x76c	; 0x76c <chSchIsPreemptionRequired>
    1830:	81 11       	cpse	r24, r1
    1832:	0e 94 c6 03 	call	0x78c	; 0x78c <chSchDoReschedule>
}
    1836:	ff 91       	pop	r31
    1838:	ef 91       	pop	r30
    183a:	bf 91       	pop	r27
    183c:	af 91       	pop	r26
    183e:	9f 91       	pop	r25
    1840:	8f 91       	pop	r24
    1842:	7f 91       	pop	r23
    1844:	6f 91       	pop	r22
    1846:	5f 91       	pop	r21
    1848:	4f 91       	pop	r20
    184a:	3f 91       	pop	r19
    184c:	2f 91       	pop	r18
    184e:	0f 90       	pop	r0
    1850:	0b be       	out	0x3b, r0	; 59
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    185c:	83 fd       	sbrc	r24, 3
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <__vector_25+0x8a>
/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    1860:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    1862:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    1864:	60 62       	ori	r22, 0x20	; 32
  if (sra & fe)
    1866:	84 fd       	sbrc	r24, 4
    sts |= SD_FRAMING_ERROR;
    1868:	60 64       	ori	r22, 0x40	; 64
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    186a:	84 e8       	ldi	r24, 0x84	; 132
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	e1 d8       	rcall	.-3646   	; 0xa32 <chEvtBroadcastFlagsI>
    1870:	d6 cf       	rjmp	.-84     	; 0x181e <__vector_25+0x36>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    1872:	60 e8       	ldi	r22, 0x80	; 128
    1874:	f6 cf       	rjmp	.-20     	; 0x1862 <__vector_25+0x7a>

00001876 <__vector_26>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	0b b6       	in	r0, 0x3b	; 59
    1882:	0f 92       	push	r0
    1884:	2f 93       	push	r18
    1886:	3f 93       	push	r19
    1888:	4f 93       	push	r20
    188a:	5f 93       	push	r21
    188c:	6f 93       	push	r22
    188e:	7f 93       	push	r23
    1890:	8f 93       	push	r24
    1892:	9f 93       	push	r25
    1894:	af 93       	push	r26
    1896:	bf 93       	push	r27
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    18a2:	82 e8       	ldi	r24, 0x82	; 130
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	d4 db       	rcall	.-2136   	; 0x1050 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    18a8:	97 fd       	sbrc	r25, 7
    18aa:	1c c0       	rjmp	.+56     	; 0x18e4 <__vector_26+0x6e>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    18ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

  OSAL_IRQ_EPILOGUE();
    18b0:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__avr_in_isr>
    18b4:	0e 94 b6 03 	call	0x76c	; 0x76c <chSchIsPreemptionRequired>
    18b8:	81 11       	cpse	r24, r1
    18ba:	0e 94 c6 03 	call	0x78c	; 0x78c <chSchDoReschedule>
}
    18be:	ff 91       	pop	r31
    18c0:	ef 91       	pop	r30
    18c2:	bf 91       	pop	r27
    18c4:	af 91       	pop	r26
    18c6:	9f 91       	pop	r25
    18c8:	8f 91       	pop	r24
    18ca:	7f 91       	pop	r23
    18cc:	6f 91       	pop	r22
    18ce:	5f 91       	pop	r21
    18d0:	4f 91       	pop	r20
    18d2:	3f 91       	pop	r19
    18d4:	2f 91       	pop	r18
    18d6:	0f 90       	pop	r0
    18d8:	0b be       	out	0x3b, r0	; 59
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    18e4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    18e8:	8f 7d       	andi	r24, 0xDF	; 223
    18ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    18ee:	e0 cf       	rjmp	.-64     	; 0x18b0 <__vector_26+0x3a>

000018f0 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    18f0:	4e ee       	ldi	r20, 0xEE	; 238
    18f2:	5b e0       	ldi	r21, 0x0B	; 11
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	82 e8       	ldi	r24, 0x82	; 130
    18fa:	93 e0       	ldi	r25, 0x03	; 3
    18fc:	4f cb       	rjmp	.-2402   	; 0xf9c <sdObjectInit>

000018fe <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    18fe:	61 15       	cp	r22, r1
    1900:	71 05       	cpc	r23, r1
    1902:	19 f1       	breq	.+70     	; 0x194a <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    1904:	82 58       	subi	r24, 0x82	; 130
    1906:	93 40       	sbci	r25, 0x03	; 3
    1908:	09 f0       	breq	.+2      	; 0x190c <sd_lld_start+0xe>
    190a:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    190c:	fb 01       	movw	r30, r22
    190e:	80 81       	ld	r24, Z
    1910:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    1914:	81 81       	ldd	r24, Z+1	; 0x01
    1916:	8f 70       	andi	r24, 0x0F	; 15
    1918:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
  UCSR0A = (1 << U2X0);
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    1922:	88 e9       	ldi	r24, 0x98	; 152
    1924:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
  switch (config->sc_bits_per_char) {
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	b9 f0       	breq	.+46     	; 0x195c <sd_lld_start+0x5e>
    192e:	a0 f0       	brcs	.+40     	; 0x1958 <sd_lld_start+0x5a>
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	71 f0       	breq	.+28     	; 0x1950 <sd_lld_start+0x52>
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	71 f4       	brne	.+28     	; 0x1954 <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    1938:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    193c:	84 60       	ori	r24, 0x04	; 4
    193e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    1942:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    1944:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
    1948:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    194a:	68 e3       	ldi	r22, 0x38	; 56
    194c:	72 e0       	ldi	r23, 0x02	; 2
    194e:	da cf       	rjmp	.-76     	; 0x1904 <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    1950:	84 e0       	ldi	r24, 0x04	; 4
    1952:	f8 cf       	rjmp	.-16     	; 0x1944 <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    1954:	86 e0       	ldi	r24, 0x06	; 6
    1956:	f6 cf       	rjmp	.-20     	; 0x1944 <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	f4 cf       	rjmp	.-24     	; 0x1944 <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	f2 cf       	rjmp	.-28     	; 0x1944 <sd_lld_start+0x46>

00001960 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    1960:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
  EICRB  = 0x00;
    1964:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
  EIMSK  = 0x00;
    1968:	1d ba       	out	0x1d, r1	; 29
    196a:	08 95       	ret

0000196c <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    196c:	2f 92       	push	r2
    196e:	3f 92       	push	r3
    1970:	4f 92       	push	r4
    1972:	5f 92       	push	r5
    1974:	6f 92       	push	r6
    1976:	7f 92       	push	r7
    1978:	8f 92       	push	r8
    197a:	9f 92       	push	r9
    197c:	af 92       	push	r10
    197e:	bf 92       	push	r11
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	c7 54       	subi	r28, 0x47	; 71
    1996:	d1 09       	sbc	r29, r1
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	1c 01       	movw	r2, r24
    19a4:	6b 01       	movw	r12, r22
    19a6:	5d a3       	std	Y+37, r21	; 0x25
    19a8:	4c a3       	std	Y+36, r20	; 0x24
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    19aa:	1b a2       	std	Y+35, r1	; 0x23
    19ac:	1a a2       	std	Y+34, r1	; 0x22
    19ae:	9e 01       	movw	r18, r28
    19b0:	2e 5f       	subi	r18, 0xFE	; 254
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	39 8f       	std	Y+25, r19	; 0x19
    19b6:	28 8f       	std	Y+24, r18	; 0x18
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	9b 8f       	std	Y+27, r25	; 0x1b
    19be:	8a 8f       	std	Y+26, r24	; 0x1a
    19c0:	28 1b       	sub	r18, r24
    19c2:	39 0b       	sbc	r19, r25
    19c4:	39 ab       	std	Y+49, r19	; 0x31
    19c6:	28 ab       	std	Y+48, r18	; 0x30
    19c8:	21 50       	subi	r18, 0x01	; 1
    19ca:	31 09       	sbc	r19, r1
    19cc:	3d ab       	std	Y+53, r19	; 0x35
    19ce:	2c ab       	std	Y+52, r18	; 0x34
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    19d0:	de 01       	movw	r26, r28
    19d2:	1c 96       	adiw	r26, 0x0c	; 12
    19d4:	bd 8f       	std	Y+29, r27	; 0x1d
    19d6:	ac 8f       	std	Y+28, r26	; 0x1c
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    19d8:	86 01       	movw	r16, r12
    19da:	0f 5f       	subi	r16, 0xFF	; 255
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	f6 01       	movw	r30, r12
    19e0:	60 81       	ld	r22, Z
    if (c == 0)
    19e2:	66 23       	and	r22, r22
    19e4:	b9 f0       	breq	.+46     	; 0x1a14 <chvprintf+0xa8>
      return n;
    if (c != '%') {
    19e6:	65 32       	cpi	r22, 0x25	; 37
    19e8:	89 f1       	breq	.+98     	; 0x1a4c <chvprintf+0xe0>
      streamPut(chp, (uint8_t)c);
    19ea:	d1 01       	movw	r26, r2
    19ec:	ed 91       	ld	r30, X+
    19ee:	fc 91       	ld	r31, X
    19f0:	04 80       	ldd	r0, Z+4	; 0x04
    19f2:	f5 81       	ldd	r31, Z+5	; 0x05
    19f4:	e0 2d       	mov	r30, r0
    19f6:	c1 01       	movw	r24, r2
    19f8:	19 95       	eicall
      n++;
    19fa:	ea a1       	ldd	r30, Y+34	; 0x22
    19fc:	fb a1       	ldd	r31, Y+35	; 0x23
    19fe:	31 96       	adiw	r30, 0x01	; 1
    1a00:	fb a3       	std	Y+35, r31	; 0x23
    1a02:	ea a3       	std	Y+34, r30	; 0x22
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1a04:	68 01       	movw	r12, r16
    1a06:	86 01       	movw	r16, r12
    1a08:	0f 5f       	subi	r16, 0xFF	; 255
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	f6 01       	movw	r30, r12
    1a0e:	60 81       	ld	r22, Z
    if (c == 0)
    1a10:	61 11       	cpse	r22, r1
    1a12:	e9 cf       	rjmp	.-46     	; 0x19e6 <chvprintf+0x7a>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    1a14:	8a a1       	ldd	r24, Y+34	; 0x22
    1a16:	9b a1       	ldd	r25, Y+35	; 0x23
    1a18:	c9 5b       	subi	r28, 0xB9	; 185
    1a1a:	df 4f       	sbci	r29, 0xFF	; 255
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	bf 90       	pop	r11
    1a38:	af 90       	pop	r10
    1a3a:	9f 90       	pop	r9
    1a3c:	8f 90       	pop	r8
    1a3e:	7f 90       	pop	r7
    1a40:	6f 90       	pop	r6
    1a42:	5f 90       	pop	r5
    1a44:	4f 90       	pop	r4
    1a46:	3f 90       	pop	r3
    1a48:	2f 90       	pop	r2
    1a4a:	08 95       	ret
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	9d 32       	cpi	r25, 0x2D	; 45
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <chvprintf+0xe8>
    1a52:	e7 c0       	rjmp	.+462    	; 0x1c22 <chvprintf+0x2b6>
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    1a54:	19 a6       	std	Y+41, r1	; 0x29
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
    1a56:	90 33       	cpi	r25, 0x30	; 48
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <chvprintf+0xf0>
    1a5a:	dc c0       	rjmp	.+440    	; 0x1c14 <chvprintf+0x2a8>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    1a5c:	20 e2       	ldi	r18, 0x20	; 32
    1a5e:	28 a7       	std	Y+40, r18	; 0x28
    1a60:	a8 01       	movw	r20, r16
    1a62:	4f 5f       	subi	r20, 0xFF	; 255
    1a64:	5f 4f       	sbci	r21, 0xFF	; 255
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
    1a66:	e1 2c       	mov	r14, r1
    1a68:	f1 2c       	mov	r15, r1
    1a6a:	ec a1       	ldd	r30, Y+36	; 0x24
    1a6c:	fd a1       	ldd	r31, Y+37	; 0x25
    1a6e:	13 c0       	rjmp	.+38     	; 0x1a96 <chvprintf+0x12a>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
    1a70:	80 81       	ld	r24, Z
    1a72:	32 96       	adiw	r30, 0x02	; 2
      else
        break;
      width = width * 10 + c;
    1a74:	97 01       	movw	r18, r14
    1a76:	22 0f       	add	r18, r18
    1a78:	33 1f       	adc	r19, r19
    1a7a:	ee 0c       	add	r14, r14
    1a7c:	ff 1c       	adc	r15, r15
    1a7e:	ee 0c       	add	r14, r14
    1a80:	ff 1c       	adc	r15, r15
    1a82:	ee 0c       	add	r14, r14
    1a84:	ff 1c       	adc	r15, r15
    1a86:	e2 0e       	add	r14, r18
    1a88:	f3 1e       	adc	r15, r19
    1a8a:	e8 0e       	add	r14, r24
    1a8c:	f1 1c       	adc	r15, r1
    1a8e:	4f 5f       	subi	r20, 0xFF	; 255
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	d6 01       	movw	r26, r12
    1a94:	9c 91       	ld	r25, X
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
    1a96:	6a 01       	movw	r12, r20
      if (c >= '0' && c <= '9')
    1a98:	80 ed       	ldi	r24, 0xD0	; 208
    1a9a:	89 0f       	add	r24, r25
    1a9c:	8a 30       	cpi	r24, 0x0A	; 10
    1a9e:	50 f3       	brcs	.-44     	; 0x1a74 <chvprintf+0x108>
        c -= '0';
      else if (c == '*')
    1aa0:	9a 32       	cpi	r25, 0x2A	; 42
    1aa2:	31 f3       	breq	.-52     	; 0x1a70 <chvprintf+0x104>
    1aa4:	fd a3       	std	Y+37, r31	; 0x25
    1aa6:	ec a3       	std	Y+36, r30	; 0x24
    1aa8:	00 e0       	ldi	r16, 0x00	; 0
    1aaa:	10 e0       	ldi	r17, 0x00	; 0
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
    1aac:	9e 32       	cpi	r25, 0x2E	; 46
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <chvprintf+0x146>
    1ab0:	91 c0       	rjmp	.+290    	; 0x1bd4 <chvprintf+0x268>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    1ab2:	89 2f       	mov	r24, r25
    1ab4:	8f 7d       	andi	r24, 0xDF	; 223
    1ab6:	8c 34       	cpi	r24, 0x4C	; 76
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <chvprintf+0x150>
    1aba:	79 c0       	rjmp	.+242    	; 0x1bae <chvprintf+0x242>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
    1abc:	3f eb       	ldi	r19, 0xBF	; 191
    1abe:	39 0f       	add	r19, r25
    1ac0:	21 e0       	ldi	r18, 0x01	; 1
    1ac2:	3a 31       	cpi	r19, 0x1A	; 26
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <chvprintf+0x15c>
    1ac6:	20 e0       	ldi	r18, 0x00	; 0

    /* Command decoding.*/
    switch (c) {
    1ac8:	49 2f       	mov	r20, r25
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	fa 01       	movw	r30, r20
    1ace:	e4 54       	subi	r30, 0x44	; 68
    1ad0:	f1 09       	sbc	r31, r1
    1ad2:	e5 33       	cpi	r30, 0x35	; 53
    1ad4:	f1 05       	cpc	r31, r1
    1ad6:	08 f4       	brcc	.+2      	; 0x1ada <chvprintf+0x16e>
    1ad8:	ab c0       	rjmp	.+342    	; 0x1c30 <chvprintf+0x2c4>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    1ada:	99 83       	std	Y+1, r25	; 0x01
    1adc:	e8 a9       	ldd	r30, Y+48	; 0x30
    1ade:	f9 a9       	ldd	r31, Y+49	; 0x31
      break;
    1ae0:	8c a8       	ldd	r8, Y+52	; 0x34
    1ae2:	9d a8       	ldd	r9, Y+53	; 0x35
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	5c 01       	movw	r10, r24
    1aea:	87 01       	movw	r16, r14
    1aec:	0e 1b       	sub	r16, r30
    1aee:	1f 0b       	sbc	r17, r31
    1af0:	17 fd       	sbrc	r17, 7
    1af2:	d7 c0       	rjmp	.+430    	; 0x1ca2 <chvprintf+0x336>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1af4:	99 a5       	ldd	r25, Y+41	; 0x29
    1af6:	91 11       	cpse	r25, r1
    1af8:	57 c0       	rjmp	.+174    	; 0x1ba8 <chvprintf+0x23c>
      width = -width;
    1afa:	ee 24       	eor	r14, r14
    1afc:	ff 24       	eor	r15, r15
    1afe:	e0 1a       	sub	r14, r16
    1b00:	f1 0a       	sbc	r15, r17
    if (width < 0) {
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <chvprintf+0x19a>
    1b04:	80 c2       	rjmp	.+1280   	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
      if (*s == '-' && filler == '0') {
    1b06:	d5 01       	movw	r26, r10
    1b08:	8c 91       	ld	r24, X
    1b0a:	8d 32       	cpi	r24, 0x2D	; 45
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <chvprintf+0x1a4>
    1b0e:	86 c2       	rjmp	.+1292   	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    1b10:	78 a4       	ldd	r7, Y+40	; 0x28
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    1b12:	d1 01       	movw	r26, r2
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	04 80       	ldd	r0, Z+4	; 0x04
    1b1a:	f5 81       	ldd	r31, Z+5	; 0x05
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	67 2d       	mov	r22, r7
    1b20:	c1 01       	movw	r24, r2
    1b22:	19 95       	eicall
        n++;
      } while (++width != 0);
    1b24:	bf ef       	ldi	r27, 0xFF	; 255
    1b26:	eb 1a       	sub	r14, r27
    1b28:	fb 0a       	sbc	r15, r27
    1b2a:	99 f7       	brne	.-26     	; 0x1b12 <chvprintf+0x1a6>
    1b2c:	2a a1       	ldd	r18, Y+34	; 0x22
    1b2e:	3b a1       	ldd	r19, Y+35	; 0x23
    1b30:	20 0f       	add	r18, r16
    1b32:	31 1f       	adc	r19, r17
    1b34:	3b a3       	std	Y+35, r19	; 0x23
    1b36:	2a a3       	std	Y+34, r18	; 0x22
    }
    while (--i >= 0) {
    1b38:	97 fc       	sbrc	r9, 7
    1b3a:	4e cf       	rjmp	.-356    	; 0x19d8 <chvprintf+0x6c>
    1b3c:	00 e0       	ldi	r16, 0x00	; 0
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
    1b40:	74 01       	movw	r14, r8
      streamPut(chp, (uint8_t)*s++);
    1b42:	f5 01       	movw	r30, r10
    1b44:	61 91       	ld	r22, Z+
    1b46:	5f 01       	movw	r10, r30
    1b48:	d1 01       	movw	r26, r2
    1b4a:	ed 91       	ld	r30, X+
    1b4c:	fc 91       	ld	r31, X
    1b4e:	04 80       	ldd	r0, Z+4	; 0x04
    1b50:	f5 81       	ldd	r31, Z+5	; 0x05
    1b52:	e0 2d       	mov	r30, r0
    1b54:	c1 01       	movw	r24, r2
    1b56:	19 95       	eicall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1b58:	b1 e0       	ldi	r27, 0x01	; 1
    1b5a:	eb 1a       	sub	r14, r27
    1b5c:	f1 08       	sbc	r15, r1
    1b5e:	88 f7       	brcc	.-30     	; 0x1b42 <chvprintf+0x1d6>
    1b60:	8a a1       	ldd	r24, Y+34	; 0x22
    1b62:	9b a1       	ldd	r25, Y+35	; 0x23
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	97 fc       	sbrc	r9, 7
    1b68:	56 c2       	rjmp	.+1196   	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    1b6a:	94 01       	movw	r18, r8
    1b6c:	28 0f       	add	r18, r24
    1b6e:	39 1f       	adc	r19, r25
    1b70:	3b a3       	std	Y+35, r19	; 0x23
    1b72:	2a a3       	std	Y+34, r18	; 0x22
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1b74:	01 15       	cp	r16, r1
    1b76:	11 05       	cpc	r17, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <chvprintf+0x210>
    1b7a:	2e cf       	rjmp	.-420    	; 0x19d8 <chvprintf+0x6c>
    1b7c:	78 01       	movw	r14, r16
    1b7e:	b8 a4       	ldd	r11, Y+40	; 0x28
      streamPut(chp, (uint8_t)filler);
    1b80:	d1 01       	movw	r26, r2
    1b82:	ed 91       	ld	r30, X+
    1b84:	fc 91       	ld	r31, X
    1b86:	04 80       	ldd	r0, Z+4	; 0x04
    1b88:	f5 81       	ldd	r31, Z+5	; 0x05
    1b8a:	e0 2d       	mov	r30, r0
    1b8c:	6b 2d       	mov	r22, r11
    1b8e:	c1 01       	movw	r24, r2
    1b90:	19 95       	eicall
      n++;
      width--;
    1b92:	b1 e0       	ldi	r27, 0x01	; 1
    1b94:	eb 1a       	sub	r14, r27
    1b96:	f1 08       	sbc	r15, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1b98:	99 f7       	brne	.-26     	; 0x1b80 <chvprintf+0x214>
    1b9a:	ea a1       	ldd	r30, Y+34	; 0x22
    1b9c:	fb a1       	ldd	r31, Y+35	; 0x23
    1b9e:	e0 0f       	add	r30, r16
    1ba0:	f1 1f       	adc	r31, r17
    1ba2:	fb a3       	std	Y+35, r31	; 0x23
    1ba4:	ea a3       	std	Y+34, r30	; 0x22
    1ba6:	18 cf       	rjmp	.-464    	; 0x19d8 <chvprintf+0x6c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1ba8:	97 fe       	sbrs	r9, 7
    1baa:	ca cf       	rjmp	.-108    	; 0x1b40 <chvprintf+0x1d4>
    1bac:	e3 cf       	rjmp	.-58     	; 0x1b74 <chvprintf+0x208>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
    1bae:	d6 01       	movw	r26, r12
    1bb0:	2c 91       	ld	r18, X
    1bb2:	22 23       	and	r18, r18
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <chvprintf+0x24c>
    1bb6:	91 cf       	rjmp	.-222    	; 0x1ada <chvprintf+0x16e>
        c = *fmt++;
    1bb8:	ff ef       	ldi	r31, 0xFF	; 255
    1bba:	cf 1a       	sub	r12, r31
    1bbc:	df 0a       	sbc	r13, r31
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1bbe:	82 2f       	mov	r24, r18
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	e4 54       	subi	r30, 0x44	; 68
    1bc6:	f1 09       	sbc	r31, r1
    1bc8:	e5 33       	cpi	r30, 0x35	; 53
    1bca:	f1 05       	cpc	r31, r1
    1bcc:	08 f4       	brcc	.+2      	; 0x1bd0 <chvprintf+0x264>
    1bce:	1e c2       	rjmp	.+1084   	; 0x200c <__DATA_REGION_LENGTH__+0xc>
    1bd0:	92 2f       	mov	r25, r18
    1bd2:	83 cf       	rjmp	.-250    	; 0x1ada <chvprintf+0x16e>
    1bd4:	df 01       	movw	r26, r30
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <chvprintf+0x28a>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
    1bd8:	8c 91       	ld	r24, X
    1bda:	12 96       	adiw	r26, 0x02	; 2
        else
          break;
        precision *= 10;
    1bdc:	98 01       	movw	r18, r16
    1bde:	22 0f       	add	r18, r18
    1be0:	33 1f       	adc	r19, r19
    1be2:	00 0f       	add	r16, r16
    1be4:	11 1f       	adc	r17, r17
    1be6:	00 0f       	add	r16, r16
    1be8:	11 1f       	adc	r17, r17
    1bea:	00 0f       	add	r16, r16
    1bec:	11 1f       	adc	r17, r17
    1bee:	02 0f       	add	r16, r18
    1bf0:	13 1f       	adc	r17, r19
        precision += c;
    1bf2:	08 0f       	add	r16, r24
    1bf4:	11 1d       	adc	r17, r1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
    1bf6:	ef ef       	ldi	r30, 0xFF	; 255
    1bf8:	ce 1a       	sub	r12, r30
    1bfa:	de 0a       	sbc	r13, r30
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	31 97       	sbiw	r30, 0x01	; 1
    1c00:	90 81       	ld	r25, Z
        if (c >= '0' && c <= '9')
    1c02:	80 ed       	ldi	r24, 0xD0	; 208
    1c04:	89 0f       	add	r24, r25
    1c06:	8a 30       	cpi	r24, 0x0A	; 10
    1c08:	48 f3       	brcs	.-46     	; 0x1bdc <chvprintf+0x270>
          c -= '0';
        else if (c == '*')
    1c0a:	9a 32       	cpi	r25, 0x2A	; 42
    1c0c:	29 f3       	breq	.-54     	; 0x1bd8 <chvprintf+0x26c>
    1c0e:	bd a3       	std	Y+37, r27	; 0x25
    1c10:	ac a3       	std	Y+36, r26	; 0x24
    1c12:	4f cf       	rjmp	.-354    	; 0x1ab2 <chvprintf+0x146>
    1c14:	f8 01       	movw	r30, r16
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
    1c18:	0f 5f       	subi	r16, 0xFF	; 255
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    1c1c:	f0 e3       	ldi	r31, 0x30	; 48
    1c1e:	f8 a7       	std	Y+40, r31	; 0x28
    1c20:	1f cf       	rjmp	.-450    	; 0x1a60 <chvprintf+0xf4>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
    1c22:	86 01       	movw	r16, r12
    1c24:	0e 5f       	subi	r16, 0xFE	; 254
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	92 81       	ldd	r25, Z+2	; 0x02
      left_align = TRUE;
    1c2a:	b1 e0       	ldi	r27, 0x01	; 1
    1c2c:	b9 a7       	std	Y+41, r27	; 0x29
    1c2e:	13 cf       	rjmp	.-474    	; 0x1a56 <chvprintf+0xea>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1c30:	88 27       	eor	r24, r24
    1c32:	ee 58       	subi	r30, 0x8E	; 142
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	8f 4f       	sbci	r24, 0xFF	; 255
    1c38:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__tablejump2__>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1c3c:	8c a1       	ldd	r24, Y+36	; 0x24
    1c3e:	9d a1       	ldd	r25, Y+37	; 0x25
    1c40:	02 96       	adiw	r24, 0x02	; 2
    1c42:	ac a1       	ldd	r26, Y+36	; 0x24
    1c44:	bd a1       	ldd	r27, Y+37	; 0x25
    1c46:	ad 90       	ld	r10, X+
    1c48:	bc 90       	ld	r11, X
    1c4a:	a1 14       	cp	r10, r1
    1c4c:	b1 04       	cpc	r11, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <chvprintf+0x2e6>
    1c50:	c3 c2       	rjmp	.+1414   	; 0x21d8 <__DATA_REGION_LENGTH__+0x1d8>
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1c52:	f5 01       	movw	r30, r10
    1c54:	20 81       	ld	r18, Z
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
    1c56:	01 15       	cp	r16, r1
    1c58:	11 05       	cpc	r17, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <chvprintf+0x2f2>
    1c5c:	f9 c1       	rjmp	.+1010   	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1c5e:	22 23       	and	r18, r18
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <chvprintf+0x2f8>
    1c62:	bf c2       	rjmp	.+1406   	; 0x21e2 <__DATA_REGION_LENGTH__+0x1e2>
    1c64:	01 50       	subi	r16, 0x01	; 1
    1c66:	11 09       	sbc	r17, r1
    1c68:	f5 01       	movw	r30, r10
    1c6a:	31 96       	adiw	r30, 0x01	; 1
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <chvprintf+0x30c>
    1c6e:	01 50       	subi	r16, 0x01	; 1
    1c70:	11 09       	sbc	r17, r1
    1c72:	08 f4       	brcc	.+2      	; 0x1c76 <chvprintf+0x30a>
    1c74:	96 c2       	rjmp	.+1324   	; 0x21a2 <__DATA_REGION_LENGTH__+0x1a2>
    1c76:	fa 01       	movw	r30, r20
    1c78:	af 01       	movw	r20, r30
    1c7a:	4f 5f       	subi	r20, 0xFF	; 255
    1c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7e:	20 81       	ld	r18, Z
    1c80:	21 11       	cpse	r18, r1
    1c82:	f5 cf       	rjmp	.-22     	; 0x1c6e <chvprintf+0x302>
    1c84:	ea 19       	sub	r30, r10
    1c86:	fb 09       	sbc	r31, r11
    1c88:	4f 01       	movw	r8, r30
    1c8a:	21 e0       	ldi	r18, 0x01	; 1
    1c8c:	82 1a       	sub	r8, r18
    1c8e:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1c90:	9d a3       	std	Y+37, r25	; 0x25
    1c92:	8c a3       	std	Y+36, r24	; 0x24
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1c94:	30 e2       	ldi	r19, 0x20	; 32
    1c96:	38 a7       	std	Y+40, r19	; 0x28
    1c98:	87 01       	movw	r16, r14
    1c9a:	0e 1b       	sub	r16, r30
    1c9c:	1f 0b       	sbc	r17, r31
    1c9e:	17 ff       	sbrs	r17, 7
    1ca0:	29 cf       	rjmp	.-430    	; 0x1af4 <chvprintf+0x188>
    1ca2:	00 e0       	ldi	r16, 0x00	; 0
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    1ca6:	26 cf       	rjmp	.-436    	; 0x1af4 <chvprintf+0x188>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
    1ca8:	ec a1       	ldd	r30, Y+36	; 0x24
    1caa:	fd a1       	ldd	r31, Y+37	; 0x25
    1cac:	34 96       	adiw	r30, 0x04	; 4
    1cae:	fd af       	std	Y+61, r31	; 0x3d
    1cb0:	ec af       	std	Y+60, r30	; 0x3c
    1cb2:	ac a1       	ldd	r26, Y+36	; 0x24
    1cb4:	bd a1       	ldd	r27, Y+37	; 0x25
    1cb6:	8d 91       	ld	r24, X+
    1cb8:	9d 91       	ld	r25, X+
    1cba:	0d 90       	ld	r0, X+
    1cbc:	bc 91       	ld	r27, X
    1cbe:	a0 2d       	mov	r26, r0
    1cc0:	8c a3       	std	Y+36, r24	; 0x24
    1cc2:	9d a3       	std	Y+37, r25	; 0x25
    1cc4:	ae a3       	std	Y+38, r26	; 0x26
    1cc6:	bf a3       	std	Y+39, r27	; 0x27
      if (f < 0) {
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	a9 01       	movw	r20, r18
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	9a d6       	rcall	.+3380   	; 0x2a08 <__cmpsf2>
    1cd4:	87 fd       	sbrc	r24, 7
    1cd6:	70 c2       	rjmp	.+1248   	; 0x21b8 <__DATA_REGION_LENGTH__+0x1b8>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    1cd8:	fe 01       	movw	r30, r28
    1cda:	31 96       	adiw	r30, 0x01	; 1
    1cdc:	ff a7       	std	Y+47, r31	; 0x2f
    1cde:	ee a7       	std	Y+46, r30	; 0x2e
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    1ce0:	01 2e       	mov	r0, r17
    1ce2:	00 0c       	add	r0, r0
    1ce4:	22 0b       	sbc	r18, r18
    1ce6:	33 0b       	sbc	r19, r19
    1ce8:	01 50       	subi	r16, 0x01	; 1
    1cea:	11 09       	sbc	r17, r1
    1cec:	21 09       	sbc	r18, r1
    1cee:	31 09       	sbc	r19, r1
    1cf0:	09 30       	cpi	r16, 0x09	; 9
    1cf2:	11 05       	cpc	r17, r1
    1cf4:	21 05       	cpc	r18, r1
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <chvprintf+0x390>
    1cfa:	39 c2       	rjmp	.+1138   	; 0x216e <__DATA_REGION_LENGTH__+0x16e>
    1cfc:	00 0f       	add	r16, r16
    1cfe:	11 1f       	adc	r17, r17
    1d00:	00 0f       	add	r16, r16
    1d02:	11 1f       	adc	r17, r17
    1d04:	f8 01       	movw	r30, r16
    1d06:	e8 5a       	subi	r30, 0xA8	; 168
    1d08:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0a:	80 80       	ld	r8, Z
    1d0c:	91 80       	ldd	r9, Z+1	; 0x01
    1d0e:	a2 80       	ldd	r10, Z+2	; 0x02
    1d10:	b3 80       	ldd	r11, Z+3	; 0x03
    1d12:	c5 01       	movw	r24, r10
    1d14:	b4 01       	movw	r22, r8
    1d16:	ad d6       	rcall	.+3418   	; 0x2a72 <__floatunsisf>
    1d18:	28 96       	adiw	r28, 0x08	; 8
    1d1a:	6c af       	std	Y+60, r22	; 0x3c
    1d1c:	7d af       	std	Y+61, r23	; 0x3d
    1d1e:	8e af       	std	Y+62, r24	; 0x3e
    1d20:	9f af       	std	Y+63, r25	; 0x3f
    1d22:	28 97       	sbiw	r28, 0x08	; 8
    1d24:	c5 01       	movw	r24, r10
    1d26:	b4 01       	movw	r22, r8
    1d28:	2a e0       	ldi	r18, 0x0A	; 10
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	b5 d7       	rcall	.+3946   	; 0x2c9c <__udivmodsi4>
    1d32:	28 af       	std	Y+56, r18	; 0x38
    1d34:	39 af       	std	Y+57, r19	; 0x39
    1d36:	4a af       	std	Y+58, r20	; 0x3a
    1d38:	5b af       	std	Y+59, r21	; 0x3b
    1d3a:	29 01       	movw	r4, r18
    1d3c:	3a 01       	movw	r6, r20
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
    1d3e:	6c a1       	ldd	r22, Y+36	; 0x24
    1d40:	7d a1       	ldd	r23, Y+37	; 0x25
    1d42:	8e a1       	ldd	r24, Y+38	; 0x26
    1d44:	9f a1       	ldd	r25, Y+39	; 0x27
    1d46:	64 d6       	rcall	.+3272   	; 0x2a10 <__fixsfsi>
    1d48:	6a a7       	std	Y+42, r22	; 0x2a
    1d4a:	7c a7       	std	Y+44, r23	; 0x2c
    1d4c:	8a ab       	std	Y+50, r24	; 0x32
    1d4e:	9b ab       	std	Y+51, r25	; 0x33
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1d50:	ae a5       	ldd	r26, Y+46	; 0x2e
    1d52:	bf a5       	ldd	r27, Y+47	; 0x2f
    1d54:	1b 96       	adiw	r26, 0x0b	; 11
    1d56:	bf ab       	std	Y+55, r27	; 0x37
    1d58:	ae ab       	std	Y+54, r26	; 0x36
    1d5a:	4b 01       	movw	r8, r22
    1d5c:	5c 01       	movw	r10, r24
                                         long divisor) {
  int i;
  char *q;
  long l, ll;

  l = num;
    1d5e:	85 01       	movw	r16, r10
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1d60:	bf 8f       	std	Y+31, r27	; 0x1f
    1d62:	ae 8f       	std	Y+30, r26	; 0x1e
    1d64:	ff ae       	std	Y+63, r15	; 0x3f
    1d66:	ee ae       	std	Y+62, r14	; 0x3e
    1d68:	22 96       	adiw	r28, 0x02	; 2
    1d6a:	3f ae       	std	Y+63, r3	; 0x3f
    1d6c:	2e ae       	std	Y+62, r2	; 0x3e
    1d6e:	22 97       	sbiw	r28, 0x02	; 2
    1d70:	24 96       	adiw	r28, 0x04	; 4
    1d72:	df ae       	std	Y+63, r13	; 0x3f
    1d74:	ce ae       	std	Y+62, r12	; 0x3e
    1d76:	24 97       	sbiw	r28, 0x04	; 4
    1d78:	fa 2c       	mov	r15, r10
    1d7a:	09 2d       	mov	r16, r9
    1d7c:	d1 2e       	mov	r13, r17
    1d7e:	16 2f       	mov	r17, r22
  do {
    i = (int)(l % radix);
    1d80:	61 2f       	mov	r22, r17
    1d82:	70 2f       	mov	r23, r16
    1d84:	8f 2d       	mov	r24, r15
    1d86:	9d 2d       	mov	r25, r13
    1d88:	2a e0       	ldi	r18, 0x0A	; 10
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	a7 d7       	rcall	.+3918   	; 0x2ce0 <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1d92:	60 5d       	subi	r22, 0xD0	; 208
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
    1d96:	36 2e       	mov	r3, r22
    1d98:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d9a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d9c:	62 93       	st	-Z, r22
    1d9e:	ff 8f       	std	Y+31, r31	; 0x1f
    1da0:	ee 8f       	std	Y+30, r30	; 0x1e
    l /= radix;
    1da2:	12 2f       	mov	r17, r18
    1da4:	03 2f       	mov	r16, r19
    1da6:	f4 2e       	mov	r15, r20
    1da8:	d5 2e       	mov	r13, r21
  } while ((ll /= radix) != 0);
    1daa:	c5 01       	movw	r24, r10
    1dac:	b4 01       	movw	r22, r8
    1dae:	2a e0       	ldi	r18, 0x0A	; 10
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	94 d7       	rcall	.+3880   	; 0x2ce0 <__divmodsi4>
    1db8:	49 01       	movw	r8, r18
    1dba:	5a 01       	movw	r10, r20
    1dbc:	23 2b       	or	r18, r19
    1dbe:	24 2b       	or	r18, r20
    1dc0:	25 2b       	or	r18, r21
    1dc2:	f1 f6       	brne	.-68     	; 0x1d80 <chvprintf+0x414>
    1dc4:	ee ac       	ldd	r14, Y+62	; 0x3e
    1dc6:	ff ac       	ldd	r15, Y+63	; 0x3f
    1dc8:	83 2d       	mov	r24, r3
    1dca:	22 96       	adiw	r28, 0x02	; 2
    1dcc:	2e ac       	ldd	r2, Y+62	; 0x3e
    1dce:	3f ac       	ldd	r3, Y+63	; 0x3f
    1dd0:	22 97       	sbiw	r28, 0x02	; 2
    1dd2:	24 96       	adiw	r28, 0x04	; 4
    1dd4:	ce ac       	ldd	r12, Y+62	; 0x3e
    1dd6:	df ac       	ldd	r13, Y+63	; 0x3f
    1dd8:	24 97       	sbiw	r28, 0x04	; 4
    1dda:	ee a5       	ldd	r30, Y+46	; 0x2e
    1ddc:	ff a5       	ldd	r31, Y+47	; 0x2f
    1dde:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1de0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1de2:	11 96       	adiw	r26, 0x01	; 1
    1de4:	0e a9       	ldd	r16, Y+54	; 0x36
    1de6:	1f a9       	ldd	r17, Y+55	; 0x37
    1de8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1dea:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1dec:	02 1b       	sub	r16, r18
    1dee:	13 0b       	sbc	r17, r19
    1df0:	0e 0f       	add	r16, r30
    1df2:	1f 1f       	adc	r17, r31
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <chvprintf+0x48c>
    1df6:	8d 91       	ld	r24, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    1df8:	81 93       	st	Z+, r24
  while (--i);
    1dfa:	e0 17       	cp	r30, r16
    1dfc:	f1 07       	cpc	r31, r17
    1dfe:	d9 f7       	brne	.-10     	; 0x1df6 <chvprintf+0x48a>
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
    1e00:	c8 01       	movw	r24, r16
    1e02:	01 96       	adiw	r24, 0x01	; 1
    1e04:	9f a7       	std	Y+47, r25	; 0x2f
    1e06:	8e a7       	std	Y+46, r24	; 0x2e
    1e08:	8e e2       	ldi	r24, 0x2E	; 46
    1e0a:	d8 01       	movw	r26, r16
  l = (long)((num - l) * precision);
    1e0c:	8c 93       	st	X, r24
    1e0e:	6a a5       	ldd	r22, Y+42	; 0x2a
    1e10:	7c a5       	ldd	r23, Y+44	; 0x2c
    1e12:	8a a9       	ldd	r24, Y+50	; 0x32
    1e14:	9b a9       	ldd	r25, Y+51	; 0x33
    1e16:	2f d6       	rcall	.+3166   	; 0x2a76 <__floatsisf>
    1e18:	9b 01       	movw	r18, r22
    1e1a:	ac 01       	movw	r20, r24
    1e1c:	6c a1       	ldd	r22, Y+36	; 0x24
    1e1e:	7d a1       	ldd	r23, Y+37	; 0x25
    1e20:	8e a1       	ldd	r24, Y+38	; 0x26
    1e22:	9f a1       	ldd	r25, Y+39	; 0x27
    1e24:	8c d5       	rcall	.+2840   	; 0x293e <__subsf3>
    1e26:	28 96       	adiw	r28, 0x08	; 8
    1e28:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e2a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e2c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e2e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e30:	28 97       	sbiw	r28, 0x08	; 8
    1e32:	d1 d6       	rcall	.+3490   	; 0x2bd6 <__mulsf3>
    1e34:	ed d5       	rcall	.+3034   	; 0x2a10 <__fixsfsi>
    1e36:	86 2e       	mov	r8, r22
    1e38:	b8 2e       	mov	r11, r24
    1e3a:	a9 2e       	mov	r10, r25
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    1e3c:	88 ad       	ldd	r24, Y+56	; 0x38
    1e3e:	99 ad       	ldd	r25, Y+57	; 0x39
    1e40:	aa ad       	ldd	r26, Y+58	; 0x3a
    1e42:	bb ad       	ldd	r27, Y+59	; 0x3b
    1e44:	89 2b       	or	r24, r25
    1e46:	8a 2b       	or	r24, r26
    1e48:	8b 2b       	or	r24, r27
    1e4a:	21 f4       	brne	.+8      	; 0x1e54 <chvprintf+0x4e8>
    ll = num;
    1e4c:	48 2c       	mov	r4, r8
    1e4e:	57 2e       	mov	r5, r23
    1e50:	6b 2c       	mov	r6, r11
    1e52:	7a 2c       	mov	r7, r10
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1e54:	d8 01       	movw	r26, r16
    1e56:	1c 96       	adiw	r26, 0x0c	; 12
    1e58:	bf 8f       	std	Y+31, r27	; 0x1f
    1e5a:	ae 8f       	std	Y+30, r26	; 0x1e
    1e5c:	8d 01       	movw	r16, r26
    1e5e:	fd a2       	std	Y+37, r15	; 0x25
    1e60:	ec a2       	std	Y+36, r14	; 0x24
    1e62:	97 2e       	mov	r9, r23
  do {
    i = (int)(l % radix);
    1e64:	fa 2c       	mov	r15, r10
    1e66:	b4 01       	movw	r22, r8
    1e68:	8b 2d       	mov	r24, r11
    1e6a:	9f 2d       	mov	r25, r15
    1e6c:	2a e0       	ldi	r18, 0x0A	; 10
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	35 d7       	rcall	.+3690   	; 0x2ce0 <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1e76:	60 5d       	subi	r22, 0xD0	; 208
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	a6 2e       	mov	r10, r22
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	62 93       	st	-Z, r22
    l /= radix;
    1e80:	8f 01       	movw	r16, r30
    1e82:	49 01       	movw	r8, r18
    1e84:	b4 2e       	mov	r11, r20
  } while ((ll /= radix) != 0);
    1e86:	f5 2e       	mov	r15, r21
    1e88:	c3 01       	movw	r24, r6
    1e8a:	b2 01       	movw	r22, r4
    1e8c:	2a e0       	ldi	r18, 0x0A	; 10
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	25 d7       	rcall	.+3658   	; 0x2ce0 <__divmodsi4>
    1e96:	29 01       	movw	r4, r18
    1e98:	3a 01       	movw	r6, r20
    1e9a:	23 2b       	or	r18, r19
    1e9c:	24 2b       	or	r18, r20
    1e9e:	25 2b       	or	r18, r21
    1ea0:	11 f7       	brne	.-60     	; 0x1e66 <chvprintf+0x4fa>
    1ea2:	ec a0       	ldd	r14, Y+36	; 0x24
    1ea4:	fd a0       	ldd	r15, Y+37	; 0x25
    1ea6:	9a 2c       	mov	r9, r10
    1ea8:	ee a5       	ldd	r30, Y+46	; 0x2e
    1eaa:	ff a5       	ldd	r31, Y+47	; 0x2f
    1eac:	d8 01       	movw	r26, r16
    1eae:	11 96       	adiw	r26, 0x01	; 1
    1eb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1eb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1eb4:	80 1b       	sub	r24, r16
    1eb6:	91 0b       	sbc	r25, r17
    1eb8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1eba:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <chvprintf+0x554>
    1ebe:	9d 90       	ld	r9, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    1ec0:	91 92       	st	Z+, r9
  while (--i);
    1ec2:	a2 17       	cp	r26, r18
    1ec4:	b3 07       	cpc	r27, r19
    1ec6:	d9 f7       	brne	.-10     	; 0x1ebe <chvprintf+0x552>
    1ec8:	ee a5       	ldd	r30, Y+46	; 0x2e
    1eca:	ff a5       	ldd	r31, Y+47	; 0x2f
    1ecc:	e8 0f       	add	r30, r24
    1ece:	f9 1f       	adc	r31, r25
    1ed0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1ed2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1ed4:	e2 1b       	sub	r30, r18
    1ed6:	f3 0b       	sbc	r31, r19
    1ed8:	4f 01       	movw	r8, r30
    1eda:	31 e0       	ldi	r19, 0x01	; 1
    1edc:	83 1a       	sub	r8, r19
    1ede:	91 08       	sbc	r9, r1
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
    1ee0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ee2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ee4:	9d a3       	std	Y+37, r25	; 0x25
    1ee6:	8c a3       	std	Y+36, r24	; 0x24
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1ee8:	de 01       	movw	r26, r28
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	5d 01       	movw	r10, r26
    1eee:	fd cd       	rjmp	.-1030   	; 0x1aea <chvprintf+0x17e>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1ef0:	ac a1       	ldd	r26, Y+36	; 0x24
    1ef2:	bd a1       	ldd	r27, Y+37	; 0x25
    1ef4:	8c 91       	ld	r24, X
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	e8 a9       	ldd	r30, Y+48	; 0x30
    1efa:	f9 a9       	ldd	r31, Y+49	; 0x31
      break;
    1efc:	8c a8       	ldd	r8, Y+52	; 0x34
    1efe:	9d a8       	ldd	r9, Y+53	; 0x35

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1f00:	12 96       	adiw	r26, 0x02	; 2
    1f02:	bd a3       	std	Y+37, r27	; 0x25
    1f04:	ac a3       	std	Y+36, r26	; 0x24
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    1f06:	b0 e2       	ldi	r27, 0x20	; 32
    1f08:	b8 a7       	std	Y+40, r27	; 0x28
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1f0a:	9e 01       	movw	r18, r28
    1f0c:	2f 5f       	subi	r18, 0xFF	; 255
    1f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f10:	59 01       	movw	r10, r18
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    1f12:	eb cd       	rjmp	.-1066   	; 0x1aea <chvprintf+0x17e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1f14:	21 e0       	ldi	r18, 0x01	; 1
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    1f16:	8a e0       	ldi	r24, 0x0A	; 10
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 e0       	ldi	r26, 0x00	; 0
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f20:	9f 8f       	std	Y+31, r25	; 0x1f
    1f22:	a8 a3       	std	Y+32, r26	; 0x20
    1f24:	b9 a3       	std	Y+33, r27	; 0x21
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1f26:	21 11       	cpse	r18, r1
    1f28:	63 c0       	rjmp	.+198    	; 0x1ff0 <chvprintf+0x684>
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
    1f2a:	ec a1       	ldd	r30, Y+36	; 0x24
    1f2c:	fd a1       	ldd	r31, Y+37	; 0x25
    1f2e:	80 80       	ld	r8, Z
    1f30:	91 80       	ldd	r9, Z+1	; 0x01
    1f32:	a1 2c       	mov	r10, r1
    1f34:	b1 2c       	mov	r11, r1
    1f36:	32 96       	adiw	r30, 0x02	; 2
    1f38:	fd a3       	std	Y+37, r31	; 0x25
    1f3a:	ec a3       	std	Y+36, r30	; 0x24
    1f3c:	24 01       	movw	r4, r8
    1f3e:	35 01       	movw	r6, r10
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1f40:	fe 01       	movw	r30, r28
    1f42:	3c 96       	adiw	r30, 0x0c	; 12
    1f44:	fb a6       	std	Y+43, r15	; 0x2b
    1f46:	ea a6       	std	Y+42, r14	; 0x2a
  do {
    i = (int)(l % radix);
    1f48:	8f 01       	movw	r16, r30
    1f4a:	c5 01       	movw	r24, r10
    1f4c:	b4 01       	movw	r22, r8
    1f4e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f50:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f52:	48 a1       	ldd	r20, Y+32	; 0x20
    1f54:	59 a1       	ldd	r21, Y+33	; 0x21
    1f56:	c4 d6       	rcall	.+3464   	; 0x2ce0 <__divmodsi4>
    i += '0';
    1f58:	9b 01       	movw	r18, r22
    1f5a:	20 5d       	subi	r18, 0xD0	; 208
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    if (i > '9')
    1f5e:	2a 33       	cpi	r18, 0x3A	; 58
    1f60:	31 05       	cpc	r19, r1
    1f62:	14 f0       	brlt	.+4      	; 0x1f68 <chvprintf+0x5fc>
      i += 'A' - '0' - 10;
    1f64:	29 5f       	subi	r18, 0xF9	; 249
    *--q = i;
    1f66:	3f 4f       	sbci	r19, 0xFF	; 255
    1f68:	f2 2e       	mov	r15, r18
    1f6a:	d8 01       	movw	r26, r16
    1f6c:	2e 93       	st	-X, r18
    l /= radix;
    1f6e:	8d 01       	movw	r16, r26
    1f70:	c5 01       	movw	r24, r10
    1f72:	b4 01       	movw	r22, r8
    1f74:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f76:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f78:	48 a1       	ldd	r20, Y+32	; 0x20
    1f7a:	59 a1       	ldd	r21, Y+33	; 0x21
    1f7c:	b1 d6       	rcall	.+3426   	; 0x2ce0 <__divmodsi4>
    1f7e:	49 01       	movw	r8, r18
  } while ((ll /= radix) != 0);
    1f80:	5a 01       	movw	r10, r20
    1f82:	c3 01       	movw	r24, r6
    1f84:	b2 01       	movw	r22, r4
    1f86:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f88:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f8a:	48 a1       	ldd	r20, Y+32	; 0x20
    1f8c:	59 a1       	ldd	r21, Y+33	; 0x21
    1f8e:	a8 d6       	rcall	.+3408   	; 0x2ce0 <__divmodsi4>
    1f90:	29 01       	movw	r4, r18
    1f92:	3a 01       	movw	r6, r20
    1f94:	23 2b       	or	r18, r19
    1f96:	24 2b       	or	r18, r20
    1f98:	25 2b       	or	r18, r21
    1f9a:	b9 f6       	brne	.-82     	; 0x1f4a <chvprintf+0x5de>
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	1f 2d       	mov	r17, r15
    1fa0:	ea a4       	ldd	r14, Y+42	; 0x2a
    1fa2:	fb a4       	ldd	r15, Y+43	; 0x2b

  i = (int)(p + MAX_FILLER - q);
    1fa4:	4c 8c       	ldd	r4, Y+28	; 0x1c
    1fa6:	5d 8c       	ldd	r5, Y+29	; 0x1d
    1fa8:	4e 1a       	sub	r4, r30
    1faa:	5f 0a       	sbc	r5, r31
    1fac:	de 01       	movw	r26, r28
    1fae:	11 96       	adiw	r26, 0x01	; 1
    1fb0:	31 96       	adiw	r30, 0x01	; 1
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	84 0d       	add	r24, r4
    1fb6:	95 1d       	adc	r25, r5
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <chvprintf+0x650>
    1fba:	11 91       	ld	r17, Z+
  do
    *p++ = *q++;
    1fbc:	1d 93       	st	X+, r17
  while (--i);
    1fbe:	a8 17       	cp	r26, r24
    1fc0:	b9 07       	cpc	r27, r25
    1fc2:	d9 f7       	brne	.-10     	; 0x1fba <chvprintf+0x64e>
    1fc4:	42 01       	movw	r8, r4
    1fc6:	b1 e0       	ldi	r27, 0x01	; 1
    1fc8:	8b 1a       	sub	r8, r27
    1fca:	91 08       	sbc	r9, r1
    1fcc:	f2 01       	movw	r30, r4
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1fce:	9e 01       	movw	r18, r28
    1fd0:	2f 5f       	subi	r18, 0xFF	; 255
    1fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd4:	59 01       	movw	r10, r18
    1fd6:	89 cd       	rjmp	.-1262   	; 0x1aea <chvprintf+0x17e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1fd8:	21 e0       	ldi	r18, 0x01	; 1
    1fda:	88 e0       	ldi	r24, 0x08	; 8
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	8e 8f       	std	Y+30, r24	; 0x1e
    1fe4:	9f 8f       	std	Y+31, r25	; 0x1f
    1fe6:	a8 a3       	std	Y+32, r26	; 0x20
    1fe8:	b9 a3       	std	Y+33, r27	; 0x21
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1fea:	22 23       	and	r18, r18
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <chvprintf+0x684>
    1fee:	9d cf       	rjmp	.-198    	; 0x1f2a <chvprintf+0x5be>
        l = va_arg(ap, unsigned long);
    1ff0:	ac a1       	ldd	r26, Y+36	; 0x24
    1ff2:	bd a1       	ldd	r27, Y+37	; 0x25
    1ff4:	8d 90       	ld	r8, X+
    1ff6:	9d 90       	ld	r9, X+
    1ff8:	ad 90       	ld	r10, X+
    1ffa:	bc 90       	ld	r11, X
    1ffc:	13 97       	sbiw	r26, 0x03	; 3
    1ffe:	14 96       	adiw	r26, 0x04	; 4
    2000:	bd a3       	std	Y+37, r27	; 0x25
    2002:	ac a3       	std	Y+36, r26	; 0x24
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    2004:	9b cf       	rjmp	.-202    	; 0x1f3c <chvprintf+0x5d0>
    2006:	97 fe       	sbrs	r9, 7
    2008:	99 cd       	rjmp	.-1230   	; 0x1b3c <chvprintf+0x1d0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    200a:	e6 cc       	rjmp	.-1588   	; 0x19d8 <chvprintf+0x6c>
    200c:	88 27       	eor	r24, r24
    200e:	e9 55       	subi	r30, 0x59	; 89
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	8f 4f       	sbci	r24, 0xFF	; 255
    2014:	81 c6       	rjmp	.+3330   	; 0x2d18 <__tablejump2__>
    2016:	81 2c       	mov	r8, r1
    2018:	91 2c       	mov	r9, r1
    201a:	a7 cd       	rjmp	.-1202   	; 0x1b6a <chvprintf+0x1fe>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
    201c:	b8 a5       	ldd	r27, Y+40	; 0x28
    201e:	b0 33       	cpi	r27, 0x30	; 48
    2020:	09 f0       	breq	.+2      	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    2022:	76 cd       	rjmp	.-1300   	; 0x1b10 <chvprintf+0x1a4>
        streamPut(chp, (uint8_t)*s++);
    2024:	ef ef       	ldi	r30, 0xFF	; 255
    2026:	ae 1a       	sub	r10, r30
    2028:	be 0a       	sbc	r11, r30
    202a:	d1 01       	movw	r26, r2
    202c:	ed 91       	ld	r30, X+
    202e:	fc 91       	ld	r31, X
    2030:	04 80       	ldd	r0, Z+4	; 0x04
    2032:	f5 81       	ldd	r31, Z+5	; 0x05
    2034:	e0 2d       	mov	r30, r0
    2036:	6d e2       	ldi	r22, 0x2D	; 45
    2038:	c1 01       	movw	r24, r2
    203a:	19 95       	eicall
        n++;
    203c:	ea a1       	ldd	r30, Y+34	; 0x22
    203e:	fb a1       	ldd	r31, Y+35	; 0x23
    2040:	31 96       	adiw	r30, 0x01	; 1
    2042:	fb a3       	std	Y+35, r31	; 0x23
    2044:	ea a3       	std	Y+34, r30	; 0x22
    2046:	f1 e0       	ldi	r31, 0x01	; 1
    2048:	8f 1a       	sub	r8, r31
    204a:	91 08       	sbc	r9, r1
    204c:	78 a4       	ldd	r7, Y+40	; 0x28
    204e:	61 cd       	rjmp	.-1342   	; 0x1b12 <chvprintf+0x1a6>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    2050:	22 23       	and	r18, r18
    2052:	09 f4       	brne	.+2      	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2054:	c6 c0       	rjmp	.+396    	; 0x21e2 <__DATA_REGION_LENGTH__+0x1e2>
    2056:	0e ef       	ldi	r16, 0xFE	; 254
    2058:	1f e7       	ldi	r17, 0x7F	; 127
    205a:	06 ce       	rjmp	.-1012   	; 0x1c68 <chvprintf+0x2fc>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    205c:	80 e1       	ldi	r24, 0x10	; 16
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	8e 8f       	std	Y+30, r24	; 0x1e
    2066:	9f 8f       	std	Y+31, r25	; 0x1f
    2068:	a8 a3       	std	Y+32, r26	; 0x20
    206a:	b9 a3       	std	Y+33, r27	; 0x21
    206c:	5c cf       	rjmp	.-328    	; 0x1f26 <chvprintf+0x5ba>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
    206e:	3a 31       	cpi	r19, 0x1A	; 26
    2070:	08 f4       	brcc	.+2      	; 0x2074 <__DATA_REGION_LENGTH__+0x74>
    2072:	58 c0       	rjmp	.+176    	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
    2074:	ec a1       	ldd	r30, Y+36	; 0x24
    2076:	fd a1       	ldd	r31, Y+37	; 0x25
    2078:	80 80       	ld	r8, Z
    207a:	91 80       	ldd	r9, Z+1	; 0x01
    207c:	09 2c       	mov	r0, r9
    207e:	00 0c       	add	r0, r0
    2080:	aa 08       	sbc	r10, r10
    2082:	bb 08       	sbc	r11, r11
    2084:	32 96       	adiw	r30, 0x02	; 2
    2086:	fd a3       	std	Y+37, r31	; 0x25
    2088:	ec a3       	std	Y+36, r30	; 0x24
      if (l < 0) {
    208a:	b7 fc       	sbrc	r11, 7
    208c:	57 c0       	rjmp	.+174    	; 0x213c <__DATA_REGION_LENGTH__+0x13c>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    208e:	ce 01       	movw	r24, r28
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	9f 8f       	std	Y+31, r25	; 0x1f
    2094:	8e 8f       	std	Y+30, r24	; 0x1e
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    2096:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2098:	bf 8d       	ldd	r27, Y+31	; 0x1f
    209a:	1b 96       	adiw	r26, 0x0b	; 11
    209c:	bb a7       	std	Y+43, r27	; 0x2b
    209e:	aa a7       	std	Y+42, r26	; 0x2a
    20a0:	24 01       	movw	r4, r8
    20a2:	35 01       	movw	r6, r10
    20a4:	fd a6       	std	Y+45, r15	; 0x2d
    20a6:	ec a6       	std	Y+44, r14	; 0x2c
  do {
    i = (int)(l % radix);
    20a8:	8d 01       	movw	r16, r26
    20aa:	c5 01       	movw	r24, r10
    20ac:	b4 01       	movw	r22, r8
    20ae:	2a e0       	ldi	r18, 0x0A	; 10
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    20b6:	14 d6       	rcall	.+3112   	; 0x2ce0 <__divmodsi4>
    20b8:	60 5d       	subi	r22, 0xD0	; 208
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255
    20bc:	f6 2e       	mov	r15, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	62 93       	st	-Z, r22
    l /= radix;
    20c2:	8f 01       	movw	r16, r30
    20c4:	49 01       	movw	r8, r18
  } while ((ll /= radix) != 0);
    20c6:	5a 01       	movw	r10, r20
    20c8:	c3 01       	movw	r24, r6
    20ca:	b2 01       	movw	r22, r4
    20cc:	2a e0       	ldi	r18, 0x0A	; 10
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	05 d6       	rcall	.+3082   	; 0x2ce0 <__divmodsi4>
    20d6:	29 01       	movw	r4, r18
    20d8:	3a 01       	movw	r6, r20
    20da:	23 2b       	or	r18, r19
    20dc:	24 2b       	or	r18, r20
    20de:	25 2b       	or	r18, r21
    20e0:	21 f7       	brne	.-56     	; 0x20aa <__DATA_REGION_LENGTH__+0xaa>
    20e2:	c8 01       	movw	r24, r16
    20e4:	1f 2d       	mov	r17, r15
    20e6:	ec a4       	ldd	r14, Y+44	; 0x2c
    20e8:	fd a4       	ldd	r15, Y+45	; 0x2d
    20ea:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20ec:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20ee:	dc 01       	movw	r26, r24
    20f0:	11 96       	adiw	r26, 0x01	; 1
    20f2:	2a a5       	ldd	r18, Y+42	; 0x2a
    20f4:	3b a5       	ldd	r19, Y+43	; 0x2b
    20f6:	28 1b       	sub	r18, r24
    20f8:	39 0b       	sbc	r19, r25
    20fa:	c9 01       	movw	r24, r18
    20fc:	8e 0f       	add	r24, r30
    20fe:	9f 1f       	adc	r25, r31
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    2102:	1d 91       	ld	r17, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    2104:	11 93       	st	Z+, r17
  while (--i);
    2106:	e8 17       	cp	r30, r24
    2108:	f9 07       	cpc	r31, r25
    210a:	d9 f7       	brne	.-10     	; 0x2102 <__DATA_REGION_LENGTH__+0x102>
    210c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    210e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2110:	e8 1b       	sub	r30, r24
    2112:	f9 0b       	sbc	r31, r25
    2114:	4f 01       	movw	r8, r30
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	89 1a       	sub	r8, r25
    211a:	91 08       	sbc	r9, r1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    211c:	de 01       	movw	r26, r28
    211e:	11 96       	adiw	r26, 0x01	; 1
    2120:	5d 01       	movw	r10, r26
    2122:	e3 cc       	rjmp	.-1594   	; 0x1aea <chvprintf+0x17e>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
    2124:	ac a1       	ldd	r26, Y+36	; 0x24
    2126:	bd a1       	ldd	r27, Y+37	; 0x25
    2128:	8d 90       	ld	r8, X+
    212a:	9d 90       	ld	r9, X+
    212c:	ad 90       	ld	r10, X+
    212e:	bc 90       	ld	r11, X
    2130:	13 97       	sbiw	r26, 0x03	; 3
    2132:	14 96       	adiw	r26, 0x04	; 4
    2134:	bd a3       	std	Y+37, r27	; 0x25
    2136:	ac a3       	std	Y+36, r26	; 0x24
      else
        l = va_arg(ap, int);
      if (l < 0) {
    2138:	b7 fe       	sbrs	r11, 7
    213a:	a9 cf       	rjmp	.-174    	; 0x208e <__DATA_REGION_LENGTH__+0x8e>
        *p++ = '-';
    213c:	8d e2       	ldi	r24, 0x2D	; 45
    213e:	89 83       	std	Y+1, r24	; 0x01
        l = -l;
    2140:	b0 94       	com	r11
    2142:	a0 94       	com	r10
    2144:	90 94       	com	r9
    2146:	80 94       	com	r8
    2148:	81 1c       	adc	r8, r1
    214a:	91 1c       	adc	r9, r1
    214c:	a1 1c       	adc	r10, r1
    214e:	b1 1c       	adc	r11, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
    2150:	9e 01       	movw	r18, r28
    2152:	2e 5f       	subi	r18, 0xFE	; 254
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	3f 8f       	std	Y+31, r19	; 0x1f
    2158:	2e 8f       	std	Y+30, r18	; 0x1e
    215a:	9d cf       	rjmp	.-198    	; 0x2096 <__DATA_REGION_LENGTH__+0x96>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    215c:	80 e1       	ldi	r24, 0x10	; 16
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e0       	ldi	r26, 0x00	; 0
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	8e 8f       	std	Y+30, r24	; 0x1e
    2166:	9f 8f       	std	Y+31, r25	; 0x1f
    2168:	a8 a3       	std	Y+32, r26	; 0x20
    216a:	b9 a3       	std	Y+33, r27	; 0x21
    216c:	41 cf       	rjmp	.-382    	; 0x1ff0 <chvprintf+0x684>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    216e:	41 2c       	mov	r4, r1
    2170:	91 ee       	ldi	r25, 0xE1	; 225
    2172:	59 2e       	mov	r5, r25
    2174:	95 ef       	ldi	r25, 0xF5	; 245
    2176:	69 2e       	mov	r6, r25
    2178:	95 e0       	ldi	r25, 0x05	; 5
    217a:	79 2e       	mov	r7, r25
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	91 ee       	ldi	r25, 0xE1	; 225
    2180:	a5 ef       	ldi	r26, 0xF5	; 245
    2182:	b5 e0       	ldi	r27, 0x05	; 5
    2184:	88 af       	std	Y+56, r24	; 0x38
    2186:	99 af       	std	Y+57, r25	; 0x39
    2188:	aa af       	std	Y+58, r26	; 0x3a
    218a:	bb af       	std	Y+59, r27	; 0x3b
    218c:	88 e2       	ldi	r24, 0x28	; 40
    218e:	9b e6       	ldi	r25, 0x6B	; 107
    2190:	ae e6       	ldi	r26, 0x6E	; 110
    2192:	be e4       	ldi	r27, 0x4E	; 78
    2194:	28 96       	adiw	r28, 0x08	; 8
    2196:	8c af       	std	Y+60, r24	; 0x3c
    2198:	9d af       	std	Y+61, r25	; 0x3d
    219a:	ae af       	std	Y+62, r26	; 0x3e
    219c:	bf af       	std	Y+63, r27	; 0x3f
    219e:	28 97       	sbiw	r28, 0x08	; 8
    21a0:	ce cd       	rjmp	.-1124   	; 0x1d3e <chvprintf+0x3d2>
    21a2:	ea 19       	sub	r30, r10
    21a4:	fb 09       	sbc	r31, r11
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    21a6:	4f 01       	movw	r8, r30
    21a8:	b1 e0       	ldi	r27, 0x01	; 1
    21aa:	8b 1a       	sub	r8, r27
    21ac:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    21ae:	9d a3       	std	Y+37, r25	; 0x25
    21b0:	8c a3       	std	Y+36, r24	; 0x24
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    21b2:	20 e2       	ldi	r18, 0x20	; 32
    21b4:	28 a7       	std	Y+40, r18	; 0x28
    21b6:	99 cc       	rjmp	.-1742   	; 0x1aea <chvprintf+0x17e>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
    21b8:	8d e2       	ldi	r24, 0x2D	; 45
    21ba:	89 83       	std	Y+1, r24	; 0x01
        f = -f;
    21bc:	8c a1       	ldd	r24, Y+36	; 0x24
    21be:	9d a1       	ldd	r25, Y+37	; 0x25
    21c0:	ae a1       	ldd	r26, Y+38	; 0x26
    21c2:	bf a1       	ldd	r27, Y+39	; 0x27
    21c4:	b0 58       	subi	r27, 0x80	; 128
    21c6:	8c a3       	std	Y+36, r24	; 0x24
    21c8:	9d a3       	std	Y+37, r25	; 0x25
    21ca:	ae a3       	std	Y+38, r26	; 0x26
    21cc:	bf a3       	std	Y+39, r27	; 0x27
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
    21ce:	de 01       	movw	r26, r28
    21d0:	12 96       	adiw	r26, 0x02	; 2
    21d2:	bf a7       	std	Y+47, r27	; 0x2f
    21d4:	ae a7       	std	Y+46, r26	; 0x2e
    21d6:	84 cd       	rjmp	.-1272   	; 0x1ce0 <chvprintf+0x374>
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
    21d8:	31 e5       	ldi	r19, 0x51	; 81
    21da:	a3 2e       	mov	r10, r19
    21dc:	32 e0       	ldi	r19, 0x02	; 2
    21de:	b3 2e       	mov	r11, r19
    21e0:	38 cd       	rjmp	.-1424   	; 0x1c52 <chvprintf+0x2e6>
    21e2:	87 01       	movw	r16, r14
    21e4:	f7 fc       	sbrc	r15, 7
    21e6:	0e c0       	rjmp	.+28     	; 0x2204 <__stack+0x5>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    21e8:	39 a5       	ldd	r19, Y+41	; 0x29
    21ea:	9d a3       	std	Y+37, r25	; 0x25
    21ec:	8c a3       	std	Y+36, r24	; 0x24
    21ee:	31 11       	cpse	r19, r1
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <__DATA_REGION_LENGTH__+0x1fe>
    21f2:	88 24       	eor	r8, r8
    21f4:	8a 94       	dec	r8
    21f6:	98 2c       	mov	r9, r8
    21f8:	80 e2       	ldi	r24, 0x20	; 32
    21fa:	88 a7       	std	Y+40, r24	; 0x28
    21fc:	7e cc       	rjmp	.-1796   	; 0x1afa <chvprintf+0x18e>
    21fe:	30 e2       	ldi	r19, 0x20	; 32
    2200:	38 a7       	std	Y+40, r19	; 0x28
    2202:	b8 cc       	rjmp	.-1680   	; 0x1b74 <chvprintf+0x208>
    2204:	00 e0       	ldi	r16, 0x00	; 0
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	ef cf       	rjmp	.-34     	; 0x21e8 <__DATA_REGION_LENGTH__+0x1e8>

0000220a <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    2212:	ae 01       	movw	r20, r28
    2214:	46 5f       	subi	r20, 0xF6	; 246
    2216:	5f 4f       	sbci	r21, 0xFF	; 255
    2218:	68 85       	ldd	r22, Y+8	; 0x08
    221a:	79 85       	ldd	r23, Y+9	; 0x09
    221c:	8e 81       	ldd	r24, Y+6	; 0x06
    221e:	9f 81       	ldd	r25, Y+7	; 0x07
    2220:	a5 db       	rcall	.-2230   	; 0x196c <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	08 95       	ret

00002228 <extcb>:
static void extcb(EXTDriver *extp, expchannel_t channel) {
  (void)extp;
  (void)channel;

  chSysLockFromISR();
  palTogglePad(IOPORT2, PORTB_LED1);
    2228:	85 b1       	in	r24, 0x05	; 5
    222a:	80 58       	subi	r24, 0x80	; 128
    222c:	85 b9       	out	0x05, r24	; 5
  isrCpt++;
    222e:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <isrCpt>
    2232:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <isrCpt+0x1>
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <isrCpt+0x1>
    223c:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <isrCpt>
    2240:	08 95       	ret

00002242 <main>:
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
    2242:	0e 94 72 05 	call	0xae4	; 0xae4 <halInit>
  chSysInit();
    2246:	0e 94 10 01 	call	0x220	; 0x220 <chSysInit>

  /*
   * External interrupt on the Pin D2 of the Arduino Mega2560.
   */
  palSetPadMode(IOPORT5, PD0, PAL_MODE_INPUT); // INT0
    224a:	42 e0       	ldi	r20, 0x02	; 2
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	8c e2       	ldi	r24, 0x2C	; 44
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	58 da       	rcall	.-2896   	; 0x1704 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT5, PD1, PAL_MODE_INPUT); // INT1
    2254:	42 e0       	ldi	r20, 0x02	; 2
    2256:	62 e0       	ldi	r22, 0x02	; 2
    2258:	8c e2       	ldi	r24, 0x2C	; 44
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	53 da       	rcall	.-2906   	; 0x1704 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT5, PD2, PAL_MODE_INPUT); // INT2
    225e:	42 e0       	ldi	r20, 0x02	; 2
    2260:	64 e0       	ldi	r22, 0x04	; 4
    2262:	8c e2       	ldi	r24, 0x2C	; 44
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	4e da       	rcall	.-2916   	; 0x1704 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT5, PD3, PAL_MODE_INPUT); // INT3
    2268:	42 e0       	ldi	r20, 0x02	; 2
    226a:	68 e0       	ldi	r22, 0x08	; 8
    226c:	8c e2       	ldi	r24, 0x2C	; 44
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	49 da       	rcall	.-2926   	; 0x1704 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT5, PE4, PAL_MODE_INPUT); // INT4
    2272:	42 e0       	ldi	r20, 0x02	; 2
    2274:	60 e1       	ldi	r22, 0x10	; 16
    2276:	8c e2       	ldi	r24, 0x2C	; 44
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	44 da       	rcall	.-2936   	; 0x1704 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT5, PE5, PAL_MODE_INPUT); // INT5
    227c:	42 e0       	ldi	r20, 0x02	; 2
    227e:	60 e2       	ldi	r22, 0x20	; 32
    2280:	8c e2       	ldi	r24, 0x2C	; 44
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	3f da       	rcall	.-2946   	; 0x1704 <_pal_lld_setgroupmode>
    2286:	60 e0       	ldi	r22, 0x00	; 0

  /*
   * Start the serial driver.
   */
  sdStart(&SD1, NULL);
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	82 e8       	ldi	r24, 0x82	; 130
    228c:	93 e0       	ldi	r25, 0x03	; 3
    228e:	0e 94 f9 07 	call	0xff2	; 0xff2 <sdStart>
    2292:	67 eb       	ldi	r22, 0xB7	; 183

  /*
   * Active the EXT driver 1 and select INT channel 4.
   */
  extStart(&EXTD1, &extcfg);
    2294:	72 e0       	ldi	r23, 0x02	; 2
    2296:	8f e7       	ldi	r24, 0x7F	; 127
    2298:	93 e0       	ldi	r25, 0x03	; 3
    229a:	0e 94 a4 07 	call	0xf48	; 0xf48 <extStart>
    229e:	64 e0       	ldi	r22, 0x04	; 4
  extChannelEnable(&EXTD1, INT4);
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	8f e7       	ldi	r24, 0x7F	; 127
    22a4:	93 e0       	ldi	r25, 0x03	; 3
    22a6:	0e 94 b1 07 	call	0xf62	; 0xf62 <extChannelEnable>
    22aa:	2f 98       	cbi	0x05, 7	; 5

  palClearPad(IOPORT2, PORTB_LED1);
    22ac:	8c e7       	ldi	r24, 0x7C	; 124
  chprintf(chp, "\n\r EXT hal test started...");
    22ae:	92 e0       	ldi	r25, 0x02	; 2
    22b0:	9f 93       	push	r25
    22b2:	8f 93       	push	r24
    22b4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    22b8:	8f 93       	push	r24
    22ba:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    22be:	8f 93       	push	r24
    22c0:	a4 df       	rcall	.-184    	; 0x220a <chprintf>
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	c7 e9       	ldi	r28, 0x97	; 151
   * Normal main() thread activity, in this demo it print IRQ counter every
   * seconde.
   */
  while (TRUE) {
    chThdSleepMilliseconds(1000);
    chprintf(chp, "\n\r index = %d, ISR Counter = %d", index, isrCpt);
    22cc:	d2 e0       	ldi	r29, 0x02	; 2
    22ce:	88 e0       	ldi	r24, 0x08	; 8
  /*
   * Normal main() thread activity, in this demo it print IRQ counter every
   * seconde.
   */
  while (TRUE) {
    chThdSleepMilliseconds(1000);
    22d0:	9d e3       	ldi	r25, 0x3D	; 61
    22d2:	0e 94 c7 04 	call	0x98e	; 0x98e <chThdSleep>
    22d6:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <isrCpt+0x1>
    chprintf(chp, "\n\r index = %d, ISR Counter = %d", index, isrCpt);
    22da:	8f 93       	push	r24
    22dc:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <isrCpt>
    22e0:	8f 93       	push	r24
    22e2:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <__data_end+0x1>
    22e6:	8f 93       	push	r24
    22e8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    22ec:	8f 93       	push	r24
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    22f6:	8f 93       	push	r24
    22f8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    22fc:	8f 93       	push	r24
    22fe:	85 df       	rcall	.-246    	; 0x220a <chprintf>
    2300:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    index++;
    2304:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <__data_end+0x1>
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <__data_end+0x1>
    230e:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__data_end>
    2312:	8d b7       	in	r24, 0x3d	; 61
    2314:	9e b7       	in	r25, 0x3e	; 62
    2316:	08 96       	adiw	r24, 0x08	; 8
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	9e bf       	out	0x3e, r25	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	8d bf       	out	0x3d, r24	; 61
    2322:	d5 cf       	rjmp	.-86     	; 0x22ce <main+0x8c>

00002324 <vfprintf>:
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	2b 97       	sbiw	r28, 0x0b	; 11
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	6c 01       	movw	r12, r24
    2352:	7b 01       	movw	r14, r22
    2354:	3a 01       	movw	r6, r20
    2356:	fc 01       	movw	r30, r24
    2358:	17 82       	std	Z+7, r1	; 0x07
    235a:	16 82       	std	Z+6, r1	; 0x06
    235c:	83 81       	ldd	r24, Z+3	; 0x03
    235e:	81 ff       	sbrs	r24, 1
    2360:	f9 c0       	rjmp	.+498    	; 0x2554 <vfprintf+0x230>
    2362:	ce 01       	movw	r24, r28
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	4c 01       	movw	r8, r24
    2368:	f6 01       	movw	r30, r12
    236a:	b3 80       	ldd	r11, Z+3	; 0x03
    236c:	f7 01       	movw	r30, r14
    236e:	b3 fc       	sbrc	r11, 3
    2370:	05 91       	lpm	r16, Z+
    2372:	b3 fe       	sbrs	r11, 3
    2374:	01 91       	ld	r16, Z+
    2376:	7f 01       	movw	r14, r30
    2378:	00 23       	and	r16, r16
    237a:	09 f4       	brne	.+2      	; 0x237e <vfprintf+0x5a>
    237c:	e7 c0       	rjmp	.+462    	; 0x254c <vfprintf+0x228>
    237e:	05 32       	cpi	r16, 0x25	; 37
    2380:	49 f4       	brne	.+18     	; 0x2394 <vfprintf+0x70>
    2382:	b3 fc       	sbrc	r11, 3
    2384:	05 91       	lpm	r16, Z+
    2386:	b3 fe       	sbrs	r11, 3
    2388:	01 91       	ld	r16, Z+
    238a:	7f 01       	movw	r14, r30
    238c:	05 32       	cpi	r16, 0x25	; 37
    238e:	11 f0       	breq	.+4      	; 0x2394 <vfprintf+0x70>
    2390:	10 e0       	ldi	r17, 0x00	; 0
    2392:	17 c0       	rjmp	.+46     	; 0x23c2 <vfprintf+0x9e>
    2394:	b6 01       	movw	r22, r12
    2396:	80 2f       	mov	r24, r16
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	17 d5       	rcall	.+2606   	; 0x2dca <fputc>
    239c:	53 01       	movw	r10, r6
    239e:	35 01       	movw	r6, r10
    23a0:	e3 cf       	rjmp	.-58     	; 0x2368 <vfprintf+0x44>
    23a2:	00 23       	and	r16, r16
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <vfprintf+0x84>
    23a6:	d2 c0       	rjmp	.+420    	; 0x254c <vfprintf+0x228>
    23a8:	60 2f       	mov	r22, r16
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	8f eb       	ldi	r24, 0xBF	; 191
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	c3 d4       	rcall	.+2438   	; 0x2d38 <strchr_P>
    23b2:	89 2b       	or	r24, r25
    23b4:	49 f0       	breq	.+18     	; 0x23c8 <vfprintf+0xa4>
    23b6:	f7 01       	movw	r30, r14
    23b8:	b3 fc       	sbrc	r11, 3
    23ba:	05 91       	lpm	r16, Z+
    23bc:	b3 fe       	sbrs	r11, 3
    23be:	01 91       	ld	r16, Z+
    23c0:	7f 01       	movw	r14, r30
    23c2:	17 ff       	sbrs	r17, 7
    23c4:	ee cf       	rjmp	.-36     	; 0x23a2 <vfprintf+0x7e>
    23c6:	04 c0       	rjmp	.+8      	; 0x23d0 <vfprintf+0xac>
    23c8:	03 32       	cpi	r16, 0x23	; 35
    23ca:	39 f0       	breq	.+14     	; 0x23da <vfprintf+0xb6>
    23cc:	0c 36       	cpi	r16, 0x6C	; 108
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <vfprintf+0xb2>
    23d0:	01 11       	cpse	r16, r1
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <vfprintf+0xba>
    23d4:	bb c0       	rjmp	.+374    	; 0x254c <vfprintf+0x228>
    23d6:	10 68       	ori	r17, 0x80	; 128
    23d8:	ee cf       	rjmp	.-36     	; 0x23b6 <vfprintf+0x92>
    23da:	10 e1       	ldi	r17, 0x10	; 16
    23dc:	ec cf       	rjmp	.-40     	; 0x23b6 <vfprintf+0x92>
    23de:	60 2f       	mov	r22, r16
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	88 eb       	ldi	r24, 0xB8	; 184
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	a8 d4       	rcall	.+2384   	; 0x2d38 <strchr_P>
    23e8:	89 2b       	or	r24, r25
    23ea:	41 f0       	breq	.+16     	; 0x23fc <vfprintf+0xd8>
    23ec:	53 01       	movw	r10, r6
    23ee:	f4 e0       	ldi	r31, 0x04	; 4
    23f0:	af 0e       	add	r10, r31
    23f2:	b1 1c       	adc	r11, r1
    23f4:	b6 01       	movw	r22, r12
    23f6:	8f e3       	ldi	r24, 0x3F	; 63
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	10 c0       	rjmp	.+32     	; 0x241c <vfprintf+0xf8>
    23fc:	03 36       	cpi	r16, 0x63	; 99
    23fe:	31 f0       	breq	.+12     	; 0x240c <vfprintf+0xe8>
    2400:	03 37       	cpi	r16, 0x73	; 115
    2402:	71 f0       	breq	.+28     	; 0x2420 <vfprintf+0xfc>
    2404:	03 35       	cpi	r16, 0x53	; 83
    2406:	01 f5       	brne	.+64     	; 0x2448 <vfprintf+0x124>
    2408:	11 60       	ori	r17, 0x01	; 1
    240a:	0a c0       	rjmp	.+20     	; 0x2420 <vfprintf+0xfc>
    240c:	53 01       	movw	r10, r6
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	a8 0e       	add	r10, r24
    2412:	b1 1c       	adc	r11, r1
    2414:	b6 01       	movw	r22, r12
    2416:	f3 01       	movw	r30, r6
    2418:	80 81       	ld	r24, Z
    241a:	91 81       	ldd	r25, Z+1	; 0x01
    241c:	d6 d4       	rcall	.+2476   	; 0x2dca <fputc>
    241e:	bf cf       	rjmp	.-130    	; 0x239e <vfprintf+0x7a>
    2420:	53 01       	movw	r10, r6
    2422:	f2 e0       	ldi	r31, 0x02	; 2
    2424:	af 0e       	add	r10, r31
    2426:	b1 1c       	adc	r11, r1
    2428:	f3 01       	movw	r30, r6
    242a:	60 80       	ld	r6, Z
    242c:	71 80       	ldd	r7, Z+1	; 0x01
    242e:	f3 01       	movw	r30, r6
    2430:	10 fd       	sbrc	r17, 0
    2432:	85 91       	lpm	r24, Z+
    2434:	10 ff       	sbrs	r17, 0
    2436:	81 91       	ld	r24, Z+
    2438:	3f 01       	movw	r6, r30
    243a:	88 23       	and	r24, r24
    243c:	09 f4       	brne	.+2      	; 0x2440 <vfprintf+0x11c>
    243e:	af cf       	rjmp	.-162    	; 0x239e <vfprintf+0x7a>
    2440:	b6 01       	movw	r22, r12
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	c2 d4       	rcall	.+2436   	; 0x2dca <fputc>
    2446:	f3 cf       	rjmp	.-26     	; 0x242e <vfprintf+0x10a>
    2448:	04 36       	cpi	r16, 0x64	; 100
    244a:	11 f0       	breq	.+4      	; 0x2450 <vfprintf+0x12c>
    244c:	09 36       	cpi	r16, 0x69	; 105
    244e:	21 f5       	brne	.+72     	; 0x2498 <vfprintf+0x174>
    2450:	53 01       	movw	r10, r6
    2452:	17 ff       	sbrs	r17, 7
    2454:	09 c0       	rjmp	.+18     	; 0x2468 <vfprintf+0x144>
    2456:	f4 e0       	ldi	r31, 0x04	; 4
    2458:	af 0e       	add	r10, r31
    245a:	b1 1c       	adc	r11, r1
    245c:	f3 01       	movw	r30, r6
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	0a c0       	rjmp	.+20     	; 0x247c <vfprintf+0x158>
    2468:	f2 e0       	ldi	r31, 0x02	; 2
    246a:	af 0e       	add	r10, r31
    246c:	b1 1c       	adc	r11, r1
    246e:	f3 01       	movw	r30, r6
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	07 2e       	mov	r0, r23
    2476:	00 0c       	add	r0, r0
    2478:	88 0b       	sbc	r24, r24
    247a:	99 0b       	sbc	r25, r25
    247c:	1f 7e       	andi	r17, 0xEF	; 239
    247e:	97 ff       	sbrs	r25, 7
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <vfprintf+0x16e>
    2482:	90 95       	com	r25
    2484:	80 95       	com	r24
    2486:	70 95       	com	r23
    2488:	61 95       	neg	r22
    248a:	7f 4f       	sbci	r23, 0xFF	; 255
    248c:	8f 4f       	sbci	r24, 0xFF	; 255
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	10 64       	ori	r17, 0x40	; 64
    2492:	2a e0       	ldi	r18, 0x0A	; 10
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	30 c0       	rjmp	.+96     	; 0x24f8 <vfprintf+0x1d4>
    2498:	00 37       	cpi	r16, 0x70	; 112
    249a:	91 f0       	breq	.+36     	; 0x24c0 <vfprintf+0x19c>
    249c:	40 f4       	brcc	.+16     	; 0x24ae <vfprintf+0x18a>
    249e:	08 35       	cpi	r16, 0x58	; 88
    24a0:	a1 f0       	breq	.+40     	; 0x24ca <vfprintf+0x1a6>
    24a2:	0f 36       	cpi	r16, 0x6F	; 111
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <vfprintf+0x184>
    24a6:	52 c0       	rjmp	.+164    	; 0x254c <vfprintf+0x228>
    24a8:	28 e0       	ldi	r18, 0x08	; 8
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	11 c0       	rjmp	.+34     	; 0x24d0 <vfprintf+0x1ac>
    24ae:	05 37       	cpi	r16, 0x75	; 117
    24b0:	19 f0       	breq	.+6      	; 0x24b8 <vfprintf+0x194>
    24b2:	08 37       	cpi	r16, 0x78	; 120
    24b4:	31 f0       	breq	.+12     	; 0x24c2 <vfprintf+0x19e>
    24b6:	4a c0       	rjmp	.+148    	; 0x254c <vfprintf+0x228>
    24b8:	1f 7e       	andi	r17, 0xEF	; 239
    24ba:	2a e0       	ldi	r18, 0x0A	; 10
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	08 c0       	rjmp	.+16     	; 0x24d0 <vfprintf+0x1ac>
    24c0:	10 61       	ori	r17, 0x10	; 16
    24c2:	14 62       	ori	r17, 0x24	; 36
    24c4:	20 e1       	ldi	r18, 0x10	; 16
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <vfprintf+0x1ac>
    24ca:	14 60       	ori	r17, 0x04	; 4
    24cc:	20 e1       	ldi	r18, 0x10	; 16
    24ce:	32 e0       	ldi	r19, 0x02	; 2
    24d0:	53 01       	movw	r10, r6
    24d2:	17 ff       	sbrs	r17, 7
    24d4:	09 c0       	rjmp	.+18     	; 0x24e8 <vfprintf+0x1c4>
    24d6:	f4 e0       	ldi	r31, 0x04	; 4
    24d8:	af 0e       	add	r10, r31
    24da:	b1 1c       	adc	r11, r1
    24dc:	f3 01       	movw	r30, r6
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	08 c0       	rjmp	.+16     	; 0x24f8 <vfprintf+0x1d4>
    24e8:	f2 e0       	ldi	r31, 0x02	; 2
    24ea:	af 0e       	add	r10, r31
    24ec:	b1 1c       	adc	r11, r1
    24ee:	f3 01       	movw	r30, r6
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a4 01       	movw	r20, r8
    24fa:	bc d4       	rcall	.+2424   	; 0x2e74 <__ultoa_invert>
    24fc:	08 2f       	mov	r16, r24
    24fe:	08 19       	sub	r16, r8
    2500:	16 ff       	sbrs	r17, 6
    2502:	04 c0       	rjmp	.+8      	; 0x250c <vfprintf+0x1e8>
    2504:	b6 01       	movw	r22, r12
    2506:	8d e2       	ldi	r24, 0x2D	; 45
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	5f d4       	rcall	.+2238   	; 0x2dca <fputc>
    250c:	14 ff       	sbrs	r17, 4
    250e:	13 c0       	rjmp	.+38     	; 0x2536 <vfprintf+0x212>
    2510:	fe 01       	movw	r30, r28
    2512:	e0 0f       	add	r30, r16
    2514:	f1 1d       	adc	r31, r1
    2516:	80 81       	ld	r24, Z
    2518:	80 33       	cpi	r24, 0x30	; 48
    251a:	69 f0       	breq	.+26     	; 0x2536 <vfprintf+0x212>
    251c:	b6 01       	movw	r22, r12
    251e:	80 e3       	ldi	r24, 0x30	; 48
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	53 d4       	rcall	.+2214   	; 0x2dca <fputc>
    2524:	12 ff       	sbrs	r17, 2
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <vfprintf+0x212>
    2528:	10 72       	andi	r17, 0x20	; 32
    252a:	81 2f       	mov	r24, r17
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	b6 01       	movw	r22, r12
    2530:	88 5a       	subi	r24, 0xA8	; 168
    2532:	9f 4f       	sbci	r25, 0xFF	; 255
    2534:	4a d4       	rcall	.+2196   	; 0x2dca <fputc>
    2536:	01 50       	subi	r16, 0x01	; 1
    2538:	f4 01       	movw	r30, r8
    253a:	e0 0f       	add	r30, r16
    253c:	f1 1d       	adc	r31, r1
    253e:	80 81       	ld	r24, Z
    2540:	b6 01       	movw	r22, r12
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	42 d4       	rcall	.+2180   	; 0x2dca <fputc>
    2546:	01 11       	cpse	r16, r1
    2548:	f6 cf       	rjmp	.-20     	; 0x2536 <vfprintf+0x212>
    254a:	29 cf       	rjmp	.-430    	; 0x239e <vfprintf+0x7a>
    254c:	f6 01       	movw	r30, r12
    254e:	86 81       	ldd	r24, Z+6	; 0x06
    2550:	97 81       	ldd	r25, Z+7	; 0x07
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <vfprintf+0x234>
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	9f ef       	ldi	r25, 0xFF	; 255
    2558:	2b 96       	adiw	r28, 0x0b	; 11
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	ef 90       	pop	r14
    2570:	df 90       	pop	r13
    2572:	cf 90       	pop	r12
    2574:	bf 90       	pop	r11
    2576:	af 90       	pop	r10
    2578:	9f 90       	pop	r9
    257a:	8f 90       	pop	r8
    257c:	7f 90       	pop	r7
    257e:	6f 90       	pop	r6
    2580:	08 95       	ret

00002582 <putval>:
    2582:	20 fd       	sbrc	r18, 0
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <putval+0x16>
    2586:	fc 01       	movw	r30, r24
    2588:	23 fd       	sbrc	r18, 3
    258a:	05 c0       	rjmp	.+10     	; 0x2596 <putval+0x14>
    258c:	22 ff       	sbrs	r18, 2
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <putval+0x12>
    2590:	73 83       	std	Z+3, r23	; 0x03
    2592:	62 83       	std	Z+2, r22	; 0x02
    2594:	51 83       	std	Z+1, r21	; 0x01
    2596:	40 83       	st	Z, r20
    2598:	08 95       	ret

0000259a <mulacc>:
    259a:	44 fd       	sbrc	r20, 4
    259c:	17 c0       	rjmp	.+46     	; 0x25cc <mulacc+0x32>
    259e:	46 fd       	sbrc	r20, 6
    25a0:	17 c0       	rjmp	.+46     	; 0x25d0 <mulacc+0x36>
    25a2:	ab 01       	movw	r20, r22
    25a4:	bc 01       	movw	r22, r24
    25a6:	da 01       	movw	r26, r20
    25a8:	fb 01       	movw	r30, r22
    25aa:	aa 0f       	add	r26, r26
    25ac:	bb 1f       	adc	r27, r27
    25ae:	ee 1f       	adc	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	10 94       	com	r1
    25b4:	d1 f7       	brne	.-12     	; 0x25aa <mulacc+0x10>
    25b6:	4a 0f       	add	r20, r26
    25b8:	5b 1f       	adc	r21, r27
    25ba:	6e 1f       	adc	r22, r30
    25bc:	7f 1f       	adc	r23, r31
    25be:	cb 01       	movw	r24, r22
    25c0:	ba 01       	movw	r22, r20
    25c2:	66 0f       	add	r22, r22
    25c4:	77 1f       	adc	r23, r23
    25c6:	88 1f       	adc	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <mulacc+0x44>
    25cc:	33 e0       	ldi	r19, 0x03	; 3
    25ce:	01 c0       	rjmp	.+2      	; 0x25d2 <mulacc+0x38>
    25d0:	34 e0       	ldi	r19, 0x04	; 4
    25d2:	66 0f       	add	r22, r22
    25d4:	77 1f       	adc	r23, r23
    25d6:	88 1f       	adc	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	31 50       	subi	r19, 0x01	; 1
    25dc:	d1 f7       	brne	.-12     	; 0x25d2 <mulacc+0x38>
    25de:	62 0f       	add	r22, r18
    25e0:	71 1d       	adc	r23, r1
    25e2:	81 1d       	adc	r24, r1
    25e4:	91 1d       	adc	r25, r1
    25e6:	08 95       	ret

000025e8 <skip_spaces>:
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	8c 01       	movw	r16, r24
    25f2:	c8 01       	movw	r24, r16
    25f4:	ac d3       	rcall	.+1880   	; 0x2d4e <fgetc>
    25f6:	ec 01       	movw	r28, r24
    25f8:	97 fd       	sbrc	r25, 7
    25fa:	06 c0       	rjmp	.+12     	; 0x2608 <skip_spaces+0x20>
    25fc:	95 d3       	rcall	.+1834   	; 0x2d28 <isspace>
    25fe:	89 2b       	or	r24, r25
    2600:	c1 f7       	brne	.-16     	; 0x25f2 <skip_spaces+0xa>
    2602:	b8 01       	movw	r22, r16
    2604:	ce 01       	movw	r24, r28
    2606:	1d d4       	rcall	.+2106   	; 0x2e42 <ungetc>
    2608:	ce 01       	movw	r24, r28
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	08 95       	ret

00002614 <conv_int>:
    2614:	8f 92       	push	r8
    2616:	9f 92       	push	r9
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	ef 92       	push	r14
    261e:	ff 92       	push	r15
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	8c 01       	movw	r16, r24
    262a:	d6 2f       	mov	r29, r22
    262c:	7a 01       	movw	r14, r20
    262e:	b2 2e       	mov	r11, r18
    2630:	8e d3       	rcall	.+1820   	; 0x2d4e <fgetc>
    2632:	9c 01       	movw	r18, r24
    2634:	33 27       	eor	r19, r19
    2636:	2b 32       	cpi	r18, 0x2B	; 43
    2638:	31 05       	cpc	r19, r1
    263a:	31 f0       	breq	.+12     	; 0x2648 <conv_int+0x34>
    263c:	2d 32       	cpi	r18, 0x2D	; 45
    263e:	31 05       	cpc	r19, r1
    2640:	59 f4       	brne	.+22     	; 0x2658 <conv_int+0x44>
    2642:	8b 2d       	mov	r24, r11
    2644:	80 68       	ori	r24, 0x80	; 128
    2646:	b8 2e       	mov	r11, r24
    2648:	d1 50       	subi	r29, 0x01	; 1
    264a:	11 f4       	brne	.+4      	; 0x2650 <conv_int+0x3c>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	61 c0       	rjmp	.+194    	; 0x2712 <conv_int+0xfe>
    2650:	c8 01       	movw	r24, r16
    2652:	7d d3       	rcall	.+1786   	; 0x2d4e <fgetc>
    2654:	97 fd       	sbrc	r25, 7
    2656:	fa cf       	rjmp	.-12     	; 0x264c <conv_int+0x38>
    2658:	cb 2d       	mov	r28, r11
    265a:	cd 7f       	andi	r28, 0xFD	; 253
    265c:	2b 2d       	mov	r18, r11
    265e:	20 73       	andi	r18, 0x30	; 48
    2660:	f9 f4       	brne	.+62     	; 0x26a0 <conv_int+0x8c>
    2662:	80 33       	cpi	r24, 0x30	; 48
    2664:	e9 f4       	brne	.+58     	; 0x26a0 <conv_int+0x8c>
    2666:	aa 24       	eor	r10, r10
    2668:	aa 94       	dec	r10
    266a:	ad 0e       	add	r10, r29
    266c:	09 f4       	brne	.+2      	; 0x2670 <conv_int+0x5c>
    266e:	3e c0       	rjmp	.+124    	; 0x26ec <conv_int+0xd8>
    2670:	c8 01       	movw	r24, r16
    2672:	6d d3       	rcall	.+1754   	; 0x2d4e <fgetc>
    2674:	97 fd       	sbrc	r25, 7
    2676:	3a c0       	rjmp	.+116    	; 0x26ec <conv_int+0xd8>
    2678:	9c 01       	movw	r18, r24
    267a:	2f 7d       	andi	r18, 0xDF	; 223
    267c:	33 27       	eor	r19, r19
    267e:	28 35       	cpi	r18, 0x58	; 88
    2680:	31 05       	cpc	r19, r1
    2682:	41 f4       	brne	.+16     	; 0x2694 <conv_int+0x80>
    2684:	c2 64       	ori	r28, 0x42	; 66
    2686:	d2 50       	subi	r29, 0x02	; 2
    2688:	89 f1       	breq	.+98     	; 0x26ec <conv_int+0xd8>
    268a:	c8 01       	movw	r24, r16
    268c:	60 d3       	rcall	.+1728   	; 0x2d4e <fgetc>
    268e:	97 ff       	sbrs	r25, 7
    2690:	07 c0       	rjmp	.+14     	; 0x26a0 <conv_int+0x8c>
    2692:	2c c0       	rjmp	.+88     	; 0x26ec <conv_int+0xd8>
    2694:	b6 fe       	sbrs	r11, 6
    2696:	02 c0       	rjmp	.+4      	; 0x269c <conv_int+0x88>
    2698:	c2 60       	ori	r28, 0x02	; 2
    269a:	01 c0       	rjmp	.+2      	; 0x269e <conv_int+0x8a>
    269c:	c2 61       	ori	r28, 0x12	; 18
    269e:	da 2d       	mov	r29, r10
    26a0:	81 2c       	mov	r8, r1
    26a2:	91 2c       	mov	r9, r1
    26a4:	54 01       	movw	r10, r8
    26a6:	20 ed       	ldi	r18, 0xD0	; 208
    26a8:	28 0f       	add	r18, r24
    26aa:	28 30       	cpi	r18, 0x08	; 8
    26ac:	78 f0       	brcs	.+30     	; 0x26cc <conv_int+0xb8>
    26ae:	c4 ff       	sbrs	r28, 4
    26b0:	03 c0       	rjmp	.+6      	; 0x26b8 <conv_int+0xa4>
    26b2:	b8 01       	movw	r22, r16
    26b4:	c6 d3       	rcall	.+1932   	; 0x2e42 <ungetc>
    26b6:	17 c0       	rjmp	.+46     	; 0x26e6 <conv_int+0xd2>
    26b8:	2a 30       	cpi	r18, 0x0A	; 10
    26ba:	40 f0       	brcs	.+16     	; 0x26cc <conv_int+0xb8>
    26bc:	c6 ff       	sbrs	r28, 6
    26be:	f9 cf       	rjmp	.-14     	; 0x26b2 <conv_int+0x9e>
    26c0:	2f 7d       	andi	r18, 0xDF	; 223
    26c2:	3f ee       	ldi	r19, 0xEF	; 239
    26c4:	32 0f       	add	r19, r18
    26c6:	36 30       	cpi	r19, 0x06	; 6
    26c8:	a0 f7       	brcc	.-24     	; 0x26b2 <conv_int+0x9e>
    26ca:	27 50       	subi	r18, 0x07	; 7
    26cc:	4c 2f       	mov	r20, r28
    26ce:	c5 01       	movw	r24, r10
    26d0:	b4 01       	movw	r22, r8
    26d2:	63 df       	rcall	.-314    	; 0x259a <mulacc>
    26d4:	4b 01       	movw	r8, r22
    26d6:	5c 01       	movw	r10, r24
    26d8:	c2 60       	ori	r28, 0x02	; 2
    26da:	d1 50       	subi	r29, 0x01	; 1
    26dc:	51 f0       	breq	.+20     	; 0x26f2 <conv_int+0xde>
    26de:	c8 01       	movw	r24, r16
    26e0:	36 d3       	rcall	.+1644   	; 0x2d4e <fgetc>
    26e2:	97 ff       	sbrs	r25, 7
    26e4:	e0 cf       	rjmp	.-64     	; 0x26a6 <conv_int+0x92>
    26e6:	c1 fd       	sbrc	r28, 1
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <conv_int+0xde>
    26ea:	b0 cf       	rjmp	.-160    	; 0x264c <conv_int+0x38>
    26ec:	81 2c       	mov	r8, r1
    26ee:	91 2c       	mov	r9, r1
    26f0:	54 01       	movw	r10, r8
    26f2:	c7 ff       	sbrs	r28, 7
    26f4:	08 c0       	rjmp	.+16     	; 0x2706 <conv_int+0xf2>
    26f6:	b0 94       	com	r11
    26f8:	a0 94       	com	r10
    26fa:	90 94       	com	r9
    26fc:	80 94       	com	r8
    26fe:	81 1c       	adc	r8, r1
    2700:	91 1c       	adc	r9, r1
    2702:	a1 1c       	adc	r10, r1
    2704:	b1 1c       	adc	r11, r1
    2706:	2c 2f       	mov	r18, r28
    2708:	b5 01       	movw	r22, r10
    270a:	a4 01       	movw	r20, r8
    270c:	c7 01       	movw	r24, r14
    270e:	39 df       	rcall	.-398    	; 0x2582 <putval>
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	1f 91       	pop	r17
    2718:	0f 91       	pop	r16
    271a:	ff 90       	pop	r15
    271c:	ef 90       	pop	r14
    271e:	bf 90       	pop	r11
    2720:	af 90       	pop	r10
    2722:	9f 90       	pop	r9
    2724:	8f 90       	pop	r8
    2726:	08 95       	ret

00002728 <vfscanf>:
    2728:	5f 92       	push	r5
    272a:	6f 92       	push	r6
    272c:	7f 92       	push	r7
    272e:	8f 92       	push	r8
    2730:	9f 92       	push	r9
    2732:	af 92       	push	r10
    2734:	bf 92       	push	r11
    2736:	cf 92       	push	r12
    2738:	df 92       	push	r13
    273a:	ef 92       	push	r14
    273c:	ff 92       	push	r15
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	6c 01       	movw	r12, r24
    2748:	eb 01       	movw	r28, r22
    274a:	5a 01       	movw	r10, r20
    274c:	fc 01       	movw	r30, r24
    274e:	17 82       	std	Z+7, r1	; 0x07
    2750:	16 82       	std	Z+6, r1	; 0x06
    2752:	51 2c       	mov	r5, r1
    2754:	f6 01       	movw	r30, r12
    2756:	f3 80       	ldd	r15, Z+3	; 0x03
    2758:	fe 01       	movw	r30, r28
    275a:	f3 fc       	sbrc	r15, 3
    275c:	85 91       	lpm	r24, Z+
    275e:	f3 fe       	sbrs	r15, 3
    2760:	81 91       	ld	r24, Z+
    2762:	18 2f       	mov	r17, r24
    2764:	ef 01       	movw	r28, r30
    2766:	88 23       	and	r24, r24
    2768:	09 f4       	brne	.+2      	; 0x276c <vfscanf+0x44>
    276a:	d4 c0       	rjmp	.+424    	; 0x2914 <vfscanf+0x1ec>
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	dc d2       	rcall	.+1464   	; 0x2d28 <isspace>
    2770:	89 2b       	or	r24, r25
    2772:	19 f0       	breq	.+6      	; 0x277a <vfscanf+0x52>
    2774:	c6 01       	movw	r24, r12
    2776:	38 df       	rcall	.-400    	; 0x25e8 <skip_spaces>
    2778:	ed cf       	rjmp	.-38     	; 0x2754 <vfscanf+0x2c>
    277a:	15 32       	cpi	r17, 0x25	; 37
    277c:	41 f4       	brne	.+16     	; 0x278e <vfscanf+0x66>
    277e:	fe 01       	movw	r30, r28
    2780:	f3 fc       	sbrc	r15, 3
    2782:	15 91       	lpm	r17, Z+
    2784:	f3 fe       	sbrs	r15, 3
    2786:	11 91       	ld	r17, Z+
    2788:	ef 01       	movw	r28, r30
    278a:	15 32       	cpi	r17, 0x25	; 37
    278c:	71 f4       	brne	.+28     	; 0x27aa <vfscanf+0x82>
    278e:	c6 01       	movw	r24, r12
    2790:	de d2       	rcall	.+1468   	; 0x2d4e <fgetc>
    2792:	97 fd       	sbrc	r25, 7
    2794:	bd c0       	rjmp	.+378    	; 0x2910 <vfscanf+0x1e8>
    2796:	41 2f       	mov	r20, r17
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	9c 01       	movw	r18, r24
    279c:	33 27       	eor	r19, r19
    279e:	24 17       	cp	r18, r20
    27a0:	35 07       	cpc	r19, r21
    27a2:	c1 f2       	breq	.-80     	; 0x2754 <vfscanf+0x2c>
    27a4:	b6 01       	movw	r22, r12
    27a6:	4d d3       	rcall	.+1690   	; 0x2e42 <ungetc>
    27a8:	b5 c0       	rjmp	.+362    	; 0x2914 <vfscanf+0x1ec>
    27aa:	1a 32       	cpi	r17, 0x2A	; 42
    27ac:	39 f4       	brne	.+14     	; 0x27bc <vfscanf+0x94>
    27ae:	f3 fc       	sbrc	r15, 3
    27b0:	15 91       	lpm	r17, Z+
    27b2:	f3 fe       	sbrs	r15, 3
    27b4:	11 91       	ld	r17, Z+
    27b6:	ef 01       	movw	r28, r30
    27b8:	01 e0       	ldi	r16, 0x01	; 1
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <vfscanf+0x96>
    27bc:	00 e0       	ldi	r16, 0x00	; 0
    27be:	e1 2c       	mov	r14, r1
    27c0:	20 ed       	ldi	r18, 0xD0	; 208
    27c2:	21 0f       	add	r18, r17
    27c4:	2a 30       	cpi	r18, 0x0A	; 10
    27c6:	78 f4       	brcc	.+30     	; 0x27e6 <vfscanf+0xbe>
    27c8:	02 60       	ori	r16, 0x02	; 2
    27ca:	6e 2d       	mov	r22, r14
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	e2 de       	rcall	.-572    	; 0x259a <mulacc>
    27d6:	e6 2e       	mov	r14, r22
    27d8:	fe 01       	movw	r30, r28
    27da:	f3 fc       	sbrc	r15, 3
    27dc:	15 91       	lpm	r17, Z+
    27de:	f3 fe       	sbrs	r15, 3
    27e0:	11 91       	ld	r17, Z+
    27e2:	ef 01       	movw	r28, r30
    27e4:	ed cf       	rjmp	.-38     	; 0x27c0 <vfscanf+0x98>
    27e6:	01 ff       	sbrs	r16, 1
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <vfscanf+0xc8>
    27ea:	e1 10       	cpse	r14, r1
    27ec:	03 c0       	rjmp	.+6      	; 0x27f4 <vfscanf+0xcc>
    27ee:	92 c0       	rjmp	.+292    	; 0x2914 <vfscanf+0x1ec>
    27f0:	ee 24       	eor	r14, r14
    27f2:	ea 94       	dec	r14
    27f4:	18 36       	cpi	r17, 0x68	; 104
    27f6:	19 f0       	breq	.+6      	; 0x27fe <vfscanf+0xd6>
    27f8:	1c 36       	cpi	r17, 0x6C	; 108
    27fa:	51 f0       	breq	.+20     	; 0x2810 <vfscanf+0xe8>
    27fc:	10 c0       	rjmp	.+32     	; 0x281e <vfscanf+0xf6>
    27fe:	fe 01       	movw	r30, r28
    2800:	f3 fc       	sbrc	r15, 3
    2802:	15 91       	lpm	r17, Z+
    2804:	f3 fe       	sbrs	r15, 3
    2806:	11 91       	ld	r17, Z+
    2808:	ef 01       	movw	r28, r30
    280a:	18 36       	cpi	r17, 0x68	; 104
    280c:	41 f4       	brne	.+16     	; 0x281e <vfscanf+0xf6>
    280e:	08 60       	ori	r16, 0x08	; 8
    2810:	04 60       	ori	r16, 0x04	; 4
    2812:	fe 01       	movw	r30, r28
    2814:	f3 fc       	sbrc	r15, 3
    2816:	15 91       	lpm	r17, Z+
    2818:	f3 fe       	sbrs	r15, 3
    281a:	11 91       	ld	r17, Z+
    281c:	ef 01       	movw	r28, r30
    281e:	11 23       	and	r17, r17
    2820:	09 f4       	brne	.+2      	; 0x2824 <vfscanf+0xfc>
    2822:	78 c0       	rjmp	.+240    	; 0x2914 <vfscanf+0x1ec>
    2824:	61 2f       	mov	r22, r17
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	8f ec       	ldi	r24, 0xCF	; 207
    282a:	91 e0       	ldi	r25, 0x01	; 1
    282c:	85 d2       	rcall	.+1290   	; 0x2d38 <strchr_P>
    282e:	89 2b       	or	r24, r25
    2830:	09 f4       	brne	.+2      	; 0x2834 <vfscanf+0x10c>
    2832:	70 c0       	rjmp	.+224    	; 0x2914 <vfscanf+0x1ec>
    2834:	00 fd       	sbrc	r16, 0
    2836:	07 c0       	rjmp	.+14     	; 0x2846 <vfscanf+0x11e>
    2838:	f5 01       	movw	r30, r10
    283a:	80 80       	ld	r8, Z
    283c:	91 80       	ldd	r9, Z+1	; 0x01
    283e:	c5 01       	movw	r24, r10
    2840:	02 96       	adiw	r24, 0x02	; 2
    2842:	5c 01       	movw	r10, r24
    2844:	02 c0       	rjmp	.+4      	; 0x284a <vfscanf+0x122>
    2846:	81 2c       	mov	r8, r1
    2848:	91 2c       	mov	r9, r1
    284a:	1e 36       	cpi	r17, 0x6E	; 110
    284c:	49 f4       	brne	.+18     	; 0x2860 <vfscanf+0x138>
    284e:	f6 01       	movw	r30, r12
    2850:	46 81       	ldd	r20, Z+6	; 0x06
    2852:	57 81       	ldd	r21, Z+7	; 0x07
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	20 2f       	mov	r18, r16
    285a:	c4 01       	movw	r24, r8
    285c:	92 de       	rcall	.-732    	; 0x2582 <putval>
    285e:	7a cf       	rjmp	.-268    	; 0x2754 <vfscanf+0x2c>
    2860:	13 36       	cpi	r17, 0x63	; 99
    2862:	a1 f4       	brne	.+40     	; 0x288c <vfscanf+0x164>
    2864:	01 fd       	sbrc	r16, 1
    2866:	02 c0       	rjmp	.+4      	; 0x286c <vfscanf+0x144>
    2868:	ee 24       	eor	r14, r14
    286a:	e3 94       	inc	r14
    286c:	c6 01       	movw	r24, r12
    286e:	6f d2       	rcall	.+1246   	; 0x2d4e <fgetc>
    2870:	97 fd       	sbrc	r25, 7
    2872:	4e c0       	rjmp	.+156    	; 0x2910 <vfscanf+0x1e8>
    2874:	81 14       	cp	r8, r1
    2876:	91 04       	cpc	r9, r1
    2878:	29 f0       	breq	.+10     	; 0x2884 <vfscanf+0x15c>
    287a:	f4 01       	movw	r30, r8
    287c:	80 83       	st	Z, r24
    287e:	c4 01       	movw	r24, r8
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	4c 01       	movw	r8, r24
    2884:	ea 94       	dec	r14
    2886:	e1 10       	cpse	r14, r1
    2888:	f1 cf       	rjmp	.-30     	; 0x286c <vfscanf+0x144>
    288a:	3e c0       	rjmp	.+124    	; 0x2908 <vfscanf+0x1e0>
    288c:	c6 01       	movw	r24, r12
    288e:	ac de       	rcall	.-680    	; 0x25e8 <skip_spaces>
    2890:	97 fd       	sbrc	r25, 7
    2892:	3e c0       	rjmp	.+124    	; 0x2910 <vfscanf+0x1e8>
    2894:	1f 36       	cpi	r17, 0x6F	; 111
    2896:	49 f1       	breq	.+82     	; 0x28ea <vfscanf+0x1c2>
    2898:	28 f4       	brcc	.+10     	; 0x28a4 <vfscanf+0x17c>
    289a:	14 36       	cpi	r17, 0x64	; 100
    289c:	21 f1       	breq	.+72     	; 0x28e6 <vfscanf+0x1be>
    289e:	19 36       	cpi	r17, 0x69	; 105
    28a0:	39 f1       	breq	.+78     	; 0x28f0 <vfscanf+0x1c8>
    28a2:	25 c0       	rjmp	.+74     	; 0x28ee <vfscanf+0x1c6>
    28a4:	13 37       	cpi	r17, 0x73	; 115
    28a6:	71 f0       	breq	.+28     	; 0x28c4 <vfscanf+0x19c>
    28a8:	15 37       	cpi	r17, 0x75	; 117
    28aa:	e9 f0       	breq	.+58     	; 0x28e6 <vfscanf+0x1be>
    28ac:	20 c0       	rjmp	.+64     	; 0x28ee <vfscanf+0x1c6>
    28ae:	81 14       	cp	r8, r1
    28b0:	91 04       	cpc	r9, r1
    28b2:	29 f0       	breq	.+10     	; 0x28be <vfscanf+0x196>
    28b4:	f4 01       	movw	r30, r8
    28b6:	60 82       	st	Z, r6
    28b8:	c4 01       	movw	r24, r8
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	4c 01       	movw	r8, r24
    28be:	ea 94       	dec	r14
    28c0:	ee 20       	and	r14, r14
    28c2:	59 f0       	breq	.+22     	; 0x28da <vfscanf+0x1b2>
    28c4:	c6 01       	movw	r24, r12
    28c6:	43 d2       	rcall	.+1158   	; 0x2d4e <fgetc>
    28c8:	3c 01       	movw	r6, r24
    28ca:	97 fd       	sbrc	r25, 7
    28cc:	06 c0       	rjmp	.+12     	; 0x28da <vfscanf+0x1b2>
    28ce:	2c d2       	rcall	.+1112   	; 0x2d28 <isspace>
    28d0:	89 2b       	or	r24, r25
    28d2:	69 f3       	breq	.-38     	; 0x28ae <vfscanf+0x186>
    28d4:	b6 01       	movw	r22, r12
    28d6:	c3 01       	movw	r24, r6
    28d8:	b4 d2       	rcall	.+1384   	; 0x2e42 <ungetc>
    28da:	81 14       	cp	r8, r1
    28dc:	91 04       	cpc	r9, r1
    28de:	a1 f0       	breq	.+40     	; 0x2908 <vfscanf+0x1e0>
    28e0:	f4 01       	movw	r30, r8
    28e2:	10 82       	st	Z, r1
    28e4:	11 c0       	rjmp	.+34     	; 0x2908 <vfscanf+0x1e0>
    28e6:	00 62       	ori	r16, 0x20	; 32
    28e8:	03 c0       	rjmp	.+6      	; 0x28f0 <vfscanf+0x1c8>
    28ea:	00 61       	ori	r16, 0x10	; 16
    28ec:	01 c0       	rjmp	.+2      	; 0x28f0 <vfscanf+0x1c8>
    28ee:	00 64       	ori	r16, 0x40	; 64
    28f0:	20 2f       	mov	r18, r16
    28f2:	a4 01       	movw	r20, r8
    28f4:	6e 2d       	mov	r22, r14
    28f6:	c6 01       	movw	r24, r12
    28f8:	8d de       	rcall	.-742    	; 0x2614 <conv_int>
    28fa:	81 11       	cpse	r24, r1
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <vfscanf+0x1e0>
    28fe:	f6 01       	movw	r30, r12
    2900:	83 81       	ldd	r24, Z+3	; 0x03
    2902:	80 73       	andi	r24, 0x30	; 48
    2904:	29 f4       	brne	.+10     	; 0x2910 <vfscanf+0x1e8>
    2906:	06 c0       	rjmp	.+12     	; 0x2914 <vfscanf+0x1ec>
    2908:	00 fd       	sbrc	r16, 0
    290a:	24 cf       	rjmp	.-440    	; 0x2754 <vfscanf+0x2c>
    290c:	53 94       	inc	r5
    290e:	22 cf       	rjmp	.-444    	; 0x2754 <vfscanf+0x2c>
    2910:	55 20       	and	r5, r5
    2912:	19 f0       	breq	.+6      	; 0x291a <vfscanf+0x1f2>
    2914:	85 2d       	mov	r24, r5
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	02 c0       	rjmp	.+4      	; 0x291e <vfscanf+0x1f6>
    291a:	8f ef       	ldi	r24, 0xFF	; 255
    291c:	9f ef       	ldi	r25, 0xFF	; 255
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	ff 90       	pop	r15
    2928:	ef 90       	pop	r14
    292a:	df 90       	pop	r13
    292c:	cf 90       	pop	r12
    292e:	bf 90       	pop	r11
    2930:	af 90       	pop	r10
    2932:	9f 90       	pop	r9
    2934:	8f 90       	pop	r8
    2936:	7f 90       	pop	r7
    2938:	6f 90       	pop	r6
    293a:	5f 90       	pop	r5
    293c:	08 95       	ret

0000293e <__subsf3>:
    293e:	50 58       	subi	r21, 0x80	; 128

00002940 <__addsf3>:
    2940:	bb 27       	eor	r27, r27
    2942:	aa 27       	eor	r26, r26
    2944:	0e d0       	rcall	.+28     	; 0x2962 <__addsf3x>
    2946:	0d c1       	rjmp	.+538    	; 0x2b62 <__fp_round>
    2948:	fe d0       	rcall	.+508    	; 0x2b46 <__fp_pscA>
    294a:	30 f0       	brcs	.+12     	; 0x2958 <__addsf3+0x18>
    294c:	03 d1       	rcall	.+518    	; 0x2b54 <__fp_pscB>
    294e:	20 f0       	brcs	.+8      	; 0x2958 <__addsf3+0x18>
    2950:	31 f4       	brne	.+12     	; 0x295e <__addsf3+0x1e>
    2952:	9f 3f       	cpi	r25, 0xFF	; 255
    2954:	11 f4       	brne	.+4      	; 0x295a <__addsf3+0x1a>
    2956:	1e f4       	brtc	.+6      	; 0x295e <__addsf3+0x1e>
    2958:	f3 c0       	rjmp	.+486    	; 0x2b40 <__fp_nan>
    295a:	0e f4       	brtc	.+2      	; 0x295e <__addsf3+0x1e>
    295c:	e0 95       	com	r30
    295e:	e7 fb       	bst	r30, 7
    2960:	e9 c0       	rjmp	.+466    	; 0x2b34 <__fp_inf>

00002962 <__addsf3x>:
    2962:	e9 2f       	mov	r30, r25
    2964:	0f d1       	rcall	.+542    	; 0x2b84 <__fp_split3>
    2966:	80 f3       	brcs	.-32     	; 0x2948 <__addsf3+0x8>
    2968:	ba 17       	cp	r27, r26
    296a:	62 07       	cpc	r22, r18
    296c:	73 07       	cpc	r23, r19
    296e:	84 07       	cpc	r24, r20
    2970:	95 07       	cpc	r25, r21
    2972:	18 f0       	brcs	.+6      	; 0x297a <__addsf3x+0x18>
    2974:	71 f4       	brne	.+28     	; 0x2992 <__addsf3x+0x30>
    2976:	9e f5       	brtc	.+102    	; 0x29de <__addsf3x+0x7c>
    2978:	27 c1       	rjmp	.+590    	; 0x2bc8 <__fp_zero>
    297a:	0e f4       	brtc	.+2      	; 0x297e <__addsf3x+0x1c>
    297c:	e0 95       	com	r30
    297e:	0b 2e       	mov	r0, r27
    2980:	ba 2f       	mov	r27, r26
    2982:	a0 2d       	mov	r26, r0
    2984:	0b 01       	movw	r0, r22
    2986:	b9 01       	movw	r22, r18
    2988:	90 01       	movw	r18, r0
    298a:	0c 01       	movw	r0, r24
    298c:	ca 01       	movw	r24, r20
    298e:	a0 01       	movw	r20, r0
    2990:	11 24       	eor	r1, r1
    2992:	ff 27       	eor	r31, r31
    2994:	59 1b       	sub	r21, r25
    2996:	99 f0       	breq	.+38     	; 0x29be <__addsf3x+0x5c>
    2998:	59 3f       	cpi	r21, 0xF9	; 249
    299a:	50 f4       	brcc	.+20     	; 0x29b0 <__addsf3x+0x4e>
    299c:	50 3e       	cpi	r21, 0xE0	; 224
    299e:	68 f1       	brcs	.+90     	; 0x29fa <__addsf3x+0x98>
    29a0:	1a 16       	cp	r1, r26
    29a2:	f0 40       	sbci	r31, 0x00	; 0
    29a4:	a2 2f       	mov	r26, r18
    29a6:	23 2f       	mov	r18, r19
    29a8:	34 2f       	mov	r19, r20
    29aa:	44 27       	eor	r20, r20
    29ac:	58 5f       	subi	r21, 0xF8	; 248
    29ae:	f3 cf       	rjmp	.-26     	; 0x2996 <__addsf3x+0x34>
    29b0:	46 95       	lsr	r20
    29b2:	37 95       	ror	r19
    29b4:	27 95       	ror	r18
    29b6:	a7 95       	ror	r26
    29b8:	f0 40       	sbci	r31, 0x00	; 0
    29ba:	53 95       	inc	r21
    29bc:	c9 f7       	brne	.-14     	; 0x29b0 <__addsf3x+0x4e>
    29be:	7e f4       	brtc	.+30     	; 0x29de <__addsf3x+0x7c>
    29c0:	1f 16       	cp	r1, r31
    29c2:	ba 0b       	sbc	r27, r26
    29c4:	62 0b       	sbc	r22, r18
    29c6:	73 0b       	sbc	r23, r19
    29c8:	84 0b       	sbc	r24, r20
    29ca:	ba f0       	brmi	.+46     	; 0x29fa <__addsf3x+0x98>
    29cc:	91 50       	subi	r25, 0x01	; 1
    29ce:	a1 f0       	breq	.+40     	; 0x29f8 <__addsf3x+0x96>
    29d0:	ff 0f       	add	r31, r31
    29d2:	bb 1f       	adc	r27, r27
    29d4:	66 1f       	adc	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	88 1f       	adc	r24, r24
    29da:	c2 f7       	brpl	.-16     	; 0x29cc <__addsf3x+0x6a>
    29dc:	0e c0       	rjmp	.+28     	; 0x29fa <__addsf3x+0x98>
    29de:	ba 0f       	add	r27, r26
    29e0:	62 1f       	adc	r22, r18
    29e2:	73 1f       	adc	r23, r19
    29e4:	84 1f       	adc	r24, r20
    29e6:	48 f4       	brcc	.+18     	; 0x29fa <__addsf3x+0x98>
    29e8:	87 95       	ror	r24
    29ea:	77 95       	ror	r23
    29ec:	67 95       	ror	r22
    29ee:	b7 95       	ror	r27
    29f0:	f7 95       	ror	r31
    29f2:	9e 3f       	cpi	r25, 0xFE	; 254
    29f4:	08 f0       	brcs	.+2      	; 0x29f8 <__addsf3x+0x96>
    29f6:	b3 cf       	rjmp	.-154    	; 0x295e <__addsf3+0x1e>
    29f8:	93 95       	inc	r25
    29fa:	88 0f       	add	r24, r24
    29fc:	08 f0       	brcs	.+2      	; 0x2a00 <__addsf3x+0x9e>
    29fe:	99 27       	eor	r25, r25
    2a00:	ee 0f       	add	r30, r30
    2a02:	97 95       	ror	r25
    2a04:	87 95       	ror	r24
    2a06:	08 95       	ret

00002a08 <__cmpsf2>:
    2a08:	71 d0       	rcall	.+226    	; 0x2aec <__fp_cmp>
    2a0a:	08 f4       	brcc	.+2      	; 0x2a0e <__cmpsf2+0x6>
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	08 95       	ret

00002a10 <__fixsfsi>:
    2a10:	04 d0       	rcall	.+8      	; 0x2a1a <__fixunssfsi>
    2a12:	68 94       	set
    2a14:	b1 11       	cpse	r27, r1
    2a16:	d9 c0       	rjmp	.+434    	; 0x2bca <__fp_szero>
    2a18:	08 95       	ret

00002a1a <__fixunssfsi>:
    2a1a:	bc d0       	rcall	.+376    	; 0x2b94 <__fp_splitA>
    2a1c:	88 f0       	brcs	.+34     	; 0x2a40 <__fixunssfsi+0x26>
    2a1e:	9f 57       	subi	r25, 0x7F	; 127
    2a20:	90 f0       	brcs	.+36     	; 0x2a46 <__fixunssfsi+0x2c>
    2a22:	b9 2f       	mov	r27, r25
    2a24:	99 27       	eor	r25, r25
    2a26:	b7 51       	subi	r27, 0x17	; 23
    2a28:	a0 f0       	brcs	.+40     	; 0x2a52 <__fixunssfsi+0x38>
    2a2a:	d1 f0       	breq	.+52     	; 0x2a60 <__fixunssfsi+0x46>
    2a2c:	66 0f       	add	r22, r22
    2a2e:	77 1f       	adc	r23, r23
    2a30:	88 1f       	adc	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	1a f0       	brmi	.+6      	; 0x2a3c <__fixunssfsi+0x22>
    2a36:	ba 95       	dec	r27
    2a38:	c9 f7       	brne	.-14     	; 0x2a2c <__fixunssfsi+0x12>
    2a3a:	12 c0       	rjmp	.+36     	; 0x2a60 <__fixunssfsi+0x46>
    2a3c:	b1 30       	cpi	r27, 0x01	; 1
    2a3e:	81 f0       	breq	.+32     	; 0x2a60 <__fixunssfsi+0x46>
    2a40:	c3 d0       	rcall	.+390    	; 0x2bc8 <__fp_zero>
    2a42:	b1 e0       	ldi	r27, 0x01	; 1
    2a44:	08 95       	ret
    2a46:	c0 c0       	rjmp	.+384    	; 0x2bc8 <__fp_zero>
    2a48:	67 2f       	mov	r22, r23
    2a4a:	78 2f       	mov	r23, r24
    2a4c:	88 27       	eor	r24, r24
    2a4e:	b8 5f       	subi	r27, 0xF8	; 248
    2a50:	39 f0       	breq	.+14     	; 0x2a60 <__fixunssfsi+0x46>
    2a52:	b9 3f       	cpi	r27, 0xF9	; 249
    2a54:	cc f3       	brlt	.-14     	; 0x2a48 <__fixunssfsi+0x2e>
    2a56:	86 95       	lsr	r24
    2a58:	77 95       	ror	r23
    2a5a:	67 95       	ror	r22
    2a5c:	b3 95       	inc	r27
    2a5e:	d9 f7       	brne	.-10     	; 0x2a56 <__fixunssfsi+0x3c>
    2a60:	3e f4       	brtc	.+14     	; 0x2a70 <__fixunssfsi+0x56>
    2a62:	90 95       	com	r25
    2a64:	80 95       	com	r24
    2a66:	70 95       	com	r23
    2a68:	61 95       	neg	r22
    2a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a70:	08 95       	ret

00002a72 <__floatunsisf>:
    2a72:	e8 94       	clt
    2a74:	09 c0       	rjmp	.+18     	; 0x2a88 <__floatsisf+0x12>

00002a76 <__floatsisf>:
    2a76:	97 fb       	bst	r25, 7
    2a78:	3e f4       	brtc	.+14     	; 0x2a88 <__floatsisf+0x12>
    2a7a:	90 95       	com	r25
    2a7c:	80 95       	com	r24
    2a7e:	70 95       	com	r23
    2a80:	61 95       	neg	r22
    2a82:	7f 4f       	sbci	r23, 0xFF	; 255
    2a84:	8f 4f       	sbci	r24, 0xFF	; 255
    2a86:	9f 4f       	sbci	r25, 0xFF	; 255
    2a88:	99 23       	and	r25, r25
    2a8a:	a9 f0       	breq	.+42     	; 0x2ab6 <__floatsisf+0x40>
    2a8c:	f9 2f       	mov	r31, r25
    2a8e:	96 e9       	ldi	r25, 0x96	; 150
    2a90:	bb 27       	eor	r27, r27
    2a92:	93 95       	inc	r25
    2a94:	f6 95       	lsr	r31
    2a96:	87 95       	ror	r24
    2a98:	77 95       	ror	r23
    2a9a:	67 95       	ror	r22
    2a9c:	b7 95       	ror	r27
    2a9e:	f1 11       	cpse	r31, r1
    2aa0:	f8 cf       	rjmp	.-16     	; 0x2a92 <__floatsisf+0x1c>
    2aa2:	fa f4       	brpl	.+62     	; 0x2ae2 <__floatsisf+0x6c>
    2aa4:	bb 0f       	add	r27, r27
    2aa6:	11 f4       	brne	.+4      	; 0x2aac <__floatsisf+0x36>
    2aa8:	60 ff       	sbrs	r22, 0
    2aaa:	1b c0       	rjmp	.+54     	; 0x2ae2 <__floatsisf+0x6c>
    2aac:	6f 5f       	subi	r22, 0xFF	; 255
    2aae:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab4:	16 c0       	rjmp	.+44     	; 0x2ae2 <__floatsisf+0x6c>
    2ab6:	88 23       	and	r24, r24
    2ab8:	11 f0       	breq	.+4      	; 0x2abe <__floatsisf+0x48>
    2aba:	96 e9       	ldi	r25, 0x96	; 150
    2abc:	11 c0       	rjmp	.+34     	; 0x2ae0 <__floatsisf+0x6a>
    2abe:	77 23       	and	r23, r23
    2ac0:	21 f0       	breq	.+8      	; 0x2aca <__floatsisf+0x54>
    2ac2:	9e e8       	ldi	r25, 0x8E	; 142
    2ac4:	87 2f       	mov	r24, r23
    2ac6:	76 2f       	mov	r23, r22
    2ac8:	05 c0       	rjmp	.+10     	; 0x2ad4 <__floatsisf+0x5e>
    2aca:	66 23       	and	r22, r22
    2acc:	71 f0       	breq	.+28     	; 0x2aea <__floatsisf+0x74>
    2ace:	96 e8       	ldi	r25, 0x86	; 134
    2ad0:	86 2f       	mov	r24, r22
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	2a f0       	brmi	.+10     	; 0x2ae2 <__floatsisf+0x6c>
    2ad8:	9a 95       	dec	r25
    2ada:	66 0f       	add	r22, r22
    2adc:	77 1f       	adc	r23, r23
    2ade:	88 1f       	adc	r24, r24
    2ae0:	da f7       	brpl	.-10     	; 0x2ad8 <__floatsisf+0x62>
    2ae2:	88 0f       	add	r24, r24
    2ae4:	96 95       	lsr	r25
    2ae6:	87 95       	ror	r24
    2ae8:	97 f9       	bld	r25, 7
    2aea:	08 95       	ret

00002aec <__fp_cmp>:
    2aec:	99 0f       	add	r25, r25
    2aee:	00 08       	sbc	r0, r0
    2af0:	55 0f       	add	r21, r21
    2af2:	aa 0b       	sbc	r26, r26
    2af4:	e0 e8       	ldi	r30, 0x80	; 128
    2af6:	fe ef       	ldi	r31, 0xFE	; 254
    2af8:	16 16       	cp	r1, r22
    2afa:	17 06       	cpc	r1, r23
    2afc:	e8 07       	cpc	r30, r24
    2afe:	f9 07       	cpc	r31, r25
    2b00:	c0 f0       	brcs	.+48     	; 0x2b32 <__fp_cmp+0x46>
    2b02:	12 16       	cp	r1, r18
    2b04:	13 06       	cpc	r1, r19
    2b06:	e4 07       	cpc	r30, r20
    2b08:	f5 07       	cpc	r31, r21
    2b0a:	98 f0       	brcs	.+38     	; 0x2b32 <__fp_cmp+0x46>
    2b0c:	62 1b       	sub	r22, r18
    2b0e:	73 0b       	sbc	r23, r19
    2b10:	84 0b       	sbc	r24, r20
    2b12:	95 0b       	sbc	r25, r21
    2b14:	39 f4       	brne	.+14     	; 0x2b24 <__fp_cmp+0x38>
    2b16:	0a 26       	eor	r0, r26
    2b18:	61 f0       	breq	.+24     	; 0x2b32 <__fp_cmp+0x46>
    2b1a:	23 2b       	or	r18, r19
    2b1c:	24 2b       	or	r18, r20
    2b1e:	25 2b       	or	r18, r21
    2b20:	21 f4       	brne	.+8      	; 0x2b2a <__fp_cmp+0x3e>
    2b22:	08 95       	ret
    2b24:	0a 26       	eor	r0, r26
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <__fp_cmp+0x3e>
    2b28:	a1 40       	sbci	r26, 0x01	; 1
    2b2a:	a6 95       	lsr	r26
    2b2c:	8f ef       	ldi	r24, 0xFF	; 255
    2b2e:	81 1d       	adc	r24, r1
    2b30:	81 1d       	adc	r24, r1
    2b32:	08 95       	ret

00002b34 <__fp_inf>:
    2b34:	97 f9       	bld	r25, 7
    2b36:	9f 67       	ori	r25, 0x7F	; 127
    2b38:	80 e8       	ldi	r24, 0x80	; 128
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	08 95       	ret

00002b40 <__fp_nan>:
    2b40:	9f ef       	ldi	r25, 0xFF	; 255
    2b42:	80 ec       	ldi	r24, 0xC0	; 192
    2b44:	08 95       	ret

00002b46 <__fp_pscA>:
    2b46:	00 24       	eor	r0, r0
    2b48:	0a 94       	dec	r0
    2b4a:	16 16       	cp	r1, r22
    2b4c:	17 06       	cpc	r1, r23
    2b4e:	18 06       	cpc	r1, r24
    2b50:	09 06       	cpc	r0, r25
    2b52:	08 95       	ret

00002b54 <__fp_pscB>:
    2b54:	00 24       	eor	r0, r0
    2b56:	0a 94       	dec	r0
    2b58:	12 16       	cp	r1, r18
    2b5a:	13 06       	cpc	r1, r19
    2b5c:	14 06       	cpc	r1, r20
    2b5e:	05 06       	cpc	r0, r21
    2b60:	08 95       	ret

00002b62 <__fp_round>:
    2b62:	09 2e       	mov	r0, r25
    2b64:	03 94       	inc	r0
    2b66:	00 0c       	add	r0, r0
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <__fp_round+0xc>
    2b6a:	88 23       	and	r24, r24
    2b6c:	52 f0       	brmi	.+20     	; 0x2b82 <__fp_round+0x20>
    2b6e:	bb 0f       	add	r27, r27
    2b70:	40 f4       	brcc	.+16     	; 0x2b82 <__fp_round+0x20>
    2b72:	bf 2b       	or	r27, r31
    2b74:	11 f4       	brne	.+4      	; 0x2b7a <__fp_round+0x18>
    2b76:	60 ff       	sbrs	r22, 0
    2b78:	04 c0       	rjmp	.+8      	; 0x2b82 <__fp_round+0x20>
    2b7a:	6f 5f       	subi	r22, 0xFF	; 255
    2b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	08 95       	ret

00002b84 <__fp_split3>:
    2b84:	57 fd       	sbrc	r21, 7
    2b86:	90 58       	subi	r25, 0x80	; 128
    2b88:	44 0f       	add	r20, r20
    2b8a:	55 1f       	adc	r21, r21
    2b8c:	59 f0       	breq	.+22     	; 0x2ba4 <__fp_splitA+0x10>
    2b8e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b90:	71 f0       	breq	.+28     	; 0x2bae <__fp_splitA+0x1a>
    2b92:	47 95       	ror	r20

00002b94 <__fp_splitA>:
    2b94:	88 0f       	add	r24, r24
    2b96:	97 fb       	bst	r25, 7
    2b98:	99 1f       	adc	r25, r25
    2b9a:	61 f0       	breq	.+24     	; 0x2bb4 <__fp_splitA+0x20>
    2b9c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b9e:	79 f0       	breq	.+30     	; 0x2bbe <__fp_splitA+0x2a>
    2ba0:	87 95       	ror	r24
    2ba2:	08 95       	ret
    2ba4:	12 16       	cp	r1, r18
    2ba6:	13 06       	cpc	r1, r19
    2ba8:	14 06       	cpc	r1, r20
    2baa:	55 1f       	adc	r21, r21
    2bac:	f2 cf       	rjmp	.-28     	; 0x2b92 <__fp_split3+0xe>
    2bae:	46 95       	lsr	r20
    2bb0:	f1 df       	rcall	.-30     	; 0x2b94 <__fp_splitA>
    2bb2:	08 c0       	rjmp	.+16     	; 0x2bc4 <__fp_splitA+0x30>
    2bb4:	16 16       	cp	r1, r22
    2bb6:	17 06       	cpc	r1, r23
    2bb8:	18 06       	cpc	r1, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	f1 cf       	rjmp	.-30     	; 0x2ba0 <__fp_splitA+0xc>
    2bbe:	86 95       	lsr	r24
    2bc0:	71 05       	cpc	r23, r1
    2bc2:	61 05       	cpc	r22, r1
    2bc4:	08 94       	sec
    2bc6:	08 95       	ret

00002bc8 <__fp_zero>:
    2bc8:	e8 94       	clt

00002bca <__fp_szero>:
    2bca:	bb 27       	eor	r27, r27
    2bcc:	66 27       	eor	r22, r22
    2bce:	77 27       	eor	r23, r23
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	97 f9       	bld	r25, 7
    2bd4:	08 95       	ret

00002bd6 <__mulsf3>:
    2bd6:	0b d0       	rcall	.+22     	; 0x2bee <__mulsf3x>
    2bd8:	c4 cf       	rjmp	.-120    	; 0x2b62 <__fp_round>
    2bda:	b5 df       	rcall	.-150    	; 0x2b46 <__fp_pscA>
    2bdc:	28 f0       	brcs	.+10     	; 0x2be8 <__mulsf3+0x12>
    2bde:	ba df       	rcall	.-140    	; 0x2b54 <__fp_pscB>
    2be0:	18 f0       	brcs	.+6      	; 0x2be8 <__mulsf3+0x12>
    2be2:	95 23       	and	r25, r21
    2be4:	09 f0       	breq	.+2      	; 0x2be8 <__mulsf3+0x12>
    2be6:	a6 cf       	rjmp	.-180    	; 0x2b34 <__fp_inf>
    2be8:	ab cf       	rjmp	.-170    	; 0x2b40 <__fp_nan>
    2bea:	11 24       	eor	r1, r1
    2bec:	ee cf       	rjmp	.-36     	; 0x2bca <__fp_szero>

00002bee <__mulsf3x>:
    2bee:	ca df       	rcall	.-108    	; 0x2b84 <__fp_split3>
    2bf0:	a0 f3       	brcs	.-24     	; 0x2bda <__mulsf3+0x4>

00002bf2 <__mulsf3_pse>:
    2bf2:	95 9f       	mul	r25, r21
    2bf4:	d1 f3       	breq	.-12     	; 0x2bea <__mulsf3+0x14>
    2bf6:	95 0f       	add	r25, r21
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	55 1f       	adc	r21, r21
    2bfc:	62 9f       	mul	r22, r18
    2bfe:	f0 01       	movw	r30, r0
    2c00:	72 9f       	mul	r23, r18
    2c02:	bb 27       	eor	r27, r27
    2c04:	f0 0d       	add	r31, r0
    2c06:	b1 1d       	adc	r27, r1
    2c08:	63 9f       	mul	r22, r19
    2c0a:	aa 27       	eor	r26, r26
    2c0c:	f0 0d       	add	r31, r0
    2c0e:	b1 1d       	adc	r27, r1
    2c10:	aa 1f       	adc	r26, r26
    2c12:	64 9f       	mul	r22, r20
    2c14:	66 27       	eor	r22, r22
    2c16:	b0 0d       	add	r27, r0
    2c18:	a1 1d       	adc	r26, r1
    2c1a:	66 1f       	adc	r22, r22
    2c1c:	82 9f       	mul	r24, r18
    2c1e:	22 27       	eor	r18, r18
    2c20:	b0 0d       	add	r27, r0
    2c22:	a1 1d       	adc	r26, r1
    2c24:	62 1f       	adc	r22, r18
    2c26:	73 9f       	mul	r23, r19
    2c28:	b0 0d       	add	r27, r0
    2c2a:	a1 1d       	adc	r26, r1
    2c2c:	62 1f       	adc	r22, r18
    2c2e:	83 9f       	mul	r24, r19
    2c30:	a0 0d       	add	r26, r0
    2c32:	61 1d       	adc	r22, r1
    2c34:	22 1f       	adc	r18, r18
    2c36:	74 9f       	mul	r23, r20
    2c38:	33 27       	eor	r19, r19
    2c3a:	a0 0d       	add	r26, r0
    2c3c:	61 1d       	adc	r22, r1
    2c3e:	23 1f       	adc	r18, r19
    2c40:	84 9f       	mul	r24, r20
    2c42:	60 0d       	add	r22, r0
    2c44:	21 1d       	adc	r18, r1
    2c46:	82 2f       	mov	r24, r18
    2c48:	76 2f       	mov	r23, r22
    2c4a:	6a 2f       	mov	r22, r26
    2c4c:	11 24       	eor	r1, r1
    2c4e:	9f 57       	subi	r25, 0x7F	; 127
    2c50:	50 40       	sbci	r21, 0x00	; 0
    2c52:	8a f0       	brmi	.+34     	; 0x2c76 <__mulsf3_pse+0x84>
    2c54:	e1 f0       	breq	.+56     	; 0x2c8e <__mulsf3_pse+0x9c>
    2c56:	88 23       	and	r24, r24
    2c58:	4a f0       	brmi	.+18     	; 0x2c6c <__mulsf3_pse+0x7a>
    2c5a:	ee 0f       	add	r30, r30
    2c5c:	ff 1f       	adc	r31, r31
    2c5e:	bb 1f       	adc	r27, r27
    2c60:	66 1f       	adc	r22, r22
    2c62:	77 1f       	adc	r23, r23
    2c64:	88 1f       	adc	r24, r24
    2c66:	91 50       	subi	r25, 0x01	; 1
    2c68:	50 40       	sbci	r21, 0x00	; 0
    2c6a:	a9 f7       	brne	.-22     	; 0x2c56 <__mulsf3_pse+0x64>
    2c6c:	9e 3f       	cpi	r25, 0xFE	; 254
    2c6e:	51 05       	cpc	r21, r1
    2c70:	70 f0       	brcs	.+28     	; 0x2c8e <__mulsf3_pse+0x9c>
    2c72:	60 cf       	rjmp	.-320    	; 0x2b34 <__fp_inf>
    2c74:	aa cf       	rjmp	.-172    	; 0x2bca <__fp_szero>
    2c76:	5f 3f       	cpi	r21, 0xFF	; 255
    2c78:	ec f3       	brlt	.-6      	; 0x2c74 <__mulsf3_pse+0x82>
    2c7a:	98 3e       	cpi	r25, 0xE8	; 232
    2c7c:	dc f3       	brlt	.-10     	; 0x2c74 <__mulsf3_pse+0x82>
    2c7e:	86 95       	lsr	r24
    2c80:	77 95       	ror	r23
    2c82:	67 95       	ror	r22
    2c84:	b7 95       	ror	r27
    2c86:	f7 95       	ror	r31
    2c88:	e7 95       	ror	r30
    2c8a:	9f 5f       	subi	r25, 0xFF	; 255
    2c8c:	c1 f7       	brne	.-16     	; 0x2c7e <__mulsf3_pse+0x8c>
    2c8e:	fe 2b       	or	r31, r30
    2c90:	88 0f       	add	r24, r24
    2c92:	91 1d       	adc	r25, r1
    2c94:	96 95       	lsr	r25
    2c96:	87 95       	ror	r24
    2c98:	97 f9       	bld	r25, 7
    2c9a:	08 95       	ret

00002c9c <__udivmodsi4>:
    2c9c:	a1 e2       	ldi	r26, 0x21	; 33
    2c9e:	1a 2e       	mov	r1, r26
    2ca0:	aa 1b       	sub	r26, r26
    2ca2:	bb 1b       	sub	r27, r27
    2ca4:	fd 01       	movw	r30, r26
    2ca6:	0d c0       	rjmp	.+26     	; 0x2cc2 <__udivmodsi4_ep>

00002ca8 <__udivmodsi4_loop>:
    2ca8:	aa 1f       	adc	r26, r26
    2caa:	bb 1f       	adc	r27, r27
    2cac:	ee 1f       	adc	r30, r30
    2cae:	ff 1f       	adc	r31, r31
    2cb0:	a2 17       	cp	r26, r18
    2cb2:	b3 07       	cpc	r27, r19
    2cb4:	e4 07       	cpc	r30, r20
    2cb6:	f5 07       	cpc	r31, r21
    2cb8:	20 f0       	brcs	.+8      	; 0x2cc2 <__udivmodsi4_ep>
    2cba:	a2 1b       	sub	r26, r18
    2cbc:	b3 0b       	sbc	r27, r19
    2cbe:	e4 0b       	sbc	r30, r20
    2cc0:	f5 0b       	sbc	r31, r21

00002cc2 <__udivmodsi4_ep>:
    2cc2:	66 1f       	adc	r22, r22
    2cc4:	77 1f       	adc	r23, r23
    2cc6:	88 1f       	adc	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	1a 94       	dec	r1
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <__udivmodsi4_loop>
    2cce:	60 95       	com	r22
    2cd0:	70 95       	com	r23
    2cd2:	80 95       	com	r24
    2cd4:	90 95       	com	r25
    2cd6:	9b 01       	movw	r18, r22
    2cd8:	ac 01       	movw	r20, r24
    2cda:	bd 01       	movw	r22, r26
    2cdc:	cf 01       	movw	r24, r30
    2cde:	08 95       	ret

00002ce0 <__divmodsi4>:
    2ce0:	05 2e       	mov	r0, r21
    2ce2:	97 fb       	bst	r25, 7
    2ce4:	16 f4       	brtc	.+4      	; 0x2cea <__divmodsi4+0xa>
    2ce6:	00 94       	com	r0
    2ce8:	0f d0       	rcall	.+30     	; 0x2d08 <__negsi2>
    2cea:	57 fd       	sbrc	r21, 7
    2cec:	05 d0       	rcall	.+10     	; 0x2cf8 <__divmodsi4_neg2>
    2cee:	d6 df       	rcall	.-84     	; 0x2c9c <__udivmodsi4>
    2cf0:	07 fc       	sbrc	r0, 7
    2cf2:	02 d0       	rcall	.+4      	; 0x2cf8 <__divmodsi4_neg2>
    2cf4:	46 f4       	brtc	.+16     	; 0x2d06 <__divmodsi4_exit>
    2cf6:	08 c0       	rjmp	.+16     	; 0x2d08 <__negsi2>

00002cf8 <__divmodsi4_neg2>:
    2cf8:	50 95       	com	r21
    2cfa:	40 95       	com	r20
    2cfc:	30 95       	com	r19
    2cfe:	21 95       	neg	r18
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	4f 4f       	sbci	r20, 0xFF	; 255
    2d04:	5f 4f       	sbci	r21, 0xFF	; 255

00002d06 <__divmodsi4_exit>:
    2d06:	08 95       	ret

00002d08 <__negsi2>:
    2d08:	90 95       	com	r25
    2d0a:	80 95       	com	r24
    2d0c:	70 95       	com	r23
    2d0e:	61 95       	neg	r22
    2d10:	7f 4f       	sbci	r23, 0xFF	; 255
    2d12:	8f 4f       	sbci	r24, 0xFF	; 255
    2d14:	9f 4f       	sbci	r25, 0xFF	; 255
    2d16:	08 95       	ret

00002d18 <__tablejump2__>:
    2d18:	ee 0f       	add	r30, r30
    2d1a:	ff 1f       	adc	r31, r31
    2d1c:	88 1f       	adc	r24, r24
    2d1e:	8b bf       	out	0x3b, r24	; 59
    2d20:	07 90       	elpm	r0, Z+
    2d22:	f6 91       	elpm	r31, Z
    2d24:	e0 2d       	mov	r30, r0
    2d26:	19 94       	eijmp

00002d28 <isspace>:
    2d28:	91 11       	cpse	r25, r1
    2d2a:	02 c1       	rjmp	.+516    	; 0x2f30 <__ctype_isfalse>
    2d2c:	80 32       	cpi	r24, 0x20	; 32
    2d2e:	19 f0       	breq	.+6      	; 0x2d36 <isspace+0xe>
    2d30:	89 50       	subi	r24, 0x09	; 9
    2d32:	85 50       	subi	r24, 0x05	; 5
    2d34:	d0 f7       	brcc	.-12     	; 0x2d2a <isspace+0x2>
    2d36:	08 95       	ret

00002d38 <strchr_P>:
    2d38:	fc 01       	movw	r30, r24
    2d3a:	05 90       	lpm	r0, Z+
    2d3c:	06 16       	cp	r0, r22
    2d3e:	21 f0       	breq	.+8      	; 0x2d48 <strchr_P+0x10>
    2d40:	00 20       	and	r0, r0
    2d42:	d9 f7       	brne	.-10     	; 0x2d3a <strchr_P+0x2>
    2d44:	c0 01       	movw	r24, r0
    2d46:	08 95       	ret
    2d48:	31 97       	sbiw	r30, 0x01	; 1
    2d4a:	cf 01       	movw	r24, r30
    2d4c:	08 95       	ret

00002d4e <fgetc>:
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	ec 01       	movw	r28, r24
    2d54:	2b 81       	ldd	r18, Y+3	; 0x03
    2d56:	20 ff       	sbrs	r18, 0
    2d58:	33 c0       	rjmp	.+102    	; 0x2dc0 <fgetc+0x72>
    2d5a:	26 ff       	sbrs	r18, 6
    2d5c:	0a c0       	rjmp	.+20     	; 0x2d72 <fgetc+0x24>
    2d5e:	2f 7b       	andi	r18, 0xBF	; 191
    2d60:	2b 83       	std	Y+3, r18	; 0x03
    2d62:	8e 81       	ldd	r24, Y+6	; 0x06
    2d64:	9f 81       	ldd	r25, Y+7	; 0x07
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	9f 83       	std	Y+7, r25	; 0x07
    2d6a:	8e 83       	std	Y+6, r24	; 0x06
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	29 c0       	rjmp	.+82     	; 0x2dc4 <fgetc+0x76>
    2d72:	22 ff       	sbrs	r18, 2
    2d74:	0f c0       	rjmp	.+30     	; 0x2d94 <fgetc+0x46>
    2d76:	e8 81       	ld	r30, Y
    2d78:	f9 81       	ldd	r31, Y+1	; 0x01
    2d7a:	80 81       	ld	r24, Z
    2d7c:	08 2e       	mov	r0, r24
    2d7e:	00 0c       	add	r0, r0
    2d80:	99 0b       	sbc	r25, r25
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	19 f4       	brne	.+6      	; 0x2d8c <fgetc+0x3e>
    2d86:	20 62       	ori	r18, 0x20	; 32
    2d88:	2b 83       	std	Y+3, r18	; 0x03
    2d8a:	1a c0       	rjmp	.+52     	; 0x2dc0 <fgetc+0x72>
    2d8c:	31 96       	adiw	r30, 0x01	; 1
    2d8e:	f9 83       	std	Y+1, r31	; 0x01
    2d90:	e8 83       	st	Y, r30
    2d92:	0e c0       	rjmp	.+28     	; 0x2db0 <fgetc+0x62>
    2d94:	ea 85       	ldd	r30, Y+10	; 0x0a
    2d96:	fb 85       	ldd	r31, Y+11	; 0x0b
    2d98:	19 95       	eicall
    2d9a:	97 ff       	sbrs	r25, 7
    2d9c:	09 c0       	rjmp	.+18     	; 0x2db0 <fgetc+0x62>
    2d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	11 f0       	breq	.+4      	; 0x2da8 <fgetc+0x5a>
    2da4:	80 e2       	ldi	r24, 0x20	; 32
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <fgetc+0x5c>
    2da8:	80 e1       	ldi	r24, 0x10	; 16
    2daa:	82 2b       	or	r24, r18
    2dac:	8b 83       	std	Y+3, r24	; 0x03
    2dae:	08 c0       	rjmp	.+16     	; 0x2dc0 <fgetc+0x72>
    2db0:	2e 81       	ldd	r18, Y+6	; 0x06
    2db2:	3f 81       	ldd	r19, Y+7	; 0x07
    2db4:	2f 5f       	subi	r18, 0xFF	; 255
    2db6:	3f 4f       	sbci	r19, 0xFF	; 255
    2db8:	3f 83       	std	Y+7, r19	; 0x07
    2dba:	2e 83       	std	Y+6, r18	; 0x06
    2dbc:	99 27       	eor	r25, r25
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <fgetc+0x76>
    2dc0:	8f ef       	ldi	r24, 0xFF	; 255
    2dc2:	9f ef       	ldi	r25, 0xFF	; 255
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	08 95       	ret

00002dca <fputc>:
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	fb 01       	movw	r30, r22
    2dd4:	23 81       	ldd	r18, Z+3	; 0x03
    2dd6:	21 fd       	sbrc	r18, 1
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <fputc+0x16>
    2dda:	8f ef       	ldi	r24, 0xFF	; 255
    2ddc:	9f ef       	ldi	r25, 0xFF	; 255
    2dde:	2c c0       	rjmp	.+88     	; 0x2e38 <fputc+0x6e>
    2de0:	22 ff       	sbrs	r18, 2
    2de2:	16 c0       	rjmp	.+44     	; 0x2e10 <fputc+0x46>
    2de4:	46 81       	ldd	r20, Z+6	; 0x06
    2de6:	57 81       	ldd	r21, Z+7	; 0x07
    2de8:	24 81       	ldd	r18, Z+4	; 0x04
    2dea:	35 81       	ldd	r19, Z+5	; 0x05
    2dec:	42 17       	cp	r20, r18
    2dee:	53 07       	cpc	r21, r19
    2df0:	44 f4       	brge	.+16     	; 0x2e02 <fputc+0x38>
    2df2:	a0 81       	ld	r26, Z
    2df4:	b1 81       	ldd	r27, Z+1	; 0x01
    2df6:	9d 01       	movw	r18, r26
    2df8:	2f 5f       	subi	r18, 0xFF	; 255
    2dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfc:	31 83       	std	Z+1, r19	; 0x01
    2dfe:	20 83       	st	Z, r18
    2e00:	8c 93       	st	X, r24
    2e02:	26 81       	ldd	r18, Z+6	; 0x06
    2e04:	37 81       	ldd	r19, Z+7	; 0x07
    2e06:	2f 5f       	subi	r18, 0xFF	; 255
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	37 83       	std	Z+7, r19	; 0x07
    2e0c:	26 83       	std	Z+6, r18	; 0x06
    2e0e:	14 c0       	rjmp	.+40     	; 0x2e38 <fputc+0x6e>
    2e10:	8b 01       	movw	r16, r22
    2e12:	ec 01       	movw	r28, r24
    2e14:	fb 01       	movw	r30, r22
    2e16:	00 84       	ldd	r0, Z+8	; 0x08
    2e18:	f1 85       	ldd	r31, Z+9	; 0x09
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	19 95       	eicall
    2e1e:	89 2b       	or	r24, r25
    2e20:	e1 f6       	brne	.-72     	; 0x2dda <fputc+0x10>
    2e22:	d8 01       	movw	r26, r16
    2e24:	16 96       	adiw	r26, 0x06	; 6
    2e26:	8d 91       	ld	r24, X+
    2e28:	9c 91       	ld	r25, X
    2e2a:	17 97       	sbiw	r26, 0x07	; 7
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	17 96       	adiw	r26, 0x07	; 7
    2e30:	9c 93       	st	X, r25
    2e32:	8e 93       	st	-X, r24
    2e34:	16 97       	sbiw	r26, 0x06	; 6
    2e36:	ce 01       	movw	r24, r28
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	08 95       	ret

00002e42 <ungetc>:
    2e42:	fb 01       	movw	r30, r22
    2e44:	23 81       	ldd	r18, Z+3	; 0x03
    2e46:	20 ff       	sbrs	r18, 0
    2e48:	12 c0       	rjmp	.+36     	; 0x2e6e <ungetc+0x2c>
    2e4a:	26 fd       	sbrc	r18, 6
    2e4c:	10 c0       	rjmp	.+32     	; 0x2e6e <ungetc+0x2c>
    2e4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	93 07       	cpc	r25, r19
    2e54:	61 f0       	breq	.+24     	; 0x2e6e <ungetc+0x2c>
    2e56:	82 83       	std	Z+2, r24	; 0x02
    2e58:	2f 7d       	andi	r18, 0xDF	; 223
    2e5a:	20 64       	ori	r18, 0x40	; 64
    2e5c:	23 83       	std	Z+3, r18	; 0x03
    2e5e:	26 81       	ldd	r18, Z+6	; 0x06
    2e60:	37 81       	ldd	r19, Z+7	; 0x07
    2e62:	21 50       	subi	r18, 0x01	; 1
    2e64:	31 09       	sbc	r19, r1
    2e66:	37 83       	std	Z+7, r19	; 0x07
    2e68:	26 83       	std	Z+6, r18	; 0x06
    2e6a:	99 27       	eor	r25, r25
    2e6c:	08 95       	ret
    2e6e:	8f ef       	ldi	r24, 0xFF	; 255
    2e70:	9f ef       	ldi	r25, 0xFF	; 255
    2e72:	08 95       	ret

00002e74 <__ultoa_invert>:
    2e74:	fa 01       	movw	r30, r20
    2e76:	aa 27       	eor	r26, r26
    2e78:	28 30       	cpi	r18, 0x08	; 8
    2e7a:	51 f1       	breq	.+84     	; 0x2ed0 <__ultoa_invert+0x5c>
    2e7c:	20 31       	cpi	r18, 0x10	; 16
    2e7e:	81 f1       	breq	.+96     	; 0x2ee0 <__ultoa_invert+0x6c>
    2e80:	e8 94       	clt
    2e82:	6f 93       	push	r22
    2e84:	6e 7f       	andi	r22, 0xFE	; 254
    2e86:	6e 5f       	subi	r22, 0xFE	; 254
    2e88:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8e:	af 4f       	sbci	r26, 0xFF	; 255
    2e90:	b1 e0       	ldi	r27, 0x01	; 1
    2e92:	3e d0       	rcall	.+124    	; 0x2f10 <__ultoa_invert+0x9c>
    2e94:	b4 e0       	ldi	r27, 0x04	; 4
    2e96:	3c d0       	rcall	.+120    	; 0x2f10 <__ultoa_invert+0x9c>
    2e98:	67 0f       	add	r22, r23
    2e9a:	78 1f       	adc	r23, r24
    2e9c:	89 1f       	adc	r24, r25
    2e9e:	9a 1f       	adc	r25, r26
    2ea0:	a1 1d       	adc	r26, r1
    2ea2:	68 0f       	add	r22, r24
    2ea4:	79 1f       	adc	r23, r25
    2ea6:	8a 1f       	adc	r24, r26
    2ea8:	91 1d       	adc	r25, r1
    2eaa:	a1 1d       	adc	r26, r1
    2eac:	6a 0f       	add	r22, r26
    2eae:	71 1d       	adc	r23, r1
    2eb0:	81 1d       	adc	r24, r1
    2eb2:	91 1d       	adc	r25, r1
    2eb4:	a1 1d       	adc	r26, r1
    2eb6:	20 d0       	rcall	.+64     	; 0x2ef8 <__ultoa_invert+0x84>
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <__ultoa_invert+0x48>
    2eba:	68 94       	set
    2ebc:	3f 91       	pop	r19
    2ebe:	2a e0       	ldi	r18, 0x0A	; 10
    2ec0:	26 9f       	mul	r18, r22
    2ec2:	11 24       	eor	r1, r1
    2ec4:	30 19       	sub	r19, r0
    2ec6:	30 5d       	subi	r19, 0xD0	; 208
    2ec8:	31 93       	st	Z+, r19
    2eca:	de f6       	brtc	.-74     	; 0x2e82 <__ultoa_invert+0xe>
    2ecc:	cf 01       	movw	r24, r30
    2ece:	08 95       	ret
    2ed0:	46 2f       	mov	r20, r22
    2ed2:	47 70       	andi	r20, 0x07	; 7
    2ed4:	40 5d       	subi	r20, 0xD0	; 208
    2ed6:	41 93       	st	Z+, r20
    2ed8:	b3 e0       	ldi	r27, 0x03	; 3
    2eda:	0f d0       	rcall	.+30     	; 0x2efa <__ultoa_invert+0x86>
    2edc:	c9 f7       	brne	.-14     	; 0x2ed0 <__ultoa_invert+0x5c>
    2ede:	f6 cf       	rjmp	.-20     	; 0x2ecc <__ultoa_invert+0x58>
    2ee0:	46 2f       	mov	r20, r22
    2ee2:	4f 70       	andi	r20, 0x0F	; 15
    2ee4:	40 5d       	subi	r20, 0xD0	; 208
    2ee6:	4a 33       	cpi	r20, 0x3A	; 58
    2ee8:	18 f0       	brcs	.+6      	; 0x2ef0 <__ultoa_invert+0x7c>
    2eea:	49 5d       	subi	r20, 0xD9	; 217
    2eec:	31 fd       	sbrc	r19, 1
    2eee:	40 52       	subi	r20, 0x20	; 32
    2ef0:	41 93       	st	Z+, r20
    2ef2:	02 d0       	rcall	.+4      	; 0x2ef8 <__ultoa_invert+0x84>
    2ef4:	a9 f7       	brne	.-22     	; 0x2ee0 <__ultoa_invert+0x6c>
    2ef6:	ea cf       	rjmp	.-44     	; 0x2ecc <__ultoa_invert+0x58>
    2ef8:	b4 e0       	ldi	r27, 0x04	; 4
    2efa:	a6 95       	lsr	r26
    2efc:	97 95       	ror	r25
    2efe:	87 95       	ror	r24
    2f00:	77 95       	ror	r23
    2f02:	67 95       	ror	r22
    2f04:	ba 95       	dec	r27
    2f06:	c9 f7       	brne	.-14     	; 0x2efa <__ultoa_invert+0x86>
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	61 05       	cpc	r22, r1
    2f0c:	71 05       	cpc	r23, r1
    2f0e:	08 95       	ret
    2f10:	9b 01       	movw	r18, r22
    2f12:	ac 01       	movw	r20, r24
    2f14:	0a 2e       	mov	r0, r26
    2f16:	06 94       	lsr	r0
    2f18:	57 95       	ror	r21
    2f1a:	47 95       	ror	r20
    2f1c:	37 95       	ror	r19
    2f1e:	27 95       	ror	r18
    2f20:	ba 95       	dec	r27
    2f22:	c9 f7       	brne	.-14     	; 0x2f16 <__ultoa_invert+0xa2>
    2f24:	62 0f       	add	r22, r18
    2f26:	73 1f       	adc	r23, r19
    2f28:	84 1f       	adc	r24, r20
    2f2a:	95 1f       	adc	r25, r21
    2f2c:	a0 1d       	adc	r26, r0
    2f2e:	08 95       	ret

00002f30 <__ctype_isfalse>:
    2f30:	99 27       	eor	r25, r25
    2f32:	88 27       	eor	r24, r24

00002f34 <__ctype_istrue>:
    2f34:	08 95       	ret

00002f36 <_exit>:
    2f36:	f8 94       	cli

00002f38 <__stop_program>:
    2f38:	ff cf       	rjmp	.-2      	; 0x2f38 <__stop_program>

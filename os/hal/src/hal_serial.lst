   1               		.file	"hal_serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text._readt,"ax",@progbits
  13               	_readt:
  14               	.LFB150:
  15               		.file 1 "../../../os/hal/src/hal_serial.c"
   1:../../../os/hal/src/hal_serial.c **** /*
   2:../../../os/hal/src/hal_serial.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/src/hal_serial.c **** 
   4:../../../os/hal/src/hal_serial.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_serial.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_serial.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_serial.c **** 
   8:../../../os/hal/src/hal_serial.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_serial.c **** 
  10:../../../os/hal/src/hal_serial.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_serial.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_serial.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_serial.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_serial.c ****     limitations under the License.
  15:../../../os/hal/src/hal_serial.c **** */
  16:../../../os/hal/src/hal_serial.c **** 
  17:../../../os/hal/src/hal_serial.c **** /**
  18:../../../os/hal/src/hal_serial.c ****  * @file    hal_serial.c
  19:../../../os/hal/src/hal_serial.c ****  * @brief   Serial Driver code.
  20:../../../os/hal/src/hal_serial.c ****  *
  21:../../../os/hal/src/hal_serial.c ****  * @addtogroup SERIAL
  22:../../../os/hal/src/hal_serial.c ****  * @{
  23:../../../os/hal/src/hal_serial.c ****  */
  24:../../../os/hal/src/hal_serial.c **** 
  25:../../../os/hal/src/hal_serial.c **** #include "hal.h"
  26:../../../os/hal/src/hal_serial.c **** 
  27:../../../os/hal/src/hal_serial.c **** #if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  28:../../../os/hal/src/hal_serial.c **** 
  29:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  30:../../../os/hal/src/hal_serial.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  32:../../../os/hal/src/hal_serial.c **** 
  33:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  34:../../../os/hal/src/hal_serial.c **** /* Driver exported variables.                                                */
  35:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  36:../../../os/hal/src/hal_serial.c **** 
  37:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  38:../../../os/hal/src/hal_serial.c **** /* Driver local variables and types.                                         */
  39:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  40:../../../os/hal/src/hal_serial.c **** 
  41:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  42:../../../os/hal/src/hal_serial.c **** /* Driver local functions.                                                   */
  43:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_serial.c **** 
  45:../../../os/hal/src/hal_serial.c **** /*
  46:../../../os/hal/src/hal_serial.c ****  * Interface implementation, the following functions just invoke the equivalent
  47:../../../os/hal/src/hal_serial.c ****  * queue-level function or macro.
  48:../../../os/hal/src/hal_serial.c ****  */
  49:../../../os/hal/src/hal_serial.c **** 
  50:../../../os/hal/src/hal_serial.c **** static size_t _write(void *ip, const uint8_t *bp, size_t n) {
  51:../../../os/hal/src/hal_serial.c **** 
  52:../../../os/hal/src/hal_serial.c ****   return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  53:../../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  54:../../../os/hal/src/hal_serial.c **** }
  55:../../../os/hal/src/hal_serial.c **** 
  56:../../../os/hal/src/hal_serial.c **** static size_t _read(void *ip, uint8_t *bp, size_t n) {
  57:../../../os/hal/src/hal_serial.c **** 
  58:../../../os/hal/src/hal_serial.c ****   return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  59:../../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  60:../../../os/hal/src/hal_serial.c **** }
  61:../../../os/hal/src/hal_serial.c **** 
  62:../../../os/hal/src/hal_serial.c **** static msg_t _put(void *ip, uint8_t b) {
  63:../../../os/hal/src/hal_serial.c **** 
  64:../../../os/hal/src/hal_serial.c ****   return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  65:../../../os/hal/src/hal_serial.c **** }
  66:../../../os/hal/src/hal_serial.c **** 
  67:../../../os/hal/src/hal_serial.c **** static msg_t _get(void *ip) {
  68:../../../os/hal/src/hal_serial.c **** 
  69:../../../os/hal/src/hal_serial.c ****   return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  70:../../../os/hal/src/hal_serial.c **** }
  71:../../../os/hal/src/hal_serial.c **** 
  72:../../../os/hal/src/hal_serial.c **** static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
  73:../../../os/hal/src/hal_serial.c **** 
  74:../../../os/hal/src/hal_serial.c ****   return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  75:../../../os/hal/src/hal_serial.c **** }
  76:../../../os/hal/src/hal_serial.c **** 
  77:../../../os/hal/src/hal_serial.c **** static msg_t _gett(void *ip, systime_t timeout) {
  78:../../../os/hal/src/hal_serial.c **** 
  79:../../../os/hal/src/hal_serial.c ****   return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  80:../../../os/hal/src/hal_serial.c **** }
  81:../../../os/hal/src/hal_serial.c **** 
  82:../../../os/hal/src/hal_serial.c **** static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
  83:../../../os/hal/src/hal_serial.c **** 
  84:../../../os/hal/src/hal_serial.c ****   return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  85:../../../os/hal/src/hal_serial.c **** }
  86:../../../os/hal/src/hal_serial.c **** 
  87:../../../os/hal/src/hal_serial.c **** static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
  16               		.loc 1 87 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  88:../../../os/hal/src/hal_serial.c **** 
  89:../../../os/hal/src/hal_serial.c ****   return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  23               		.loc 1 89 0
  24 0000 0596      		adiw r24,5
  25               	.LVL1:
  26 0002 0C94 0000 		jmp iqReadTimeout
  27               	.LVL2:
  28               		.cfi_endproc
  29               	.LFE150:
  31               		.section	.text._read,"ax",@progbits
  33               	_read:
  34               	.LFB144:
  56:../../../os/hal/src/hal_serial.c **** 
  35               		.loc 1 56 0
  36               		.cfi_startproc
  37               	.LVL3:
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  58:../../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  42               		.loc 1 58 0
  43 0000 2FEF      		ldi r18,lo8(-1)
  44 0002 3FEF      		ldi r19,lo8(-1)
  45 0004 0596      		adiw r24,5
  46               	.LVL4:
  47 0006 0C94 0000 		jmp iqReadTimeout
  48               	.LVL5:
  49               		.cfi_endproc
  50               	.LFE144:
  52               		.section	.text._writet,"ax",@progbits
  54               	_writet:
  55               	.LFB149:
  82:../../../os/hal/src/hal_serial.c **** 
  56               		.loc 1 82 0
  57               		.cfi_startproc
  58               	.LVL6:
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  84:../../../os/hal/src/hal_serial.c **** }
  63               		.loc 1 84 0
  64 0000 4796      		adiw r24,23
  65               	.LVL7:
  66 0002 0C94 0000 		jmp oqWriteTimeout
  67               	.LVL8:
  68               		.cfi_endproc
  69               	.LFE149:
  71               		.section	.text._write,"ax",@progbits
  73               	_write:
  74               	.LFB143:
  50:../../../os/hal/src/hal_serial.c **** 
  75               		.loc 1 50 0
  76               		.cfi_startproc
  77               	.LVL9:
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  52:../../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  82               		.loc 1 52 0
  83 0000 2FEF      		ldi r18,lo8(-1)
  84 0002 3FEF      		ldi r19,lo8(-1)
  85 0004 4796      		adiw r24,23
  86               	.LVL10:
  87 0006 0C94 0000 		jmp oqWriteTimeout
  88               	.LVL11:
  89               		.cfi_endproc
  90               	.LFE143:
  92               		.section	.text._gett,"ax",@progbits
  94               	_gett:
  95               	.LFB148:
  77:../../../os/hal/src/hal_serial.c **** 
  96               		.loc 1 77 0
  97               		.cfi_startproc
  98               	.LVL12:
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
  79:../../../os/hal/src/hal_serial.c **** }
 103               		.loc 1 79 0
 104 0000 0596      		adiw r24,5
 105               	.LVL13:
 106 0002 0C94 0000 		jmp iqGetTimeout
 107               	.LVL14:
 108               		.cfi_endproc
 109               	.LFE148:
 111               		.section	.text._get,"ax",@progbits
 113               	_get:
 114               	.LFB146:
  67:../../../os/hal/src/hal_serial.c **** 
 115               		.loc 1 67 0
 116               		.cfi_startproc
 117               	.LVL15:
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 0 */
 121               	.L__stack_usage = 0
  69:../../../os/hal/src/hal_serial.c **** }
 122               		.loc 1 69 0
 123 0000 6FEF      		ldi r22,lo8(-1)
 124 0002 7FEF      		ldi r23,lo8(-1)
 125 0004 0596      		adiw r24,5
 126               	.LVL16:
 127 0006 0C94 0000 		jmp iqGetTimeout
 128               	.LVL17:
 129               		.cfi_endproc
 130               	.LFE146:
 132               		.section	.text._putt,"ax",@progbits
 134               	_putt:
 135               	.LFB147:
  72:../../../os/hal/src/hal_serial.c **** 
 136               		.loc 1 72 0
 137               		.cfi_startproc
 138               	.LVL18:
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
  74:../../../os/hal/src/hal_serial.c **** }
 143               		.loc 1 74 0
 144 0000 4796      		adiw r24,23
 145               	.LVL19:
 146 0002 0C94 0000 		jmp oqPutTimeout
 147               	.LVL20:
 148               		.cfi_endproc
 149               	.LFE147:
 151               		.section	.text._put,"ax",@progbits
 153               	_put:
 154               	.LFB145:
  62:../../../os/hal/src/hal_serial.c **** 
 155               		.loc 1 62 0
 156               		.cfi_startproc
 157               	.LVL21:
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
  64:../../../os/hal/src/hal_serial.c **** }
 162               		.loc 1 64 0
 163 0000 4FEF      		ldi r20,lo8(-1)
 164 0002 5FEF      		ldi r21,lo8(-1)
 165 0004 4796      		adiw r24,23
 166               	.LVL22:
 167 0006 0C94 0000 		jmp oqPutTimeout
 168               	.LVL23:
 169               		.cfi_endproc
 170               	.LFE145:
 172               		.section	.text.sdInit,"ax",@progbits
 173               	.global	sdInit
 175               	sdInit:
 176               	.LFB151:
  90:../../../os/hal/src/hal_serial.c **** }
  91:../../../os/hal/src/hal_serial.c **** 
  92:../../../os/hal/src/hal_serial.c **** static const struct SerialDriverVMT vmt = {
  93:../../../os/hal/src/hal_serial.c ****   _write, _read, _put, _get,
  94:../../../os/hal/src/hal_serial.c ****   _putt, _gett, _writet, _readt
  95:../../../os/hal/src/hal_serial.c **** };
  96:../../../os/hal/src/hal_serial.c **** 
  97:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  98:../../../os/hal/src/hal_serial.c **** /* Driver exported functions.                                                */
  99:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
 100:../../../os/hal/src/hal_serial.c **** 
 101:../../../os/hal/src/hal_serial.c **** /**
 102:../../../os/hal/src/hal_serial.c ****  * @brief   Serial Driver initialization.
 103:../../../os/hal/src/hal_serial.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
 104:../../../os/hal/src/hal_serial.c ****  *          no need to explicitly initialize the driver.
 105:../../../os/hal/src/hal_serial.c ****  *
 106:../../../os/hal/src/hal_serial.c ****  * @init
 107:../../../os/hal/src/hal_serial.c ****  */
 108:../../../os/hal/src/hal_serial.c **** void sdInit(void) {
 177               		.loc 1 108 0
 178               		.cfi_startproc
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 0 */
 182               	.L__stack_usage = 0
 109:../../../os/hal/src/hal_serial.c **** 
 110:../../../os/hal/src/hal_serial.c ****   sd_lld_init();
 183               		.loc 1 110 0
 184 0000 0C94 0000 		jmp sd_lld_init
 185               	.LVL24:
 186               		.cfi_endproc
 187               	.LFE151:
 189               		.section	.text.sdObjectInit,"ax",@progbits
 190               	.global	sdObjectInit
 192               	sdObjectInit:
 193               	.LFB152:
 111:../../../os/hal/src/hal_serial.c **** }
 112:../../../os/hal/src/hal_serial.c **** 
 113:../../../os/hal/src/hal_serial.c **** /**
 114:../../../os/hal/src/hal_serial.c ****  * @brief   Initializes a generic full duplex driver object.
 115:../../../os/hal/src/hal_serial.c ****  * @details The HW dependent part of the initialization has to be performed
 116:../../../os/hal/src/hal_serial.c ****  *          outside, usually in the hardware initialization code.
 117:../../../os/hal/src/hal_serial.c ****  *
 118:../../../os/hal/src/hal_serial.c ****  * @param[out] sdp      pointer to a @p SerialDriver structure
 119:../../../os/hal/src/hal_serial.c ****  * @param[in] inotify   pointer to a callback function that is invoked when
 120:../../../os/hal/src/hal_serial.c ****  *                      some data is read from the Queue. The value can be
 121:../../../os/hal/src/hal_serial.c ****  *                      @p NULL.
 122:../../../os/hal/src/hal_serial.c ****  * @param[in] onotify   pointer to a callback function that is invoked when
 123:../../../os/hal/src/hal_serial.c ****  *                      some data is written in the Queue. The value can be
 124:../../../os/hal/src/hal_serial.c ****  *                      @p NULL.
 125:../../../os/hal/src/hal_serial.c ****  *
 126:../../../os/hal/src/hal_serial.c ****  * @init
 127:../../../os/hal/src/hal_serial.c ****  */
 128:../../../os/hal/src/hal_serial.c **** #if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
 129:../../../os/hal/src/hal_serial.c ****     (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
 130:../../../os/hal/src/hal_serial.c ****     defined(__DOXYGEN__)
 131:../../../os/hal/src/hal_serial.c **** void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 194               		.loc 1 131 0
 195               		.cfi_startproc
 196               	.LVL25:
 197 0000 EF92      		push r14
 198               	.LCFI0:
 199               		.cfi_def_cfa_offset 4
 200               		.cfi_offset 14, -3
 201 0002 FF92      		push r15
 202               	.LCFI1:
 203               		.cfi_def_cfa_offset 5
 204               		.cfi_offset 15, -4
 205 0004 0F93      		push r16
 206               	.LCFI2:
 207               		.cfi_def_cfa_offset 6
 208               		.cfi_offset 16, -5
 209 0006 1F93      		push r17
 210               	.LCFI3:
 211               		.cfi_def_cfa_offset 7
 212               		.cfi_offset 17, -6
 213 0008 CF93      		push r28
 214               	.LCFI4:
 215               		.cfi_def_cfa_offset 8
 216               		.cfi_offset 28, -7
 217 000a DF93      		push r29
 218               	.LCFI5:
 219               		.cfi_def_cfa_offset 9
 220               		.cfi_offset 29, -8
 221               	/* prologue: function */
 222               	/* frame size = 0 */
 223               	/* stack size = 6 */
 224               	.L__stack_usage = 6
 225 000c EC01      		movw r28,r24
 226 000e 9B01      		movw r18,r22
 227 0010 7A01      		movw r14,r20
 132:../../../os/hal/src/hal_serial.c **** 
 133:../../../os/hal/src/hal_serial.c ****   sdp->vmt = &vmt;
 228               		.loc 1 133 0
 229 0012 FC01      		movw r30,r24
 230 0014 80E0      		ldi r24,lo8(vmt)
 231 0016 90E0      		ldi r25,hi8(vmt)
 232               	.LVL26:
 233 0018 8193      		st Z+,r24
 234 001a 9193      		st Z+,r25
 235               	.LVL27:
 236               	.LBB72:
 237               	.LBB73:
 238               	.LBB74:
 239               		.file 2 "../../../os/rt/include/chevents.h"
   1:../../../os/rt/include/chevents.h **** /*
   2:../../../os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chevents.h **** 
   4:../../../os/rt/include/chevents.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chevents.h **** 
   6:../../../os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chevents.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chevents.h ****     (at your option) any later version.
  10:../../../os/rt/include/chevents.h **** 
  11:../../../os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chevents.h **** 
  16:../../../os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chevents.h **** */
  19:../../../os/rt/include/chevents.h **** /*
  20:../../../os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../../os/rt/include/chevents.h ****  */
  22:../../../os/rt/include/chevents.h **** 
  23:../../../os/rt/include/chevents.h **** /**
  24:../../../os/rt/include/chevents.h ****  * @file    chevents.h
  25:../../../os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:../../../os/rt/include/chevents.h ****  *
  27:../../../os/rt/include/chevents.h ****  * @addtogroup events
  28:../../../os/rt/include/chevents.h ****  * @{
  29:../../../os/rt/include/chevents.h ****  */
  30:../../../os/rt/include/chevents.h **** 
  31:../../../os/rt/include/chevents.h **** #ifndef CHEVENTS_H
  32:../../../os/rt/include/chevents.h **** #define CHEVENTS_H
  33:../../../os/rt/include/chevents.h **** 
  34:../../../os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:../../../os/rt/include/chevents.h **** 
  36:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  37:../../../os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  39:../../../os/rt/include/chevents.h **** 
  40:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  41:../../../os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  43:../../../os/rt/include/chevents.h **** 
  44:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  45:../../../os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  47:../../../os/rt/include/chevents.h **** 
  48:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  49:../../../os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  51:../../../os/rt/include/chevents.h **** 
  52:../../../os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  53:../../../os/rt/include/chevents.h **** 
  54:../../../os/rt/include/chevents.h **** /**
  55:../../../os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  56:../../../os/rt/include/chevents.h ****  */
  57:../../../os/rt/include/chevents.h **** struct event_listener {
  58:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief Next Event Listener
  59:../../../os/rt/include/chevents.h ****                                                     registered on the event
  60:../../../os/rt/include/chevents.h ****                                                     source.                 */
  61:../../../os/rt/include/chevents.h ****   thread_t              *listener;      /**< @brief Thread interested in the
  62:../../../os/rt/include/chevents.h ****                                                     event source.           */
  63:../../../os/rt/include/chevents.h ****   eventmask_t           events;         /**< @brief Events to be set in
  64:../../../os/rt/include/chevents.h ****                                                     the listening thread.   */
  65:../../../os/rt/include/chevents.h ****   eventflags_t          flags;          /**< @brief Flags added to the listener
  66:../../../os/rt/include/chevents.h ****                                                     by the event source.    */
  67:../../../os/rt/include/chevents.h ****   eventflags_t          wflags;         /**< @brief Flags that this listener
  68:../../../os/rt/include/chevents.h ****                                                     interested in.          */
  69:../../../os/rt/include/chevents.h **** };
  70:../../../os/rt/include/chevents.h **** 
  71:../../../os/rt/include/chevents.h **** /**
  72:../../../os/rt/include/chevents.h ****  * @brief   Event Source structure.
  73:../../../os/rt/include/chevents.h ****  */
  74:../../../os/rt/include/chevents.h **** typedef struct event_source {
  75:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief First Event Listener
  76:../../../os/rt/include/chevents.h ****                                                     registered on the Event
  77:../../../os/rt/include/chevents.h ****                                                     Source.                 */
  78:../../../os/rt/include/chevents.h **** } event_source_t;
  79:../../../os/rt/include/chevents.h **** 
  80:../../../os/rt/include/chevents.h **** /**
  81:../../../os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  82:../../../os/rt/include/chevents.h ****  */
  83:../../../os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  84:../../../os/rt/include/chevents.h **** 
  85:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  86:../../../os/rt/include/chevents.h **** /* Module macros.                                                            */
  87:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  88:../../../os/rt/include/chevents.h **** 
  89:../../../os/rt/include/chevents.h **** /**
  90:../../../os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  91:../../../os/rt/include/chevents.h ****  */
  92:../../../os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  93:../../../os/rt/include/chevents.h **** 
  94:../../../os/rt/include/chevents.h **** /**
  95:../../../os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  96:../../../os/rt/include/chevents.h ****  */
  97:../../../os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
  98:../../../os/rt/include/chevents.h **** 
  99:../../../os/rt/include/chevents.h **** /**
 100:../../../os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 101:../../../os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 102:../../../os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 103:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 104:../../../os/rt/include/chevents.h ****  */
 105:../../../os/rt/include/chevents.h **** #define _EVENTSOURCE_DATA(name) {(void *)(&name)}
 106:../../../os/rt/include/chevents.h **** 
 107:../../../os/rt/include/chevents.h **** /**
 108:../../../os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 109:../../../os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 110:../../../os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 111:../../../os/rt/include/chevents.h ****  *
 112:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 113:../../../os/rt/include/chevents.h ****  */
 114:../../../os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = _EVENTSOURCE_DATA(name)
 115:../../../os/rt/include/chevents.h **** 
 116:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 117:../../../os/rt/include/chevents.h **** /* External declarations.                                                    */
 118:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 119:../../../os/rt/include/chevents.h **** 
 120:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 121:../../../os/rt/include/chevents.h **** extern "C" {
 122:../../../os/rt/include/chevents.h **** #endif
 123:../../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 124:../../../os/rt/include/chevents.h ****                                   event_listener_t *elp,
 125:../../../os/rt/include/chevents.h ****                                   eventmask_t events,
 126:../../../os/rt/include/chevents.h ****                                   eventflags_t wflags);
 127:../../../os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 128:../../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 129:../../../os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 130:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 131:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 132:../../../os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 133:../../../os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 134:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 135:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 136:../../../os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 137:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 138:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 139:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 140:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 141:../../../os/rt/include/chevents.h **** #endif
 142:../../../os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 143:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time);
 144:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time);
 145:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time);
 146:../../../os/rt/include/chevents.h **** #endif
 147:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 148:../../../os/rt/include/chevents.h **** }
 149:../../../os/rt/include/chevents.h **** #endif
 150:../../../os/rt/include/chevents.h **** 
 151:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 152:../../../os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 153:../../../os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 154:../../../os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 155:../../../os/rt/include/chevents.h **** #endif
 156:../../../os/rt/include/chevents.h **** 
 157:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 158:../../../os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 159:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 160:../../../os/rt/include/chevents.h **** 
 161:../../../os/rt/include/chevents.h **** /**
 162:../../../os/rt/include/chevents.h ****  * @brief   Initializes an Event Source.
 163:../../../os/rt/include/chevents.h ****  * @note    This function can be invoked before the kernel is initialized
 164:../../../os/rt/include/chevents.h ****  *          because it just prepares a @p event_source_t structure.
 165:../../../os/rt/include/chevents.h ****  *
 166:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 167:../../../os/rt/include/chevents.h ****  *
 168:../../../os/rt/include/chevents.h ****  * @init
 169:../../../os/rt/include/chevents.h ****  */
 170:../../../os/rt/include/chevents.h **** static inline void chEvtObjectInit(event_source_t *esp) {
 171:../../../os/rt/include/chevents.h **** 
 172:../../../os/rt/include/chevents.h ****   esp->next = (event_listener_t *)esp;
 240               		.loc 2 172 0
 241 001c FB83      		std Y+3,r31
 242 001e EA83      		std Y+2,r30
 243               	.LVL28:
 244               	.LBE74:
 245               	.LBE73:
 246               	.LBE72:
 134:../../../os/hal/src/hal_serial.c ****   osalEventObjectInit(&sdp->event);
 135:../../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 247               		.loc 1 135 0
 248 0020 81E0      		ldi r24,lo8(1)
 249 0022 8C83      		std Y+4,r24
 136:../../../os/hal/src/hal_serial.c ****   iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 250               		.loc 1 136 0
 251 0024 BE01      		movw r22,r28
 252               	.LVL29:
 253 0026 675D      		subi r22,-41
 254 0028 7F4F      		sbci r23,-1
 255 002a 8E01      		movw r16,r28
 256 002c 40E1      		ldi r20,lo8(16)
 257 002e 50E0      		ldi r21,0
 258               	.LVL30:
 259 0030 CE01      		movw r24,r28
 260 0032 0596      		adiw r24,5
 261 0034 0E94 0000 		call iqObjectInit
 262               	.LVL31:
 137:../../../os/hal/src/hal_serial.c ****   oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 263               		.loc 1 137 0
 264 0038 BE01      		movw r22,r28
 265 003a 675C      		subi r22,-57
 266 003c 7F4F      		sbci r23,-1
 267 003e 9701      		movw r18,r14
 268 0040 40E1      		ldi r20,lo8(16)
 269 0042 50E0      		ldi r21,0
 270 0044 CE01      		movw r24,r28
 271 0046 4796      		adiw r24,23
 272 0048 0E94 0000 		call oqObjectInit
 273               	.LVL32:
 274               	/* epilogue start */
 138:../../../os/hal/src/hal_serial.c **** }
 275               		.loc 1 138 0
 276 004c DF91      		pop r29
 277 004e CF91      		pop r28
 278               	.LVL33:
 279 0050 1F91      		pop r17
 280 0052 0F91      		pop r16
 281               	.LVL34:
 282 0054 FF90      		pop r15
 283 0056 EF90      		pop r14
 284               	.LVL35:
 285 0058 0895      		ret
 286               		.cfi_endproc
 287               	.LFE152:
 289               		.section	.text.sdStart,"ax",@progbits
 290               	.global	sdStart
 292               	sdStart:
 293               	.LFB153:
 139:../../../os/hal/src/hal_serial.c **** #else
 140:../../../os/hal/src/hal_serial.c **** void sdObjectInit(SerialDriver *sdp) {
 141:../../../os/hal/src/hal_serial.c **** 
 142:../../../os/hal/src/hal_serial.c ****   sdp->vmt = &vmt;
 143:../../../os/hal/src/hal_serial.c ****   osalEventObjectInit(&sdp->event);
 144:../../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 145:../../../os/hal/src/hal_serial.c **** }
 146:../../../os/hal/src/hal_serial.c **** #endif
 147:../../../os/hal/src/hal_serial.c **** 
 148:../../../os/hal/src/hal_serial.c **** /**
 149:../../../os/hal/src/hal_serial.c ****  * @brief   Configures and starts the driver.
 150:../../../os/hal/src/hal_serial.c ****  *
 151:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 152:../../../os/hal/src/hal_serial.c ****  * @param[in] config    the architecture-dependent serial driver configuration.
 153:../../../os/hal/src/hal_serial.c ****  *                      If this parameter is set to @p NULL then a default
 154:../../../os/hal/src/hal_serial.c ****  *                      configuration is used.
 155:../../../os/hal/src/hal_serial.c ****  *
 156:../../../os/hal/src/hal_serial.c ****  * @api
 157:../../../os/hal/src/hal_serial.c ****  */
 158:../../../os/hal/src/hal_serial.c **** void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 294               		.loc 1 158 0
 295               		.cfi_startproc
 296               	.LVL36:
 297 0000 CF93      		push r28
 298               	.LCFI6:
 299               		.cfi_def_cfa_offset 4
 300               		.cfi_offset 28, -3
 301 0002 DF93      		push r29
 302               	.LCFI7:
 303               		.cfi_def_cfa_offset 5
 304               		.cfi_offset 29, -4
 305               	/* prologue: function */
 306               	/* frame size = 0 */
 307               	/* stack size = 2 */
 308               	.L__stack_usage = 2
 309 0004 EC01      		movw r28,r24
 310               	.LBB75:
 311               	.LBB76:
 312               	.LBB77:
 313               	.LBB78:
 314               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 315               		.loc 3 437 0
 316               	/* #APP */
 317               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 318 0006 F894      		cli
 319               	 ;  0 "" 2
 320               	/* #NOAPP */
 321               	.LBE78:
 322               	.LBE77:
 323               	.LBE76:
 324               	.LBE75:
 159:../../../os/hal/src/hal_serial.c **** 
 160:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 161:../../../os/hal/src/hal_serial.c **** 
 162:../../../os/hal/src/hal_serial.c ****   osalSysLock();
 163:../../../os/hal/src/hal_serial.c ****   osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 164:../../../os/hal/src/hal_serial.c ****                 "invalid state");
 165:../../../os/hal/src/hal_serial.c ****   sd_lld_start(sdp, config);
 325               		.loc 1 165 0
 326 0008 0E94 0000 		call sd_lld_start
 327               	.LVL37:
 166:../../../os/hal/src/hal_serial.c ****   sdp->state = SD_READY;
 328               		.loc 1 166 0
 329 000c 82E0      		ldi r24,lo8(2)
 330 000e 8C83      		std Y+4,r24
 331               	.LBB79:
 332               	.LBB80:
 333               	.LBB81:
 334               	.LBB82:
 335               	.LBB83:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 336               		.loc 3 447 0
 337               	/* #APP */
 338               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 339 0010 7894      		sei
 340               	 ;  0 "" 2
 341               	/* epilogue start */
 342               	/* #NOAPP */
 343               	.LBE83:
 344               	.LBE82:
 345               	.LBE81:
 346               	.LBE80:
 347               	.LBE79:
 167:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 168:../../../os/hal/src/hal_serial.c **** }
 348               		.loc 1 168 0
 349 0012 DF91      		pop r29
 350 0014 CF91      		pop r28
 351               	.LVL38:
 352 0016 0895      		ret
 353               		.cfi_endproc
 354               	.LFE153:
 356               		.section	.text.sdStop,"ax",@progbits
 357               	.global	sdStop
 359               	sdStop:
 360               	.LFB154:
 169:../../../os/hal/src/hal_serial.c **** 
 170:../../../os/hal/src/hal_serial.c **** /**
 171:../../../os/hal/src/hal_serial.c ****  * @brief   Stops the driver.
 172:../../../os/hal/src/hal_serial.c ****  * @details Any thread waiting on the driver's queues will be awakened with
 173:../../../os/hal/src/hal_serial.c ****  *          the message @p MSG_RESET.
 174:../../../os/hal/src/hal_serial.c ****  *
 175:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 176:../../../os/hal/src/hal_serial.c ****  *
 177:../../../os/hal/src/hal_serial.c ****  * @api
 178:../../../os/hal/src/hal_serial.c ****  */
 179:../../../os/hal/src/hal_serial.c **** void sdStop(SerialDriver *sdp) {
 361               		.loc 1 179 0
 362               		.cfi_startproc
 363               	.LVL39:
 364 0000 CF93      		push r28
 365               	.LCFI8:
 366               		.cfi_def_cfa_offset 4
 367               		.cfi_offset 28, -3
 368 0002 DF93      		push r29
 369               	.LCFI9:
 370               		.cfi_def_cfa_offset 5
 371               		.cfi_offset 29, -4
 372               	/* prologue: function */
 373               	/* frame size = 0 */
 374               	/* stack size = 2 */
 375               	.L__stack_usage = 2
 376 0004 EC01      		movw r28,r24
 377               	.LBB84:
 378               	.LBB85:
 379               	.LBB86:
 380               	.LBB87:
 437:../../../os/common/ports/AVR/chcore.h **** }
 381               		.loc 3 437 0
 382               	/* #APP */
 383               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 384 0006 F894      		cli
 385               	 ;  0 "" 2
 386               	/* #NOAPP */
 387               	.LBE87:
 388               	.LBE86:
 389               	.LBE85:
 390               	.LBE84:
 180:../../../os/hal/src/hal_serial.c **** 
 181:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 182:../../../os/hal/src/hal_serial.c **** 
 183:../../../os/hal/src/hal_serial.c ****   osalSysLock();
 184:../../../os/hal/src/hal_serial.c **** 
 185:../../../os/hal/src/hal_serial.c ****   osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 186:../../../os/hal/src/hal_serial.c ****                 "invalid state");
 187:../../../os/hal/src/hal_serial.c **** 
 188:../../../os/hal/src/hal_serial.c ****   sd_lld_stop(sdp);
 391               		.loc 1 188 0
 392 0008 0E94 0000 		call sd_lld_stop
 393               	.LVL40:
 189:../../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 394               		.loc 1 189 0
 395 000c 81E0      		ldi r24,lo8(1)
 396 000e 8C83      		std Y+4,r24
 190:../../../os/hal/src/hal_serial.c ****   oqResetI(&sdp->oqueue);
 397               		.loc 1 190 0
 398 0010 CE01      		movw r24,r28
 399 0012 4796      		adiw r24,23
 400 0014 0E94 0000 		call oqResetI
 401               	.LVL41:
 191:../../../os/hal/src/hal_serial.c ****   iqResetI(&sdp->iqueue);
 402               		.loc 1 191 0
 403 0018 CE01      		movw r24,r28
 404 001a 0596      		adiw r24,5
 405 001c 0E94 0000 		call iqResetI
 406               	.LVL42:
 407               	.LBB88:
 408               	.LBB89:
 409               		.file 4 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:../../../os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:../../../os/hal/osal/rt/osal.h ****  */
 181:../../../os/hal/osal/rt/osal.h **** typedef struct {
 182:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:../../../os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:../../../os/hal/osal/rt/osal.h **** } event_source_t;
 185:../../../os/hal/osal/rt/osal.h **** #endif
 186:../../../os/hal/osal/rt/osal.h **** 
 187:../../../os/hal/osal/rt/osal.h **** /**
 188:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:../../../os/hal/osal/rt/osal.h ****  */
 192:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:../../../os/hal/osal/rt/osal.h **** #else
 196:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:../../../os/hal/osal/rt/osal.h **** #endif
 198:../../../os/hal/osal/rt/osal.h **** 
 199:../../../os/hal/osal/rt/osal.h **** #if 0
 200:../../../os/hal/osal/rt/osal.h **** /**
 201:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:../../../os/hal/osal/rt/osal.h ****  */
 207:../../../os/hal/osal/rt/osal.h **** typedef struct {
 208:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:../../../os/hal/osal/rt/osal.h **** #endif
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:../../../os/hal/osal/rt/osal.h **** 
 216:../../../os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:../../../os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:../../../os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:../../../os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:../../../os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:../../../os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:../../../os/hal/osal/rt/osal.h **** 
 223:../../../os/hal/osal/rt/osal.h **** /**
 224:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:../../../os/hal/osal/rt/osal.h ****  * @{
 226:../../../os/hal/osal/rt/osal.h ****  */
 227:../../../os/hal/osal/rt/osal.h **** /**
 228:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 231:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:../../../os/hal/osal/rt/osal.h ****  *
 236:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:../../../os/hal/osal/rt/osal.h ****  *
 239:../../../os/hal/osal/rt/osal.h ****  * @api
 240:../../../os/hal/osal/rt/osal.h ****  */
 241:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:../../../os/hal/osal/rt/osal.h **** 
 243:../../../os/hal/osal/rt/osal.h **** /**
 244:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 248:../../../os/hal/osal/rt/osal.h ****  *
 249:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:../../../os/hal/osal/rt/osal.h ****  *
 251:../../../os/hal/osal/rt/osal.h ****  * @api
 252:../../../os/hal/osal/rt/osal.h ****  */
 253:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:../../../os/hal/osal/rt/osal.h **** 
 255:../../../os/hal/osal/rt/osal.h **** /**
 256:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:../../../os/hal/osal/rt/osal.h ****  */
 265:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:../../../os/hal/osal/rt/osal.h **** /** @} */
 267:../../../os/hal/osal/rt/osal.h **** 
 268:../../../os/hal/osal/rt/osal.h **** /**
 269:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:../../../os/hal/osal/rt/osal.h ****  * @{
 271:../../../os/hal/osal/rt/osal.h ****  */
 272:../../../os/hal/osal/rt/osal.h **** /**
 273:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:../../../os/hal/osal/rt/osal.h ****  */
 275:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:../../../os/hal/osal/rt/osal.h **** 
 277:../../../os/hal/osal/rt/osal.h **** /**
 278:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:../../../os/hal/osal/rt/osal.h ****  */
 281:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:../../../os/hal/osal/rt/osal.h **** 
 283:../../../os/hal/osal/rt/osal.h **** /**
 284:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:../../../os/hal/osal/rt/osal.h ****  */
 287:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:../../../os/hal/osal/rt/osal.h **** 
 289:../../../os/hal/osal/rt/osal.h **** /**
 290:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:../../../os/hal/osal/rt/osal.h ****  *
 293:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:../../../os/hal/osal/rt/osal.h ****  */
 295:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:../../../os/hal/osal/rt/osal.h **** /** @} */
 297:../../../os/hal/osal/rt/osal.h **** 
 298:../../../os/hal/osal/rt/osal.h **** /**
 299:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:../../../os/hal/osal/rt/osal.h ****  * @{
 301:../../../os/hal/osal/rt/osal.h ****  */
 302:../../../os/hal/osal/rt/osal.h **** /**
 303:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:../../../os/hal/osal/rt/osal.h ****  *
 307:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:../../../os/hal/osal/rt/osal.h ****  *
 310:../../../os/hal/osal/rt/osal.h ****  * @api
 311:../../../os/hal/osal/rt/osal.h ****  */
 312:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:../../../os/hal/osal/rt/osal.h **** 
 314:../../../os/hal/osal/rt/osal.h **** /**
 315:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:../../../os/hal/osal/rt/osal.h ****  *
 319:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:../../../os/hal/osal/rt/osal.h ****  *
 322:../../../os/hal/osal/rt/osal.h ****  * @api
 323:../../../os/hal/osal/rt/osal.h ****  */
 324:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:../../../os/hal/osal/rt/osal.h **** 
 326:../../../os/hal/osal/rt/osal.h **** /**
 327:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:../../../os/hal/osal/rt/osal.h ****  *
 331:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:../../../os/hal/osal/rt/osal.h ****  *
 334:../../../os/hal/osal/rt/osal.h ****  * @api
 335:../../../os/hal/osal/rt/osal.h ****  */
 336:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:../../../os/hal/osal/rt/osal.h **** /** @} */
 338:../../../os/hal/osal/rt/osal.h **** 
 339:../../../os/hal/osal/rt/osal.h **** /**
 340:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:../../../os/hal/osal/rt/osal.h ****  * @{
 342:../../../os/hal/osal/rt/osal.h ****  */
 343:../../../os/hal/osal/rt/osal.h **** /**
 344:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:../../../os/hal/osal/rt/osal.h ****  *
 348:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:../../../os/hal/osal/rt/osal.h **** 
 356:../../../os/hal/osal/rt/osal.h **** /**
 357:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:../../../os/hal/osal/rt/osal.h ****  *
 362:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @api
 367:../../../os/hal/osal/rt/osal.h ****  */
 368:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:../../../os/hal/osal/rt/osal.h **** 
 370:../../../os/hal/osal/rt/osal.h **** /**
 371:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:../../../os/hal/osal/rt/osal.h ****  *
 376:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @api
 381:../../../os/hal/osal/rt/osal.h ****  */
 382:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:../../../os/hal/osal/rt/osal.h **** /** @} */
 384:../../../os/hal/osal/rt/osal.h **** 
 385:../../../os/hal/osal/rt/osal.h **** /**
 386:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:../../../os/hal/osal/rt/osal.h ****  * @{
 388:../../../os/hal/osal/rt/osal.h ****  */
 389:../../../os/hal/osal/rt/osal.h **** /**
 390:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:../../../os/hal/osal/rt/osal.h ****  *
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:../../../os/hal/osal/rt/osal.h ****  *
 397:../../../os/hal/osal/rt/osal.h ****  * @api
 398:../../../os/hal/osal/rt/osal.h ****  */
 399:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:../../../os/hal/osal/rt/osal.h **** 
 401:../../../os/hal/osal/rt/osal.h **** /**
 402:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:../../../os/hal/osal/rt/osal.h ****  *
 408:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:../../../os/hal/osal/rt/osal.h ****  *
 410:../../../os/hal/osal/rt/osal.h ****  * @api
 411:../../../os/hal/osal/rt/osal.h ****  */
 412:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:../../../os/hal/osal/rt/osal.h **** 
 414:../../../os/hal/osal/rt/osal.h **** /**
 415:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 417:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:../../../os/hal/osal/rt/osal.h ****  *
 421:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:../../../os/hal/osal/rt/osal.h ****  *
 423:../../../os/hal/osal/rt/osal.h ****  * @api
 424:../../../os/hal/osal/rt/osal.h ****  */
 425:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:../../../os/hal/osal/rt/osal.h **** /** @} */
 427:../../../os/hal/osal/rt/osal.h **** 
 428:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:../../../os/hal/osal/rt/osal.h **** extern "C" {
 434:../../../os/hal/osal/rt/osal.h **** #endif
 435:../../../os/hal/osal/rt/osal.h **** 
 436:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:../../../os/hal/osal/rt/osal.h **** }
 438:../../../os/hal/osal/rt/osal.h **** #endif
 439:../../../os/hal/osal/rt/osal.h **** 
 440:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:../../../os/hal/osal/rt/osal.h **** 
 444:../../../os/hal/osal/rt/osal.h **** /**
 445:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:../../../os/hal/osal/rt/osal.h ****  *
 447:../../../os/hal/osal/rt/osal.h ****  * @api
 448:../../../os/hal/osal/rt/osal.h ****  */
 449:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:../../../os/hal/osal/rt/osal.h **** 
 451:../../../os/hal/osal/rt/osal.h **** }
 452:../../../os/hal/osal/rt/osal.h **** 
 453:../../../os/hal/osal/rt/osal.h **** /**
 454:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:../../../os/hal/osal/rt/osal.h ****  *
 456:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:../../../os/hal/osal/rt/osal.h ****  *
 458:../../../os/hal/osal/rt/osal.h ****  * @api
 459:../../../os/hal/osal/rt/osal.h ****  */
 460:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:../../../os/hal/osal/rt/osal.h **** }
 464:../../../os/hal/osal/rt/osal.h **** 
 465:../../../os/hal/osal/rt/osal.h **** /**
 466:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:../../../os/hal/osal/rt/osal.h ****  *
 468:../../../os/hal/osal/rt/osal.h ****  * @special
 469:../../../os/hal/osal/rt/osal.h ****  */
 470:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:../../../os/hal/osal/rt/osal.h **** 
 472:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 473:../../../os/hal/osal/rt/osal.h **** }
 474:../../../os/hal/osal/rt/osal.h **** 
 475:../../../os/hal/osal/rt/osal.h **** /**
 476:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:../../../os/hal/osal/rt/osal.h ****  *
 478:../../../os/hal/osal/rt/osal.h ****  * @special
 479:../../../os/hal/osal/rt/osal.h ****  */
 480:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:../../../os/hal/osal/rt/osal.h **** 
 482:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 483:../../../os/hal/osal/rt/osal.h **** }
 484:../../../os/hal/osal/rt/osal.h **** 
 485:../../../os/hal/osal/rt/osal.h **** /**
 486:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:../../../os/hal/osal/rt/osal.h ****  *
 489:../../../os/hal/osal/rt/osal.h ****  * @special
 490:../../../os/hal/osal/rt/osal.h ****  */
 491:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 494:../../../os/hal/osal/rt/osal.h **** }
 495:../../../os/hal/osal/rt/osal.h **** 
 496:../../../os/hal/osal/rt/osal.h **** /**
 497:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:../../../os/hal/osal/rt/osal.h ****  *
 500:../../../os/hal/osal/rt/osal.h ****  * @special
 501:../../../os/hal/osal/rt/osal.h ****  */
 502:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:../../../os/hal/osal/rt/osal.h **** 
 504:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:../../../os/hal/osal/rt/osal.h **** }
 506:../../../os/hal/osal/rt/osal.h **** 
 507:../../../os/hal/osal/rt/osal.h **** /**
 508:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:../../../os/hal/osal/rt/osal.h ****  *
 511:../../../os/hal/osal/rt/osal.h ****  * @special
 512:../../../os/hal/osal/rt/osal.h ****  */
 513:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:../../../os/hal/osal/rt/osal.h **** 
 515:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:../../../os/hal/osal/rt/osal.h **** }
 517:../../../os/hal/osal/rt/osal.h **** 
 518:../../../os/hal/osal/rt/osal.h **** /**
 519:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:../../../os/hal/osal/rt/osal.h ****  *
 522:../../../os/hal/osal/rt/osal.h ****  * @special
 523:../../../os/hal/osal/rt/osal.h ****  */
 524:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:../../../os/hal/osal/rt/osal.h **** 
 526:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:../../../os/hal/osal/rt/osal.h **** }
 528:../../../os/hal/osal/rt/osal.h **** 
 529:../../../os/hal/osal/rt/osal.h **** /**
 530:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:../../../os/hal/osal/rt/osal.h ****  *          is known.
 535:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:../../../os/hal/osal/rt/osal.h ****  *
 537:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @xclass
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:../../../os/hal/osal/rt/osal.h ****  *
 552:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:../../../os/hal/osal/rt/osal.h ****  *
 554:../../../os/hal/osal/rt/osal.h ****  * @xclass
 555:../../../os/hal/osal/rt/osal.h ****  */
 556:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:../../../os/hal/osal/rt/osal.h **** 
 558:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:../../../os/hal/osal/rt/osal.h **** }
 560:../../../os/hal/osal/rt/osal.h **** 
 561:../../../os/hal/osal/rt/osal.h **** /**
 562:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:../../../os/hal/osal/rt/osal.h ****  *          value.
 565:../../../os/hal/osal/rt/osal.h ****  *
 566:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:../../../os/hal/osal/rt/osal.h ****  *
 568:../../../os/hal/osal/rt/osal.h ****  * @xclass
 569:../../../os/hal/osal/rt/osal.h ****  */
 570:../../../os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:../../../os/hal/osal/rt/osal.h **** 
 573:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:../../../os/hal/osal/rt/osal.h **** }
 575:../../../os/hal/osal/rt/osal.h **** #endif
 576:../../../os/hal/osal/rt/osal.h **** 
 577:../../../os/hal/osal/rt/osal.h **** /**
 578:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:../../../os/hal/osal/rt/osal.h ****  */
 582:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:../../../os/hal/osal/rt/osal.h **** 
 585:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:../../../os/hal/osal/rt/osal.h **** }
 587:../../../os/hal/osal/rt/osal.h **** #endif
 588:../../../os/hal/osal/rt/osal.h **** 
 589:../../../os/hal/osal/rt/osal.h **** /**
 590:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:../../../os/hal/osal/rt/osal.h ****  *
 596:../../../os/hal/osal/rt/osal.h ****  * @sclass
 597:../../../os/hal/osal/rt/osal.h ****  */
 598:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:../../../os/hal/osal/rt/osal.h **** 
 600:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 410               		.loc 4 600 0
 411 0020 0E94 0000 		call chSchRescheduleS
 412               	.LVL43:
 413               	.LBE89:
 414               	.LBE88:
 415               	.LBB90:
 416               	.LBB91:
 417               	.LBB92:
 418               	.LBB93:
 419               	.LBB94:
 420               		.loc 3 447 0
 421               	/* #APP */
 422               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 423 0024 7894      		sei
 424               	 ;  0 "" 2
 425               	/* epilogue start */
 426               	/* #NOAPP */
 427               	.LBE94:
 428               	.LBE93:
 429               	.LBE92:
 430               	.LBE91:
 431               	.LBE90:
 192:../../../os/hal/src/hal_serial.c ****   osalOsRescheduleS();
 193:../../../os/hal/src/hal_serial.c **** 
 194:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 195:../../../os/hal/src/hal_serial.c **** }
 432               		.loc 1 195 0
 433 0026 DF91      		pop r29
 434 0028 CF91      		pop r28
 435               	.LVL44:
 436 002a 0895      		ret
 437               		.cfi_endproc
 438               	.LFE154:
 440               		.section	.text.sdIncomingDataI,"ax",@progbits
 441               	.global	sdIncomingDataI
 443               	sdIncomingDataI:
 444               	.LFB155:
 196:../../../os/hal/src/hal_serial.c **** 
 197:../../../os/hal/src/hal_serial.c **** /**
 198:../../../os/hal/src/hal_serial.c ****  * @brief   Handles incoming data.
 199:../../../os/hal/src/hal_serial.c ****  * @details This function must be called from the input interrupt service
 200:../../../os/hal/src/hal_serial.c ****  *          routine in order to enqueue incoming data and generate the
 201:../../../os/hal/src/hal_serial.c ****  *          related events.
 202:../../../os/hal/src/hal_serial.c ****  * @note    The incoming data event is only generated when the input queue
 203:../../../os/hal/src/hal_serial.c ****  *          becomes non-empty.
 204:../../../os/hal/src/hal_serial.c ****  * @note    In order to gain some performance it is suggested to not use
 205:../../../os/hal/src/hal_serial.c ****  *          this function directly but copy this code directly into the
 206:../../../os/hal/src/hal_serial.c ****  *          interrupt service routine.
 207:../../../os/hal/src/hal_serial.c ****  *
 208:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 209:../../../os/hal/src/hal_serial.c ****  * @param[in] b         the byte to be written in the driver's Input Queue
 210:../../../os/hal/src/hal_serial.c ****  *
 211:../../../os/hal/src/hal_serial.c ****  * @iclass
 212:../../../os/hal/src/hal_serial.c ****  */
 213:../../../os/hal/src/hal_serial.c **** void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 445               		.loc 1 213 0
 446               		.cfi_startproc
 447               	.LVL45:
 448 0000 1F93      		push r17
 449               	.LCFI10:
 450               		.cfi_def_cfa_offset 4
 451               		.cfi_offset 17, -3
 452 0002 CF93      		push r28
 453               	.LCFI11:
 454               		.cfi_def_cfa_offset 5
 455               		.cfi_offset 28, -4
 456 0004 DF93      		push r29
 457               	.LCFI12:
 458               		.cfi_def_cfa_offset 6
 459               		.cfi_offset 29, -5
 460               	/* prologue: function */
 461               	/* frame size = 0 */
 462               	/* stack size = 3 */
 463               	.L__stack_usage = 3
 464 0006 EC01      		movw r28,r24
 465 0008 162F      		mov r17,r22
 214:../../../os/hal/src/hal_serial.c **** 
 215:../../../os/hal/src/hal_serial.c ****   osalDbgCheckClassI();
 216:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 217:../../../os/hal/src/hal_serial.c **** 
 218:../../../os/hal/src/hal_serial.c ****   if (iqIsEmptyI(&sdp->iqueue))
 466               		.loc 1 218 0
 467 000a 8985      		ldd r24,Y+9
 468 000c 9A85      		ldd r25,Y+10
 469               	.LVL46:
 470 000e 892B      		or r24,r25
 471 0010 01F0      		breq .L17
 219:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 220:../../../os/hal/src/hal_serial.c ****   if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 472               		.loc 1 220 0
 473 0012 612F      		mov r22,r17
 474               	.LVL47:
 475 0014 CE01      		movw r24,r28
 476 0016 0596      		adiw r24,5
 477 0018 0E94 0000 		call iqPutI
 478               	.LVL48:
 479 001c 97FD      		sbrc r25,7
 480 001e 00C0      		rjmp .L18
 481               	.L13:
 482               	/* epilogue start */
 221:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 222:../../../os/hal/src/hal_serial.c **** }
 483               		.loc 1 222 0
 484 0020 DF91      		pop r29
 485 0022 CF91      		pop r28
 486               	.LVL49:
 487 0024 1F91      		pop r17
 488               	.LVL50:
 489 0026 0895      		ret
 490               	.LVL51:
 491               	.L17:
 492               	.LBB95:
 493               	.LBB96:
 601:../../../os/hal/osal/rt/osal.h **** }
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h **** /**
 604:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 607:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:../../../os/hal/osal/rt/osal.h ****  *
 612:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @xclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:../../../os/hal/osal/rt/osal.h ****  *
 627:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:../../../os/hal/osal/rt/osal.h ****  *
 633:../../../os/hal/osal/rt/osal.h ****  * @xclass
 634:../../../os/hal/osal/rt/osal.h ****  */
 635:../../../os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:../../../os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:../../../os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:../../../os/hal/osal/rt/osal.h **** }
 641:../../../os/hal/osal/rt/osal.h **** 
 642:../../../os/hal/osal/rt/osal.h **** /**
 643:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:../../../os/hal/osal/rt/osal.h ****  *
 645:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:../../../os/hal/osal/rt/osal.h ****  *                      .
 651:../../../os/hal/osal/rt/osal.h ****  *
 652:../../../os/hal/osal/rt/osal.h ****  * @sclass
 653:../../../os/hal/osal/rt/osal.h ****  */
 654:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:../../../os/hal/osal/rt/osal.h **** 
 656:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:../../../os/hal/osal/rt/osal.h **** }
 658:../../../os/hal/osal/rt/osal.h **** 
 659:../../../os/hal/osal/rt/osal.h **** /**
 660:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:../../../os/hal/osal/rt/osal.h ****  *
 662:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:../../../os/hal/osal/rt/osal.h ****  *                      .
 668:../../../os/hal/osal/rt/osal.h ****  *
 669:../../../os/hal/osal/rt/osal.h ****  * @api
 670:../../../os/hal/osal/rt/osal.h ****  */
 671:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:../../../os/hal/osal/rt/osal.h **** 
 673:../../../os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:../../../os/hal/osal/rt/osal.h **** }
 675:../../../os/hal/osal/rt/osal.h **** 
 676:../../../os/hal/osal/rt/osal.h **** /**
 677:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:../../../os/hal/osal/rt/osal.h ****  *          context.
 680:../../../os/hal/osal/rt/osal.h ****  *
 681:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:../../../os/hal/osal/rt/osal.h ****  *
 684:../../../os/hal/osal/rt/osal.h ****  * @sclass
 685:../../../os/hal/osal/rt/osal.h ****  */
 686:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:../../../os/hal/osal/rt/osal.h **** 
 688:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:../../../os/hal/osal/rt/osal.h **** }
 690:../../../os/hal/osal/rt/osal.h **** 
 691:../../../os/hal/osal/rt/osal.h **** /**
 692:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:../../../os/hal/osal/rt/osal.h ****  *          context.
 695:../../../os/hal/osal/rt/osal.h ****  *
 696:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:../../../os/hal/osal/rt/osal.h ****  *                        state.
 701:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 704:../../../os/hal/osal/rt/osal.h ****  *                      .
 705:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:../../../os/hal/osal/rt/osal.h ****  *
 708:../../../os/hal/osal/rt/osal.h ****  * @sclass
 709:../../../os/hal/osal/rt/osal.h ****  */
 710:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:../../../os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:../../../os/hal/osal/rt/osal.h **** 
 713:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:../../../os/hal/osal/rt/osal.h **** }
 715:../../../os/hal/osal/rt/osal.h **** 
 716:../../../os/hal/osal/rt/osal.h **** /**
 717:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 720:../../../os/hal/osal/rt/osal.h ****  *
 721:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:../../../os/hal/osal/rt/osal.h ****  *
 724:../../../os/hal/osal/rt/osal.h ****  * @iclass
 725:../../../os/hal/osal/rt/osal.h ****  */
 726:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:../../../os/hal/osal/rt/osal.h **** 
 728:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:../../../os/hal/osal/rt/osal.h **** }
 730:../../../os/hal/osal/rt/osal.h **** 
 731:../../../os/hal/osal/rt/osal.h **** /**
 732:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:../../../os/hal/osal/rt/osal.h ****  *          context.
 735:../../../os/hal/osal/rt/osal.h ****  *
 736:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:../../../os/hal/osal/rt/osal.h ****  *
 739:../../../os/hal/osal/rt/osal.h ****  * @iclass
 740:../../../os/hal/osal/rt/osal.h ****  */
 741:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:../../../os/hal/osal/rt/osal.h **** 
 743:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:../../../os/hal/osal/rt/osal.h **** }
 745:../../../os/hal/osal/rt/osal.h **** 
 746:../../../os/hal/osal/rt/osal.h **** /**
 747:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:../../../os/hal/osal/rt/osal.h ****  *
 749:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:../../../os/hal/osal/rt/osal.h ****  *
 751:../../../os/hal/osal/rt/osal.h ****  * @init
 752:../../../os/hal/osal/rt/osal.h ****  */
 753:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:../../../os/hal/osal/rt/osal.h **** 
 755:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:../../../os/hal/osal/rt/osal.h **** }
 757:../../../os/hal/osal/rt/osal.h **** 
 758:../../../os/hal/osal/rt/osal.h **** /**
 759:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:../../../os/hal/osal/rt/osal.h ****  *
 763:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:../../../os/hal/osal/rt/osal.h ****  *                        state.
 768:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 771:../../../os/hal/osal/rt/osal.h ****  *                      .
 772:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 778:../../../os/hal/osal/rt/osal.h ****  *
 779:../../../os/hal/osal/rt/osal.h ****  * @sclass
 780:../../../os/hal/osal/rt/osal.h ****  */
 781:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:../../../os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:../../../os/hal/osal/rt/osal.h **** 
 784:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:../../../os/hal/osal/rt/osal.h **** }
 786:../../../os/hal/osal/rt/osal.h **** 
 787:../../../os/hal/osal/rt/osal.h **** /**
 788:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:../../../os/hal/osal/rt/osal.h ****  *
 790:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:../../../os/hal/osal/rt/osal.h ****  *
 793:../../../os/hal/osal/rt/osal.h ****  * @iclass
 794:../../../os/hal/osal/rt/osal.h ****  */
 795:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:../../../os/hal/osal/rt/osal.h **** 
 797:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:../../../os/hal/osal/rt/osal.h **** }
 799:../../../os/hal/osal/rt/osal.h **** 
 800:../../../os/hal/osal/rt/osal.h **** /**
 801:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:../../../os/hal/osal/rt/osal.h ****  *
 803:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:../../../os/hal/osal/rt/osal.h ****  *
 806:../../../os/hal/osal/rt/osal.h ****  * @iclass
 807:../../../os/hal/osal/rt/osal.h ****  */
 808:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:../../../os/hal/osal/rt/osal.h **** 
 810:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 811:../../../os/hal/osal/rt/osal.h **** }
 812:../../../os/hal/osal/rt/osal.h **** 
 813:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 814:../../../os/hal/osal/rt/osal.h **** /**
 815:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes an event flags object.
 816:../../../os/hal/osal/rt/osal.h ****  *
 817:../../../os/hal/osal/rt/osal.h ****  * @param[out] esp      pointer to the event flags object
 818:../../../os/hal/osal/rt/osal.h ****  *
 819:../../../os/hal/osal/rt/osal.h ****  * @init
 820:../../../os/hal/osal/rt/osal.h ****  */
 821:../../../os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 822:../../../os/hal/osal/rt/osal.h **** 
 823:../../../os/hal/osal/rt/osal.h ****   chEvtObjectInit(esp);
 824:../../../os/hal/osal/rt/osal.h **** }
 825:../../../os/hal/osal/rt/osal.h **** #else
 826:../../../os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 827:../../../os/hal/osal/rt/osal.h **** 
 828:../../../os/hal/osal/rt/osal.h ****   esp->flags = 0;
 829:../../../os/hal/osal/rt/osal.h **** }
 830:../../../os/hal/osal/rt/osal.h **** #endif
 831:../../../os/hal/osal/rt/osal.h **** 
 832:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 833:../../../os/hal/osal/rt/osal.h **** /**
 834:../../../os/hal/osal/rt/osal.h ****  * @brief   Add flags to an event source object.
 835:../../../os/hal/osal/rt/osal.h ****  *
 836:../../../os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 837:../../../os/hal/osal/rt/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 838:../../../os/hal/osal/rt/osal.h ****  *
 839:../../../os/hal/osal/rt/osal.h ****  * @iclass
 840:../../../os/hal/osal/rt/osal.h ****  */
 841:../../../os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 842:../../../os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 843:../../../os/hal/osal/rt/osal.h **** 
 844:../../../os/hal/osal/rt/osal.h ****   chEvtBroadcastFlagsI(esp, flags);
 494               		.loc 4 844 0
 495 0028 64E0      		ldi r22,lo8(4)
 496 002a CE01      		movw r24,r28
 497 002c 0296      		adiw r24,2
 498               	.LVL52:
 499 002e 0E94 0000 		call chEvtBroadcastFlagsI
 500               	.LVL53:
 501               	.LBE96:
 502               	.LBE95:
 220:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 503               		.loc 1 220 0
 504 0032 612F      		mov r22,r17
 505 0034 CE01      		movw r24,r28
 506 0036 0596      		adiw r24,5
 507 0038 0E94 0000 		call iqPutI
 508               	.LVL54:
 509 003c 97FF      		sbrs r25,7
 510 003e 00C0      		rjmp .L13
 511               	.LVL55:
 512               	.L18:
 513               	.LBB97:
 514               	.LBB98:
 515               		.loc 4 844 0
 516 0040 60E0      		ldi r22,0
 517 0042 CE01      		movw r24,r28
 518 0044 0296      		adiw r24,2
 519               	.LVL56:
 520               	/* epilogue start */
 521               	.LBE98:
 522               	.LBE97:
 523               		.loc 1 222 0
 524 0046 DF91      		pop r29
 525 0048 CF91      		pop r28
 526               	.LVL57:
 527 004a 1F91      		pop r17
 528               	.LVL58:
 529               	.LBB100:
 530               	.LBB99:
 531               		.loc 4 844 0
 532 004c 0C94 0000 		jmp chEvtBroadcastFlagsI
 533               	.LVL59:
 534               	.LBE99:
 535               	.LBE100:
 536               		.cfi_endproc
 537               	.LFE155:
 539               		.section	.text.sdRequestDataI,"ax",@progbits
 540               	.global	sdRequestDataI
 542               	sdRequestDataI:
 543               	.LFB156:
 223:../../../os/hal/src/hal_serial.c **** 
 224:../../../os/hal/src/hal_serial.c **** /**
 225:../../../os/hal/src/hal_serial.c ****  * @brief   Handles outgoing data.
 226:../../../os/hal/src/hal_serial.c ****  * @details Must be called from the output interrupt service routine in order
 227:../../../os/hal/src/hal_serial.c ****  *          to get the next byte to be transmitted.
 228:../../../os/hal/src/hal_serial.c ****  * @note    In order to gain some performance it is suggested to not use
 229:../../../os/hal/src/hal_serial.c ****  *          this function directly but copy this code directly into the
 230:../../../os/hal/src/hal_serial.c ****  *          interrupt service routine.
 231:../../../os/hal/src/hal_serial.c ****  *
 232:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 233:../../../os/hal/src/hal_serial.c ****  * @return              The byte value read from the driver's output queue.
 234:../../../os/hal/src/hal_serial.c ****  * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 235:../../../os/hal/src/hal_serial.c ****  *                      disables the interrupt source when this happens).
 236:../../../os/hal/src/hal_serial.c ****  *
 237:../../../os/hal/src/hal_serial.c ****  * @iclass
 238:../../../os/hal/src/hal_serial.c ****  */
 239:../../../os/hal/src/hal_serial.c **** msg_t sdRequestDataI(SerialDriver *sdp) {
 544               		.loc 1 239 0
 545               		.cfi_startproc
 546               	.LVL60:
 547 0000 0F93      		push r16
 548               	.LCFI13:
 549               		.cfi_def_cfa_offset 4
 550               		.cfi_offset 16, -3
 551 0002 1F93      		push r17
 552               	.LCFI14:
 553               		.cfi_def_cfa_offset 5
 554               		.cfi_offset 17, -4
 555 0004 CF93      		push r28
 556               	.LCFI15:
 557               		.cfi_def_cfa_offset 6
 558               		.cfi_offset 28, -5
 559 0006 DF93      		push r29
 560               	.LCFI16:
 561               		.cfi_def_cfa_offset 7
 562               		.cfi_offset 29, -6
 563               	/* prologue: function */
 564               	/* frame size = 0 */
 565               	/* stack size = 4 */
 566               	.L__stack_usage = 4
 567 0008 8C01      		movw r16,r24
 240:../../../os/hal/src/hal_serial.c ****   msg_t  b;
 241:../../../os/hal/src/hal_serial.c **** 
 242:../../../os/hal/src/hal_serial.c ****   osalDbgCheckClassI();
 243:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 244:../../../os/hal/src/hal_serial.c **** 
 245:../../../os/hal/src/hal_serial.c ****   b = oqGetI(&sdp->oqueue);
 568               		.loc 1 245 0
 569 000a 4796      		adiw r24,23
 570               	.LVL61:
 571 000c 0E94 0000 		call oqGetI
 572               	.LVL62:
 573 0010 EC01      		movw r28,r24
 574               	.LVL63:
 246:../../../os/hal/src/hal_serial.c ****   if (b < MSG_OK)
 575               		.loc 1 246 0
 576 0012 97FD      		sbrc r25,7
 577 0014 00C0      		rjmp .L21
 247:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 248:../../../os/hal/src/hal_serial.c ****   return b;
 249:../../../os/hal/src/hal_serial.c **** }
 578               		.loc 1 249 0
 579 0016 CE01      		movw r24,r28
 580               	/* epilogue start */
 581 0018 DF91      		pop r29
 582 001a CF91      		pop r28
 583 001c 1F91      		pop r17
 584 001e 0F91      		pop r16
 585               	.LVL64:
 586 0020 0895      		ret
 587               	.LVL65:
 588               	.L21:
 589               	.LBB101:
 590               	.LBB102:
 591               		.loc 4 844 0
 592 0022 68E0      		ldi r22,lo8(8)
 593 0024 C801      		movw r24,r16
 594               	.LVL66:
 595 0026 0296      		adiw r24,2
 596               	.LVL67:
 597 0028 0E94 0000 		call chEvtBroadcastFlagsI
 598               	.LVL68:
 599               	.LBE102:
 600               	.LBE101:
 601               		.loc 1 249 0
 602 002c CE01      		movw r24,r28
 603               	/* epilogue start */
 604 002e DF91      		pop r29
 605 0030 CF91      		pop r28
 606               	.LVL69:
 607 0032 1F91      		pop r17
 608 0034 0F91      		pop r16
 609               	.LVL70:
 610 0036 0895      		ret
 611               		.cfi_endproc
 612               	.LFE156:
 614               		.section	.text.sdPutWouldBlock,"ax",@progbits
 615               	.global	sdPutWouldBlock
 617               	sdPutWouldBlock:
 618               	.LFB157:
 250:../../../os/hal/src/hal_serial.c **** 
 251:../../../os/hal/src/hal_serial.c **** /**
 252:../../../os/hal/src/hal_serial.c ****  * @brief   Direct output check on a @p SerialDriver.
 253:../../../os/hal/src/hal_serial.c ****  * @note    This function bypasses the indirect access to the channel and
 254:../../../os/hal/src/hal_serial.c ****  *          checks directly the output queue. This is faster but cannot
 255:../../../os/hal/src/hal_serial.c ****  *          be used to check different channels implementations.
 256:../../../os/hal/src/hal_serial.c ****  *
 257:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 258:../../../os/hal/src/hal_serial.c ****  * @return              The queue status.
 259:../../../os/hal/src/hal_serial.c ****  * @retval false        if the next write operation would not block.
 260:../../../os/hal/src/hal_serial.c ****  * @retval true         if the next write operation would block.
 261:../../../os/hal/src/hal_serial.c ****  *
 262:../../../os/hal/src/hal_serial.c ****  * @deprecated
 263:../../../os/hal/src/hal_serial.c ****  *
 264:../../../os/hal/src/hal_serial.c ****  * @api
 265:../../../os/hal/src/hal_serial.c ****  */
 266:../../../os/hal/src/hal_serial.c **** bool sdPutWouldBlock(SerialDriver *sdp) {
 619               		.loc 1 266 0
 620               		.cfi_startproc
 621               	.LVL71:
 622               	/* prologue: function */
 623               	/* frame size = 0 */
 624               	/* stack size = 0 */
 625               	.L__stack_usage = 0
 626               	.LBB103:
 627               	.LBB104:
 628               	.LBB105:
 629               	.LBB106:
 437:../../../os/common/ports/AVR/chcore.h **** }
 630               		.loc 3 437 0
 631               	/* #APP */
 632               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 633 0000 F894      		cli
 634               	 ;  0 "" 2
 635               	/* #NOAPP */
 636               	.LBE106:
 637               	.LBE105:
 638               	.LBE104:
 639               	.LBE103:
 267:../../../os/hal/src/hal_serial.c ****   bool b;
 268:../../../os/hal/src/hal_serial.c **** 
 269:../../../os/hal/src/hal_serial.c ****   osalSysLock();
 270:../../../os/hal/src/hal_serial.c ****   b = oqIsFullI(&sdp->oqueue);
 640               		.loc 1 270 0
 641 0002 FC01      		movw r30,r24
 642 0004 238D      		ldd r18,Z+27
 643 0006 348D      		ldd r19,Z+28
 644               	.LVL72:
 645               	.LBB107:
 646               	.LBB108:
 647               	.LBB109:
 648               	.LBB110:
 649               	.LBB111:
 650               		.loc 3 447 0
 651               	/* #APP */
 652               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 653 0008 7894      		sei
 654               	 ;  0 "" 2
 655               	/* #NOAPP */
 656               	.LBE111:
 657               	.LBE110:
 658               	.LBE109:
 659               	.LBE108:
 660               	.LBE107:
 271:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 272:../../../os/hal/src/hal_serial.c **** 
 273:../../../os/hal/src/hal_serial.c ****   return b;
 661               		.loc 1 273 0
 662 000a 81E0      		ldi r24,lo8(1)
 663               	.LVL73:
 664 000c 232B      		or r18,r19
 665 000e 01F0      		breq .L23
 666 0010 80E0      		ldi r24,0
 667               	.L23:
 274:../../../os/hal/src/hal_serial.c **** }
 668               		.loc 1 274 0
 669 0012 0895      		ret
 670               		.cfi_endproc
 671               	.LFE157:
 673               		.section	.text.sdGetWouldBlock,"ax",@progbits
 674               	.global	sdGetWouldBlock
 676               	sdGetWouldBlock:
 677               	.LFB158:
 275:../../../os/hal/src/hal_serial.c **** 
 276:../../../os/hal/src/hal_serial.c **** /**
 277:../../../os/hal/src/hal_serial.c ****  * @brief   Direct input check on a @p SerialDriver.
 278:../../../os/hal/src/hal_serial.c ****  * @note    This function bypasses the indirect access to the channel and
 279:../../../os/hal/src/hal_serial.c ****  *          checks directly the input queue. This is faster but cannot
 280:../../../os/hal/src/hal_serial.c ****  *          be used to check different channels implementations.
 281:../../../os/hal/src/hal_serial.c ****  *
 282:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 283:../../../os/hal/src/hal_serial.c ****  * @return              The queue status.
 284:../../../os/hal/src/hal_serial.c ****  * @retval false        if the next write operation would not block.
 285:../../../os/hal/src/hal_serial.c ****  * @retval true         if the next write operation would block.
 286:../../../os/hal/src/hal_serial.c ****  *
 287:../../../os/hal/src/hal_serial.c ****  * @deprecated
 288:../../../os/hal/src/hal_serial.c ****  *
 289:../../../os/hal/src/hal_serial.c ****  * @api
 290:../../../os/hal/src/hal_serial.c ****  */
 291:../../../os/hal/src/hal_serial.c **** bool sdGetWouldBlock(SerialDriver *sdp) {
 678               		.loc 1 291 0
 679               		.cfi_startproc
 680               	.LVL74:
 681               	/* prologue: function */
 682               	/* frame size = 0 */
 683               	/* stack size = 0 */
 684               	.L__stack_usage = 0
 685               	.LBB112:
 686               	.LBB113:
 687               	.LBB114:
 688               	.LBB115:
 437:../../../os/common/ports/AVR/chcore.h **** }
 689               		.loc 3 437 0
 690               	/* #APP */
 691               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 692 0000 F894      		cli
 693               	 ;  0 "" 2
 694               	/* #NOAPP */
 695               	.LBE115:
 696               	.LBE114:
 697               	.LBE113:
 698               	.LBE112:
 292:../../../os/hal/src/hal_serial.c ****   bool b;
 293:../../../os/hal/src/hal_serial.c **** 
 294:../../../os/hal/src/hal_serial.c ****   osalSysLock();
 295:../../../os/hal/src/hal_serial.c ****   b = iqIsEmptyI(&sdp->iqueue);
 699               		.loc 1 295 0
 700 0002 FC01      		movw r30,r24
 701 0004 2185      		ldd r18,Z+9
 702 0006 3285      		ldd r19,Z+10
 703               	.LVL75:
 704               	.LBB116:
 705               	.LBB117:
 706               	.LBB118:
 707               	.LBB119:
 708               	.LBB120:
 709               		.loc 3 447 0
 710               	/* #APP */
 711               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 712 0008 7894      		sei
 713               	 ;  0 "" 2
 714               	/* #NOAPP */
 715               	.LBE120:
 716               	.LBE119:
 717               	.LBE118:
 718               	.LBE117:
 719               	.LBE116:
 296:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 297:../../../os/hal/src/hal_serial.c **** 
 298:../../../os/hal/src/hal_serial.c ****   return b;
 720               		.loc 1 298 0
 721 000a 81E0      		ldi r24,lo8(1)
 722               	.LVL76:
 723 000c 232B      		or r18,r19
 724 000e 01F0      		breq .L28
 725 0010 80E0      		ldi r24,0
 726               	.L28:
 299:../../../os/hal/src/hal_serial.c **** }
 727               		.loc 1 299 0
 728 0012 0895      		ret
 729               		.cfi_endproc
 730               	.LFE158:
 732               		.section	.rodata.vmt,"a",@progbits
 735               	vmt:
 736 0000 0000      		.word	gs(_write)
 737 0002 0000      		.word	gs(_read)
 738 0004 0000      		.word	gs(_put)
 739 0006 0000      		.word	gs(_get)
 740 0008 0000      		.word	gs(_putt)
 741 000a 0000      		.word	gs(_gett)
 742 000c 0000      		.word	gs(_writet)
 743 000e 0000      		.word	gs(_readt)
 744               		.text
 745               	.Letext0:
 746               		.file 5 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 747               		.file 6 "/usr/lib/avr/include/stdint.h"
 748               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 749               		.file 8 "../../../os/rt/include/chsystypes.h"
 750               		.file 9 "../../../os/rt/include/chschd.h"
 751               		.file 10 "../../../os/rt/include/chsem.h"
 752               		.file 11 "../../../os/rt/include/chmtx.h"
 753               		.file 12 "../../../os/hal/include/hal_queues.h"
 754               		.file 13 "../../../os/hal/include/hal_serial.h"
 755               		.file 14 "../../../os/hal/ports/AVR/MEGA/USARTv1/hal_serial_lld.h"
 756               		.file 15 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_serial.c
     /tmp/cc296KsR.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc296KsR.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc296KsR.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc296KsR.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc296KsR.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc296KsR.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc296KsR.s:13     .text._readt:0000000000000000 _readt
     /tmp/cc296KsR.s:33     .text._read:0000000000000000 _read
     /tmp/cc296KsR.s:54     .text._writet:0000000000000000 _writet
     /tmp/cc296KsR.s:73     .text._write:0000000000000000 _write
     /tmp/cc296KsR.s:94     .text._gett:0000000000000000 _gett
     /tmp/cc296KsR.s:113    .text._get:0000000000000000 _get
     /tmp/cc296KsR.s:134    .text._putt:0000000000000000 _putt
     /tmp/cc296KsR.s:153    .text._put:0000000000000000 _put
     /tmp/cc296KsR.s:175    .text.sdInit:0000000000000000 sdInit
     /tmp/cc296KsR.s:192    .text.sdObjectInit:0000000000000000 sdObjectInit
     /tmp/cc296KsR.s:735    .rodata.vmt:0000000000000000 vmt
     /tmp/cc296KsR.s:292    .text.sdStart:0000000000000000 sdStart
     /tmp/cc296KsR.s:359    .text.sdStop:0000000000000000 sdStop
     /tmp/cc296KsR.s:443    .text.sdIncomingDataI:0000000000000000 sdIncomingDataI
     /tmp/cc296KsR.s:542    .text.sdRequestDataI:0000000000000000 sdRequestDataI
     /tmp/cc296KsR.s:617    .text.sdPutWouldBlock:0000000000000000 sdPutWouldBlock
     /tmp/cc296KsR.s:676    .text.sdGetWouldBlock:0000000000000000 sdGetWouldBlock

UNDEFINED SYMBOLS
iqReadTimeout
oqWriteTimeout
iqGetTimeout
oqPutTimeout
sd_lld_init
iqObjectInit
oqObjectInit
sd_lld_start
sd_lld_stop
oqResetI
iqResetI
chSchRescheduleS
iqPutI
chEvtBroadcastFlagsI
oqGetI
__do_copy_data

   1               		.file	"hal_ext.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.extInit,"ax",@progbits
  12               	.global	extInit
  14               	extInit:
  15               	.LFB143:
  16               		.file 1 "../../../os/hal/src/hal_ext.c"
   1:../../../os/hal/src/hal_ext.c **** /*
   2:../../../os/hal/src/hal_ext.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/src/hal_ext.c **** 
   4:../../../os/hal/src/hal_ext.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_ext.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_ext.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_ext.c **** 
   8:../../../os/hal/src/hal_ext.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_ext.c **** 
  10:../../../os/hal/src/hal_ext.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_ext.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_ext.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_ext.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_ext.c ****     limitations under the License.
  15:../../../os/hal/src/hal_ext.c **** */
  16:../../../os/hal/src/hal_ext.c **** 
  17:../../../os/hal/src/hal_ext.c **** /**
  18:../../../os/hal/src/hal_ext.c ****  * @file    hal_ext.c
  19:../../../os/hal/src/hal_ext.c ****  * @brief   EXT Driver code.
  20:../../../os/hal/src/hal_ext.c ****  *
  21:../../../os/hal/src/hal_ext.c ****  * @addtogroup EXT
  22:../../../os/hal/src/hal_ext.c ****  * @{
  23:../../../os/hal/src/hal_ext.c ****  */
  24:../../../os/hal/src/hal_ext.c **** 
  25:../../../os/hal/src/hal_ext.c **** #include "hal.h"
  26:../../../os/hal/src/hal_ext.c **** 
  27:../../../os/hal/src/hal_ext.c **** #if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  28:../../../os/hal/src/hal_ext.c **** 
  29:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  30:../../../os/hal/src/hal_ext.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  32:../../../os/hal/src/hal_ext.c **** 
  33:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  34:../../../os/hal/src/hal_ext.c **** /* Driver exported variables.                                                */
  35:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  36:../../../os/hal/src/hal_ext.c **** 
  37:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  38:../../../os/hal/src/hal_ext.c **** /* Driver local variables and types.                                         */
  39:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  40:../../../os/hal/src/hal_ext.c **** 
  41:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  42:../../../os/hal/src/hal_ext.c **** /* Driver local functions.                                                   */
  43:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_ext.c **** 
  45:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_ext.c **** /* Driver exported functions.                                                */
  47:../../../os/hal/src/hal_ext.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_ext.c **** 
  49:../../../os/hal/src/hal_ext.c **** /**
  50:../../../os/hal/src/hal_ext.c ****  * @brief   EXT Driver initialization.
  51:../../../os/hal/src/hal_ext.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
  52:../../../os/hal/src/hal_ext.c ****  *          no need to explicitly initialize the driver.
  53:../../../os/hal/src/hal_ext.c ****  *
  54:../../../os/hal/src/hal_ext.c ****  * @init
  55:../../../os/hal/src/hal_ext.c ****  */
  56:../../../os/hal/src/hal_ext.c **** void extInit(void) {
  17               		.loc 1 56 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  57:../../../os/hal/src/hal_ext.c **** 
  58:../../../os/hal/src/hal_ext.c ****   ext_lld_init();
  23               		.loc 1 58 0
  24 0000 0C94 0000 		jmp ext_lld_init
  25               	.LVL0:
  26               		.cfi_endproc
  27               	.LFE143:
  29               		.section	.text.extObjectInit,"ax",@progbits
  30               	.global	extObjectInit
  32               	extObjectInit:
  33               	.LFB144:
  59:../../../os/hal/src/hal_ext.c **** }
  60:../../../os/hal/src/hal_ext.c **** 
  61:../../../os/hal/src/hal_ext.c **** /**
  62:../../../os/hal/src/hal_ext.c ****  * @brief   Initializes the standard part of a @p EXTDriver structure.
  63:../../../os/hal/src/hal_ext.c ****  *
  64:../../../os/hal/src/hal_ext.c ****  * @param[out] extp     pointer to the @p EXTDriver object
  65:../../../os/hal/src/hal_ext.c ****  *
  66:../../../os/hal/src/hal_ext.c ****  * @init
  67:../../../os/hal/src/hal_ext.c ****  */
  68:../../../os/hal/src/hal_ext.c **** void extObjectInit(EXTDriver *extp) {
  34               		.loc 1 68 0
  35               		.cfi_startproc
  36               	.LVL1:
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  69:../../../os/hal/src/hal_ext.c **** 
  70:../../../os/hal/src/hal_ext.c ****   extp->state  = EXT_STOP;
  41               		.loc 1 70 0
  42 0000 21E0      		ldi r18,lo8(1)
  43 0002 FC01      		movw r30,r24
  44 0004 2083      		st Z,r18
  71:../../../os/hal/src/hal_ext.c ****   extp->config = NULL;
  45               		.loc 1 71 0
  46 0006 1282      		std Z+2,__zero_reg__
  47 0008 1182      		std Z+1,__zero_reg__
  48 000a 0895      		ret
  49               		.cfi_endproc
  50               	.LFE144:
  52               		.section	.text.extStart,"ax",@progbits
  53               	.global	extStart
  55               	extStart:
  56               	.LFB145:
  72:../../../os/hal/src/hal_ext.c **** }
  73:../../../os/hal/src/hal_ext.c **** 
  74:../../../os/hal/src/hal_ext.c **** /**
  75:../../../os/hal/src/hal_ext.c ****  * @brief   Configures and activates the EXT peripheral.
  76:../../../os/hal/src/hal_ext.c ****  * @post    After activation all EXT channels are in the disabled state,
  77:../../../os/hal/src/hal_ext.c ****  *          use @p extChannelEnable() in order to activate them.
  78:../../../os/hal/src/hal_ext.c ****  *
  79:../../../os/hal/src/hal_ext.c ****  * @param[in] extp      pointer to the @p EXTDriver object
  80:../../../os/hal/src/hal_ext.c ****  * @param[in] config    pointer to the @p EXTConfig object
  81:../../../os/hal/src/hal_ext.c ****  *
  82:../../../os/hal/src/hal_ext.c ****  * @api
  83:../../../os/hal/src/hal_ext.c ****  */
  84:../../../os/hal/src/hal_ext.c **** void extStart(EXTDriver *extp, const EXTConfig *config) {
  57               		.loc 1 84 0
  58               		.cfi_startproc
  59               	.LVL2:
  60 0000 CF93      		push r28
  61               	.LCFI0:
  62               		.cfi_def_cfa_offset 4
  63               		.cfi_offset 28, -3
  64 0002 DF93      		push r29
  65               	.LCFI1:
  66               		.cfi_def_cfa_offset 5
  67               		.cfi_offset 29, -4
  68               	/* prologue: function */
  69               	/* frame size = 0 */
  70               	/* stack size = 2 */
  71               	.L__stack_usage = 2
  72 0004 EC01      		movw r28,r24
  73               	.LBB58:
  74               	.LBB59:
  75               	.LBB60:
  76               	.LBB61:
  77               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  78               		.loc 2 437 0
  79               	/* #APP */
  80               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  81 0006 F894      		cli
  82               	 ;  0 "" 2
  83               	/* #NOAPP */
  84               	.LBE61:
  85               	.LBE60:
  86               	.LBE59:
  87               	.LBE58:
  85:../../../os/hal/src/hal_ext.c **** 
  86:../../../os/hal/src/hal_ext.c ****   osalDbgCheck((extp != NULL) && (config != NULL));
  87:../../../os/hal/src/hal_ext.c **** 
  88:../../../os/hal/src/hal_ext.c ****   osalSysLock();
  89:../../../os/hal/src/hal_ext.c ****   osalDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
  90:../../../os/hal/src/hal_ext.c ****                 "invalid state");
  91:../../../os/hal/src/hal_ext.c ****   extp->config = config;
  88               		.loc 1 91 0
  89 0008 7A83      		std Y+2,r23
  90 000a 6983      		std Y+1,r22
  92:../../../os/hal/src/hal_ext.c ****   ext_lld_start(extp);
  91               		.loc 1 92 0
  92 000c 0E94 0000 		call ext_lld_start
  93               	.LVL3:
  93:../../../os/hal/src/hal_ext.c ****   extp->state = EXT_ACTIVE;
  94               		.loc 1 93 0
  95 0010 82E0      		ldi r24,lo8(2)
  96 0012 8883      		st Y,r24
  97               	.LBB62:
  98               	.LBB63:
  99               	.LBB64:
 100               	.LBB65:
 101               	.LBB66:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 102               		.loc 2 447 0
 103               	/* #APP */
 104               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 105 0014 7894      		sei
 106               	 ;  0 "" 2
 107               	/* epilogue start */
 108               	/* #NOAPP */
 109               	.LBE66:
 110               	.LBE65:
 111               	.LBE64:
 112               	.LBE63:
 113               	.LBE62:
  94:../../../os/hal/src/hal_ext.c ****   osalSysUnlock();
  95:../../../os/hal/src/hal_ext.c **** }
 114               		.loc 1 95 0
 115 0016 DF91      		pop r29
 116 0018 CF91      		pop r28
 117               	.LVL4:
 118 001a 0895      		ret
 119               		.cfi_endproc
 120               	.LFE145:
 122               		.section	.text.extStop,"ax",@progbits
 123               	.global	extStop
 125               	extStop:
 126               	.LFB146:
  96:../../../os/hal/src/hal_ext.c **** 
  97:../../../os/hal/src/hal_ext.c **** /**
  98:../../../os/hal/src/hal_ext.c ****  * @brief   Deactivates the EXT peripheral.
  99:../../../os/hal/src/hal_ext.c ****  *
 100:../../../os/hal/src/hal_ext.c ****  * @param[in] extp      pointer to the @p EXTDriver object
 101:../../../os/hal/src/hal_ext.c ****  *
 102:../../../os/hal/src/hal_ext.c ****  * @api
 103:../../../os/hal/src/hal_ext.c ****  */
 104:../../../os/hal/src/hal_ext.c **** void extStop(EXTDriver *extp) {
 127               		.loc 1 104 0
 128               		.cfi_startproc
 129               	.LVL5:
 130 0000 CF93      		push r28
 131               	.LCFI2:
 132               		.cfi_def_cfa_offset 4
 133               		.cfi_offset 28, -3
 134 0002 DF93      		push r29
 135               	.LCFI3:
 136               		.cfi_def_cfa_offset 5
 137               		.cfi_offset 29, -4
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 2 */
 141               	.L__stack_usage = 2
 142 0004 EC01      		movw r28,r24
 143               	.LBB67:
 144               	.LBB68:
 145               	.LBB69:
 146               	.LBB70:
 437:../../../os/common/ports/AVR/chcore.h **** }
 147               		.loc 2 437 0
 148               	/* #APP */
 149               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 150 0006 F894      		cli
 151               	 ;  0 "" 2
 152               	/* #NOAPP */
 153               	.LBE70:
 154               	.LBE69:
 155               	.LBE68:
 156               	.LBE67:
 105:../../../os/hal/src/hal_ext.c **** 
 106:../../../os/hal/src/hal_ext.c ****   osalDbgCheck(extp != NULL);
 107:../../../os/hal/src/hal_ext.c **** 
 108:../../../os/hal/src/hal_ext.c ****   osalSysLock();
 109:../../../os/hal/src/hal_ext.c **** 
 110:../../../os/hal/src/hal_ext.c ****   osalDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
 111:../../../os/hal/src/hal_ext.c ****                 "invalid state");
 112:../../../os/hal/src/hal_ext.c **** 
 113:../../../os/hal/src/hal_ext.c ****   ext_lld_stop(extp);
 157               		.loc 1 113 0
 158 0008 0E94 0000 		call ext_lld_stop
 159               	.LVL6:
 114:../../../os/hal/src/hal_ext.c ****   extp->config = NULL;
 160               		.loc 1 114 0
 161 000c 1A82      		std Y+2,__zero_reg__
 162 000e 1982      		std Y+1,__zero_reg__
 115:../../../os/hal/src/hal_ext.c ****   extp->state  = EXT_STOP;
 163               		.loc 1 115 0
 164 0010 81E0      		ldi r24,lo8(1)
 165 0012 8883      		st Y,r24
 166               	.LBB71:
 167               	.LBB72:
 168               	.LBB73:
 169               	.LBB74:
 170               	.LBB75:
 171               		.loc 2 447 0
 172               	/* #APP */
 173               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 174 0014 7894      		sei
 175               	 ;  0 "" 2
 176               	/* epilogue start */
 177               	/* #NOAPP */
 178               	.LBE75:
 179               	.LBE74:
 180               	.LBE73:
 181               	.LBE72:
 182               	.LBE71:
 116:../../../os/hal/src/hal_ext.c **** 
 117:../../../os/hal/src/hal_ext.c ****   osalSysUnlock();
 118:../../../os/hal/src/hal_ext.c **** }
 183               		.loc 1 118 0
 184 0016 DF91      		pop r29
 185 0018 CF91      		pop r28
 186               	.LVL7:
 187 001a 0895      		ret
 188               		.cfi_endproc
 189               	.LFE146:
 191               		.section	.text.extChannelEnable,"ax",@progbits
 192               	.global	extChannelEnable
 194               	extChannelEnable:
 195               	.LFB147:
 119:../../../os/hal/src/hal_ext.c **** 
 120:../../../os/hal/src/hal_ext.c **** /**
 121:../../../os/hal/src/hal_ext.c ****  * @brief   Enables an EXT channel.
 122:../../../os/hal/src/hal_ext.c ****  * @pre     The channel must not be in @p EXT_CH_MODE_DISABLED mode.
 123:../../../os/hal/src/hal_ext.c ****  *
 124:../../../os/hal/src/hal_ext.c ****  * @param[in] extp      pointer to the @p EXTDriver object
 125:../../../os/hal/src/hal_ext.c ****  * @param[in] channel   channel to be enabled
 126:../../../os/hal/src/hal_ext.c ****  *
 127:../../../os/hal/src/hal_ext.c ****  * @api
 128:../../../os/hal/src/hal_ext.c ****  */
 129:../../../os/hal/src/hal_ext.c **** void extChannelEnable(EXTDriver *extp, expchannel_t channel) {
 196               		.loc 1 129 0
 197               		.cfi_startproc
 198               	.LVL8:
 199               	/* prologue: function */
 200               	/* frame size = 0 */
 201               	/* stack size = 0 */
 202               	.L__stack_usage = 0
 203               	.LBB76:
 204               	.LBB77:
 205               	.LBB78:
 206               	.LBB79:
 437:../../../os/common/ports/AVR/chcore.h **** }
 207               		.loc 2 437 0
 208               	/* #APP */
 209               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 210 0000 F894      		cli
 211               	 ;  0 "" 2
 212               	/* #NOAPP */
 213               	.LBE79:
 214               	.LBE78:
 215               	.LBE77:
 216               	.LBE76:
 130:../../../os/hal/src/hal_ext.c **** 
 131:../../../os/hal/src/hal_ext.c ****   osalDbgCheck((extp != NULL) && (channel < (expchannel_t)EXT_MAX_CHANNELS));
 132:../../../os/hal/src/hal_ext.c **** 
 133:../../../os/hal/src/hal_ext.c ****   osalSysLock();
 134:../../../os/hal/src/hal_ext.c ****   osalDbgAssert((extp->state == EXT_ACTIVE) &&
 135:../../../os/hal/src/hal_ext.c ****                 ((extp->config->channels[channel].mode &
 136:../../../os/hal/src/hal_ext.c ****                   EXT_CH_MODE_EDGES_MASK) != EXT_CH_MODE_DISABLED),
 137:../../../os/hal/src/hal_ext.c ****                 "invalid state");
 138:../../../os/hal/src/hal_ext.c ****   extChannelEnableI(extp, channel);
 217               		.loc 1 138 0
 218 0002 0E94 0000 		call ext_lld_channel_enable
 219               	.LVL9:
 220               	.LBB80:
 221               	.LBB81:
 222               	.LBB82:
 223               	.LBB83:
 224               	.LBB84:
 225               		.loc 2 447 0
 226               	/* #APP */
 227               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 228 0006 7894      		sei
 229               	 ;  0 "" 2
 230               	/* #NOAPP */
 231 0008 0895      		ret
 232               	.LBE84:
 233               	.LBE83:
 234               	.LBE82:
 235               	.LBE81:
 236               	.LBE80:
 237               		.cfi_endproc
 238               	.LFE147:
 240               		.section	.text.extChannelDisable,"ax",@progbits
 241               	.global	extChannelDisable
 243               	extChannelDisable:
 244               	.LFB148:
 139:../../../os/hal/src/hal_ext.c ****   osalSysUnlock();
 140:../../../os/hal/src/hal_ext.c **** }
 141:../../../os/hal/src/hal_ext.c **** 
 142:../../../os/hal/src/hal_ext.c **** /**
 143:../../../os/hal/src/hal_ext.c ****  * @brief   Disables an EXT channel.
 144:../../../os/hal/src/hal_ext.c ****  * @pre     The channel must not be in @p EXT_CH_MODE_DISABLED mode.
 145:../../../os/hal/src/hal_ext.c ****  *
 146:../../../os/hal/src/hal_ext.c ****  * @param[in] extp      pointer to the @p EXTDriver object
 147:../../../os/hal/src/hal_ext.c ****  * @param[in] channel   channel to be disabled
 148:../../../os/hal/src/hal_ext.c ****  *
 149:../../../os/hal/src/hal_ext.c ****  * @api
 150:../../../os/hal/src/hal_ext.c ****  */
 151:../../../os/hal/src/hal_ext.c **** void extChannelDisable(EXTDriver *extp, expchannel_t channel) {
 245               		.loc 1 151 0
 246               		.cfi_startproc
 247               	.LVL10:
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
 252               	.LBB85:
 253               	.LBB86:
 254               	.LBB87:
 255               	.LBB88:
 437:../../../os/common/ports/AVR/chcore.h **** }
 256               		.loc 2 437 0
 257               	/* #APP */
 258               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 259 0000 F894      		cli
 260               	 ;  0 "" 2
 261               	/* #NOAPP */
 262               	.LBE88:
 263               	.LBE87:
 264               	.LBE86:
 265               	.LBE85:
 152:../../../os/hal/src/hal_ext.c **** 
 153:../../../os/hal/src/hal_ext.c ****   osalDbgCheck((extp != NULL) && (channel < (expchannel_t)EXT_MAX_CHANNELS));
 154:../../../os/hal/src/hal_ext.c **** 
 155:../../../os/hal/src/hal_ext.c ****   osalSysLock();
 156:../../../os/hal/src/hal_ext.c ****   osalDbgAssert((extp->state == EXT_ACTIVE) &&
 157:../../../os/hal/src/hal_ext.c ****                 ((extp->config->channels[channel].mode &
 158:../../../os/hal/src/hal_ext.c ****                   EXT_CH_MODE_EDGES_MASK) != EXT_CH_MODE_DISABLED),
 159:../../../os/hal/src/hal_ext.c ****                 "invalid state");
 160:../../../os/hal/src/hal_ext.c ****   extChannelDisableI(extp, channel);
 266               		.loc 1 160 0
 267 0002 0E94 0000 		call ext_lld_channel_disable
 268               	.LVL11:
 269               	.LBB89:
 270               	.LBB90:
 271               	.LBB91:
 272               	.LBB92:
 273               	.LBB93:
 274               		.loc 2 447 0
 275               	/* #APP */
 276               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 277 0006 7894      		sei
 278               	 ;  0 "" 2
 279               	/* #NOAPP */
 280 0008 0895      		ret
 281               	.LBE93:
 282               	.LBE92:
 283               	.LBE91:
 284               	.LBE90:
 285               	.LBE89:
 286               		.cfi_endproc
 287               	.LFE148:
 289               		.section	.text.extSetChannelModeI,"ax",@progbits
 290               	.global	extSetChannelModeI
 292               	extSetChannelModeI:
 293               	.LFB149:
 161:../../../os/hal/src/hal_ext.c ****   osalSysUnlock();
 162:../../../os/hal/src/hal_ext.c **** }
 163:../../../os/hal/src/hal_ext.c **** 
 164:../../../os/hal/src/hal_ext.c **** /**
 165:../../../os/hal/src/hal_ext.c ****  * @brief   Changes the operation mode of a channel.
 166:../../../os/hal/src/hal_ext.c ****  * @note    This function attempts to write over the current configuration
 167:../../../os/hal/src/hal_ext.c ****  *          structure that must have been not declared constant. This
 168:../../../os/hal/src/hal_ext.c ****  *          violates the @p const qualifier in @p extStart() but it is
 169:../../../os/hal/src/hal_ext.c ****  *          intentional.
 170:../../../os/hal/src/hal_ext.c ****  * @note    This function cannot be used if the configuration structure is
 171:../../../os/hal/src/hal_ext.c ****  *          declared @p const.
 172:../../../os/hal/src/hal_ext.c ****  * @note    The effect of this function on constant configuration structures
 173:../../../os/hal/src/hal_ext.c ****  *          is not defined.
 174:../../../os/hal/src/hal_ext.c ****  *
 175:../../../os/hal/src/hal_ext.c ****  * @param[in] extp      pointer to the @p EXTDriver object
 176:../../../os/hal/src/hal_ext.c ****  * @param[in] channel   channel to be changed
 177:../../../os/hal/src/hal_ext.c ****  * @param[in] extcp     new configuration for the channel
 178:../../../os/hal/src/hal_ext.c ****  *
 179:../../../os/hal/src/hal_ext.c ****  * @iclass
 180:../../../os/hal/src/hal_ext.c ****  */
 181:../../../os/hal/src/hal_ext.c **** void extSetChannelModeI(EXTDriver *extp,
 182:../../../os/hal/src/hal_ext.c ****                         expchannel_t channel,
 183:../../../os/hal/src/hal_ext.c ****                         const EXTChannelConfig *extcp) {
 294               		.loc 1 183 0
 295               		.cfi_startproc
 296               	.LVL12:
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 0 */
 300               	.L__stack_usage = 0
 184:../../../os/hal/src/hal_ext.c ****   EXTChannelConfig *oldcp;
 185:../../../os/hal/src/hal_ext.c **** 
 186:../../../os/hal/src/hal_ext.c ****   osalDbgCheck((extp != NULL) &&
 187:../../../os/hal/src/hal_ext.c ****                (channel < (expchannel_t)EXT_MAX_CHANNELS) &&
 188:../../../os/hal/src/hal_ext.c ****                (extcp != NULL));
 189:../../../os/hal/src/hal_ext.c **** 
 190:../../../os/hal/src/hal_ext.c ****   osalDbgAssert(extp->state == EXT_ACTIVE, "invalid state");
 191:../../../os/hal/src/hal_ext.c **** 
 192:../../../os/hal/src/hal_ext.c ****   /* Note that here the access is enforced as non-const, known access
 193:../../../os/hal/src/hal_ext.c ****      violation.*/
 194:../../../os/hal/src/hal_ext.c ****   /*lint -save -e9005 [11.8] Known issue, the driver needs rework here.*/
 195:../../../os/hal/src/hal_ext.c ****   oldcp = (EXTChannelConfig *)&extp->config->channels[channel];
 196:../../../os/hal/src/hal_ext.c ****   /*lint -restore*/
 197:../../../os/hal/src/hal_ext.c **** 
 198:../../../os/hal/src/hal_ext.c ****   /* Overwriting the old channels configuration then the channel is
 199:../../../os/hal/src/hal_ext.c ****      reconfigured by the low level driver.*/
 200:../../../os/hal/src/hal_ext.c ****   *oldcp = *extcp;
 301               		.loc 1 200 0
 302 0000 FC01      		movw r30,r24
 303 0002 2181      		ldd r18,Z+1
 304 0004 3281      		ldd r19,Z+2
 305 0006 DB01      		movw r26,r22
 306 0008 AA0F      		lsl r26
 307 000a BB1F      		rol r27
 308 000c A60F      		add r26,r22
 309 000e B71F      		adc r27,r23
 310 0010 AA0F      		lsl r26
 311 0012 BB1F      		rol r27
 312 0014 A20F      		add r26,r18
 313 0016 B31F      		adc r27,r19
 314 0018 26E0      		ldi r18,lo8(6)
 315 001a FA01      		movw r30,r20
 316               		0:
 317 001c 0190      		ld r0,Z+
 318 001e 0D92      		st X+,r0
 319 0020 2A95      		dec r18
 320 0022 01F4      		brne 0b
 201:../../../os/hal/src/hal_ext.c ****   ext_lld_channel_enable(extp, channel);
 321               		.loc 1 201 0
 322 0024 0C94 0000 		jmp ext_lld_channel_enable
 323               	.LVL13:
 324               		.cfi_endproc
 325               	.LFE149:
 327               		.text
 328               	.Letext0:
 329               		.file 3 "/usr/lib/avr/include/stdint.h"
 330               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 331               		.file 5 "../../../os/rt/include/chsystypes.h"
 332               		.file 6 "../../../os/rt/include/chschd.h"
 333               		.file 7 "../../../os/rt/include/chsem.h"
 334               		.file 8 "../../../os/rt/include/chmtx.h"
 335               		.file 9 "../../../os/hal/include/hal_ext.h"
 336               		.file 10 "../../../os/hal/ports/AVR/MEGA/EXTv1/hal_ext_lld.h"
 337               		.file 11 "../../../os/rt/include/chsys.h"
 338               		.file 12 "../../../os/hal/osal/rt/osal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_ext.c
     /tmp/ccFpBAON.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccFpBAON.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccFpBAON.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccFpBAON.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccFpBAON.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccFpBAON.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccFpBAON.s:14     .text.extInit:0000000000000000 extInit
     /tmp/ccFpBAON.s:32     .text.extObjectInit:0000000000000000 extObjectInit
     /tmp/ccFpBAON.s:55     .text.extStart:0000000000000000 extStart
     /tmp/ccFpBAON.s:125    .text.extStop:0000000000000000 extStop
     /tmp/ccFpBAON.s:194    .text.extChannelEnable:0000000000000000 extChannelEnable
     /tmp/ccFpBAON.s:243    .text.extChannelDisable:0000000000000000 extChannelDisable
     /tmp/ccFpBAON.s:292    .text.extSetChannelModeI:0000000000000000 extSetChannelModeI

UNDEFINED SYMBOLS
ext_lld_init
ext_lld_start
ext_lld_stop
ext_lld_channel_enable
ext_lld_channel_disable

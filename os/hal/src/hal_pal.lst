   1               		.file	"hal_pal.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.palReadBus,"ax",@progbits
  12               	.global	palReadBus
  14               	palReadBus:
  15               	.LFB143:
  16               		.file 1 "../../../os/hal/src/hal_pal.c"
   1:../../../os/hal/src/hal_pal.c **** /*
   2:../../../os/hal/src/hal_pal.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/src/hal_pal.c **** 
   4:../../../os/hal/src/hal_pal.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_pal.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_pal.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_pal.c **** 
   8:../../../os/hal/src/hal_pal.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_pal.c **** 
  10:../../../os/hal/src/hal_pal.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_pal.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_pal.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_pal.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_pal.c ****     limitations under the License.
  15:../../../os/hal/src/hal_pal.c **** */
  16:../../../os/hal/src/hal_pal.c **** 
  17:../../../os/hal/src/hal_pal.c **** /**
  18:../../../os/hal/src/hal_pal.c ****  * @file    hal_pal.c
  19:../../../os/hal/src/hal_pal.c ****  * @brief   I/O Ports Abstraction Layer code.
  20:../../../os/hal/src/hal_pal.c ****  *
  21:../../../os/hal/src/hal_pal.c ****  * @addtogroup PAL
  22:../../../os/hal/src/hal_pal.c ****  * @{
  23:../../../os/hal/src/hal_pal.c ****  */
  24:../../../os/hal/src/hal_pal.c **** 
  25:../../../os/hal/src/hal_pal.c **** #include "hal.h"
  26:../../../os/hal/src/hal_pal.c **** 
  27:../../../os/hal/src/hal_pal.c **** #if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  28:../../../os/hal/src/hal_pal.c **** 
  29:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  30:../../../os/hal/src/hal_pal.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  32:../../../os/hal/src/hal_pal.c **** 
  33:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  34:../../../os/hal/src/hal_pal.c **** /* Driver exported variables.                                                */
  35:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  36:../../../os/hal/src/hal_pal.c **** 
  37:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  38:../../../os/hal/src/hal_pal.c **** /* Driver local variables and types.                                         */
  39:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  40:../../../os/hal/src/hal_pal.c **** 
  41:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  42:../../../os/hal/src/hal_pal.c **** /* Driver local functions.                                                   */
  43:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_pal.c **** 
  45:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_pal.c **** /* Driver exported functions.                                                */
  47:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_pal.c **** 
  49:../../../os/hal/src/hal_pal.c **** /**
  50:../../../os/hal/src/hal_pal.c ****  * @brief   Read from an I/O bus.
  51:../../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
  52:../../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
  53:../../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
  54:../../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
  55:../../../os/hal/src/hal_pal.c ****  * @note    The function internally uses the @p palReadGroup() macro. The use
  56:../../../os/hal/src/hal_pal.c ****  *          of this function is preferred when you value code size, readability
  57:../../../os/hal/src/hal_pal.c ****  *          and error checking over speed.
  58:../../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
  59:../../../os/hal/src/hal_pal.c ****  *
  60:../../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
  61:../../../os/hal/src/hal_pal.c ****  * @return              The bus logical states.
  62:../../../os/hal/src/hal_pal.c ****  *
  63:../../../os/hal/src/hal_pal.c ****  * @special
  64:../../../os/hal/src/hal_pal.c ****  */
  65:../../../os/hal/src/hal_pal.c **** ioportmask_t palReadBus(IOBus *bus) {
  17               		.loc 1 65 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24 0000 FC01      		movw r30,r24
  66:../../../os/hal/src/hal_pal.c **** 
  67:../../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
  68:../../../os/hal/src/hal_pal.c **** 
  69:../../../os/hal/src/hal_pal.c ****   return palReadGroup(bus->portid, bus->mask, bus->offset);
  25               		.loc 1 69 0
  26 0002 A081      		ld r26,Z
  27 0004 B181      		ldd r27,Z+1
  28 0006 2C91      		ld r18,X
  29 0008 30E0      		ldi r19,0
  30 000a 0380      		ldd r0,Z+3
  31 000c 00C0      		rjmp 2f
  32               		1:
  33 000e 3595      		asr r19
  34 0010 2795      		ror r18
  35               		2:
  36 0012 0A94      		dec r0
  37 0014 02F4      		brpl 1b
  38 0016 8281      		ldd r24,Z+2
  39               	.LVL1:
  70:../../../os/hal/src/hal_pal.c **** }
  40               		.loc 1 70 0
  41 0018 8223      		and r24,r18
  42 001a 0895      		ret
  43               		.cfi_endproc
  44               	.LFE143:
  46               		.section	.text.palWriteBus,"ax",@progbits
  47               	.global	palWriteBus
  49               	palWriteBus:
  50               	.LFB144:
  71:../../../os/hal/src/hal_pal.c **** 
  72:../../../os/hal/src/hal_pal.c **** /**
  73:../../../os/hal/src/hal_pal.c ****  * @brief   Write to an I/O bus.
  74:../../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
  75:../../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
  76:../../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
  77:../../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
  78:../../../os/hal/src/hal_pal.c ****  * @note    The default implementation is non atomic and not necessarily
  79:../../../os/hal/src/hal_pal.c ****  *          optimal. Low level drivers may  optimize the function by using
  80:../../../os/hal/src/hal_pal.c ****  *          specific hardware or coding.
  81:../../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
  82:../../../os/hal/src/hal_pal.c ****  *
  83:../../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
  84:../../../os/hal/src/hal_pal.c ****  * @param[in] bits      the bits to be written on the I/O bus. Values exceeding
  85:../../../os/hal/src/hal_pal.c ****  *                      the bus width are masked so most significant bits are
  86:../../../os/hal/src/hal_pal.c ****  *                      lost.
  87:../../../os/hal/src/hal_pal.c ****  *
  88:../../../os/hal/src/hal_pal.c ****  * @special
  89:../../../os/hal/src/hal_pal.c ****  */
  90:../../../os/hal/src/hal_pal.c **** void palWriteBus(IOBus *bus, ioportmask_t bits) {
  51               		.loc 1 90 0
  52               		.cfi_startproc
  53               	.LVL2:
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 0 */
  57               	.L__stack_usage = 0
  58 0000 FC01      		movw r30,r24
  59 0002 962F      		mov r25,r22
  91:../../../os/hal/src/hal_pal.c **** 
  92:../../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
  93:../../../os/hal/src/hal_pal.c **** 
  94:../../../os/hal/src/hal_pal.c ****   palWriteGroup(bus->portid, bus->mask, bus->offset, bits);
  60               		.loc 1 94 0
  61 0004 A081      		ld r26,Z
  62 0006 B181      		ldd r27,Z+1
  63 0008 1296      		adiw r26,2
  64 000a 4C91      		ld r20,X
  65 000c 1297      		sbiw r26,2
  66 000e 6281      		ldd r22,Z+2
  67               	.LVL3:
  68 0010 5381      		ldd r21,Z+3
  69 0012 262F      		mov r18,r22
  70 0014 052E      		mov r0,r21
  71 0016 00C0      		rjmp 2f
  72               		1:
  73 0018 220F      		lsl r18
  74               		2:
  75 001a 0A94      		dec r0
  76 001c 02F4      		brpl 1b
  77 001e 2095      		com r18
  78 0020 2423      		and r18,r20
  79 0022 862F      		mov r24,r22
  80               	.LVL4:
  81 0024 8923      		and r24,r25
  82 0026 682F      		mov r22,r24
  83 0028 00C0      		rjmp 2f
  84               		1:
  85 002a 660F      		lsl r22
  86               		2:
  87 002c 5A95      		dec r21
  88 002e 02F4      		brpl 1b
  89 0030 622B      		or r22,r18
  90 0032 1296      		adiw r26,2
  91 0034 6C93      		st X,r22
  92 0036 0895      		ret
  93               		.cfi_endproc
  94               	.LFE144:
  96               		.section	.text.palSetBusMode,"ax",@progbits
  97               	.global	palSetBusMode
  99               	palSetBusMode:
 100               	.LFB145:
  95:../../../os/hal/src/hal_pal.c **** }
  96:../../../os/hal/src/hal_pal.c **** 
  97:../../../os/hal/src/hal_pal.c **** /**
  98:../../../os/hal/src/hal_pal.c ****  * @brief   Programs a bus with the specified mode.
  99:../../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
 100:../../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
 101:../../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
 102:../../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
 103:../../../os/hal/src/hal_pal.c ****  * @note    The default implementation is non atomic and not necessarily
 104:../../../os/hal/src/hal_pal.c ****  *          optimal. Low level drivers may  optimize the function by using
 105:../../../os/hal/src/hal_pal.c ****  *          specific hardware or coding.
 106:../../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
 107:../../../os/hal/src/hal_pal.c ****  *
 108:../../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
 109:../../../os/hal/src/hal_pal.c ****  * @param[in] mode      the mode
 110:../../../os/hal/src/hal_pal.c ****  *
 111:../../../os/hal/src/hal_pal.c ****  * @special
 112:../../../os/hal/src/hal_pal.c ****  */
 113:../../../os/hal/src/hal_pal.c **** void palSetBusMode(IOBus *bus, iomode_t mode) {
 101               		.loc 1 113 0
 102               		.cfi_startproc
 103               	.LVL5:
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 0 */
 107               	.L__stack_usage = 0
 108 0000 FC01      		movw r30,r24
 109 0002 462F      		mov r20,r22
 114:../../../os/hal/src/hal_pal.c **** 
 115:../../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 116:../../../os/hal/src/hal_pal.c **** 
 117:../../../os/hal/src/hal_pal.c ****   palSetGroupMode(bus->portid, bus->mask, bus->offset, mode);
 110               		.loc 1 117 0
 111 0004 2281      		ldd r18,Z+2
 112 0006 30E0      		ldi r19,0
 113 0008 B901      		movw r22,r18
 114               	.LVL6:
 115 000a 0380      		ldd r0,Z+3
 116 000c 00C0      		rjmp 2f
 117               		1:
 118 000e 660F      		lsl r22
 119 0010 771F      		rol r23
 120               		2:
 121 0012 0A94      		dec r0
 122 0014 02F4      		brpl 1b
 123 0016 8081      		ld r24,Z
 124 0018 9181      		ldd r25,Z+1
 125               	.LVL7:
 126 001a 0C94 0000 		jmp _pal_lld_setgroupmode
 127               	.LVL8:
 128               		.cfi_endproc
 129               	.LFE145:
 131               		.text
 132               	.Letext0:
 133               		.file 2 "/usr/lib/avr/include/stdint.h"
 134               		.file 3 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 135               		.file 4 "../../../os/rt/include/chsystypes.h"
 136               		.file 5 "../../../os/rt/include/chschd.h"
 137               		.file 6 "../../../os/common/ports/AVR/chcore.h"
 138               		.file 7 "../../../os/rt/include/chsem.h"
 139               		.file 8 "../../../os/rt/include/chmtx.h"
 140               		.file 9 "../../../os/hal/ports/AVR/MEGA/GPIOv1/hal_pal_lld.h"
 141               		.file 10 "../../../os/hal/include/hal_pal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_pal.c
     /tmp/ccARIE8G.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccARIE8G.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccARIE8G.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccARIE8G.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccARIE8G.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccARIE8G.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccARIE8G.s:14     .text.palReadBus:0000000000000000 palReadBus
     /tmp/ccARIE8G.s:49     .text.palWriteBus:0000000000000000 palWriteBus
     /tmp/ccARIE8G.s:99     .text.palSetBusMode:0000000000000000 palSetBusMode

UNDEFINED SYMBOLS
_pal_lld_setgroupmode

   1               		.file	"hal_queues.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.iqObjectInit,"ax",@progbits
  12               	.global	iqObjectInit
  14               	iqObjectInit:
  15               	.LFB143:
  16               		.file 1 "../../../os/hal/src/hal_queues.c"
   1:../../../os/hal/src/hal_queues.c **** /*
   2:../../../os/hal/src/hal_queues.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/src/hal_queues.c **** 
   4:../../../os/hal/src/hal_queues.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_queues.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_queues.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_queues.c **** 
   8:../../../os/hal/src/hal_queues.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_queues.c **** 
  10:../../../os/hal/src/hal_queues.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_queues.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_queues.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_queues.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_queues.c ****     limitations under the License.
  15:../../../os/hal/src/hal_queues.c **** */
  16:../../../os/hal/src/hal_queues.c **** 
  17:../../../os/hal/src/hal_queues.c **** /**
  18:../../../os/hal/src/hal_queues.c ****  * @file    hal_queues.c
  19:../../../os/hal/src/hal_queues.c ****  * @brief   I/O Queues code.
  20:../../../os/hal/src/hal_queues.c ****  *
  21:../../../os/hal/src/hal_queues.c ****  * @addtogroup HAL_QUEUES
  22:../../../os/hal/src/hal_queues.c ****  * @details Queues are mostly used in serial-like device drivers.
  23:../../../os/hal/src/hal_queues.c ****  *          Serial device drivers are usually designed to have a lower side
  24:../../../os/hal/src/hal_queues.c ****  *          (lower driver, it is usually an interrupt service routine) and an
  25:../../../os/hal/src/hal_queues.c ****  *          upper side (upper driver, accessed by the application threads).<br>
  26:../../../os/hal/src/hal_queues.c ****  *          There are several kind of queues:<br>
  27:../../../os/hal/src/hal_queues.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  28:../../../os/hal/src/hal_queues.c ****  *            lower side and the reader is the upper side.
  29:../../../os/hal/src/hal_queues.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  30:../../../os/hal/src/hal_queues.c ****  *            upper side and the reader is the lower side.
  31:../../../os/hal/src/hal_queues.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  32:../../../os/hal/src/hal_queues.c ****  *            are implemented by pairing an input queue and an output queue
  33:../../../os/hal/src/hal_queues.c ****  *            together.
  34:../../../os/hal/src/hal_queues.c ****  *          .
  35:../../../os/hal/src/hal_queues.c ****  * @{
  36:../../../os/hal/src/hal_queues.c ****  */
  37:../../../os/hal/src/hal_queues.c **** 
  38:../../../os/hal/src/hal_queues.c **** #include "hal.h"
  39:../../../os/hal/src/hal_queues.c **** 
  40:../../../os/hal/src/hal_queues.c **** /**
  41:../../../os/hal/src/hal_queues.c ****  * @brief   Initializes an input queue.
  42:../../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
  43:../../../os/hal/src/hal_queues.c ****  *          the bytes contained in the queue.
  44:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
  45:../../../os/hal/src/hal_queues.c ****  *
  46:../../../os/hal/src/hal_queues.c ****  * @param[out] iqp      pointer to an @p input_queue_t structure
  47:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
  48:../../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
  49:../../../os/hal/src/hal_queues.c ****  * @param[in] infy      pointer to a callback function that is invoked when
  50:../../../os/hal/src/hal_queues.c ****  *                      data is read from the queue. The value can be @p NULL.
  51:../../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
  52:../../../os/hal/src/hal_queues.c ****  *
  53:../../../os/hal/src/hal_queues.c ****  * @init
  54:../../../os/hal/src/hal_queues.c ****  */
  55:../../../os/hal/src/hal_queues.c **** void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
  56:../../../os/hal/src/hal_queues.c ****                   qnotify_t infy, void *link) {
  17               		.loc 1 56 0
  18               		.cfi_startproc
  19               	.LVL0:
  20 0000 0F93      		push r16
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 16, -3
  24 0002 1F93      		push r17
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 5
  27               		.cfi_offset 17, -4
  28               	/* prologue: function */
  29               	/* frame size = 0 */
  30               	/* stack size = 2 */
  31               	.L__stack_usage = 2
  32 0004 FC01      		movw r30,r24
  33               	.LVL1:
  34               	.LBB181:
  35               	.LBB182:
  36               	.LBB183:
  37               	.LBB184:
  38               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:../../../os/rt/include/chschd.h **** #endif
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:../../../os/rt/include/chschd.h **** #endif
 124:../../../os/rt/include/chschd.h **** 
 125:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:../../../os/rt/include/chschd.h **** #endif
 128:../../../os/rt/include/chschd.h **** 
 129:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 130:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 132:../../../os/rt/include/chschd.h **** 
 133:../../../os/rt/include/chschd.h **** /**
 134:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:../../../os/rt/include/chschd.h ****  */
 136:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 137:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:../../../os/rt/include/chschd.h **** };
 139:../../../os/rt/include/chschd.h **** 
 140:../../../os/rt/include/chschd.h **** /**
 141:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:../../../os/rt/include/chschd.h ****  */
 143:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 144:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:../../../os/rt/include/chschd.h **** };
 147:../../../os/rt/include/chschd.h **** 
 148:../../../os/rt/include/chschd.h **** /**
 149:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:../../../os/rt/include/chschd.h ****  */
 154:../../../os/rt/include/chschd.h **** struct ch_thread {
 155:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:../../../os/rt/include/chschd.h **** #endif
 162:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:../../../os/rt/include/chschd.h ****   /**
 165:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:../../../os/rt/include/chschd.h ****    */
 167:../../../os/rt/include/chschd.h ****   const char            *name;
 168:../../../os/rt/include/chschd.h **** #endif
 169:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:../../../os/rt/include/chschd.h ****   /**
 172:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 175:../../../os/rt/include/chschd.h ****    */
 176:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:../../../os/rt/include/chschd.h **** #endif
 178:../../../os/rt/include/chschd.h ****   /**
 179:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:../../../os/rt/include/chschd.h ****    */
 181:../../../os/rt/include/chschd.h ****   tstate_t              state;
 182:../../../os/rt/include/chschd.h ****   /**
 183:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:../../../os/rt/include/chschd.h ****    */
 185:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 186:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:../../../os/rt/include/chschd.h ****    */
 190:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 191:../../../os/rt/include/chschd.h **** #endif
 192:../../../os/rt/include/chschd.h ****   /**
 193:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:../../../os/rt/include/chschd.h ****    */
 195:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:../../../os/rt/include/chschd.h ****   tslices_t             preempt;
 197:../../../os/rt/include/chschd.h **** #endif
 198:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:../../../os/rt/include/chschd.h ****   /**
 200:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:../../../os/rt/include/chschd.h ****    */
 203:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 204:../../../os/rt/include/chschd.h **** #endif
 205:../../../os/rt/include/chschd.h ****   /**
 206:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:../../../os/rt/include/chschd.h ****    */
 210:../../../os/rt/include/chschd.h ****   union {
 211:../../../os/rt/include/chschd.h ****     /**
 212:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:../../../os/rt/include/chschd.h ****      */
 217:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:../../../os/rt/include/chschd.h ****     /**
 219:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:../../../os/rt/include/chschd.h ****      *          this thread.
 223:../../../os/rt/include/chschd.h ****      */
 224:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 225:../../../os/rt/include/chschd.h ****     /**
 226:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:../../../os/rt/include/chschd.h ****      *          states.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 232:../../../os/rt/include/chschd.h ****     /**
 233:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:../../../os/rt/include/chschd.h ****      *          state.
 237:../../../os/rt/include/chschd.h ****      */
 238:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:../../../os/rt/include/chschd.h ****     /**
 241:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:../../../os/rt/include/chschd.h ****      */
 243:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:../../../os/rt/include/chschd.h **** #endif
 245:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:../../../os/rt/include/chschd.h ****     /**
 247:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:../../../os/rt/include/chschd.h ****      *          state.
 251:../../../os/rt/include/chschd.h ****      */
 252:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:../../../os/rt/include/chschd.h **** #endif
 254:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:../../../os/rt/include/chschd.h ****     /**
 256:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:../../../os/rt/include/chschd.h ****      *          state.
 260:../../../os/rt/include/chschd.h ****      */
 261:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:../../../os/rt/include/chschd.h **** #endif
 263:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:../../../os/rt/include/chschd.h ****     /**
 265:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:../../../os/rt/include/chschd.h ****      */
 269:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:../../../os/rt/include/chschd.h **** #endif
 271:../../../os/rt/include/chschd.h ****   }                     u;
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:../../../os/rt/include/chschd.h ****    */
 282:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:../../../os/rt/include/chschd.h **** #endif
 284:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:../../../os/rt/include/chschd.h ****   /**
 286:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:../../../os/rt/include/chschd.h ****    */
 288:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 289:../../../os/rt/include/chschd.h **** #endif
 290:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:../../../os/rt/include/chschd.h ****    */
 295:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:../../../os/rt/include/chschd.h ****   /**
 297:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:../../../os/rt/include/chschd.h ****    */
 299:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 300:../../../os/rt/include/chschd.h **** #endif
 301:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:../../../os/rt/include/chschd.h ****   /**
 304:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:../../../os/rt/include/chschd.h ****    */
 306:../../../os/rt/include/chschd.h ****   void                  *mpool;
 307:../../../os/rt/include/chschd.h **** #endif
 308:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:../../../os/rt/include/chschd.h ****   /**
 310:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:../../../os/rt/include/chschd.h ****    */
 312:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:../../../os/rt/include/chschd.h **** #endif
 314:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:../../../os/rt/include/chschd.h **** #endif
 318:../../../os/rt/include/chschd.h **** };
 319:../../../os/rt/include/chschd.h **** 
 320:../../../os/rt/include/chschd.h **** /**
 321:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:../../../os/rt/include/chschd.h ****  *
 323:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:../../../os/rt/include/chschd.h ****  */
 325:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 331:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 333:../../../os/rt/include/chschd.h **** };
 334:../../../os/rt/include/chschd.h **** 
 335:../../../os/rt/include/chschd.h **** /**
 336:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:../../../os/rt/include/chschd.h ****  */
 341:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:../../../os/rt/include/chschd.h ****                                                 list.                       */
 344:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:../../../os/rt/include/chschd.h ****                                                 list.                       */
 346:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:../../../os/rt/include/chschd.h **** #endif
 350:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:../../../os/rt/include/chschd.h ****   /**
 352:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:../../../os/rt/include/chschd.h ****    */
 354:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 356:../../../os/rt/include/chschd.h **** #endif
 357:../../../os/rt/include/chschd.h **** };
 358:../../../os/rt/include/chschd.h **** 
 359:../../../os/rt/include/chschd.h **** /**
 360:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:../../../os/rt/include/chschd.h ****  */
 362:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 363:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 368:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:../../../os/rt/include/chschd.h **** #endif
 372:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 375:../../../os/rt/include/chschd.h **** };
 376:../../../os/rt/include/chschd.h **** 
 377:../../../os/rt/include/chschd.h **** /**
 378:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:../../../os/rt/include/chschd.h ****  */
 380:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 381:../../../os/rt/include/chschd.h ****   /**
 382:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:../../../os/rt/include/chschd.h ****    */
 388:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:../../../os/rt/include/chschd.h ****   /**
 391:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:../../../os/rt/include/chschd.h ****    */
 393:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:../../../os/rt/include/chschd.h ****   /**
 395:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:../../../os/rt/include/chschd.h ****    */
 397:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:../../../os/rt/include/chschd.h **** #endif
 399:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:../../../os/rt/include/chschd.h ****   /**
 401:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:../../../os/rt/include/chschd.h ****    */
 403:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:../../../os/rt/include/chschd.h **** #endif
 405:../../../os/rt/include/chschd.h **** };
 406:../../../os/rt/include/chschd.h **** 
 407:../../../os/rt/include/chschd.h **** /**
 408:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 409:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:../../../os/rt/include/chschd.h ****  *          stacks.
 411:../../../os/rt/include/chschd.h ****  */
 412:../../../os/rt/include/chschd.h **** struct ch_system {
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:../../../os/rt/include/chschd.h ****   /**
 418:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:../../../os/rt/include/chschd.h ****    */
 420:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:../../../os/rt/include/chschd.h ****   /**
 422:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 423:../../../os/rt/include/chschd.h ****    */
 424:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:../../../os/rt/include/chschd.h ****   /**
 426:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:../../../os/rt/include/chschd.h ****    */
 428:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 429:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:../../../os/rt/include/chschd.h ****   /**
 431:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:../../../os/rt/include/chschd.h ****    */
 433:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:../../../os/rt/include/chschd.h **** #endif
 435:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:../../../os/rt/include/chschd.h ****   /**
 437:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:../../../os/rt/include/chschd.h ****    */
 439:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:../../../os/rt/include/chschd.h **** #endif
 441:../../../os/rt/include/chschd.h **** };
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 444:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 446:../../../os/rt/include/chschd.h **** 
 447:../../../os/rt/include/chschd.h **** /**
 448:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:../../../os/rt/include/chschd.h ****  *
 450:../../../os/rt/include/chschd.h ****  * @notapi
 451:../../../os/rt/include/chschd.h ****  */
 452:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** /**
 455:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:../../../os/rt/include/chschd.h ****  */
 459:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:../../../os/rt/include/chschd.h **** 
 461:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 462:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 464:../../../os/rt/include/chschd.h **** 
 465:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 467:../../../os/rt/include/chschd.h **** #endif
 468:../../../os/rt/include/chschd.h **** 
 469:../../../os/rt/include/chschd.h **** /*
 470:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 471:../../../os/rt/include/chschd.h ****  */
 472:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 473:../../../os/rt/include/chschd.h **** extern "C" {
 474:../../../os/rt/include/chschd.h **** #endif
 475:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 496:../../../os/rt/include/chschd.h **** }
 497:../../../os/rt/include/chschd.h **** #endif
 498:../../../os/rt/include/chschd.h **** 
 499:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 500:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 502:../../../os/rt/include/chschd.h **** 
 503:../../../os/rt/include/chschd.h **** /**
 504:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:../../../os/rt/include/chschd.h ****  *
 506:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:../../../os/rt/include/chschd.h ****  *
 508:../../../os/rt/include/chschd.h ****  * @notapi
 509:../../../os/rt/include/chschd.h ****  */
 510:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:../../../os/rt/include/chschd.h **** 
 512:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:../../../os/rt/include/chschd.h **** }
 514:../../../os/rt/include/chschd.h **** 
 515:../../../os/rt/include/chschd.h **** /**
 516:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:../../../os/rt/include/chschd.h ****  *
 518:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 520:../../../os/rt/include/chschd.h ****  *
 521:../../../os/rt/include/chschd.h ****  * @notapi
 522:../../../os/rt/include/chschd.h ****  */
 523:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:../../../os/rt/include/chschd.h **** 
 525:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:../../../os/rt/include/chschd.h **** }
 527:../../../os/rt/include/chschd.h **** 
 528:../../../os/rt/include/chschd.h **** /**
 529:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:../../../os/rt/include/chschd.h ****  *
 531:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 533:../../../os/rt/include/chschd.h ****  *
 534:../../../os/rt/include/chschd.h ****  * @notapi
 535:../../../os/rt/include/chschd.h ****  */
 536:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:../../../os/rt/include/chschd.h **** 
 538:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:../../../os/rt/include/chschd.h **** }
 540:../../../os/rt/include/chschd.h **** 
 541:../../../os/rt/include/chschd.h **** /**
 542:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:../../../os/rt/include/chschd.h ****  *
 544:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @notapi
 547:../../../os/rt/include/chschd.h ****  */
 548:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:../../../os/rt/include/chschd.h **** 
 550:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  39               		.loc 2 550 0
  40 0006 9183      		std Z+1,r25
  41 0008 8083      		st Z,r24
 551:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  42               		.loc 2 551 0
  43 000a 9383      		std Z+3,r25
  44 000c 8283      		std Z+2,r24
  45               	.LVL2:
  46               	.LBE184:
  47               	.LBE183:
  48               	.LBE182:
  49               	.LBE181:
  57:../../../os/hal/src/hal_queues.c **** 
  58:../../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&iqp->q_waiting);
  59:../../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
  50               		.loc 1 59 0
  51 000e 1582      		std Z+5,__zero_reg__
  52 0010 1482      		std Z+4,__zero_reg__
  60:../../../os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
  53               		.loc 1 60 0
  54 0012 7783      		std Z+7,r23
  55 0014 6683      		std Z+6,r22
  61:../../../os/hal/src/hal_queues.c ****   iqp->q_rdptr   = bp;
  56               		.loc 1 61 0
  57 0016 7587      		std Z+13,r23
  58 0018 6487      		std Z+12,r22
  62:../../../os/hal/src/hal_queues.c ****   iqp->q_wrptr   = bp;
  59               		.loc 1 62 0
  60 001a 7387      		std Z+11,r23
  61 001c 6287      		std Z+10,r22
  63:../../../os/hal/src/hal_queues.c ****   iqp->q_top     = bp + size;
  62               		.loc 1 63 0
  63 001e 640F      		add r22,r20
  64 0020 751F      		adc r23,r21
  65               	.LVL3:
  66 0022 7187      		std Z+9,r23
  67 0024 6087      		std Z+8,r22
  64:../../../os/hal/src/hal_queues.c ****   iqp->q_notify  = infy;
  68               		.loc 1 64 0
  69 0026 3787      		std Z+15,r19
  70 0028 2687      		std Z+14,r18
  65:../../../os/hal/src/hal_queues.c ****   iqp->q_link    = link;
  71               		.loc 1 65 0
  72 002a 118B      		std Z+17,r17
  73 002c 008B      		std Z+16,r16
  74               	/* epilogue start */
  66:../../../os/hal/src/hal_queues.c **** }
  75               		.loc 1 66 0
  76 002e 1F91      		pop r17
  77 0030 0F91      		pop r16
  78               	.LVL4:
  79 0032 0895      		ret
  80               		.cfi_endproc
  81               	.LFE143:
  83               		.section	.text.iqResetI,"ax",@progbits
  84               	.global	iqResetI
  86               	iqResetI:
  87               	.LFB144:
  67:../../../os/hal/src/hal_queues.c **** 
  68:../../../os/hal/src/hal_queues.c **** /**
  69:../../../os/hal/src/hal_queues.c ****  * @brief   Resets an input queue.
  70:../../../os/hal/src/hal_queues.c ****  * @details All the data in the input queue is erased and lost, any waiting
  71:../../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
  72:../../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
  73:../../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
  74:../../../os/hal/src/hal_queues.c ****  *
  75:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  76:../../../os/hal/src/hal_queues.c ****  *
  77:../../../os/hal/src/hal_queues.c ****  * @iclass
  78:../../../os/hal/src/hal_queues.c ****  */
  79:../../../os/hal/src/hal_queues.c **** void iqResetI(input_queue_t *iqp) {
  88               		.loc 1 79 0
  89               		.cfi_startproc
  90               	.LVL5:
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 0 */
  94               	.L__stack_usage = 0
  80:../../../os/hal/src/hal_queues.c **** 
  81:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
  82:../../../os/hal/src/hal_queues.c **** 
  83:../../../os/hal/src/hal_queues.c ****   iqp->q_rdptr = iqp->q_buffer;
  95               		.loc 1 83 0
  96 0000 FC01      		movw r30,r24
  97 0002 2681      		ldd r18,Z+6
  98 0004 3781      		ldd r19,Z+7
  99 0006 3587      		std Z+13,r19
 100 0008 2487      		std Z+12,r18
  84:../../../os/hal/src/hal_queues.c ****   iqp->q_wrptr = iqp->q_buffer;
 101               		.loc 1 84 0
 102 000a 3387      		std Z+11,r19
 103 000c 2287      		std Z+10,r18
  85:../../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 104               		.loc 1 85 0
 105 000e 1582      		std Z+5,__zero_reg__
 106 0010 1482      		std Z+4,__zero_reg__
 107               	.LVL6:
 108               	.LBB185:
 109               	.LBB186:
 110               		.file 3 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:../../../os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:../../../os/hal/osal/rt/osal.h ****  */
 181:../../../os/hal/osal/rt/osal.h **** typedef struct {
 182:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:../../../os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:../../../os/hal/osal/rt/osal.h **** } event_source_t;
 185:../../../os/hal/osal/rt/osal.h **** #endif
 186:../../../os/hal/osal/rt/osal.h **** 
 187:../../../os/hal/osal/rt/osal.h **** /**
 188:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:../../../os/hal/osal/rt/osal.h ****  */
 192:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:../../../os/hal/osal/rt/osal.h **** #else
 196:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:../../../os/hal/osal/rt/osal.h **** #endif
 198:../../../os/hal/osal/rt/osal.h **** 
 199:../../../os/hal/osal/rt/osal.h **** #if 0
 200:../../../os/hal/osal/rt/osal.h **** /**
 201:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:../../../os/hal/osal/rt/osal.h ****  */
 207:../../../os/hal/osal/rt/osal.h **** typedef struct {
 208:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:../../../os/hal/osal/rt/osal.h **** #endif
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:../../../os/hal/osal/rt/osal.h **** 
 216:../../../os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:../../../os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:../../../os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:../../../os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:../../../os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:../../../os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:../../../os/hal/osal/rt/osal.h **** 
 223:../../../os/hal/osal/rt/osal.h **** /**
 224:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:../../../os/hal/osal/rt/osal.h ****  * @{
 226:../../../os/hal/osal/rt/osal.h ****  */
 227:../../../os/hal/osal/rt/osal.h **** /**
 228:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 231:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:../../../os/hal/osal/rt/osal.h ****  *
 236:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:../../../os/hal/osal/rt/osal.h ****  *
 239:../../../os/hal/osal/rt/osal.h ****  * @api
 240:../../../os/hal/osal/rt/osal.h ****  */
 241:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:../../../os/hal/osal/rt/osal.h **** 
 243:../../../os/hal/osal/rt/osal.h **** /**
 244:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 248:../../../os/hal/osal/rt/osal.h ****  *
 249:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:../../../os/hal/osal/rt/osal.h ****  *
 251:../../../os/hal/osal/rt/osal.h ****  * @api
 252:../../../os/hal/osal/rt/osal.h ****  */
 253:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:../../../os/hal/osal/rt/osal.h **** 
 255:../../../os/hal/osal/rt/osal.h **** /**
 256:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:../../../os/hal/osal/rt/osal.h ****  */
 265:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:../../../os/hal/osal/rt/osal.h **** /** @} */
 267:../../../os/hal/osal/rt/osal.h **** 
 268:../../../os/hal/osal/rt/osal.h **** /**
 269:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:../../../os/hal/osal/rt/osal.h ****  * @{
 271:../../../os/hal/osal/rt/osal.h ****  */
 272:../../../os/hal/osal/rt/osal.h **** /**
 273:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:../../../os/hal/osal/rt/osal.h ****  */
 275:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:../../../os/hal/osal/rt/osal.h **** 
 277:../../../os/hal/osal/rt/osal.h **** /**
 278:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:../../../os/hal/osal/rt/osal.h ****  */
 281:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:../../../os/hal/osal/rt/osal.h **** 
 283:../../../os/hal/osal/rt/osal.h **** /**
 284:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:../../../os/hal/osal/rt/osal.h ****  */
 287:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:../../../os/hal/osal/rt/osal.h **** 
 289:../../../os/hal/osal/rt/osal.h **** /**
 290:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:../../../os/hal/osal/rt/osal.h ****  *
 293:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:../../../os/hal/osal/rt/osal.h ****  */
 295:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:../../../os/hal/osal/rt/osal.h **** /** @} */
 297:../../../os/hal/osal/rt/osal.h **** 
 298:../../../os/hal/osal/rt/osal.h **** /**
 299:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:../../../os/hal/osal/rt/osal.h ****  * @{
 301:../../../os/hal/osal/rt/osal.h ****  */
 302:../../../os/hal/osal/rt/osal.h **** /**
 303:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:../../../os/hal/osal/rt/osal.h ****  *
 307:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:../../../os/hal/osal/rt/osal.h ****  *
 310:../../../os/hal/osal/rt/osal.h ****  * @api
 311:../../../os/hal/osal/rt/osal.h ****  */
 312:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:../../../os/hal/osal/rt/osal.h **** 
 314:../../../os/hal/osal/rt/osal.h **** /**
 315:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:../../../os/hal/osal/rt/osal.h ****  *
 319:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:../../../os/hal/osal/rt/osal.h ****  *
 322:../../../os/hal/osal/rt/osal.h ****  * @api
 323:../../../os/hal/osal/rt/osal.h ****  */
 324:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:../../../os/hal/osal/rt/osal.h **** 
 326:../../../os/hal/osal/rt/osal.h **** /**
 327:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:../../../os/hal/osal/rt/osal.h ****  *
 331:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:../../../os/hal/osal/rt/osal.h ****  *
 334:../../../os/hal/osal/rt/osal.h ****  * @api
 335:../../../os/hal/osal/rt/osal.h ****  */
 336:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:../../../os/hal/osal/rt/osal.h **** /** @} */
 338:../../../os/hal/osal/rt/osal.h **** 
 339:../../../os/hal/osal/rt/osal.h **** /**
 340:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:../../../os/hal/osal/rt/osal.h ****  * @{
 342:../../../os/hal/osal/rt/osal.h ****  */
 343:../../../os/hal/osal/rt/osal.h **** /**
 344:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:../../../os/hal/osal/rt/osal.h ****  *
 348:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:../../../os/hal/osal/rt/osal.h **** 
 356:../../../os/hal/osal/rt/osal.h **** /**
 357:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:../../../os/hal/osal/rt/osal.h ****  *
 362:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @api
 367:../../../os/hal/osal/rt/osal.h ****  */
 368:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:../../../os/hal/osal/rt/osal.h **** 
 370:../../../os/hal/osal/rt/osal.h **** /**
 371:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:../../../os/hal/osal/rt/osal.h ****  *
 376:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @api
 381:../../../os/hal/osal/rt/osal.h ****  */
 382:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:../../../os/hal/osal/rt/osal.h **** /** @} */
 384:../../../os/hal/osal/rt/osal.h **** 
 385:../../../os/hal/osal/rt/osal.h **** /**
 386:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:../../../os/hal/osal/rt/osal.h ****  * @{
 388:../../../os/hal/osal/rt/osal.h ****  */
 389:../../../os/hal/osal/rt/osal.h **** /**
 390:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:../../../os/hal/osal/rt/osal.h ****  *
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:../../../os/hal/osal/rt/osal.h ****  *
 397:../../../os/hal/osal/rt/osal.h ****  * @api
 398:../../../os/hal/osal/rt/osal.h ****  */
 399:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:../../../os/hal/osal/rt/osal.h **** 
 401:../../../os/hal/osal/rt/osal.h **** /**
 402:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:../../../os/hal/osal/rt/osal.h ****  *
 408:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:../../../os/hal/osal/rt/osal.h ****  *
 410:../../../os/hal/osal/rt/osal.h ****  * @api
 411:../../../os/hal/osal/rt/osal.h ****  */
 412:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:../../../os/hal/osal/rt/osal.h **** 
 414:../../../os/hal/osal/rt/osal.h **** /**
 415:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 417:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:../../../os/hal/osal/rt/osal.h ****  *
 421:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:../../../os/hal/osal/rt/osal.h ****  *
 423:../../../os/hal/osal/rt/osal.h ****  * @api
 424:../../../os/hal/osal/rt/osal.h ****  */
 425:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:../../../os/hal/osal/rt/osal.h **** /** @} */
 427:../../../os/hal/osal/rt/osal.h **** 
 428:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:../../../os/hal/osal/rt/osal.h **** extern "C" {
 434:../../../os/hal/osal/rt/osal.h **** #endif
 435:../../../os/hal/osal/rt/osal.h **** 
 436:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:../../../os/hal/osal/rt/osal.h **** }
 438:../../../os/hal/osal/rt/osal.h **** #endif
 439:../../../os/hal/osal/rt/osal.h **** 
 440:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:../../../os/hal/osal/rt/osal.h **** 
 444:../../../os/hal/osal/rt/osal.h **** /**
 445:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:../../../os/hal/osal/rt/osal.h ****  *
 447:../../../os/hal/osal/rt/osal.h ****  * @api
 448:../../../os/hal/osal/rt/osal.h ****  */
 449:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:../../../os/hal/osal/rt/osal.h **** 
 451:../../../os/hal/osal/rt/osal.h **** }
 452:../../../os/hal/osal/rt/osal.h **** 
 453:../../../os/hal/osal/rt/osal.h **** /**
 454:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:../../../os/hal/osal/rt/osal.h ****  *
 456:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:../../../os/hal/osal/rt/osal.h ****  *
 458:../../../os/hal/osal/rt/osal.h ****  * @api
 459:../../../os/hal/osal/rt/osal.h ****  */
 460:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:../../../os/hal/osal/rt/osal.h **** }
 464:../../../os/hal/osal/rt/osal.h **** 
 465:../../../os/hal/osal/rt/osal.h **** /**
 466:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:../../../os/hal/osal/rt/osal.h ****  *
 468:../../../os/hal/osal/rt/osal.h ****  * @special
 469:../../../os/hal/osal/rt/osal.h ****  */
 470:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:../../../os/hal/osal/rt/osal.h **** 
 472:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 473:../../../os/hal/osal/rt/osal.h **** }
 474:../../../os/hal/osal/rt/osal.h **** 
 475:../../../os/hal/osal/rt/osal.h **** /**
 476:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:../../../os/hal/osal/rt/osal.h ****  *
 478:../../../os/hal/osal/rt/osal.h ****  * @special
 479:../../../os/hal/osal/rt/osal.h ****  */
 480:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:../../../os/hal/osal/rt/osal.h **** 
 482:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 483:../../../os/hal/osal/rt/osal.h **** }
 484:../../../os/hal/osal/rt/osal.h **** 
 485:../../../os/hal/osal/rt/osal.h **** /**
 486:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:../../../os/hal/osal/rt/osal.h ****  *
 489:../../../os/hal/osal/rt/osal.h ****  * @special
 490:../../../os/hal/osal/rt/osal.h ****  */
 491:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 494:../../../os/hal/osal/rt/osal.h **** }
 495:../../../os/hal/osal/rt/osal.h **** 
 496:../../../os/hal/osal/rt/osal.h **** /**
 497:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:../../../os/hal/osal/rt/osal.h ****  *
 500:../../../os/hal/osal/rt/osal.h ****  * @special
 501:../../../os/hal/osal/rt/osal.h ****  */
 502:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:../../../os/hal/osal/rt/osal.h **** 
 504:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:../../../os/hal/osal/rt/osal.h **** }
 506:../../../os/hal/osal/rt/osal.h **** 
 507:../../../os/hal/osal/rt/osal.h **** /**
 508:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:../../../os/hal/osal/rt/osal.h ****  *
 511:../../../os/hal/osal/rt/osal.h ****  * @special
 512:../../../os/hal/osal/rt/osal.h ****  */
 513:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:../../../os/hal/osal/rt/osal.h **** 
 515:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:../../../os/hal/osal/rt/osal.h **** }
 517:../../../os/hal/osal/rt/osal.h **** 
 518:../../../os/hal/osal/rt/osal.h **** /**
 519:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:../../../os/hal/osal/rt/osal.h ****  *
 522:../../../os/hal/osal/rt/osal.h ****  * @special
 523:../../../os/hal/osal/rt/osal.h ****  */
 524:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:../../../os/hal/osal/rt/osal.h **** 
 526:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:../../../os/hal/osal/rt/osal.h **** }
 528:../../../os/hal/osal/rt/osal.h **** 
 529:../../../os/hal/osal/rt/osal.h **** /**
 530:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:../../../os/hal/osal/rt/osal.h ****  *          is known.
 535:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:../../../os/hal/osal/rt/osal.h ****  *
 537:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @xclass
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:../../../os/hal/osal/rt/osal.h ****  *
 552:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:../../../os/hal/osal/rt/osal.h ****  *
 554:../../../os/hal/osal/rt/osal.h ****  * @xclass
 555:../../../os/hal/osal/rt/osal.h ****  */
 556:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:../../../os/hal/osal/rt/osal.h **** 
 558:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:../../../os/hal/osal/rt/osal.h **** }
 560:../../../os/hal/osal/rt/osal.h **** 
 561:../../../os/hal/osal/rt/osal.h **** /**
 562:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:../../../os/hal/osal/rt/osal.h ****  *          value.
 565:../../../os/hal/osal/rt/osal.h ****  *
 566:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:../../../os/hal/osal/rt/osal.h ****  *
 568:../../../os/hal/osal/rt/osal.h ****  * @xclass
 569:../../../os/hal/osal/rt/osal.h ****  */
 570:../../../os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:../../../os/hal/osal/rt/osal.h **** 
 573:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:../../../os/hal/osal/rt/osal.h **** }
 575:../../../os/hal/osal/rt/osal.h **** #endif
 576:../../../os/hal/osal/rt/osal.h **** 
 577:../../../os/hal/osal/rt/osal.h **** /**
 578:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:../../../os/hal/osal/rt/osal.h ****  */
 582:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:../../../os/hal/osal/rt/osal.h **** 
 585:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:../../../os/hal/osal/rt/osal.h **** }
 587:../../../os/hal/osal/rt/osal.h **** #endif
 588:../../../os/hal/osal/rt/osal.h **** 
 589:../../../os/hal/osal/rt/osal.h **** /**
 590:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:../../../os/hal/osal/rt/osal.h ****  *
 596:../../../os/hal/osal/rt/osal.h ****  * @sclass
 597:../../../os/hal/osal/rt/osal.h ****  */
 598:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:../../../os/hal/osal/rt/osal.h **** 
 600:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:../../../os/hal/osal/rt/osal.h **** }
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h **** /**
 604:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 607:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:../../../os/hal/osal/rt/osal.h ****  *
 612:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @xclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:../../../os/hal/osal/rt/osal.h ****  *
 627:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:../../../os/hal/osal/rt/osal.h ****  *
 633:../../../os/hal/osal/rt/osal.h ****  * @xclass
 634:../../../os/hal/osal/rt/osal.h ****  */
 635:../../../os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:../../../os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:../../../os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:../../../os/hal/osal/rt/osal.h **** }
 641:../../../os/hal/osal/rt/osal.h **** 
 642:../../../os/hal/osal/rt/osal.h **** /**
 643:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:../../../os/hal/osal/rt/osal.h ****  *
 645:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:../../../os/hal/osal/rt/osal.h ****  *                      .
 651:../../../os/hal/osal/rt/osal.h ****  *
 652:../../../os/hal/osal/rt/osal.h ****  * @sclass
 653:../../../os/hal/osal/rt/osal.h ****  */
 654:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:../../../os/hal/osal/rt/osal.h **** 
 656:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:../../../os/hal/osal/rt/osal.h **** }
 658:../../../os/hal/osal/rt/osal.h **** 
 659:../../../os/hal/osal/rt/osal.h **** /**
 660:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:../../../os/hal/osal/rt/osal.h ****  *
 662:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:../../../os/hal/osal/rt/osal.h ****  *                      .
 668:../../../os/hal/osal/rt/osal.h ****  *
 669:../../../os/hal/osal/rt/osal.h ****  * @api
 670:../../../os/hal/osal/rt/osal.h ****  */
 671:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:../../../os/hal/osal/rt/osal.h **** 
 673:../../../os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:../../../os/hal/osal/rt/osal.h **** }
 675:../../../os/hal/osal/rt/osal.h **** 
 676:../../../os/hal/osal/rt/osal.h **** /**
 677:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:../../../os/hal/osal/rt/osal.h ****  *          context.
 680:../../../os/hal/osal/rt/osal.h ****  *
 681:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:../../../os/hal/osal/rt/osal.h ****  *
 684:../../../os/hal/osal/rt/osal.h ****  * @sclass
 685:../../../os/hal/osal/rt/osal.h ****  */
 686:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:../../../os/hal/osal/rt/osal.h **** 
 688:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:../../../os/hal/osal/rt/osal.h **** }
 690:../../../os/hal/osal/rt/osal.h **** 
 691:../../../os/hal/osal/rt/osal.h **** /**
 692:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:../../../os/hal/osal/rt/osal.h ****  *          context.
 695:../../../os/hal/osal/rt/osal.h ****  *
 696:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:../../../os/hal/osal/rt/osal.h ****  *                        state.
 701:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 704:../../../os/hal/osal/rt/osal.h ****  *                      .
 705:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:../../../os/hal/osal/rt/osal.h ****  *
 708:../../../os/hal/osal/rt/osal.h ****  * @sclass
 709:../../../os/hal/osal/rt/osal.h ****  */
 710:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:../../../os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:../../../os/hal/osal/rt/osal.h **** 
 713:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:../../../os/hal/osal/rt/osal.h **** }
 715:../../../os/hal/osal/rt/osal.h **** 
 716:../../../os/hal/osal/rt/osal.h **** /**
 717:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 720:../../../os/hal/osal/rt/osal.h ****  *
 721:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:../../../os/hal/osal/rt/osal.h ****  *
 724:../../../os/hal/osal/rt/osal.h ****  * @iclass
 725:../../../os/hal/osal/rt/osal.h ****  */
 726:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:../../../os/hal/osal/rt/osal.h **** 
 728:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:../../../os/hal/osal/rt/osal.h **** }
 730:../../../os/hal/osal/rt/osal.h **** 
 731:../../../os/hal/osal/rt/osal.h **** /**
 732:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:../../../os/hal/osal/rt/osal.h ****  *          context.
 735:../../../os/hal/osal/rt/osal.h ****  *
 736:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:../../../os/hal/osal/rt/osal.h ****  *
 739:../../../os/hal/osal/rt/osal.h ****  * @iclass
 740:../../../os/hal/osal/rt/osal.h ****  */
 741:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:../../../os/hal/osal/rt/osal.h **** 
 743:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:../../../os/hal/osal/rt/osal.h **** }
 745:../../../os/hal/osal/rt/osal.h **** 
 746:../../../os/hal/osal/rt/osal.h **** /**
 747:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:../../../os/hal/osal/rt/osal.h ****  *
 749:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:../../../os/hal/osal/rt/osal.h ****  *
 751:../../../os/hal/osal/rt/osal.h ****  * @init
 752:../../../os/hal/osal/rt/osal.h ****  */
 753:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:../../../os/hal/osal/rt/osal.h **** 
 755:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:../../../os/hal/osal/rt/osal.h **** }
 757:../../../os/hal/osal/rt/osal.h **** 
 758:../../../os/hal/osal/rt/osal.h **** /**
 759:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:../../../os/hal/osal/rt/osal.h ****  *
 763:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:../../../os/hal/osal/rt/osal.h ****  *                        state.
 768:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 771:../../../os/hal/osal/rt/osal.h ****  *                      .
 772:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 778:../../../os/hal/osal/rt/osal.h ****  *
 779:../../../os/hal/osal/rt/osal.h ****  * @sclass
 780:../../../os/hal/osal/rt/osal.h ****  */
 781:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:../../../os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:../../../os/hal/osal/rt/osal.h **** 
 784:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:../../../os/hal/osal/rt/osal.h **** }
 786:../../../os/hal/osal/rt/osal.h **** 
 787:../../../os/hal/osal/rt/osal.h **** /**
 788:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:../../../os/hal/osal/rt/osal.h ****  *
 790:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:../../../os/hal/osal/rt/osal.h ****  *
 793:../../../os/hal/osal/rt/osal.h ****  * @iclass
 794:../../../os/hal/osal/rt/osal.h ****  */
 795:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:../../../os/hal/osal/rt/osal.h **** 
 797:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:../../../os/hal/osal/rt/osal.h **** }
 799:../../../os/hal/osal/rt/osal.h **** 
 800:../../../os/hal/osal/rt/osal.h **** /**
 801:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:../../../os/hal/osal/rt/osal.h ****  *
 803:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:../../../os/hal/osal/rt/osal.h ****  *
 806:../../../os/hal/osal/rt/osal.h ****  * @iclass
 807:../../../os/hal/osal/rt/osal.h ****  */
 808:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:../../../os/hal/osal/rt/osal.h **** 
 810:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 111               		.loc 3 810 0
 112 0012 6EEF      		ldi r22,lo8(-2)
 113 0014 7FEF      		ldi r23,lo8(-1)
 114 0016 0C94 0000 		jmp chThdDequeueAllI
 115               	.LVL7:
 116               	.LBE186:
 117               	.LBE185:
 118               		.cfi_endproc
 119               	.LFE144:
 121               		.section	.text.iqPutI,"ax",@progbits
 122               	.global	iqPutI
 124               	iqPutI:
 125               	.LFB145:
  86:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&iqp->q_waiting, MSG_RESET);
  87:../../../os/hal/src/hal_queues.c **** }
  88:../../../os/hal/src/hal_queues.c **** 
  89:../../../os/hal/src/hal_queues.c **** /**
  90:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue write.
  91:../../../os/hal/src/hal_queues.c ****  * @details A byte value is written into the low end of an input queue.
  92:../../../os/hal/src/hal_queues.c ****  *
  93:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  94:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
  95:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
  96:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation has been completed with success.
  97:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full and the operation cannot be
  98:../../../os/hal/src/hal_queues.c ****  *                      completed.
  99:../../../os/hal/src/hal_queues.c ****  *
 100:../../../os/hal/src/hal_queues.c ****  * @iclass
 101:../../../os/hal/src/hal_queues.c ****  */
 102:../../../os/hal/src/hal_queues.c **** msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 126               		.loc 1 102 0
 127               		.cfi_startproc
 128               	.LVL8:
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 0 */
 132               	.L__stack_usage = 0
 133 0000 FC01      		movw r30,r24
 103:../../../os/hal/src/hal_queues.c **** 
 104:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 105:../../../os/hal/src/hal_queues.c **** 
 106:../../../os/hal/src/hal_queues.c ****   if (iqIsFullI(iqp)) {
 134               		.loc 1 106 0
 135 0002 A285      		ldd r26,Z+10
 136 0004 B385      		ldd r27,Z+11
 137 0006 8485      		ldd r24,Z+12
 138 0008 9585      		ldd r25,Z+13
 139               	.LVL9:
 140 000a A817      		cp r26,r24
 141 000c B907      		cpc r27,r25
 142 000e 01F0      		breq .L11
 143               	.L4:
 107:../../../os/hal/src/hal_queues.c ****     return MSG_TIMEOUT;
 108:../../../os/hal/src/hal_queues.c ****   }
 109:../../../os/hal/src/hal_queues.c **** 
 110:../../../os/hal/src/hal_queues.c ****   iqp->q_counter++;
 144               		.loc 1 110 0
 145 0010 8481      		ldd r24,Z+4
 146 0012 9581      		ldd r25,Z+5
 147 0014 0196      		adiw r24,1
 148 0016 9583      		std Z+5,r25
 149 0018 8483      		std Z+4,r24
 111:../../../os/hal/src/hal_queues.c ****   *iqp->q_wrptr++ = b;
 150               		.loc 1 111 0
 151 001a CD01      		movw r24,r26
 152 001c 0196      		adiw r24,1
 153 001e 9387      		std Z+11,r25
 154 0020 8287      		std Z+10,r24
 155 0022 6C93      		st X,r22
 112:../../../os/hal/src/hal_queues.c ****   if (iqp->q_wrptr >= iqp->q_top) {
 156               		.loc 1 112 0
 157 0024 2285      		ldd r18,Z+10
 158 0026 3385      		ldd r19,Z+11
 159 0028 8085      		ldd r24,Z+8
 160 002a 9185      		ldd r25,Z+9
 161 002c 2817      		cp r18,r24
 162 002e 3907      		cpc r19,r25
 163 0030 00F0      		brlo .L7
 113:../../../os/hal/src/hal_queues.c ****     iqp->q_wrptr = iqp->q_buffer;
 164               		.loc 1 113 0
 165 0032 8681      		ldd r24,Z+6
 166 0034 9781      		ldd r25,Z+7
 167 0036 9387      		std Z+11,r25
 168 0038 8287      		std Z+10,r24
 169               	.L7:
 170 003a CF01      		movw r24,r30
 171               	.LVL10:
 172               	.LBB187:
 173               	.LBB188:
 797:../../../os/hal/osal/rt/osal.h **** }
 174               		.loc 3 797 0
 175 003c 60E0      		ldi r22,0
 176 003e 70E0      		ldi r23,0
 177               	.LVL11:
 178 0040 0E94 0000 		call chThdDequeueNextI
 179               	.LVL12:
 180               	.LBE188:
 181               	.LBE187:
 114:../../../os/hal/src/hal_queues.c ****   }
 115:../../../os/hal/src/hal_queues.c **** 
 116:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 117:../../../os/hal/src/hal_queues.c **** 
 118:../../../os/hal/src/hal_queues.c ****   return MSG_OK;
 182               		.loc 1 118 0
 183 0044 80E0      		ldi r24,0
 184 0046 90E0      		ldi r25,0
 185 0048 0895      		ret
 186               	.LVL13:
 187               	.L11:
 106:../../../os/hal/src/hal_queues.c ****     return MSG_TIMEOUT;
 188               		.loc 1 106 0 discriminator 1
 189 004a 8481      		ldd r24,Z+4
 190 004c 9581      		ldd r25,Z+5
 191 004e 892B      		or r24,r25
 192 0050 01F0      		breq .L4
 107:../../../os/hal/src/hal_queues.c ****   }
 193               		.loc 1 107 0
 194 0052 8FEF      		ldi r24,lo8(-1)
 195 0054 9FEF      		ldi r25,lo8(-1)
 196 0056 0895      		ret
 197               		.cfi_endproc
 198               	.LFE145:
 200               		.section	.text.iqGetTimeout,"ax",@progbits
 201               	.global	iqGetTimeout
 203               	iqGetTimeout:
 204               	.LFB146:
 119:../../../os/hal/src/hal_queues.c **** }
 120:../../../os/hal/src/hal_queues.c **** 
 121:../../../os/hal/src/hal_queues.c **** /**
 122:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 123:../../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. If the queue
 124:../../../os/hal/src/hal_queues.c ****  *          is empty then the calling thread is suspended until a byte arrives
 125:../../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 126:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 127:../../../os/hal/src/hal_queues.c ****  *          queue.
 128:../../../os/hal/src/hal_queues.c ****  *
 129:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 130:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 131:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 132:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 133:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 134:../../../os/hal/src/hal_queues.c ****  *                      .
 135:../../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 136:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 137:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 138:../../../os/hal/src/hal_queues.c ****  *
 139:../../../os/hal/src/hal_queues.c ****  * @api
 140:../../../os/hal/src/hal_queues.c ****  */
 141:../../../os/hal/src/hal_queues.c **** msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 205               		.loc 1 141 0
 206               		.cfi_startproc
 207               	.LVL14:
 208 0000 0F93      		push r16
 209               	.LCFI2:
 210               		.cfi_def_cfa_offset 4
 211               		.cfi_offset 16, -3
 212 0002 1F93      		push r17
 213               	.LCFI3:
 214               		.cfi_def_cfa_offset 5
 215               		.cfi_offset 17, -4
 216 0004 CF93      		push r28
 217               	.LCFI4:
 218               		.cfi_def_cfa_offset 6
 219               		.cfi_offset 28, -5
 220 0006 DF93      		push r29
 221               	.LCFI5:
 222               		.cfi_def_cfa_offset 7
 223               		.cfi_offset 29, -6
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 4 */
 227               	.L__stack_usage = 4
 228 0008 EC01      		movw r28,r24
 229 000a 8B01      		movw r16,r22
 230               	.LBB189:
 231               	.LBB190:
 232               	.LBB191:
 233               	.LBB192:
 234               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 235               		.loc 4 437 0
 236               	/* #APP */
 237               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 238 000c F894      		cli
 239               	 ;  0 "" 2
 240               	/* #NOAPP */
 241 000e 00C0      		rjmp .L13
 242               	.LVL15:
 243               	.L15:
 244               	.LBE192:
 245               	.LBE191:
 246               	.LBE190:
 247               	.LBE189:
 248               	.LBB193:
 249               	.LBB194:
 250               	.LBB195:
 784:../../../os/hal/osal/rt/osal.h **** }
 251               		.loc 3 784 0
 252 0010 B801      		movw r22,r16
 253 0012 CE01      		movw r24,r28
 254 0014 0E94 0000 		call chThdEnqueueTimeoutS
 255               	.LVL16:
 256               	.LBE195:
 257               	.LBE194:
 142:../../../os/hal/src/hal_queues.c ****   uint8_t b;
 143:../../../os/hal/src/hal_queues.c **** 
 144:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 145:../../../os/hal/src/hal_queues.c **** 
 146:../../../os/hal/src/hal_queues.c ****   /* Waiting until there is a character available or a timeout occurs.*/
 147:../../../os/hal/src/hal_queues.c ****   while (iqIsEmptyI(iqp)) {
 148:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 149:../../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 258               		.loc 1 149 0
 259 0018 97FD      		sbrc r25,7
 260 001a 00C0      		rjmp .L22
 261               	.L13:
 262               	.LBE193:
 147:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 263               		.loc 1 147 0
 264 001c 8C81      		ldd r24,Y+4
 265 001e 9D81      		ldd r25,Y+5
 266 0020 892B      		or r24,r25
 267 0022 01F0      		breq .L15
 150:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 151:../../../os/hal/src/hal_queues.c ****       return msg;
 152:../../../os/hal/src/hal_queues.c ****     }
 153:../../../os/hal/src/hal_queues.c ****   }
 154:../../../os/hal/src/hal_queues.c **** 
 155:../../../os/hal/src/hal_queues.c ****   /* Getting the character from the queue.*/
 156:../../../os/hal/src/hal_queues.c ****   iqp->q_counter--;
 268               		.loc 1 156 0
 269 0024 8C81      		ldd r24,Y+4
 270 0026 9D81      		ldd r25,Y+5
 271 0028 0197      		sbiw r24,1
 272 002a 9D83      		std Y+5,r25
 273 002c 8C83      		std Y+4,r24
 157:../../../os/hal/src/hal_queues.c ****   b = *iqp->q_rdptr++;
 274               		.loc 1 157 0
 275 002e EC85      		ldd r30,Y+12
 276 0030 FD85      		ldd r31,Y+13
 277 0032 CF01      		movw r24,r30
 278 0034 0196      		adiw r24,1
 279 0036 9D87      		std Y+13,r25
 280 0038 8C87      		std Y+12,r24
 281 003a 1081      		ld r17,Z
 282               	.LVL17:
 158:../../../os/hal/src/hal_queues.c ****   if (iqp->q_rdptr >= iqp->q_top) {
 283               		.loc 1 158 0
 284 003c 2885      		ldd r18,Y+8
 285 003e 3985      		ldd r19,Y+9
 286 0040 8217      		cp r24,r18
 287 0042 9307      		cpc r25,r19
 288 0044 00F0      		brlo .L16
 159:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
 289               		.loc 1 159 0
 290 0046 8E81      		ldd r24,Y+6
 291 0048 9F81      		ldd r25,Y+7
 292 004a 9D87      		std Y+13,r25
 293 004c 8C87      		std Y+12,r24
 294               	.L16:
 160:../../../os/hal/src/hal_queues.c ****   }
 161:../../../os/hal/src/hal_queues.c **** 
 162:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one slot available.*/
 163:../../../os/hal/src/hal_queues.c ****   if (iqp->q_notify != NULL) {
 295               		.loc 1 163 0
 296 004e EE85      		ldd r30,Y+14
 297 0050 FF85      		ldd r31,Y+15
 298 0052 3097      		sbiw r30,0
 299 0054 01F0      		breq .L17
 164:../../../os/hal/src/hal_queues.c ****     iqp->q_notify(iqp);
 300               		.loc 1 164 0
 301 0056 CE01      		movw r24,r28
 302 0058 1995      		eicall
 303               	.LVL18:
 304               	.L17:
 305               	.LBB201:
 306               	.LBB202:
 307               	.LBB203:
 308               	.LBB204:
 309               	.LBB205:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 310               		.loc 4 447 0
 311               	/* #APP */
 312               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 313 005a 7894      		sei
 314               	 ;  0 "" 2
 315               	/* #NOAPP */
 316               	.LBE205:
 317               	.LBE204:
 318               	.LBE203:
 319               	.LBE202:
 320               	.LBE201:
 165:../../../os/hal/src/hal_queues.c ****   }
 166:../../../os/hal/src/hal_queues.c **** 
 167:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 168:../../../os/hal/src/hal_queues.c **** 
 169:../../../os/hal/src/hal_queues.c ****   return (msg_t)b;
 321               		.loc 1 169 0
 322 005c 812F      		mov r24,r17
 323 005e 90E0      		ldi r25,0
 324               	/* epilogue start */
 170:../../../os/hal/src/hal_queues.c **** }
 325               		.loc 1 170 0
 326 0060 DF91      		pop r29
 327 0062 CF91      		pop r28
 328               	.LVL19:
 329 0064 1F91      		pop r17
 330               	.LVL20:
 331 0066 0F91      		pop r16
 332               	.LVL21:
 333 0068 0895      		ret
 334               	.LVL22:
 335               	.L22:
 336               	.LBB206:
 337               	.LBB196:
 338               	.LBB197:
 339               	.LBB198:
 340               	.LBB199:
 341               	.LBB200:
 342               		.loc 4 447 0
 343               	/* #APP */
 344               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 345 006a 7894      		sei
 346               	 ;  0 "" 2
 347               	/* epilogue start */
 348               	/* #NOAPP */
 349               	.LBE200:
 350               	.LBE199:
 351               	.LBE198:
 352               	.LBE197:
 353               	.LBE196:
 354               	.LBE206:
 355               		.loc 1 170 0
 356 006c DF91      		pop r29
 357 006e CF91      		pop r28
 358               	.LVL23:
 359 0070 1F91      		pop r17
 360 0072 0F91      		pop r16
 361               	.LVL24:
 362 0074 0895      		ret
 363               		.cfi_endproc
 364               	.LFE146:
 366               		.section	.text.iqReadTimeout,"ax",@progbits
 367               	.global	iqReadTimeout
 369               	iqReadTimeout:
 370               	.LFB147:
 171:../../../os/hal/src/hal_queues.c **** 
 172:../../../os/hal/src/hal_queues.c **** /**
 173:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 174:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 175:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 176:../../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 177:../../../os/hal/src/hal_queues.c ****  *          been reset.
 178:../../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 179:../../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 180:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing each character from the
 181:../../../os/hal/src/hal_queues.c ****  *          queue.
 182:../../../os/hal/src/hal_queues.c ****  *
 183:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 184:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 185:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 186:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 187:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 188:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 189:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 190:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 191:../../../os/hal/src/hal_queues.c ****  *                      .
 192:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 193:../../../os/hal/src/hal_queues.c ****  *
 194:../../../os/hal/src/hal_queues.c ****  * @api
 195:../../../os/hal/src/hal_queues.c ****  */
 196:../../../os/hal/src/hal_queues.c **** size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
 197:../../../os/hal/src/hal_queues.c ****                      size_t n, systime_t timeout) {
 371               		.loc 1 197 0
 372               		.cfi_startproc
 373               	.LVL25:
 374 0000 2F92      		push r2
 375               	.LCFI6:
 376               		.cfi_def_cfa_offset 4
 377               		.cfi_offset 2, -3
 378 0002 3F92      		push r3
 379               	.LCFI7:
 380               		.cfi_def_cfa_offset 5
 381               		.cfi_offset 3, -4
 382 0004 4F92      		push r4
 383               	.LCFI8:
 384               		.cfi_def_cfa_offset 6
 385               		.cfi_offset 4, -5
 386 0006 5F92      		push r5
 387               	.LCFI9:
 388               		.cfi_def_cfa_offset 7
 389               		.cfi_offset 5, -6
 390 0008 6F92      		push r6
 391               	.LCFI10:
 392               		.cfi_def_cfa_offset 8
 393               		.cfi_offset 6, -7
 394 000a 7F92      		push r7
 395               	.LCFI11:
 396               		.cfi_def_cfa_offset 9
 397               		.cfi_offset 7, -8
 398 000c 8F92      		push r8
 399               	.LCFI12:
 400               		.cfi_def_cfa_offset 10
 401               		.cfi_offset 8, -9
 402 000e 9F92      		push r9
 403               	.LCFI13:
 404               		.cfi_def_cfa_offset 11
 405               		.cfi_offset 9, -10
 406 0010 AF92      		push r10
 407               	.LCFI14:
 408               		.cfi_def_cfa_offset 12
 409               		.cfi_offset 10, -11
 410 0012 BF92      		push r11
 411               	.LCFI15:
 412               		.cfi_def_cfa_offset 13
 413               		.cfi_offset 11, -12
 414 0014 CF92      		push r12
 415               	.LCFI16:
 416               		.cfi_def_cfa_offset 14
 417               		.cfi_offset 12, -13
 418 0016 DF92      		push r13
 419               	.LCFI17:
 420               		.cfi_def_cfa_offset 15
 421               		.cfi_offset 13, -14
 422 0018 EF92      		push r14
 423               	.LCFI18:
 424               		.cfi_def_cfa_offset 16
 425               		.cfi_offset 14, -15
 426 001a FF92      		push r15
 427               	.LCFI19:
 428               		.cfi_def_cfa_offset 17
 429               		.cfi_offset 15, -16
 430 001c 0F93      		push r16
 431               	.LCFI20:
 432               		.cfi_def_cfa_offset 18
 433               		.cfi_offset 16, -17
 434 001e 1F93      		push r17
 435               	.LCFI21:
 436               		.cfi_def_cfa_offset 19
 437               		.cfi_offset 17, -18
 438 0020 CF93      		push r28
 439               	.LCFI22:
 440               		.cfi_def_cfa_offset 20
 441               		.cfi_offset 28, -19
 442 0022 DF93      		push r29
 443               	.LCFI23:
 444               		.cfi_def_cfa_offset 21
 445               		.cfi_offset 29, -20
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 18 */
 449               	.L__stack_usage = 18
 450 0024 EC01      		movw r28,r24
 451 0026 7B01      		movw r14,r22
 452 0028 8A01      		movw r16,r20
 453 002a 3901      		movw r6,r18
 198:../../../os/hal/src/hal_queues.c ****   systime_t deadline;
 199:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 454               		.loc 1 199 0
 455 002c AE84      		ldd r10,Y+14
 456 002e BF84      		ldd r11,Y+15
 457               	.LVL26:
 458               	.LBB207:
 459               	.LBB208:
 460               	.LBB209:
 461               	.LBB210:
 437:../../../os/common/ports/AVR/chcore.h **** }
 462               		.loc 4 437 0
 463               	/* #APP */
 464               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 465 0030 F894      		cli
 466               	 ;  0 "" 2
 467               	/* #NOAPP */
 468               	.LBE210:
 469               	.LBE209:
 470               	.LBE208:
 471               	.LBE207:
 472               	.LBB211:
 473               	.LBB212:
 474               	.LBB213:
 475               	.LBB214:
 476               	.LBB215:
 477               		.file 5 "../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @file    hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  34:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  38:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
  41:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * TODO: for models that have many timers,
  42:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *       could add AVR_ST_USE_TIMER
  43:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  44:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  45:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  46:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  47:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  48:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  49:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
  50:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * TODO: error checks for valid timer selected
  51:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  52:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  53:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  54:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
  55:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  56:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  57:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  58:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
  59:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  60:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  61:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  62:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
  63:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  64:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  65:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  66:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** extern "C" {
  67:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  68:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  69:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  70:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** }
  71:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  72:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  73:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  74:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  75:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  76:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #else
  77:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  78:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  79:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  80:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  81:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  82:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
  83:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  84:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  85:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /**
  86:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  87:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  88:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  89:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  90:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @notapi
  91:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  92:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
  93:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  94:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
 478               		.loc 5 94 0
 479 0032 2090 8400 		lds r2,132
 480 0036 3090 8500 		lds r3,132+1
 481               	.LBE215:
 482               	.LBE214:
 483               	.LBE213:
 484               	.LBE212:
 485               	.LBE211:
 200:../../../os/hal/src/hal_queues.c ****   size_t r = 0;
 201:../../../os/hal/src/hal_queues.c **** 
 202:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 203:../../../os/hal/src/hal_queues.c **** 
 204:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 205:../../../os/hal/src/hal_queues.c **** 
 206:../../../os/hal/src/hal_queues.c ****   /* Time deadline for the whole operation, note the result is invalid
 207:../../../os/hal/src/hal_queues.c ****      when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
 208:../../../os/hal/src/hal_queues.c ****      the deadline is not used.*/
 209:../../../os/hal/src/hal_queues.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 486               		.loc 1 209 0
 487 003a 220E      		add r2,r18
 488 003c 331E      		adc r3,r19
 489               	.LVL27:
 200:../../../os/hal/src/hal_queues.c ****   size_t r = 0;
 490               		.loc 1 200 0
 491 003e C12C      		mov r12,__zero_reg__
 492 0040 D12C      		mov r13,__zero_reg__
 493               	.LBB216:
 210:../../../os/hal/src/hal_queues.c **** 
 211:../../../os/hal/src/hal_queues.c ****   while (true) {
 212:../../../os/hal/src/hal_queues.c ****     /* Waiting until there is a character available or a timeout occurs.*/
 213:../../../os/hal/src/hal_queues.c ****     while (iqIsEmptyI(iqp)) {
 214:../../../os/hal/src/hal_queues.c ****       msg_t msg;
 215:../../../os/hal/src/hal_queues.c **** 
 216:../../../os/hal/src/hal_queues.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 217:../../../os/hal/src/hal_queues.c ****          deadline.*/
 218:../../../os/hal/src/hal_queues.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 494               		.loc 1 218 0
 495 0042 2901      		movw r4,r18
 496 0044 81E0      		ldi r24,1
 497 0046 481A      		sub r4,r24
 498 0048 5108      		sbc r5,__zero_reg__
 499               	.LVL28:
 500               	.L24:
 501               	.LBE216:
 213:../../../os/hal/src/hal_queues.c ****       msg_t msg;
 502               		.loc 1 213 0
 503 004a 8C81      		ldd r24,Y+4
 504 004c 9D81      		ldd r25,Y+5
 505 004e 892B      		or r24,r25
 506 0050 01F0      		breq .L30
 507               	.L43:
 219:../../../os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 220:../../../os/hal/src/hal_queues.c ****       }
 221:../../../os/hal/src/hal_queues.c ****       else {
 222:../../../os/hal/src/hal_queues.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 223:../../../os/hal/src/hal_queues.c **** 
 224:../../../os/hal/src/hal_queues.c ****         /* Handling the case where the system time went past the deadline,
 225:../../../os/hal/src/hal_queues.c ****            in this case next becomes a very high number because the system
 226:../../../os/hal/src/hal_queues.c ****            time is an unsigned type.*/
 227:../../../os/hal/src/hal_queues.c ****         if (next_timeout > timeout) {
 228:../../../os/hal/src/hal_queues.c ****           osalSysUnlock();
 229:../../../os/hal/src/hal_queues.c ****           return r;
 230:../../../os/hal/src/hal_queues.c ****         }
 231:../../../os/hal/src/hal_queues.c **** 
 232:../../../os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
 233:../../../os/hal/src/hal_queues.c ****       }
 234:../../../os/hal/src/hal_queues.c **** 
 235:../../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 236:../../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 237:../../../os/hal/src/hal_queues.c ****         osalSysUnlock();
 238:../../../os/hal/src/hal_queues.c ****         return r;
 239:../../../os/hal/src/hal_queues.c ****       }
 240:../../../os/hal/src/hal_queues.c ****     }
 241:../../../os/hal/src/hal_queues.c **** 
 242:../../../os/hal/src/hal_queues.c ****     /* Getting the character from the queue.*/
 243:../../../os/hal/src/hal_queues.c ****     iqp->q_counter--;
 508               		.loc 1 243 0
 509 0052 8C81      		ldd r24,Y+4
 510 0054 9D81      		ldd r25,Y+5
 511 0056 0197      		sbiw r24,1
 512 0058 9D83      		std Y+5,r25
 513 005a 8C83      		std Y+4,r24
 244:../../../os/hal/src/hal_queues.c ****     *bp++ = *iqp->q_rdptr++;
 514               		.loc 1 244 0
 515 005c 4701      		movw r8,r14
 516 005e FFEF      		ldi r31,-1
 517 0060 8F1A      		sub r8,r31
 518 0062 9F0A      		sbc r9,r31
 519               	.LVL29:
 520 0064 EC85      		ldd r30,Y+12
 521 0066 FD85      		ldd r31,Y+13
 522 0068 CF01      		movw r24,r30
 523 006a 0196      		adiw r24,1
 524 006c 9D87      		std Y+13,r25
 525 006e 8C87      		std Y+12,r24
 526 0070 8081      		ld r24,Z
 527 0072 F701      		movw r30,r14
 528 0074 8083      		st Z,r24
 245:../../../os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 529               		.loc 1 245 0
 530 0076 2C85      		ldd r18,Y+12
 531 0078 3D85      		ldd r19,Y+13
 532 007a 8885      		ldd r24,Y+8
 533 007c 9985      		ldd r25,Y+9
 534 007e 2817      		cp r18,r24
 535 0080 3907      		cpc r19,r25
 536 0082 00F0      		brlo .L31
 246:../../../os/hal/src/hal_queues.c ****       iqp->q_rdptr = iqp->q_buffer;
 537               		.loc 1 246 0
 538 0084 8E81      		ldd r24,Y+6
 539 0086 9F81      		ldd r25,Y+7
 540 0088 9D87      		std Y+13,r25
 541 008a 8C87      		std Y+12,r24
 542               	.L31:
 247:../../../os/hal/src/hal_queues.c ****     }
 248:../../../os/hal/src/hal_queues.c **** 
 249:../../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one slot available.*/
 250:../../../os/hal/src/hal_queues.c ****     if (nfy != NULL) {
 543               		.loc 1 250 0
 544 008c A114      		cp r10,__zero_reg__
 545 008e B104      		cpc r11,__zero_reg__
 546 0090 01F0      		breq .L32
 251:../../../os/hal/src/hal_queues.c ****       nfy(iqp);
 547               		.loc 1 251 0
 548 0092 CE01      		movw r24,r28
 549 0094 F501      		movw r30,r10
 550 0096 1995      		eicall
 551               	.LVL30:
 552               	.L32:
 553               	.LBB232:
 554               	.LBB233:
 555               	.LBB234:
 556               	.LBB235:
 557               	.LBB236:
 558               		.loc 4 447 0
 559               	/* #APP */
 560               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 561 0098 7894      		sei
 562               	 ;  0 "" 2
 563               	/* #NOAPP */
 564               	.LBE236:
 565               	.LBE235:
 566               	.LBE234:
 567               	.LBE233:
 568               	.LBE232:
 252:../../../os/hal/src/hal_queues.c ****     }
 253:../../../os/hal/src/hal_queues.c **** 
 254:../../../os/hal/src/hal_queues.c ****     /* Giving a preemption chance in a controlled point.*/
 255:../../../os/hal/src/hal_queues.c ****     osalSysUnlock();
 256:../../../os/hal/src/hal_queues.c **** 
 257:../../../os/hal/src/hal_queues.c ****     r++;
 569               		.loc 1 257 0
 570 009a FFEF      		ldi r31,-1
 571 009c CF1A      		sub r12,r31
 572 009e DF0A      		sbc r13,r31
 573               	.LVL31:
 258:../../../os/hal/src/hal_queues.c ****     if (--n == 0U) {
 574               		.loc 1 258 0
 575 00a0 0150      		subi r16,1
 576 00a2 1109      		sbc r17,__zero_reg__
 577               	.LVL32:
 578 00a4 01F0      		breq .L28
 579               	.LBB237:
 580               	.LBB238:
 581               	.LBB239:
 582               	.LBB240:
 437:../../../os/common/ports/AVR/chcore.h **** }
 583               		.loc 4 437 0
 584               	/* #APP */
 585               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 586 00a6 F894      		cli
 587               	 ;  0 "" 2
 588               	/* #NOAPP */
 589               	.LBE240:
 590               	.LBE239:
 591               	.LBE238:
 592               	.LBE237:
 244:../../../os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 593               		.loc 1 244 0
 594 00a8 7401      		movw r14,r8
 595               	.LVL33:
 213:../../../os/hal/src/hal_queues.c ****       msg_t msg;
 596               		.loc 1 213 0
 597 00aa 8C81      		ldd r24,Y+4
 598 00ac 9D81      		ldd r25,Y+5
 599 00ae 892B      		or r24,r25
 600 00b0 01F4      		brne .L43
 601               	.L30:
 602               	.LBB241:
 218:../../../os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 603               		.loc 1 218 0
 604 00b2 EEEF      		ldi r30,-2
 605 00b4 4E16      		cp r4,r30
 606 00b6 EFEF      		ldi r30,-1
 607 00b8 5E06      		cpc r5,r30
 608 00ba 00F4      		brsh .L44
 609               	.LBB217:
 610               	.LBB218:
 611               	.LBB219:
 612               	.LBB220:
 613               	.LBB221:
 614               	.LBB222:
 615               		.loc 5 94 0
 616 00bc 8091 8400 		lds r24,132
 617 00c0 9091 8500 		lds r25,132+1
 618               	.LBE222:
 619               	.LBE221:
 620               	.LBE220:
 621               	.LBE219:
 622               	.LBE218:
 222:../../../os/hal/src/hal_queues.c **** 
 623               		.loc 1 222 0
 624 00c4 B101      		movw r22,r2
 625 00c6 681B      		sub r22,r24
 626 00c8 790B      		sbc r23,r25
 627               	.LVL34:
 227:../../../os/hal/src/hal_queues.c ****           osalSysUnlock();
 628               		.loc 1 227 0
 629 00ca 6616      		cp r6,r22
 630 00cc 7706      		cpc r7,r23
 631 00ce 00F0      		brlo .L42
 632               	.LVL35:
 633               	.LBB223:
 634               	.LBB224:
 784:../../../os/hal/osal/rt/osal.h **** }
 635               		.loc 3 784 0
 636 00d0 CE01      		movw r24,r28
 637 00d2 0E94 0000 		call chThdEnqueueTimeoutS
 638               	.LVL36:
 639               	.L26:
 640               	.LBE224:
 641               	.LBE223:
 642               	.LBE217:
 236:../../../os/hal/src/hal_queues.c ****         osalSysUnlock();
 643               		.loc 1 236 0
 644 00d6 892B      		or r24,r25
 645 00d8 01F4      		brne .+2
 646 00da 00C0      		rjmp .L24
 647               	.LVL37:
 648               	.L42:
 649               	.LBB225:
 650               	.LBB226:
 651               	.LBB227:
 652               	.LBB228:
 653               	.LBB229:
 654               		.loc 4 447 0
 655               	/* #APP */
 656               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 657 00dc 7894      		sei
 658               	 ;  0 "" 2
 659               	.LVL38:
 660               	/* #NOAPP */
 661               	.L28:
 662               	.LBE229:
 663               	.LBE228:
 664               	.LBE227:
 665               	.LBE226:
 666               	.LBE225:
 667               	.LBE241:
 259:../../../os/hal/src/hal_queues.c ****       return r;
 260:../../../os/hal/src/hal_queues.c ****     }
 261:../../../os/hal/src/hal_queues.c **** 
 262:../../../os/hal/src/hal_queues.c ****     osalSysLock();
 263:../../../os/hal/src/hal_queues.c ****   }
 264:../../../os/hal/src/hal_queues.c **** }
 668               		.loc 1 264 0
 669 00de C601      		movw r24,r12
 670               	/* epilogue start */
 671 00e0 DF91      		pop r29
 672 00e2 CF91      		pop r28
 673               	.LVL39:
 674 00e4 1F91      		pop r17
 675 00e6 0F91      		pop r16
 676               	.LVL40:
 677 00e8 FF90      		pop r15
 678 00ea EF90      		pop r14
 679 00ec DF90      		pop r13
 680 00ee CF90      		pop r12
 681               	.LVL41:
 682 00f0 BF90      		pop r11
 683 00f2 AF90      		pop r10
 684               	.LVL42:
 685 00f4 9F90      		pop r9
 686 00f6 8F90      		pop r8
 687 00f8 7F90      		pop r7
 688 00fa 6F90      		pop r6
 689               	.LVL43:
 690 00fc 5F90      		pop r5
 691 00fe 4F90      		pop r4
 692               	.LVL44:
 693 0100 3F90      		pop r3
 694 0102 2F90      		pop r2
 695               	.LVL45:
 696 0104 0895      		ret
 697               	.LVL46:
 698               	.L44:
 699               	.LBB242:
 700               	.LBB230:
 701               	.LBB231:
 784:../../../os/hal/osal/rt/osal.h **** }
 702               		.loc 3 784 0
 703 0106 B301      		movw r22,r6
 704 0108 CE01      		movw r24,r28
 705 010a 0E94 0000 		call chThdEnqueueTimeoutS
 706               	.LVL47:
 707               	.LBE231:
 708               	.LBE230:
 709 010e 00C0      		rjmp .L26
 710               	.LBE242:
 711               		.cfi_endproc
 712               	.LFE147:
 714               		.section	.text.oqObjectInit,"ax",@progbits
 715               	.global	oqObjectInit
 717               	oqObjectInit:
 718               	.LFB148:
 265:../../../os/hal/src/hal_queues.c **** 
 266:../../../os/hal/src/hal_queues.c **** /**
 267:../../../os/hal/src/hal_queues.c ****  * @brief   Initializes an output queue.
 268:../../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 269:../../../os/hal/src/hal_queues.c ****  *          the free bytes in the queue.
 270:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 271:../../../os/hal/src/hal_queues.c ****  *
 272:../../../os/hal/src/hal_queues.c ****  * @param[out] oqp      pointer to an @p output_queue_t structure
 273:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 274:../../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 275:../../../os/hal/src/hal_queues.c ****  * @param[in] onfy      pointer to a callback function that is invoked when
 276:../../../os/hal/src/hal_queues.c ****  *                      data is written to the queue. The value can be @p NULL.
 277:../../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 278:../../../os/hal/src/hal_queues.c ****  *
 279:../../../os/hal/src/hal_queues.c ****  * @init
 280:../../../os/hal/src/hal_queues.c ****  */
 281:../../../os/hal/src/hal_queues.c **** void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
 282:../../../os/hal/src/hal_queues.c ****                   qnotify_t onfy, void *link) {
 719               		.loc 1 282 0
 720               		.cfi_startproc
 721               	.LVL48:
 722 0000 0F93      		push r16
 723               	.LCFI24:
 724               		.cfi_def_cfa_offset 4
 725               		.cfi_offset 16, -3
 726 0002 1F93      		push r17
 727               	.LCFI25:
 728               		.cfi_def_cfa_offset 5
 729               		.cfi_offset 17, -4
 730               	/* prologue: function */
 731               	/* frame size = 0 */
 732               	/* stack size = 2 */
 733               	.L__stack_usage = 2
 734 0004 FC01      		movw r30,r24
 735               	.LVL49:
 736               	.LBB243:
 737               	.LBB244:
 738               	.LBB245:
 739               	.LBB246:
 550:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 740               		.loc 2 550 0
 741 0006 9183      		std Z+1,r25
 742 0008 8083      		st Z,r24
 743               		.loc 2 551 0
 744 000a 9383      		std Z+3,r25
 745 000c 8283      		std Z+2,r24
 746               	.LVL50:
 747               	.LBE246:
 748               	.LBE245:
 749               	.LBE244:
 750               	.LBE243:
 283:../../../os/hal/src/hal_queues.c **** 
 284:../../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&oqp->q_waiting);
 285:../../../os/hal/src/hal_queues.c ****   oqp->q_counter = size;
 751               		.loc 1 285 0
 752 000e 5583      		std Z+5,r21
 753 0010 4483      		std Z+4,r20
 286:../../../os/hal/src/hal_queues.c ****   oqp->q_buffer  = bp;
 754               		.loc 1 286 0
 755 0012 7783      		std Z+7,r23
 756 0014 6683      		std Z+6,r22
 287:../../../os/hal/src/hal_queues.c ****   oqp->q_rdptr   = bp;
 757               		.loc 1 287 0
 758 0016 7587      		std Z+13,r23
 759 0018 6487      		std Z+12,r22
 288:../../../os/hal/src/hal_queues.c ****   oqp->q_wrptr   = bp;
 760               		.loc 1 288 0
 761 001a 7387      		std Z+11,r23
 762 001c 6287      		std Z+10,r22
 289:../../../os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 763               		.loc 1 289 0
 764 001e 460F      		add r20,r22
 765 0020 571F      		adc r21,r23
 766               	.LVL51:
 767 0022 5187      		std Z+9,r21
 768 0024 4087      		std Z+8,r20
 290:../../../os/hal/src/hal_queues.c ****   oqp->q_notify  = onfy;
 769               		.loc 1 290 0
 770 0026 3787      		std Z+15,r19
 771 0028 2687      		std Z+14,r18
 291:../../../os/hal/src/hal_queues.c ****   oqp->q_link    = link;
 772               		.loc 1 291 0
 773 002a 118B      		std Z+17,r17
 774 002c 008B      		std Z+16,r16
 775               	/* epilogue start */
 292:../../../os/hal/src/hal_queues.c **** }
 776               		.loc 1 292 0
 777 002e 1F91      		pop r17
 778 0030 0F91      		pop r16
 779               	.LVL52:
 780 0032 0895      		ret
 781               		.cfi_endproc
 782               	.LFE148:
 784               		.section	.text.oqResetI,"ax",@progbits
 785               	.global	oqResetI
 787               	oqResetI:
 788               	.LFB149:
 293:../../../os/hal/src/hal_queues.c **** 
 294:../../../os/hal/src/hal_queues.c **** /**
 295:../../../os/hal/src/hal_queues.c ****  * @brief   Resets an output queue.
 296:../../../os/hal/src/hal_queues.c ****  * @details All the data in the output queue is erased and lost, any waiting
 297:../../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 298:../../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 299:../../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 300:../../../os/hal/src/hal_queues.c ****  *
 301:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 302:../../../os/hal/src/hal_queues.c ****  *
 303:../../../os/hal/src/hal_queues.c ****  * @iclass
 304:../../../os/hal/src/hal_queues.c ****  */
 305:../../../os/hal/src/hal_queues.c **** void oqResetI(output_queue_t *oqp) {
 789               		.loc 1 305 0
 790               		.cfi_startproc
 791               	.LVL53:
 792               	/* prologue: function */
 793               	/* frame size = 0 */
 794               	/* stack size = 0 */
 795               	.L__stack_usage = 0
 796 0000 FC01      		movw r30,r24
 306:../../../os/hal/src/hal_queues.c **** 
 307:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 308:../../../os/hal/src/hal_queues.c **** 
 309:../../../os/hal/src/hal_queues.c ****   oqp->q_rdptr = oqp->q_buffer;
 797               		.loc 1 309 0
 798 0002 2681      		ldd r18,Z+6
 799 0004 3781      		ldd r19,Z+7
 800 0006 3587      		std Z+13,r19
 801 0008 2487      		std Z+12,r18
 310:../../../os/hal/src/hal_queues.c ****   oqp->q_wrptr = oqp->q_buffer;
 802               		.loc 1 310 0
 803 000a 3387      		std Z+11,r19
 804 000c 2287      		std Z+10,r18
 311:../../../os/hal/src/hal_queues.c ****   oqp->q_counter = qSizeX(oqp);
 805               		.loc 1 311 0
 806 000e 8085      		ldd r24,Z+8
 807 0010 9185      		ldd r25,Z+9
 808               	.LVL54:
 809 0012 821B      		sub r24,r18
 810 0014 930B      		sbc r25,r19
 811 0016 9583      		std Z+5,r25
 812 0018 8483      		std Z+4,r24
 813               	.LVL55:
 814               	.LBB247:
 815               	.LBB248:
 816               		.loc 3 810 0
 817 001a 6EEF      		ldi r22,lo8(-2)
 818 001c 7FEF      		ldi r23,lo8(-1)
 819 001e CF01      		movw r24,r30
 820 0020 0C94 0000 		jmp chThdDequeueAllI
 821               	.LVL56:
 822               	.LBE248:
 823               	.LBE247:
 824               		.cfi_endproc
 825               	.LFE149:
 827               		.section	.text.oqPutTimeout,"ax",@progbits
 828               	.global	oqPutTimeout
 830               	oqPutTimeout:
 831               	.LFB150:
 312:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&oqp->q_waiting, MSG_RESET);
 313:../../../os/hal/src/hal_queues.c **** }
 314:../../../os/hal/src/hal_queues.c **** 
 315:../../../os/hal/src/hal_queues.c **** /**
 316:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 317:../../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. If the queue
 318:../../../os/hal/src/hal_queues.c ****  *          is full then the calling thread is suspended until there is space
 319:../../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 320:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting the character into the
 321:../../../os/hal/src/hal_queues.c ****  *          queue.
 322:../../../os/hal/src/hal_queues.c ****  *
 323:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 324:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 325:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 326:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 327:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 328:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 329:../../../os/hal/src/hal_queues.c ****  *                      .
 330:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 331:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 332:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 333:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 334:../../../os/hal/src/hal_queues.c ****  *
 335:../../../os/hal/src/hal_queues.c ****  * @api
 336:../../../os/hal/src/hal_queues.c ****  */
 337:../../../os/hal/src/hal_queues.c **** msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 832               		.loc 1 337 0
 833               		.cfi_startproc
 834               	.LVL57:
 835 0000 FF92      		push r15
 836               	.LCFI26:
 837               		.cfi_def_cfa_offset 4
 838               		.cfi_offset 15, -3
 839 0002 0F93      		push r16
 840               	.LCFI27:
 841               		.cfi_def_cfa_offset 5
 842               		.cfi_offset 16, -4
 843 0004 1F93      		push r17
 844               	.LCFI28:
 845               		.cfi_def_cfa_offset 6
 846               		.cfi_offset 17, -5
 847 0006 CF93      		push r28
 848               	.LCFI29:
 849               		.cfi_def_cfa_offset 7
 850               		.cfi_offset 28, -6
 851 0008 DF93      		push r29
 852               	.LCFI30:
 853               		.cfi_def_cfa_offset 8
 854               		.cfi_offset 29, -7
 855               	/* prologue: function */
 856               	/* frame size = 0 */
 857               	/* stack size = 5 */
 858               	.L__stack_usage = 5
 859 000a EC01      		movw r28,r24
 860 000c F62E      		mov r15,r22
 861 000e 8A01      		movw r16,r20
 862               	.LBB249:
 863               	.LBB250:
 864               	.LBB251:
 865               	.LBB252:
 437:../../../os/common/ports/AVR/chcore.h **** }
 866               		.loc 4 437 0
 867               	/* #APP */
 868               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 869 0010 F894      		cli
 870               	 ;  0 "" 2
 871               	/* #NOAPP */
 872 0012 00C0      		rjmp .L48
 873               	.LVL58:
 874               	.L50:
 875               	.LBE252:
 876               	.LBE251:
 877               	.LBE250:
 878               	.LBE249:
 879               	.LBB253:
 880               	.LBB254:
 881               	.LBB255:
 784:../../../os/hal/osal/rt/osal.h **** }
 882               		.loc 3 784 0
 883 0014 B801      		movw r22,r16
 884 0016 CE01      		movw r24,r28
 885 0018 0E94 0000 		call chThdEnqueueTimeoutS
 886               	.LVL59:
 887               	.LBE255:
 888               	.LBE254:
 338:../../../os/hal/src/hal_queues.c **** 
 339:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 340:../../../os/hal/src/hal_queues.c **** 
 341:../../../os/hal/src/hal_queues.c ****   /* Waiting until there is a slot available or a timeout occurs.*/
 342:../../../os/hal/src/hal_queues.c ****   while (oqIsFullI(oqp)) {
 343:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 344:../../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 889               		.loc 1 344 0
 890 001c 97FD      		sbrc r25,7
 891 001e 00C0      		rjmp .L57
 892               	.L48:
 893               	.LBE253:
 342:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 894               		.loc 1 342 0
 895 0020 8C81      		ldd r24,Y+4
 896 0022 9D81      		ldd r25,Y+5
 897 0024 892B      		or r24,r25
 898 0026 01F0      		breq .L50
 345:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 346:../../../os/hal/src/hal_queues.c ****       return msg;
 347:../../../os/hal/src/hal_queues.c ****     }
 348:../../../os/hal/src/hal_queues.c ****   }
 349:../../../os/hal/src/hal_queues.c **** 
 350:../../../os/hal/src/hal_queues.c ****   /* Putting the character into the queue.*/
 351:../../../os/hal/src/hal_queues.c ****   oqp->q_counter--;
 899               		.loc 1 351 0
 900 0028 8C81      		ldd r24,Y+4
 901 002a 9D81      		ldd r25,Y+5
 902 002c 0197      		sbiw r24,1
 903 002e 9D83      		std Y+5,r25
 904 0030 8C83      		std Y+4,r24
 352:../../../os/hal/src/hal_queues.c ****   *oqp->q_wrptr++ = b;
 905               		.loc 1 352 0
 906 0032 EA85      		ldd r30,Y+10
 907 0034 FB85      		ldd r31,Y+11
 908 0036 CF01      		movw r24,r30
 909 0038 0196      		adiw r24,1
 910 003a 9B87      		std Y+11,r25
 911 003c 8A87      		std Y+10,r24
 912 003e F082      		st Z,r15
 353:../../../os/hal/src/hal_queues.c ****   if (oqp->q_wrptr >= oqp->q_top) {
 913               		.loc 1 353 0
 914 0040 2A85      		ldd r18,Y+10
 915 0042 3B85      		ldd r19,Y+11
 916 0044 8885      		ldd r24,Y+8
 917 0046 9985      		ldd r25,Y+9
 918 0048 2817      		cp r18,r24
 919 004a 3907      		cpc r19,r25
 920 004c 00F0      		brlo .L51
 354:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 921               		.loc 1 354 0
 922 004e 8E81      		ldd r24,Y+6
 923 0050 9F81      		ldd r25,Y+7
 924 0052 9B87      		std Y+11,r25
 925 0054 8A87      		std Y+10,r24
 926               	.L51:
 355:../../../os/hal/src/hal_queues.c ****   }
 356:../../../os/hal/src/hal_queues.c **** 
 357:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character available.*/
 358:../../../os/hal/src/hal_queues.c ****   if (oqp->q_notify != NULL) {
 927               		.loc 1 358 0
 928 0056 EE85      		ldd r30,Y+14
 929 0058 FF85      		ldd r31,Y+15
 930 005a 3097      		sbiw r30,0
 931 005c 01F0      		breq .L52
 359:../../../os/hal/src/hal_queues.c ****     oqp->q_notify(oqp);
 932               		.loc 1 359 0
 933 005e CE01      		movw r24,r28
 934 0060 1995      		eicall
 935               	.LVL60:
 936               	.L52:
 937               	.LBB261:
 938               	.LBB262:
 939               	.LBB263:
 940               	.LBB264:
 941               	.LBB265:
 942               		.loc 4 447 0
 943               	/* #APP */
 944               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 945 0062 7894      		sei
 946               	 ;  0 "" 2
 947               	/* #NOAPP */
 948               	.LBE265:
 949               	.LBE264:
 950               	.LBE263:
 951               	.LBE262:
 952               	.LBE261:
 360:../../../os/hal/src/hal_queues.c ****   }
 361:../../../os/hal/src/hal_queues.c **** 
 362:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 363:../../../os/hal/src/hal_queues.c **** 
 364:../../../os/hal/src/hal_queues.c ****   return MSG_OK;
 953               		.loc 1 364 0
 954 0064 80E0      		ldi r24,0
 955 0066 90E0      		ldi r25,0
 956               	/* epilogue start */
 365:../../../os/hal/src/hal_queues.c **** }
 957               		.loc 1 365 0
 958 0068 DF91      		pop r29
 959 006a CF91      		pop r28
 960               	.LVL61:
 961 006c 1F91      		pop r17
 962 006e 0F91      		pop r16
 963               	.LVL62:
 964 0070 FF90      		pop r15
 965               	.LVL63:
 966 0072 0895      		ret
 967               	.LVL64:
 968               	.L57:
 969               	.LBB266:
 970               	.LBB256:
 971               	.LBB257:
 972               	.LBB258:
 973               	.LBB259:
 974               	.LBB260:
 975               		.loc 4 447 0
 976               	/* #APP */
 977               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 978 0074 7894      		sei
 979               	 ;  0 "" 2
 980               	/* epilogue start */
 981               	/* #NOAPP */
 982               	.LBE260:
 983               	.LBE259:
 984               	.LBE258:
 985               	.LBE257:
 986               	.LBE256:
 987               	.LBE266:
 988               		.loc 1 365 0
 989 0076 DF91      		pop r29
 990 0078 CF91      		pop r28
 991               	.LVL65:
 992 007a 1F91      		pop r17
 993 007c 0F91      		pop r16
 994               	.LVL66:
 995 007e FF90      		pop r15
 996               	.LVL67:
 997 0080 0895      		ret
 998               		.cfi_endproc
 999               	.LFE150:
 1001               		.section	.text.oqGetI,"ax",@progbits
 1002               	.global	oqGetI
 1004               	oqGetI:
 1005               	.LFB151:
 366:../../../os/hal/src/hal_queues.c **** 
 367:../../../os/hal/src/hal_queues.c **** /**
 368:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue read.
 369:../../../os/hal/src/hal_queues.c ****  * @details A byte value is read from the low end of an output queue.
 370:../../../os/hal/src/hal_queues.c ****  *
 371:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 372:../../../os/hal/src/hal_queues.c ****  * @return              The byte value from the queue.
 373:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 374:../../../os/hal/src/hal_queues.c ****  *
 375:../../../os/hal/src/hal_queues.c ****  * @iclass
 376:../../../os/hal/src/hal_queues.c ****  */
 377:../../../os/hal/src/hal_queues.c **** msg_t oqGetI(output_queue_t *oqp) {
 1006               		.loc 1 377 0
 1007               		.cfi_startproc
 1008               	.LVL68:
 1009 0000 CF93      		push r28
 1010               	.LCFI31:
 1011               		.cfi_def_cfa_offset 4
 1012               		.cfi_offset 28, -3
 1013               	/* prologue: function */
 1014               	/* frame size = 0 */
 1015               	/* stack size = 1 */
 1016               	.L__stack_usage = 1
 1017 0002 FC01      		movw r30,r24
 378:../../../os/hal/src/hal_queues.c ****   uint8_t b;
 379:../../../os/hal/src/hal_queues.c **** 
 380:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 381:../../../os/hal/src/hal_queues.c **** 
 382:../../../os/hal/src/hal_queues.c ****   if (oqIsEmptyI(oqp)) {
 1018               		.loc 1 382 0
 1019 0004 A485      		ldd r26,Z+12
 1020 0006 B585      		ldd r27,Z+13
 1021 0008 8285      		ldd r24,Z+10
 1022 000a 9385      		ldd r25,Z+11
 1023               	.LVL69:
 1024 000c 8A17      		cp r24,r26
 1025 000e 9B07      		cpc r25,r27
 1026 0010 01F0      		breq .L65
 1027               	.L59:
 383:../../../os/hal/src/hal_queues.c ****     return MSG_TIMEOUT;
 384:../../../os/hal/src/hal_queues.c ****   }
 385:../../../os/hal/src/hal_queues.c **** 
 386:../../../os/hal/src/hal_queues.c ****   oqp->q_counter++;
 1028               		.loc 1 386 0
 1029 0012 8481      		ldd r24,Z+4
 1030 0014 9581      		ldd r25,Z+5
 1031 0016 0196      		adiw r24,1
 1032 0018 9583      		std Z+5,r25
 1033 001a 8483      		std Z+4,r24
 387:../../../os/hal/src/hal_queues.c ****   b = *oqp->q_rdptr++;
 1034               		.loc 1 387 0
 1035 001c CD01      		movw r24,r26
 1036 001e 0196      		adiw r24,1
 1037 0020 9587      		std Z+13,r25
 1038 0022 8487      		std Z+12,r24
 1039 0024 CC91      		ld r28,X
 1040               	.LVL70:
 388:../../../os/hal/src/hal_queues.c ****   if (oqp->q_rdptr >= oqp->q_top) {
 1041               		.loc 1 388 0
 1042 0026 2085      		ldd r18,Z+8
 1043 0028 3185      		ldd r19,Z+9
 1044 002a 8217      		cp r24,r18
 1045 002c 9307      		cpc r25,r19
 1046 002e 00F4      		brsh .L61
 1047               	.L62:
 1048 0030 CF01      		movw r24,r30
 1049               	.LVL71:
 1050               	.LBB267:
 1051               	.LBB268:
 797:../../../os/hal/osal/rt/osal.h **** }
 1052               		.loc 3 797 0
 1053 0032 60E0      		ldi r22,0
 1054 0034 70E0      		ldi r23,0
 1055 0036 0E94 0000 		call chThdDequeueNextI
 1056               	.LVL72:
 1057               	.LBE268:
 1058               	.LBE267:
 389:../../../os/hal/src/hal_queues.c ****     oqp->q_rdptr = oqp->q_buffer;
 390:../../../os/hal/src/hal_queues.c ****   }
 391:../../../os/hal/src/hal_queues.c **** 
 392:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 393:../../../os/hal/src/hal_queues.c **** 
 394:../../../os/hal/src/hal_queues.c ****   return (msg_t)b;
 1059               		.loc 1 394 0
 1060 003a 8C2F      		mov r24,r28
 1061 003c 90E0      		ldi r25,0
 1062               	.LVL73:
 1063               	.L64:
 1064               	/* epilogue start */
 395:../../../os/hal/src/hal_queues.c **** }
 1065               		.loc 1 395 0
 1066 003e CF91      		pop r28
 1067 0040 0895      		ret
 1068               	.LVL74:
 1069               	.L61:
 389:../../../os/hal/src/hal_queues.c ****     oqp->q_rdptr = oqp->q_buffer;
 1070               		.loc 1 389 0
 1071 0042 8681      		ldd r24,Z+6
 1072 0044 9781      		ldd r25,Z+7
 1073 0046 9587      		std Z+13,r25
 1074 0048 8487      		std Z+12,r24
 1075 004a 00C0      		rjmp .L62
 1076               	.LVL75:
 1077               	.L65:
 382:../../../os/hal/src/hal_queues.c ****     return MSG_TIMEOUT;
 1078               		.loc 1 382 0 discriminator 1
 1079 004c 8481      		ldd r24,Z+4
 1080 004e 9581      		ldd r25,Z+5
 1081 0050 892B      		or r24,r25
 1082 0052 01F0      		breq .L59
 383:../../../os/hal/src/hal_queues.c ****   }
 1083               		.loc 1 383 0
 1084 0054 8FEF      		ldi r24,lo8(-1)
 1085 0056 9FEF      		ldi r25,lo8(-1)
 1086 0058 00C0      		rjmp .L64
 1087               		.cfi_endproc
 1088               	.LFE151:
 1090               		.section	.text.oqWriteTimeout,"ax",@progbits
 1091               	.global	oqWriteTimeout
 1093               	oqWriteTimeout:
 1094               	.LFB152:
 396:../../../os/hal/src/hal_queues.c **** 
 397:../../../os/hal/src/hal_queues.c **** /**
 398:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 399:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 400:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 401:../../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 402:../../../os/hal/src/hal_queues.c ****  *          been reset.
 403:../../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 404:../../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 405:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting each character into the
 406:../../../os/hal/src/hal_queues.c ****  *          queue.
 407:../../../os/hal/src/hal_queues.c ****  *
 408:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 409:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 410:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 411:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 412:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 413:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 414:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 415:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 416:../../../os/hal/src/hal_queues.c ****  *                      .
 417:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 418:../../../os/hal/src/hal_queues.c ****  *
 419:../../../os/hal/src/hal_queues.c ****  * @api
 420:../../../os/hal/src/hal_queues.c ****  */
 421:../../../os/hal/src/hal_queues.c **** size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
 422:../../../os/hal/src/hal_queues.c ****                       size_t n, systime_t timeout) {
 1095               		.loc 1 422 0
 1096               		.cfi_startproc
 1097               	.LVL76:
 1098 0000 2F92      		push r2
 1099               	.LCFI32:
 1100               		.cfi_def_cfa_offset 4
 1101               		.cfi_offset 2, -3
 1102 0002 3F92      		push r3
 1103               	.LCFI33:
 1104               		.cfi_def_cfa_offset 5
 1105               		.cfi_offset 3, -4
 1106 0004 4F92      		push r4
 1107               	.LCFI34:
 1108               		.cfi_def_cfa_offset 6
 1109               		.cfi_offset 4, -5
 1110 0006 5F92      		push r5
 1111               	.LCFI35:
 1112               		.cfi_def_cfa_offset 7
 1113               		.cfi_offset 5, -6
 1114 0008 6F92      		push r6
 1115               	.LCFI36:
 1116               		.cfi_def_cfa_offset 8
 1117               		.cfi_offset 6, -7
 1118 000a 7F92      		push r7
 1119               	.LCFI37:
 1120               		.cfi_def_cfa_offset 9
 1121               		.cfi_offset 7, -8
 1122 000c 8F92      		push r8
 1123               	.LCFI38:
 1124               		.cfi_def_cfa_offset 10
 1125               		.cfi_offset 8, -9
 1126 000e 9F92      		push r9
 1127               	.LCFI39:
 1128               		.cfi_def_cfa_offset 11
 1129               		.cfi_offset 9, -10
 1130 0010 AF92      		push r10
 1131               	.LCFI40:
 1132               		.cfi_def_cfa_offset 12
 1133               		.cfi_offset 10, -11
 1134 0012 BF92      		push r11
 1135               	.LCFI41:
 1136               		.cfi_def_cfa_offset 13
 1137               		.cfi_offset 11, -12
 1138 0014 CF92      		push r12
 1139               	.LCFI42:
 1140               		.cfi_def_cfa_offset 14
 1141               		.cfi_offset 12, -13
 1142 0016 DF92      		push r13
 1143               	.LCFI43:
 1144               		.cfi_def_cfa_offset 15
 1145               		.cfi_offset 13, -14
 1146 0018 EF92      		push r14
 1147               	.LCFI44:
 1148               		.cfi_def_cfa_offset 16
 1149               		.cfi_offset 14, -15
 1150 001a FF92      		push r15
 1151               	.LCFI45:
 1152               		.cfi_def_cfa_offset 17
 1153               		.cfi_offset 15, -16
 1154 001c 0F93      		push r16
 1155               	.LCFI46:
 1156               		.cfi_def_cfa_offset 18
 1157               		.cfi_offset 16, -17
 1158 001e 1F93      		push r17
 1159               	.LCFI47:
 1160               		.cfi_def_cfa_offset 19
 1161               		.cfi_offset 17, -18
 1162 0020 CF93      		push r28
 1163               	.LCFI48:
 1164               		.cfi_def_cfa_offset 20
 1165               		.cfi_offset 28, -19
 1166 0022 DF93      		push r29
 1167               	.LCFI49:
 1168               		.cfi_def_cfa_offset 21
 1169               		.cfi_offset 29, -20
 1170               	/* prologue: function */
 1171               	/* frame size = 0 */
 1172               	/* stack size = 18 */
 1173               	.L__stack_usage = 18
 1174 0024 EC01      		movw r28,r24
 1175 0026 7B01      		movw r14,r22
 1176 0028 8A01      		movw r16,r20
 1177 002a 3901      		movw r6,r18
 423:../../../os/hal/src/hal_queues.c ****   systime_t deadline;
 424:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1178               		.loc 1 424 0
 1179 002c AE84      		ldd r10,Y+14
 1180 002e BF84      		ldd r11,Y+15
 1181               	.LVL77:
 1182               	.LBB269:
 1183               	.LBB270:
 1184               	.LBB271:
 1185               	.LBB272:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1186               		.loc 4 437 0
 1187               	/* #APP */
 1188               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1189 0030 F894      		cli
 1190               	 ;  0 "" 2
 1191               	/* #NOAPP */
 1192               	.LBE272:
 1193               	.LBE271:
 1194               	.LBE270:
 1195               	.LBE269:
 1196               	.LBB273:
 1197               	.LBB274:
 1198               	.LBB275:
 1199               	.LBB276:
 1200               	.LBB277:
 1201               		.loc 5 94 0
 1202 0032 2090 8400 		lds r2,132
 1203 0036 3090 8500 		lds r3,132+1
 1204               	.LBE277:
 1205               	.LBE276:
 1206               	.LBE275:
 1207               	.LBE274:
 1208               	.LBE273:
 425:../../../os/hal/src/hal_queues.c ****   size_t w = 0;
 426:../../../os/hal/src/hal_queues.c **** 
 427:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 428:../../../os/hal/src/hal_queues.c **** 
 429:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 430:../../../os/hal/src/hal_queues.c **** 
 431:../../../os/hal/src/hal_queues.c ****   /* Time deadline for the whole operation, note the result is invalid
 432:../../../os/hal/src/hal_queues.c ****      when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
 433:../../../os/hal/src/hal_queues.c ****      the deadline is not used.*/
 434:../../../os/hal/src/hal_queues.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 1209               		.loc 1 434 0
 1210 003a 220E      		add r2,r18
 1211 003c 331E      		adc r3,r19
 1212               	.LVL78:
 425:../../../os/hal/src/hal_queues.c ****   size_t w = 0;
 1213               		.loc 1 425 0
 1214 003e C12C      		mov r12,__zero_reg__
 1215 0040 D12C      		mov r13,__zero_reg__
 1216               	.LBB278:
 435:../../../os/hal/src/hal_queues.c **** 
 436:../../../os/hal/src/hal_queues.c ****   while (true) {
 437:../../../os/hal/src/hal_queues.c ****     msg_t msg;
 438:../../../os/hal/src/hal_queues.c **** 
 439:../../../os/hal/src/hal_queues.c ****     while (oqIsFullI(oqp)) {
 440:../../../os/hal/src/hal_queues.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 441:../../../os/hal/src/hal_queues.c ****          deadline.*/
 442:../../../os/hal/src/hal_queues.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 1217               		.loc 1 442 0
 1218 0042 2901      		movw r4,r18
 1219 0044 81E0      		ldi r24,1
 1220 0046 481A      		sub r4,r24
 1221 0048 5108      		sbc r5,__zero_reg__
 1222               	.LVL79:
 1223               	.L67:
 439:../../../os/hal/src/hal_queues.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 1224               		.loc 1 439 0
 1225 004a 8C81      		ldd r24,Y+4
 1226 004c 9D81      		ldd r25,Y+5
 1227 004e 892B      		or r24,r25
 1228 0050 01F0      		breq .L73
 1229               	.L86:
 443:../../../os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 444:../../../os/hal/src/hal_queues.c ****       }
 445:../../../os/hal/src/hal_queues.c ****       else {
 446:../../../os/hal/src/hal_queues.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 447:../../../os/hal/src/hal_queues.c **** 
 448:../../../os/hal/src/hal_queues.c ****         /* Handling the case where the system time went past the deadline,
 449:../../../os/hal/src/hal_queues.c ****            in this case next becomes a very high number because the system
 450:../../../os/hal/src/hal_queues.c ****            time is an unsigned type.*/
 451:../../../os/hal/src/hal_queues.c ****         if (next_timeout > timeout) {
 452:../../../os/hal/src/hal_queues.c ****           osalSysUnlock();
 453:../../../os/hal/src/hal_queues.c ****           return w;
 454:../../../os/hal/src/hal_queues.c ****         }
 455:../../../os/hal/src/hal_queues.c **** 
 456:../../../os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
 457:../../../os/hal/src/hal_queues.c ****       }
 458:../../../os/hal/src/hal_queues.c **** 
 459:../../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 460:../../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 461:../../../os/hal/src/hal_queues.c ****         osalSysUnlock();
 462:../../../os/hal/src/hal_queues.c ****         return w;
 463:../../../os/hal/src/hal_queues.c ****       }
 464:../../../os/hal/src/hal_queues.c ****     }
 465:../../../os/hal/src/hal_queues.c **** 
 466:../../../os/hal/src/hal_queues.c ****     /* Putting the character into the queue.*/
 467:../../../os/hal/src/hal_queues.c ****     oqp->q_counter--;
 1230               		.loc 1 467 0
 1231 0052 8C81      		ldd r24,Y+4
 1232 0054 9D81      		ldd r25,Y+5
 1233 0056 0197      		sbiw r24,1
 1234 0058 9D83      		std Y+5,r25
 1235 005a 8C83      		std Y+4,r24
 468:../../../os/hal/src/hal_queues.c ****     *oqp->q_wrptr++ = *bp++;
 1236               		.loc 1 468 0
 1237 005c EA85      		ldd r30,Y+10
 1238 005e FB85      		ldd r31,Y+11
 1239 0060 CF01      		movw r24,r30
 1240 0062 0196      		adiw r24,1
 1241 0064 9B87      		std Y+11,r25
 1242 0066 8A87      		std Y+10,r24
 1243 0068 4701      		movw r8,r14
 1244 006a BFEF      		ldi r27,-1
 1245 006c 8B1A      		sub r8,r27
 1246 006e 9B0A      		sbc r9,r27
 1247               	.LVL80:
 1248 0070 D701      		movw r26,r14
 1249 0072 8C91      		ld r24,X
 1250 0074 8083      		st Z,r24
 469:../../../os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1251               		.loc 1 469 0
 1252 0076 2A85      		ldd r18,Y+10
 1253 0078 3B85      		ldd r19,Y+11
 1254 007a 8885      		ldd r24,Y+8
 1255 007c 9985      		ldd r25,Y+9
 1256 007e 2817      		cp r18,r24
 1257 0080 3907      		cpc r19,r25
 1258 0082 00F0      		brlo .L74
 470:../../../os/hal/src/hal_queues.c ****       oqp->q_wrptr = oqp->q_buffer;
 1259               		.loc 1 470 0
 1260 0084 8E81      		ldd r24,Y+6
 1261 0086 9F81      		ldd r25,Y+7
 1262 0088 9B87      		std Y+11,r25
 1263 008a 8A87      		std Y+10,r24
 1264               	.L74:
 471:../../../os/hal/src/hal_queues.c ****     }
 472:../../../os/hal/src/hal_queues.c **** 
 473:../../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one character available.*/
 474:../../../os/hal/src/hal_queues.c ****     if (nfy != NULL) {
 1265               		.loc 1 474 0
 1266 008c A114      		cp r10,__zero_reg__
 1267 008e B104      		cpc r11,__zero_reg__
 1268 0090 01F0      		breq .L75
 475:../../../os/hal/src/hal_queues.c ****       nfy(oqp);
 1269               		.loc 1 475 0
 1270 0092 CE01      		movw r24,r28
 1271 0094 F501      		movw r30,r10
 1272 0096 1995      		eicall
 1273               	.LVL81:
 1274               	.L75:
 1275               	.LBB279:
 1276               	.LBB280:
 1277               	.LBB281:
 1278               	.LBB282:
 1279               	.LBB283:
 1280               		.loc 4 447 0
 1281               	/* #APP */
 1282               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1283 0098 7894      		sei
 1284               	 ;  0 "" 2
 1285               	/* #NOAPP */
 1286               	.LBE283:
 1287               	.LBE282:
 1288               	.LBE281:
 1289               	.LBE280:
 1290               	.LBE279:
 476:../../../os/hal/src/hal_queues.c ****     }
 477:../../../os/hal/src/hal_queues.c **** 
 478:../../../os/hal/src/hal_queues.c ****     /* Giving a preemption chance in a controlled point.*/
 479:../../../os/hal/src/hal_queues.c ****     osalSysUnlock();
 480:../../../os/hal/src/hal_queues.c **** 
 481:../../../os/hal/src/hal_queues.c ****     w++;
 1291               		.loc 1 481 0
 1292 009a FFEF      		ldi r31,-1
 1293 009c CF1A      		sub r12,r31
 1294 009e DF0A      		sbc r13,r31
 1295               	.LVL82:
 482:../../../os/hal/src/hal_queues.c ****     if (--n == 0U) {
 1296               		.loc 1 482 0
 1297 00a0 0150      		subi r16,1
 1298 00a2 1109      		sbc r17,__zero_reg__
 1299               	.LVL83:
 1300 00a4 01F0      		breq .L71
 1301               	.LBB284:
 1302               	.LBB285:
 1303               	.LBB286:
 1304               	.LBB287:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1305               		.loc 4 437 0
 1306               	/* #APP */
 1307               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1308 00a6 F894      		cli
 1309               	 ;  0 "" 2
 1310               	/* #NOAPP */
 1311               	.LBE287:
 1312               	.LBE286:
 1313               	.LBE285:
 1314               	.LBE284:
 468:../../../os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1315               		.loc 1 468 0
 1316 00a8 7401      		movw r14,r8
 1317               	.LVL84:
 439:../../../os/hal/src/hal_queues.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 1318               		.loc 1 439 0
 1319 00aa 8C81      		ldd r24,Y+4
 1320 00ac 9D81      		ldd r25,Y+5
 1321 00ae 892B      		or r24,r25
 1322 00b0 01F4      		brne .L86
 1323               	.L73:
 442:../../../os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 1324               		.loc 1 442 0
 1325 00b2 AEEF      		ldi r26,-2
 1326 00b4 4A16      		cp r4,r26
 1327 00b6 AFEF      		ldi r26,-1
 1328 00b8 5A06      		cpc r5,r26
 1329 00ba 00F4      		brsh .L87
 1330               	.LBB288:
 1331               	.LBB289:
 1332               	.LBB290:
 1333               	.LBB291:
 1334               	.LBB292:
 1335               	.LBB293:
 1336               		.loc 5 94 0
 1337 00bc 8091 8400 		lds r24,132
 1338 00c0 9091 8500 		lds r25,132+1
 1339               	.LBE293:
 1340               	.LBE292:
 1341               	.LBE291:
 1342               	.LBE290:
 1343               	.LBE289:
 446:../../../os/hal/src/hal_queues.c **** 
 1344               		.loc 1 446 0
 1345 00c4 B101      		movw r22,r2
 1346 00c6 681B      		sub r22,r24
 1347 00c8 790B      		sbc r23,r25
 1348               	.LVL85:
 451:../../../os/hal/src/hal_queues.c ****           osalSysUnlock();
 1349               		.loc 1 451 0
 1350 00ca 6616      		cp r6,r22
 1351 00cc 7706      		cpc r7,r23
 1352 00ce 00F0      		brlo .L85
 1353               	.LVL86:
 1354               	.LBB294:
 1355               	.LBB295:
 784:../../../os/hal/osal/rt/osal.h **** }
 1356               		.loc 3 784 0
 1357 00d0 CE01      		movw r24,r28
 1358 00d2 0E94 0000 		call chThdEnqueueTimeoutS
 1359               	.LVL87:
 1360               	.L69:
 1361               	.LBE295:
 1362               	.LBE294:
 1363               	.LBE288:
 460:../../../os/hal/src/hal_queues.c ****         osalSysUnlock();
 1364               		.loc 1 460 0
 1365 00d6 892B      		or r24,r25
 1366 00d8 01F4      		brne .+2
 1367 00da 00C0      		rjmp .L67
 1368               	.LVL88:
 1369               	.L85:
 1370               	.LBB296:
 1371               	.LBB297:
 1372               	.LBB298:
 1373               	.LBB299:
 1374               	.LBB300:
 1375               		.loc 4 447 0
 1376               	/* #APP */
 1377               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1378 00dc 7894      		sei
 1379               	 ;  0 "" 2
 1380               	.LVL89:
 1381               	/* #NOAPP */
 1382               	.L71:
 1383               	.LBE300:
 1384               	.LBE299:
 1385               	.LBE298:
 1386               	.LBE297:
 1387               	.LBE296:
 1388               	.LBE278:
 483:../../../os/hal/src/hal_queues.c ****       return w;
 484:../../../os/hal/src/hal_queues.c ****     }
 485:../../../os/hal/src/hal_queues.c **** 
 486:../../../os/hal/src/hal_queues.c ****     osalSysLock();
 487:../../../os/hal/src/hal_queues.c ****   }
 488:../../../os/hal/src/hal_queues.c **** }
 1389               		.loc 1 488 0
 1390 00de C601      		movw r24,r12
 1391               	/* epilogue start */
 1392 00e0 DF91      		pop r29
 1393 00e2 CF91      		pop r28
 1394               	.LVL90:
 1395 00e4 1F91      		pop r17
 1396 00e6 0F91      		pop r16
 1397               	.LVL91:
 1398 00e8 FF90      		pop r15
 1399 00ea EF90      		pop r14
 1400 00ec DF90      		pop r13
 1401 00ee CF90      		pop r12
 1402               	.LVL92:
 1403 00f0 BF90      		pop r11
 1404 00f2 AF90      		pop r10
 1405               	.LVL93:
 1406 00f4 9F90      		pop r9
 1407 00f6 8F90      		pop r8
 1408 00f8 7F90      		pop r7
 1409 00fa 6F90      		pop r6
 1410               	.LVL94:
 1411 00fc 5F90      		pop r5
 1412 00fe 4F90      		pop r4
 1413               	.LVL95:
 1414 0100 3F90      		pop r3
 1415 0102 2F90      		pop r2
 1416               	.LVL96:
 1417 0104 0895      		ret
 1418               	.LVL97:
 1419               	.L87:
 1420               	.LBB303:
 1421               	.LBB301:
 1422               	.LBB302:
 784:../../../os/hal/osal/rt/osal.h **** }
 1423               		.loc 3 784 0
 1424 0106 B301      		movw r22,r6
 1425 0108 CE01      		movw r24,r28
 1426 010a 0E94 0000 		call chThdEnqueueTimeoutS
 1427               	.LVL98:
 1428               	.LBE302:
 1429               	.LBE301:
 1430 010e 00C0      		rjmp .L69
 1431               	.LBE303:
 1432               		.cfi_endproc
 1433               	.LFE152:
 1435               		.text
 1436               	.Letext0:
 1437               		.file 6 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 1438               		.file 7 "/usr/lib/avr/include/stdint.h"
 1439               		.file 8 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1440               		.file 9 "../../../os/rt/include/chsystypes.h"
 1441               		.file 10 "../../../os/rt/include/chsem.h"
 1442               		.file 11 "../../../os/rt/include/chmtx.h"
 1443               		.file 12 "../../../os/hal/include/hal_queues.h"
 1444               		.file 13 "../../../os/common/ports/AVR/chcore_timer.h"
 1445               		.file 14 "../../../os/rt/include/chsys.h"
 1446               		.file 15 "../../../os/rt/include/chvt.h"
 1447               		.file 16 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_queues.c
     /tmp/ccIDiUUI.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccIDiUUI.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccIDiUUI.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccIDiUUI.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccIDiUUI.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccIDiUUI.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccIDiUUI.s:14     .text.iqObjectInit:0000000000000000 iqObjectInit
     /tmp/ccIDiUUI.s:86     .text.iqResetI:0000000000000000 iqResetI
     /tmp/ccIDiUUI.s:124    .text.iqPutI:0000000000000000 iqPutI
     /tmp/ccIDiUUI.s:203    .text.iqGetTimeout:0000000000000000 iqGetTimeout
     /tmp/ccIDiUUI.s:369    .text.iqReadTimeout:0000000000000000 iqReadTimeout
     /tmp/ccIDiUUI.s:717    .text.oqObjectInit:0000000000000000 oqObjectInit
     /tmp/ccIDiUUI.s:787    .text.oqResetI:0000000000000000 oqResetI
     /tmp/ccIDiUUI.s:830    .text.oqPutTimeout:0000000000000000 oqPutTimeout
     /tmp/ccIDiUUI.s:1004   .text.oqGetI:0000000000000000 oqGetI
     /tmp/ccIDiUUI.s:1093   .text.oqWriteTimeout:0000000000000000 oqWriteTimeout

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS

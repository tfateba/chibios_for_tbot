   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.ibqObjectInit,"ax",@progbits
  12               	.global	ibqObjectInit
  14               	ibqObjectInit:
  15               	.LFB143:
  16               		.file 1 "../../../os/hal/src/hal_buffers.c"
   1:../../../os/hal/src/hal_buffers.c **** /*
   2:../../../os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/src/hal_buffers.c **** 
   4:../../../os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_buffers.c **** 
   8:../../../os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_buffers.c **** 
  10:../../../os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_buffers.c ****     limitations under the License.
  15:../../../os/hal/src/hal_buffers.c **** */
  16:../../../os/hal/src/hal_buffers.c **** 
  17:../../../os/hal/src/hal_buffers.c **** /**
  18:../../../os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:../../../os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:../../../os/hal/src/hal_buffers.c ****  *
  21:../../../os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:../../../os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:../../../os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:../../../os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:../../../os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:../../../os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:../../../os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:../../../os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:../../../os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  32:../../../os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:../../../os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:../../../os/hal/src/hal_buffers.c ****  *            together.
  35:../../../os/hal/src/hal_buffers.c ****  *          .
  36:../../../os/hal/src/hal_buffers.c ****  * @{
  37:../../../os/hal/src/hal_buffers.c ****  */
  38:../../../os/hal/src/hal_buffers.c **** 
  39:../../../os/hal/src/hal_buffers.c **** #include <string.h>
  40:../../../os/hal/src/hal_buffers.c **** 
  41:../../../os/hal/src/hal_buffers.c **** #include "hal.h"
  42:../../../os/hal/src/hal_buffers.c **** 
  43:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_buffers.c **** 
  47:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:../../../os/hal/src/hal_buffers.c **** 
  51:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:../../../os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:../../../os/hal/src/hal_buffers.c **** 
  55:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:../../../os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:../../../os/hal/src/hal_buffers.c **** 
  59:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:../../../os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:../../../os/hal/src/hal_buffers.c **** 
  63:../../../os/hal/src/hal_buffers.c **** /**
  64:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:../../../os/hal/src/hal_buffers.c ****  *
  66:../../../os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:../../../os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:../../../os/hal/src/hal_buffers.c ****  *
  74:../../../os/hal/src/hal_buffers.c ****  * @init
  75:../../../os/hal/src/hal_buffers.c ****  */
  76:../../../os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  17               		.loc 1 77 0
  18               		.cfi_startproc
  19               	.LVL0:
  20 0000 CF92      		push r12
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 12, -3
  24 0002 DF92      		push r13
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 5
  27               		.cfi_offset 13, -4
  28 0004 EF92      		push r14
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 6
  31               		.cfi_offset 14, -5
  32 0006 FF92      		push r15
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 7
  35               		.cfi_offset 15, -6
  36 0008 0F93      		push r16
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 8
  39               		.cfi_offset 16, -7
  40 000a 1F93      		push r17
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 9
  43               		.cfi_offset 17, -8
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 6 */
  47               	.L__stack_usage = 6
  48 000c FC01      		movw r30,r24
  49               	.LVL1:
  50               	.LBB251:
  51               	.LBB252:
  52               	.LBB253:
  53               	.LBB254:
  54               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:../../../os/rt/include/chschd.h **** #endif
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:../../../os/rt/include/chschd.h **** #endif
 124:../../../os/rt/include/chschd.h **** 
 125:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:../../../os/rt/include/chschd.h **** #endif
 128:../../../os/rt/include/chschd.h **** 
 129:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 130:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 132:../../../os/rt/include/chschd.h **** 
 133:../../../os/rt/include/chschd.h **** /**
 134:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:../../../os/rt/include/chschd.h ****  */
 136:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 137:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:../../../os/rt/include/chschd.h **** };
 139:../../../os/rt/include/chschd.h **** 
 140:../../../os/rt/include/chschd.h **** /**
 141:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:../../../os/rt/include/chschd.h ****  */
 143:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 144:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:../../../os/rt/include/chschd.h **** };
 147:../../../os/rt/include/chschd.h **** 
 148:../../../os/rt/include/chschd.h **** /**
 149:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:../../../os/rt/include/chschd.h ****  */
 154:../../../os/rt/include/chschd.h **** struct ch_thread {
 155:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:../../../os/rt/include/chschd.h **** #endif
 162:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:../../../os/rt/include/chschd.h ****   /**
 165:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:../../../os/rt/include/chschd.h ****    */
 167:../../../os/rt/include/chschd.h ****   const char            *name;
 168:../../../os/rt/include/chschd.h **** #endif
 169:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:../../../os/rt/include/chschd.h ****   /**
 172:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 175:../../../os/rt/include/chschd.h ****    */
 176:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:../../../os/rt/include/chschd.h **** #endif
 178:../../../os/rt/include/chschd.h ****   /**
 179:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:../../../os/rt/include/chschd.h ****    */
 181:../../../os/rt/include/chschd.h ****   tstate_t              state;
 182:../../../os/rt/include/chschd.h ****   /**
 183:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:../../../os/rt/include/chschd.h ****    */
 185:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 186:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:../../../os/rt/include/chschd.h ****    */
 190:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 191:../../../os/rt/include/chschd.h **** #endif
 192:../../../os/rt/include/chschd.h ****   /**
 193:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:../../../os/rt/include/chschd.h ****    */
 195:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:../../../os/rt/include/chschd.h ****   tslices_t             preempt;
 197:../../../os/rt/include/chschd.h **** #endif
 198:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:../../../os/rt/include/chschd.h ****   /**
 200:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:../../../os/rt/include/chschd.h ****    */
 203:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 204:../../../os/rt/include/chschd.h **** #endif
 205:../../../os/rt/include/chschd.h ****   /**
 206:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:../../../os/rt/include/chschd.h ****    */
 210:../../../os/rt/include/chschd.h ****   union {
 211:../../../os/rt/include/chschd.h ****     /**
 212:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:../../../os/rt/include/chschd.h ****      */
 217:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:../../../os/rt/include/chschd.h ****     /**
 219:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:../../../os/rt/include/chschd.h ****      *          this thread.
 223:../../../os/rt/include/chschd.h ****      */
 224:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 225:../../../os/rt/include/chschd.h ****     /**
 226:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:../../../os/rt/include/chschd.h ****      *          states.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 232:../../../os/rt/include/chschd.h ****     /**
 233:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:../../../os/rt/include/chschd.h ****      *          state.
 237:../../../os/rt/include/chschd.h ****      */
 238:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:../../../os/rt/include/chschd.h ****     /**
 241:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:../../../os/rt/include/chschd.h ****      */
 243:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:../../../os/rt/include/chschd.h **** #endif
 245:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:../../../os/rt/include/chschd.h ****     /**
 247:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:../../../os/rt/include/chschd.h ****      *          state.
 251:../../../os/rt/include/chschd.h ****      */
 252:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:../../../os/rt/include/chschd.h **** #endif
 254:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:../../../os/rt/include/chschd.h ****     /**
 256:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:../../../os/rt/include/chschd.h ****      *          state.
 260:../../../os/rt/include/chschd.h ****      */
 261:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:../../../os/rt/include/chschd.h **** #endif
 263:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:../../../os/rt/include/chschd.h ****     /**
 265:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:../../../os/rt/include/chschd.h ****      */
 269:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:../../../os/rt/include/chschd.h **** #endif
 271:../../../os/rt/include/chschd.h ****   }                     u;
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:../../../os/rt/include/chschd.h ****    */
 282:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:../../../os/rt/include/chschd.h **** #endif
 284:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:../../../os/rt/include/chschd.h ****   /**
 286:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:../../../os/rt/include/chschd.h ****    */
 288:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 289:../../../os/rt/include/chschd.h **** #endif
 290:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:../../../os/rt/include/chschd.h ****    */
 295:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:../../../os/rt/include/chschd.h ****   /**
 297:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:../../../os/rt/include/chschd.h ****    */
 299:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 300:../../../os/rt/include/chschd.h **** #endif
 301:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:../../../os/rt/include/chschd.h ****   /**
 304:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:../../../os/rt/include/chschd.h ****    */
 306:../../../os/rt/include/chschd.h ****   void                  *mpool;
 307:../../../os/rt/include/chschd.h **** #endif
 308:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:../../../os/rt/include/chschd.h ****   /**
 310:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:../../../os/rt/include/chschd.h ****    */
 312:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:../../../os/rt/include/chschd.h **** #endif
 314:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:../../../os/rt/include/chschd.h **** #endif
 318:../../../os/rt/include/chschd.h **** };
 319:../../../os/rt/include/chschd.h **** 
 320:../../../os/rt/include/chschd.h **** /**
 321:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:../../../os/rt/include/chschd.h ****  *
 323:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:../../../os/rt/include/chschd.h ****  */
 325:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 331:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 333:../../../os/rt/include/chschd.h **** };
 334:../../../os/rt/include/chschd.h **** 
 335:../../../os/rt/include/chschd.h **** /**
 336:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:../../../os/rt/include/chschd.h ****  */
 341:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:../../../os/rt/include/chschd.h ****                                                 list.                       */
 344:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:../../../os/rt/include/chschd.h ****                                                 list.                       */
 346:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:../../../os/rt/include/chschd.h **** #endif
 350:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:../../../os/rt/include/chschd.h ****   /**
 352:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:../../../os/rt/include/chschd.h ****    */
 354:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 356:../../../os/rt/include/chschd.h **** #endif
 357:../../../os/rt/include/chschd.h **** };
 358:../../../os/rt/include/chschd.h **** 
 359:../../../os/rt/include/chschd.h **** /**
 360:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:../../../os/rt/include/chschd.h ****  */
 362:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 363:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 368:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:../../../os/rt/include/chschd.h **** #endif
 372:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 375:../../../os/rt/include/chschd.h **** };
 376:../../../os/rt/include/chschd.h **** 
 377:../../../os/rt/include/chschd.h **** /**
 378:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:../../../os/rt/include/chschd.h ****  */
 380:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 381:../../../os/rt/include/chschd.h ****   /**
 382:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:../../../os/rt/include/chschd.h ****    */
 388:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:../../../os/rt/include/chschd.h ****   /**
 391:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:../../../os/rt/include/chschd.h ****    */
 393:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:../../../os/rt/include/chschd.h ****   /**
 395:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:../../../os/rt/include/chschd.h ****    */
 397:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:../../../os/rt/include/chschd.h **** #endif
 399:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:../../../os/rt/include/chschd.h ****   /**
 401:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:../../../os/rt/include/chschd.h ****    */
 403:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:../../../os/rt/include/chschd.h **** #endif
 405:../../../os/rt/include/chschd.h **** };
 406:../../../os/rt/include/chschd.h **** 
 407:../../../os/rt/include/chschd.h **** /**
 408:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 409:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:../../../os/rt/include/chschd.h ****  *          stacks.
 411:../../../os/rt/include/chschd.h ****  */
 412:../../../os/rt/include/chschd.h **** struct ch_system {
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:../../../os/rt/include/chschd.h ****   /**
 418:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:../../../os/rt/include/chschd.h ****    */
 420:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:../../../os/rt/include/chschd.h ****   /**
 422:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 423:../../../os/rt/include/chschd.h ****    */
 424:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:../../../os/rt/include/chschd.h ****   /**
 426:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:../../../os/rt/include/chschd.h ****    */
 428:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 429:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:../../../os/rt/include/chschd.h ****   /**
 431:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:../../../os/rt/include/chschd.h ****    */
 433:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:../../../os/rt/include/chschd.h **** #endif
 435:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:../../../os/rt/include/chschd.h ****   /**
 437:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:../../../os/rt/include/chschd.h ****    */
 439:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:../../../os/rt/include/chschd.h **** #endif
 441:../../../os/rt/include/chschd.h **** };
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 444:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 446:../../../os/rt/include/chschd.h **** 
 447:../../../os/rt/include/chschd.h **** /**
 448:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:../../../os/rt/include/chschd.h ****  *
 450:../../../os/rt/include/chschd.h ****  * @notapi
 451:../../../os/rt/include/chschd.h ****  */
 452:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** /**
 455:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:../../../os/rt/include/chschd.h ****  */
 459:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:../../../os/rt/include/chschd.h **** 
 461:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 462:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 464:../../../os/rt/include/chschd.h **** 
 465:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 467:../../../os/rt/include/chschd.h **** #endif
 468:../../../os/rt/include/chschd.h **** 
 469:../../../os/rt/include/chschd.h **** /*
 470:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 471:../../../os/rt/include/chschd.h ****  */
 472:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 473:../../../os/rt/include/chschd.h **** extern "C" {
 474:../../../os/rt/include/chschd.h **** #endif
 475:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 496:../../../os/rt/include/chschd.h **** }
 497:../../../os/rt/include/chschd.h **** #endif
 498:../../../os/rt/include/chschd.h **** 
 499:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 500:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 502:../../../os/rt/include/chschd.h **** 
 503:../../../os/rt/include/chschd.h **** /**
 504:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:../../../os/rt/include/chschd.h ****  *
 506:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:../../../os/rt/include/chschd.h ****  *
 508:../../../os/rt/include/chschd.h ****  * @notapi
 509:../../../os/rt/include/chschd.h ****  */
 510:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:../../../os/rt/include/chschd.h **** 
 512:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:../../../os/rt/include/chschd.h **** }
 514:../../../os/rt/include/chschd.h **** 
 515:../../../os/rt/include/chschd.h **** /**
 516:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:../../../os/rt/include/chschd.h ****  *
 518:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 520:../../../os/rt/include/chschd.h ****  *
 521:../../../os/rt/include/chschd.h ****  * @notapi
 522:../../../os/rt/include/chschd.h ****  */
 523:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:../../../os/rt/include/chschd.h **** 
 525:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:../../../os/rt/include/chschd.h **** }
 527:../../../os/rt/include/chschd.h **** 
 528:../../../os/rt/include/chschd.h **** /**
 529:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:../../../os/rt/include/chschd.h ****  *
 531:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 533:../../../os/rt/include/chschd.h ****  *
 534:../../../os/rt/include/chschd.h ****  * @notapi
 535:../../../os/rt/include/chschd.h ****  */
 536:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:../../../os/rt/include/chschd.h **** 
 538:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:../../../os/rt/include/chschd.h **** }
 540:../../../os/rt/include/chschd.h **** 
 541:../../../os/rt/include/chschd.h **** /**
 542:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:../../../os/rt/include/chschd.h ****  *
 544:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @notapi
 547:../../../os/rt/include/chschd.h ****  */
 548:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:../../../os/rt/include/chschd.h **** 
 550:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  55               		.loc 2 550 0
  56 000e 9183      		std Z+1,r25
  57 0010 8083      		st Z,r24
 551:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  58               		.loc 2 551 0
  59 0012 9383      		std Z+3,r25
  60 0014 8283      		std Z+2,r24
  61               	.LVL2:
  62               	.LBE254:
  63               	.LBE253:
  64               	.LBE252:
  65               	.LBE251:
  78:../../../os/hal/src/hal_buffers.c **** 
  79:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:../../../os/hal/src/hal_buffers.c **** 
  81:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:../../../os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  66               		.loc 1 82 0
  67 0016 6483      		std Z+4,r22
  83:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  68               		.loc 1 83 0
  69 0018 1682      		std Z+6,__zero_reg__
  70 001a 1582      		std Z+5,__zero_reg__
  84:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  71               		.loc 1 84 0
  72 001c 5287      		std Z+10,r21
  73 001e 4187      		std Z+9,r20
  85:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  74               		.loc 1 85 0
  75 0020 5087      		std Z+8,r21
  76 0022 4783      		std Z+7,r20
  86:../../../os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  77               		.loc 1 86 0
  78 0024 2E5F      		subi r18,-2
  79 0026 3F4F      		sbci r19,-1
  80               	.LVL3:
  81 0028 209F      		mul r18,r16
  82 002a C001      		movw r24,r0
  83 002c 219F      		mul r18,r17
  84 002e 900D      		add r25,r0
  85 0030 309F      		mul r19,r16
  86 0032 900D      		add r25,r0
  87 0034 1124      		clr r1
  88               	.LVL4:
  89 0036 840F      		add r24,r20
  90 0038 951F      		adc r25,r21
  91 003a 9487      		std Z+12,r25
  92 003c 8387      		std Z+11,r24
  87:../../../os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
  93               		.loc 1 87 0
  94 003e 3687      		std Z+14,r19
  95 0040 2587      		std Z+13,r18
  88:../../../os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
  96               		.loc 1 88 0
  97 0042 108B      		std Z+16,r17
  98 0044 0787      		std Z+15,r16
  89:../../../os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
  99               		.loc 1 89 0
 100 0046 528B      		std Z+18,r21
 101 0048 418B      		std Z+17,r20
  90:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 102               		.loc 1 90 0
 103 004a 148A      		std Z+20,__zero_reg__
 104 004c 138A      		std Z+19,__zero_reg__
  91:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 105               		.loc 1 91 0
 106 004e 168A      		std Z+22,__zero_reg__
 107 0050 158A      		std Z+21,__zero_reg__
  92:../../../os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
 108               		.loc 1 92 0
 109 0052 F08E      		std Z+24,r15
 110 0054 E78A      		std Z+23,r14
  93:../../../os/hal/src/hal_buffers.c ****   ibqp->link      = link;
 111               		.loc 1 93 0
 112 0056 D28E      		std Z+26,r13
 113 0058 C18E      		std Z+25,r12
 114               	/* epilogue start */
  94:../../../os/hal/src/hal_buffers.c **** }
 115               		.loc 1 94 0
 116 005a 1F91      		pop r17
 117 005c 0F91      		pop r16
 118               	.LVL5:
 119 005e FF90      		pop r15
 120 0060 EF90      		pop r14
 121               	.LVL6:
 122 0062 DF90      		pop r13
 123 0064 CF90      		pop r12
 124               	.LVL7:
 125 0066 0895      		ret
 126               		.cfi_endproc
 127               	.LFE143:
 129               		.section	.text.ibqResetI,"ax",@progbits
 130               	.global	ibqResetI
 132               	ibqResetI:
 133               	.LFB144:
  95:../../../os/hal/src/hal_buffers.c **** 
  96:../../../os/hal/src/hal_buffers.c **** /**
  97:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:../../../os/hal/src/hal_buffers.c ****  *
 103:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:../../../os/hal/src/hal_buffers.c ****  *
 105:../../../os/hal/src/hal_buffers.c ****  * @iclass
 106:../../../os/hal/src/hal_buffers.c ****  */
 107:../../../os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 134               		.loc 1 107 0
 135               		.cfi_startproc
 136               	.LVL8:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
 141 0000 FC01      		movw r30,r24
 108:../../../os/hal/src/hal_buffers.c **** 
 109:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:../../../os/hal/src/hal_buffers.c **** 
 111:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 142               		.loc 1 111 0
 143 0002 1682      		std Z+6,__zero_reg__
 144 0004 1582      		std Z+5,__zero_reg__
 112:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 145               		.loc 1 112 0
 146 0006 8189      		ldd r24,Z+17
 147 0008 9289      		ldd r25,Z+18
 148               	.LVL9:
 149 000a 9287      		std Z+10,r25
 150 000c 8187      		std Z+9,r24
 113:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 151               		.loc 1 113 0
 152 000e 9087      		std Z+8,r25
 153 0010 8783      		std Z+7,r24
 114:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 154               		.loc 1 114 0
 155 0012 148A      		std Z+20,__zero_reg__
 156 0014 138A      		std Z+19,__zero_reg__
 115:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 157               		.loc 1 115 0
 158 0016 168A      		std Z+22,__zero_reg__
 159 0018 158A      		std Z+21,__zero_reg__
 160               	.LVL10:
 161               	.LBB255:
 162               	.LBB256:
 163               		.file 3 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:../../../os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:../../../os/hal/osal/rt/osal.h ****  */
 181:../../../os/hal/osal/rt/osal.h **** typedef struct {
 182:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:../../../os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:../../../os/hal/osal/rt/osal.h **** } event_source_t;
 185:../../../os/hal/osal/rt/osal.h **** #endif
 186:../../../os/hal/osal/rt/osal.h **** 
 187:../../../os/hal/osal/rt/osal.h **** /**
 188:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:../../../os/hal/osal/rt/osal.h ****  */
 192:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:../../../os/hal/osal/rt/osal.h **** #else
 196:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:../../../os/hal/osal/rt/osal.h **** #endif
 198:../../../os/hal/osal/rt/osal.h **** 
 199:../../../os/hal/osal/rt/osal.h **** #if 0
 200:../../../os/hal/osal/rt/osal.h **** /**
 201:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:../../../os/hal/osal/rt/osal.h ****  */
 207:../../../os/hal/osal/rt/osal.h **** typedef struct {
 208:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:../../../os/hal/osal/rt/osal.h **** #endif
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:../../../os/hal/osal/rt/osal.h **** 
 216:../../../os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:../../../os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:../../../os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:../../../os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:../../../os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:../../../os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:../../../os/hal/osal/rt/osal.h **** 
 223:../../../os/hal/osal/rt/osal.h **** /**
 224:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:../../../os/hal/osal/rt/osal.h ****  * @{
 226:../../../os/hal/osal/rt/osal.h ****  */
 227:../../../os/hal/osal/rt/osal.h **** /**
 228:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 231:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:../../../os/hal/osal/rt/osal.h ****  *
 236:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:../../../os/hal/osal/rt/osal.h ****  *
 239:../../../os/hal/osal/rt/osal.h ****  * @api
 240:../../../os/hal/osal/rt/osal.h ****  */
 241:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:../../../os/hal/osal/rt/osal.h **** 
 243:../../../os/hal/osal/rt/osal.h **** /**
 244:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 248:../../../os/hal/osal/rt/osal.h ****  *
 249:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:../../../os/hal/osal/rt/osal.h ****  *
 251:../../../os/hal/osal/rt/osal.h ****  * @api
 252:../../../os/hal/osal/rt/osal.h ****  */
 253:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:../../../os/hal/osal/rt/osal.h **** 
 255:../../../os/hal/osal/rt/osal.h **** /**
 256:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:../../../os/hal/osal/rt/osal.h ****  */
 265:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:../../../os/hal/osal/rt/osal.h **** /** @} */
 267:../../../os/hal/osal/rt/osal.h **** 
 268:../../../os/hal/osal/rt/osal.h **** /**
 269:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:../../../os/hal/osal/rt/osal.h ****  * @{
 271:../../../os/hal/osal/rt/osal.h ****  */
 272:../../../os/hal/osal/rt/osal.h **** /**
 273:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:../../../os/hal/osal/rt/osal.h ****  */
 275:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:../../../os/hal/osal/rt/osal.h **** 
 277:../../../os/hal/osal/rt/osal.h **** /**
 278:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:../../../os/hal/osal/rt/osal.h ****  */
 281:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:../../../os/hal/osal/rt/osal.h **** 
 283:../../../os/hal/osal/rt/osal.h **** /**
 284:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:../../../os/hal/osal/rt/osal.h ****  */
 287:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:../../../os/hal/osal/rt/osal.h **** 
 289:../../../os/hal/osal/rt/osal.h **** /**
 290:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:../../../os/hal/osal/rt/osal.h ****  *
 293:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:../../../os/hal/osal/rt/osal.h ****  */
 295:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:../../../os/hal/osal/rt/osal.h **** /** @} */
 297:../../../os/hal/osal/rt/osal.h **** 
 298:../../../os/hal/osal/rt/osal.h **** /**
 299:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:../../../os/hal/osal/rt/osal.h ****  * @{
 301:../../../os/hal/osal/rt/osal.h ****  */
 302:../../../os/hal/osal/rt/osal.h **** /**
 303:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:../../../os/hal/osal/rt/osal.h ****  *
 307:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:../../../os/hal/osal/rt/osal.h ****  *
 310:../../../os/hal/osal/rt/osal.h ****  * @api
 311:../../../os/hal/osal/rt/osal.h ****  */
 312:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:../../../os/hal/osal/rt/osal.h **** 
 314:../../../os/hal/osal/rt/osal.h **** /**
 315:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:../../../os/hal/osal/rt/osal.h ****  *
 319:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:../../../os/hal/osal/rt/osal.h ****  *
 322:../../../os/hal/osal/rt/osal.h ****  * @api
 323:../../../os/hal/osal/rt/osal.h ****  */
 324:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:../../../os/hal/osal/rt/osal.h **** 
 326:../../../os/hal/osal/rt/osal.h **** /**
 327:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:../../../os/hal/osal/rt/osal.h ****  *
 331:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:../../../os/hal/osal/rt/osal.h ****  *
 334:../../../os/hal/osal/rt/osal.h ****  * @api
 335:../../../os/hal/osal/rt/osal.h ****  */
 336:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:../../../os/hal/osal/rt/osal.h **** /** @} */
 338:../../../os/hal/osal/rt/osal.h **** 
 339:../../../os/hal/osal/rt/osal.h **** /**
 340:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:../../../os/hal/osal/rt/osal.h ****  * @{
 342:../../../os/hal/osal/rt/osal.h ****  */
 343:../../../os/hal/osal/rt/osal.h **** /**
 344:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:../../../os/hal/osal/rt/osal.h ****  *
 348:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:../../../os/hal/osal/rt/osal.h **** 
 356:../../../os/hal/osal/rt/osal.h **** /**
 357:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:../../../os/hal/osal/rt/osal.h ****  *
 362:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @api
 367:../../../os/hal/osal/rt/osal.h ****  */
 368:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:../../../os/hal/osal/rt/osal.h **** 
 370:../../../os/hal/osal/rt/osal.h **** /**
 371:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:../../../os/hal/osal/rt/osal.h ****  *
 376:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @api
 381:../../../os/hal/osal/rt/osal.h ****  */
 382:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:../../../os/hal/osal/rt/osal.h **** /** @} */
 384:../../../os/hal/osal/rt/osal.h **** 
 385:../../../os/hal/osal/rt/osal.h **** /**
 386:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:../../../os/hal/osal/rt/osal.h ****  * @{
 388:../../../os/hal/osal/rt/osal.h ****  */
 389:../../../os/hal/osal/rt/osal.h **** /**
 390:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:../../../os/hal/osal/rt/osal.h ****  *
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:../../../os/hal/osal/rt/osal.h ****  *
 397:../../../os/hal/osal/rt/osal.h ****  * @api
 398:../../../os/hal/osal/rt/osal.h ****  */
 399:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:../../../os/hal/osal/rt/osal.h **** 
 401:../../../os/hal/osal/rt/osal.h **** /**
 402:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:../../../os/hal/osal/rt/osal.h ****  *
 408:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:../../../os/hal/osal/rt/osal.h ****  *
 410:../../../os/hal/osal/rt/osal.h ****  * @api
 411:../../../os/hal/osal/rt/osal.h ****  */
 412:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:../../../os/hal/osal/rt/osal.h **** 
 414:../../../os/hal/osal/rt/osal.h **** /**
 415:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 417:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:../../../os/hal/osal/rt/osal.h ****  *
 421:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:../../../os/hal/osal/rt/osal.h ****  *
 423:../../../os/hal/osal/rt/osal.h ****  * @api
 424:../../../os/hal/osal/rt/osal.h ****  */
 425:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:../../../os/hal/osal/rt/osal.h **** /** @} */
 427:../../../os/hal/osal/rt/osal.h **** 
 428:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:../../../os/hal/osal/rt/osal.h **** extern "C" {
 434:../../../os/hal/osal/rt/osal.h **** #endif
 435:../../../os/hal/osal/rt/osal.h **** 
 436:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:../../../os/hal/osal/rt/osal.h **** }
 438:../../../os/hal/osal/rt/osal.h **** #endif
 439:../../../os/hal/osal/rt/osal.h **** 
 440:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:../../../os/hal/osal/rt/osal.h **** 
 444:../../../os/hal/osal/rt/osal.h **** /**
 445:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:../../../os/hal/osal/rt/osal.h ****  *
 447:../../../os/hal/osal/rt/osal.h ****  * @api
 448:../../../os/hal/osal/rt/osal.h ****  */
 449:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:../../../os/hal/osal/rt/osal.h **** 
 451:../../../os/hal/osal/rt/osal.h **** }
 452:../../../os/hal/osal/rt/osal.h **** 
 453:../../../os/hal/osal/rt/osal.h **** /**
 454:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:../../../os/hal/osal/rt/osal.h ****  *
 456:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:../../../os/hal/osal/rt/osal.h ****  *
 458:../../../os/hal/osal/rt/osal.h ****  * @api
 459:../../../os/hal/osal/rt/osal.h ****  */
 460:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:../../../os/hal/osal/rt/osal.h **** }
 464:../../../os/hal/osal/rt/osal.h **** 
 465:../../../os/hal/osal/rt/osal.h **** /**
 466:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:../../../os/hal/osal/rt/osal.h ****  *
 468:../../../os/hal/osal/rt/osal.h ****  * @special
 469:../../../os/hal/osal/rt/osal.h ****  */
 470:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:../../../os/hal/osal/rt/osal.h **** 
 472:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 473:../../../os/hal/osal/rt/osal.h **** }
 474:../../../os/hal/osal/rt/osal.h **** 
 475:../../../os/hal/osal/rt/osal.h **** /**
 476:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:../../../os/hal/osal/rt/osal.h ****  *
 478:../../../os/hal/osal/rt/osal.h ****  * @special
 479:../../../os/hal/osal/rt/osal.h ****  */
 480:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:../../../os/hal/osal/rt/osal.h **** 
 482:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 483:../../../os/hal/osal/rt/osal.h **** }
 484:../../../os/hal/osal/rt/osal.h **** 
 485:../../../os/hal/osal/rt/osal.h **** /**
 486:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:../../../os/hal/osal/rt/osal.h ****  *
 489:../../../os/hal/osal/rt/osal.h ****  * @special
 490:../../../os/hal/osal/rt/osal.h ****  */
 491:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 494:../../../os/hal/osal/rt/osal.h **** }
 495:../../../os/hal/osal/rt/osal.h **** 
 496:../../../os/hal/osal/rt/osal.h **** /**
 497:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:../../../os/hal/osal/rt/osal.h ****  *
 500:../../../os/hal/osal/rt/osal.h ****  * @special
 501:../../../os/hal/osal/rt/osal.h ****  */
 502:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:../../../os/hal/osal/rt/osal.h **** 
 504:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:../../../os/hal/osal/rt/osal.h **** }
 506:../../../os/hal/osal/rt/osal.h **** 
 507:../../../os/hal/osal/rt/osal.h **** /**
 508:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:../../../os/hal/osal/rt/osal.h ****  *
 511:../../../os/hal/osal/rt/osal.h ****  * @special
 512:../../../os/hal/osal/rt/osal.h ****  */
 513:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:../../../os/hal/osal/rt/osal.h **** 
 515:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:../../../os/hal/osal/rt/osal.h **** }
 517:../../../os/hal/osal/rt/osal.h **** 
 518:../../../os/hal/osal/rt/osal.h **** /**
 519:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:../../../os/hal/osal/rt/osal.h ****  *
 522:../../../os/hal/osal/rt/osal.h ****  * @special
 523:../../../os/hal/osal/rt/osal.h ****  */
 524:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:../../../os/hal/osal/rt/osal.h **** 
 526:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:../../../os/hal/osal/rt/osal.h **** }
 528:../../../os/hal/osal/rt/osal.h **** 
 529:../../../os/hal/osal/rt/osal.h **** /**
 530:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:../../../os/hal/osal/rt/osal.h ****  *          is known.
 535:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:../../../os/hal/osal/rt/osal.h ****  *
 537:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @xclass
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:../../../os/hal/osal/rt/osal.h ****  *
 552:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:../../../os/hal/osal/rt/osal.h ****  *
 554:../../../os/hal/osal/rt/osal.h ****  * @xclass
 555:../../../os/hal/osal/rt/osal.h ****  */
 556:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:../../../os/hal/osal/rt/osal.h **** 
 558:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:../../../os/hal/osal/rt/osal.h **** }
 560:../../../os/hal/osal/rt/osal.h **** 
 561:../../../os/hal/osal/rt/osal.h **** /**
 562:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:../../../os/hal/osal/rt/osal.h ****  *          value.
 565:../../../os/hal/osal/rt/osal.h ****  *
 566:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:../../../os/hal/osal/rt/osal.h ****  *
 568:../../../os/hal/osal/rt/osal.h ****  * @xclass
 569:../../../os/hal/osal/rt/osal.h ****  */
 570:../../../os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:../../../os/hal/osal/rt/osal.h **** 
 573:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:../../../os/hal/osal/rt/osal.h **** }
 575:../../../os/hal/osal/rt/osal.h **** #endif
 576:../../../os/hal/osal/rt/osal.h **** 
 577:../../../os/hal/osal/rt/osal.h **** /**
 578:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:../../../os/hal/osal/rt/osal.h ****  */
 582:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:../../../os/hal/osal/rt/osal.h **** 
 585:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:../../../os/hal/osal/rt/osal.h **** }
 587:../../../os/hal/osal/rt/osal.h **** #endif
 588:../../../os/hal/osal/rt/osal.h **** 
 589:../../../os/hal/osal/rt/osal.h **** /**
 590:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:../../../os/hal/osal/rt/osal.h ****  *
 596:../../../os/hal/osal/rt/osal.h ****  * @sclass
 597:../../../os/hal/osal/rt/osal.h ****  */
 598:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:../../../os/hal/osal/rt/osal.h **** 
 600:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:../../../os/hal/osal/rt/osal.h **** }
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h **** /**
 604:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 607:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:../../../os/hal/osal/rt/osal.h ****  *
 612:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @xclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:../../../os/hal/osal/rt/osal.h ****  *
 627:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:../../../os/hal/osal/rt/osal.h ****  *
 633:../../../os/hal/osal/rt/osal.h ****  * @xclass
 634:../../../os/hal/osal/rt/osal.h ****  */
 635:../../../os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:../../../os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:../../../os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:../../../os/hal/osal/rt/osal.h **** }
 641:../../../os/hal/osal/rt/osal.h **** 
 642:../../../os/hal/osal/rt/osal.h **** /**
 643:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:../../../os/hal/osal/rt/osal.h ****  *
 645:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:../../../os/hal/osal/rt/osal.h ****  *                      .
 651:../../../os/hal/osal/rt/osal.h ****  *
 652:../../../os/hal/osal/rt/osal.h ****  * @sclass
 653:../../../os/hal/osal/rt/osal.h ****  */
 654:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:../../../os/hal/osal/rt/osal.h **** 
 656:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:../../../os/hal/osal/rt/osal.h **** }
 658:../../../os/hal/osal/rt/osal.h **** 
 659:../../../os/hal/osal/rt/osal.h **** /**
 660:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:../../../os/hal/osal/rt/osal.h ****  *
 662:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:../../../os/hal/osal/rt/osal.h ****  *                      .
 668:../../../os/hal/osal/rt/osal.h ****  *
 669:../../../os/hal/osal/rt/osal.h ****  * @api
 670:../../../os/hal/osal/rt/osal.h ****  */
 671:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:../../../os/hal/osal/rt/osal.h **** 
 673:../../../os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:../../../os/hal/osal/rt/osal.h **** }
 675:../../../os/hal/osal/rt/osal.h **** 
 676:../../../os/hal/osal/rt/osal.h **** /**
 677:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:../../../os/hal/osal/rt/osal.h ****  *          context.
 680:../../../os/hal/osal/rt/osal.h ****  *
 681:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:../../../os/hal/osal/rt/osal.h ****  *
 684:../../../os/hal/osal/rt/osal.h ****  * @sclass
 685:../../../os/hal/osal/rt/osal.h ****  */
 686:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:../../../os/hal/osal/rt/osal.h **** 
 688:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:../../../os/hal/osal/rt/osal.h **** }
 690:../../../os/hal/osal/rt/osal.h **** 
 691:../../../os/hal/osal/rt/osal.h **** /**
 692:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:../../../os/hal/osal/rt/osal.h ****  *          context.
 695:../../../os/hal/osal/rt/osal.h ****  *
 696:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:../../../os/hal/osal/rt/osal.h ****  *                        state.
 701:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 704:../../../os/hal/osal/rt/osal.h ****  *                      .
 705:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:../../../os/hal/osal/rt/osal.h ****  *
 708:../../../os/hal/osal/rt/osal.h ****  * @sclass
 709:../../../os/hal/osal/rt/osal.h ****  */
 710:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:../../../os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:../../../os/hal/osal/rt/osal.h **** 
 713:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:../../../os/hal/osal/rt/osal.h **** }
 715:../../../os/hal/osal/rt/osal.h **** 
 716:../../../os/hal/osal/rt/osal.h **** /**
 717:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 720:../../../os/hal/osal/rt/osal.h ****  *
 721:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:../../../os/hal/osal/rt/osal.h ****  *
 724:../../../os/hal/osal/rt/osal.h ****  * @iclass
 725:../../../os/hal/osal/rt/osal.h ****  */
 726:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:../../../os/hal/osal/rt/osal.h **** 
 728:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:../../../os/hal/osal/rt/osal.h **** }
 730:../../../os/hal/osal/rt/osal.h **** 
 731:../../../os/hal/osal/rt/osal.h **** /**
 732:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:../../../os/hal/osal/rt/osal.h ****  *          context.
 735:../../../os/hal/osal/rt/osal.h ****  *
 736:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:../../../os/hal/osal/rt/osal.h ****  *
 739:../../../os/hal/osal/rt/osal.h ****  * @iclass
 740:../../../os/hal/osal/rt/osal.h ****  */
 741:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:../../../os/hal/osal/rt/osal.h **** 
 743:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:../../../os/hal/osal/rt/osal.h **** }
 745:../../../os/hal/osal/rt/osal.h **** 
 746:../../../os/hal/osal/rt/osal.h **** /**
 747:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:../../../os/hal/osal/rt/osal.h ****  *
 749:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:../../../os/hal/osal/rt/osal.h ****  *
 751:../../../os/hal/osal/rt/osal.h ****  * @init
 752:../../../os/hal/osal/rt/osal.h ****  */
 753:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:../../../os/hal/osal/rt/osal.h **** 
 755:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:../../../os/hal/osal/rt/osal.h **** }
 757:../../../os/hal/osal/rt/osal.h **** 
 758:../../../os/hal/osal/rt/osal.h **** /**
 759:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:../../../os/hal/osal/rt/osal.h ****  *
 763:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:../../../os/hal/osal/rt/osal.h ****  *                        state.
 768:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 771:../../../os/hal/osal/rt/osal.h ****  *                      .
 772:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 778:../../../os/hal/osal/rt/osal.h ****  *
 779:../../../os/hal/osal/rt/osal.h ****  * @sclass
 780:../../../os/hal/osal/rt/osal.h ****  */
 781:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:../../../os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:../../../os/hal/osal/rt/osal.h **** 
 784:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:../../../os/hal/osal/rt/osal.h **** }
 786:../../../os/hal/osal/rt/osal.h **** 
 787:../../../os/hal/osal/rt/osal.h **** /**
 788:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:../../../os/hal/osal/rt/osal.h ****  *
 790:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:../../../os/hal/osal/rt/osal.h ****  *
 793:../../../os/hal/osal/rt/osal.h ****  * @iclass
 794:../../../os/hal/osal/rt/osal.h ****  */
 795:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:../../../os/hal/osal/rt/osal.h **** 
 797:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:../../../os/hal/osal/rt/osal.h **** }
 799:../../../os/hal/osal/rt/osal.h **** 
 800:../../../os/hal/osal/rt/osal.h **** /**
 801:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:../../../os/hal/osal/rt/osal.h ****  *
 803:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:../../../os/hal/osal/rt/osal.h ****  *
 806:../../../os/hal/osal/rt/osal.h ****  * @iclass
 807:../../../os/hal/osal/rt/osal.h ****  */
 808:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:../../../os/hal/osal/rt/osal.h **** 
 810:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 164               		.loc 3 810 0
 165 001a 6EEF      		ldi r22,lo8(-2)
 166 001c 7FEF      		ldi r23,lo8(-1)
 167 001e CF01      		movw r24,r30
 168 0020 0C94 0000 		jmp chThdDequeueAllI
 169               	.LVL11:
 170               	.LBE256:
 171               	.LBE255:
 172               		.cfi_endproc
 173               	.LFE144:
 175               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 176               	.global	ibqGetEmptyBufferI
 178               	ibqGetEmptyBufferI:
 179               	.LFB145:
 116:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:../../../os/hal/src/hal_buffers.c **** }
 118:../../../os/hal/src/hal_buffers.c **** 
 119:../../../os/hal/src/hal_buffers.c **** /**
 120:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:../../../os/hal/src/hal_buffers.c ****  *
 123:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:../../../os/hal/src/hal_buffers.c ****  *
 127:../../../os/hal/src/hal_buffers.c ****  * @iclass
 128:../../../os/hal/src/hal_buffers.c ****  */
 129:../../../os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 180               		.loc 1 129 0
 181               		.cfi_startproc
 182               	.LVL12:
 183               	/* prologue: function */
 184               	/* frame size = 0 */
 185               	/* stack size = 0 */
 186               	.L__stack_usage = 0
 187 0000 FC01      		movw r30,r24
 130:../../../os/hal/src/hal_buffers.c **** 
 131:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:../../../os/hal/src/hal_buffers.c **** 
 133:../../../os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 188               		.loc 1 133 0
 189 0002 2781      		ldd r18,Z+7
 190 0004 3085      		ldd r19,Z+8
 191 0006 8185      		ldd r24,Z+9
 192 0008 9285      		ldd r25,Z+10
 193               	.LVL13:
 194 000a 2817      		cp r18,r24
 195 000c 3907      		cpc r19,r25
 196 000e 01F0      		breq .L11
 197               	.L4:
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 135:../../../os/hal/src/hal_buffers.c ****   }
 136:../../../os/hal/src/hal_buffers.c **** 
 137:../../../os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 198               		.loc 1 137 0
 199 0010 C901      		movw r24,r18
 200 0012 0296      		adiw r24,2
 138:../../../os/hal/src/hal_buffers.c **** }
 201               		.loc 1 138 0
 202 0014 0895      		ret
 203               	.L11:
 133:../../../os/hal/src/hal_buffers.c ****     return NULL;
 204               		.loc 1 133 0 discriminator 1
 205 0016 8581      		ldd r24,Z+5
 206 0018 9681      		ldd r25,Z+6
 207 001a 892B      		or r24,r25
 208 001c 01F0      		breq .L4
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 209               		.loc 1 134 0
 210 001e 80E0      		ldi r24,0
 211 0020 90E0      		ldi r25,0
 212 0022 0895      		ret
 213               		.cfi_endproc
 214               	.LFE145:
 216               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 217               	.global	ibqPostFullBufferI
 219               	ibqPostFullBufferI:
 220               	.LFB146:
 139:../../../os/hal/src/hal_buffers.c **** 
 140:../../../os/hal/src/hal_buffers.c **** /**
 141:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:../../../os/hal/src/hal_buffers.c ****  *
 143:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:../../../os/hal/src/hal_buffers.c ****  *
 146:../../../os/hal/src/hal_buffers.c ****  * @iclass
 147:../../../os/hal/src/hal_buffers.c ****  */
 148:../../../os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 221               		.loc 1 148 0
 222               		.cfi_startproc
 223               	.LVL14:
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 0 */
 227               	.L__stack_usage = 0
 228 0000 FC01      		movw r30,r24
 149:../../../os/hal/src/hal_buffers.c **** 
 150:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:../../../os/hal/src/hal_buffers.c **** 
 152:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:../../../os/hal/src/hal_buffers.c **** 
 155:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:../../../os/hal/src/hal_buffers.c ****   *((size_t *)ibqp->bwrptr) = size;
 229               		.loc 1 156 0
 230 0002 A781      		ldd r26,Z+7
 231 0004 B085      		ldd r27,Z+8
 232 0006 1196      		adiw r26,1
 233 0008 7C93      		st X,r23
 234 000a 6E93      		st -X,r22
 157:../../../os/hal/src/hal_buffers.c **** 
 158:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 235               		.loc 1 159 0
 236 000c 2581      		ldd r18,Z+5
 237 000e 3681      		ldd r19,Z+6
 238 0010 2F5F      		subi r18,-1
 239 0012 3F4F      		sbci r19,-1
 240 0014 3683      		std Z+6,r19
 241 0016 2583      		std Z+5,r18
 160:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 242               		.loc 1 160 0
 243 0018 8585      		ldd r24,Z+13
 244 001a 9685      		ldd r25,Z+14
 245               	.LVL15:
 246 001c 8A0F      		add r24,r26
 247 001e 9B1F      		adc r25,r27
 248 0020 9087      		std Z+8,r25
 249 0022 8783      		std Z+7,r24
 161:../../../os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 250               		.loc 1 161 0
 251 0024 2385      		ldd r18,Z+11
 252 0026 3485      		ldd r19,Z+12
 253 0028 8217      		cp r24,r18
 254 002a 9307      		cpc r25,r19
 255 002c 00F0      		brlo .L13
 162:../../../os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 256               		.loc 1 162 0
 257 002e 8189      		ldd r24,Z+17
 258 0030 9289      		ldd r25,Z+18
 259 0032 9087      		std Z+8,r25
 260 0034 8783      		std Z+7,r24
 261               	.L13:
 262               	.LVL16:
 263               	.LBB257:
 264               	.LBB258:
 797:../../../os/hal/osal/rt/osal.h **** }
 265               		.loc 3 797 0
 266 0036 60E0      		ldi r22,0
 267 0038 70E0      		ldi r23,0
 268               	.LVL17:
 269 003a CF01      		movw r24,r30
 270 003c 0C94 0000 		jmp chThdDequeueNextI
 271               	.LVL18:
 272               	.LBE258:
 273               	.LBE257:
 274               		.cfi_endproc
 275               	.LFE146:
 277               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 278               	.global	ibqGetFullBufferTimeoutS
 280               	ibqGetFullBufferTimeoutS:
 281               	.LFB148:
 163:../../../os/hal/src/hal_buffers.c ****   }
 164:../../../os/hal/src/hal_buffers.c **** 
 165:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:../../../os/hal/src/hal_buffers.c **** }
 168:../../../os/hal/src/hal_buffers.c **** 
 169:../../../os/hal/src/hal_buffers.c **** /**
 170:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 175:../../../os/hal/src/hal_buffers.c ****  *
 176:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:../../../os/hal/src/hal_buffers.c ****  *                      .
 182:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 183:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 184:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 185:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 186:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 187:../../../os/hal/src/hal_buffers.c ****  *
 188:../../../os/hal/src/hal_buffers.c ****  * @api
 189:../../../os/hal/src/hal_buffers.c ****  */
 190:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 191:../../../os/hal/src/hal_buffers.c ****                               systime_t timeout) {
 192:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 193:../../../os/hal/src/hal_buffers.c **** 
 194:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 195:../../../os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 196:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 197:../../../os/hal/src/hal_buffers.c **** 
 198:../../../os/hal/src/hal_buffers.c ****   return msg;
 199:../../../os/hal/src/hal_buffers.c **** }
 200:../../../os/hal/src/hal_buffers.c **** 
 201:../../../os/hal/src/hal_buffers.c ****   /**
 202:../../../os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 203:../../../os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 204:../../../os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 205:../../../os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 206:../../../os/hal/src/hal_buffers.c ****    *          is empty.
 207:../../../os/hal/src/hal_buffers.c ****    *
 208:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 209:../../../os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 210:../../../os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 211:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 212:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 213:../../../os/hal/src/hal_buffers.c ****    *                      .
 214:../../../os/hal/src/hal_buffers.c ****    * @return              The operation status.
 215:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 216:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 217:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 218:../../../os/hal/src/hal_buffers.c ****    *                      suspended state.
 219:../../../os/hal/src/hal_buffers.c ****    *
 220:../../../os/hal/src/hal_buffers.c ****    * @sclass
 221:../../../os/hal/src/hal_buffers.c ****    */
 222:../../../os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 223:../../../os/hal/src/hal_buffers.c ****                                  systime_t timeout) {
 282               		.loc 1 223 0
 283               		.cfi_startproc
 284               	.LVL19:
 285 0000 0F93      		push r16
 286               	.LCFI6:
 287               		.cfi_def_cfa_offset 4
 288               		.cfi_offset 16, -3
 289 0002 1F93      		push r17
 290               	.LCFI7:
 291               		.cfi_def_cfa_offset 5
 292               		.cfi_offset 17, -4
 293 0004 CF93      		push r28
 294               	.LCFI8:
 295               		.cfi_def_cfa_offset 6
 296               		.cfi_offset 28, -5
 297 0006 DF93      		push r29
 298               	.LCFI9:
 299               		.cfi_def_cfa_offset 7
 300               		.cfi_offset 29, -6
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 4 */
 304               	.L__stack_usage = 4
 305 0008 EC01      		movw r28,r24
 306 000a 8B01      		movw r16,r22
 224:../../../os/hal/src/hal_buffers.c **** 
 225:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 226:../../../os/hal/src/hal_buffers.c **** 
 227:../../../os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 307               		.loc 1 227 0
 308 000c 00C0      		rjmp .L15
 309               	.LVL20:
 310               	.L17:
 311               	.LBB267:
 228:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 312               		.loc 1 228 0
 313 000e 8C81      		ldd r24,Y+4
 314 0010 8111      		cpse r24,__zero_reg__
 315 0012 00C0      		rjmp .L18
 316               	.LVL21:
 317               	.LBB268:
 318               	.LBB269:
 784:../../../os/hal/osal/rt/osal.h **** }
 319               		.loc 3 784 0
 320 0014 B801      		movw r22,r16
 321 0016 CE01      		movw r24,r28
 322 0018 0E94 0000 		call chThdEnqueueTimeoutS
 323               	.LVL22:
 324               	.LBE269:
 325               	.LBE268:
 229:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 230:../../../os/hal/src/hal_buffers.c ****     }
 231:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 232:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 326               		.loc 1 232 0
 327 001c 97FD      		sbrc r25,7
 328 001e 00C0      		rjmp .L16
 329               	.L15:
 330               	.LBE267:
 227:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 331               		.loc 1 227 0
 332 0020 8D81      		ldd r24,Y+5
 333 0022 9E81      		ldd r25,Y+6
 334 0024 892B      		or r24,r25
 335 0026 01F0      		breq .L17
 336               	.LVL23:
 337               	.LBB270:
 338               	.LBB271:
 233:../../../os/hal/src/hal_buffers.c ****        return msg;
 234:../../../os/hal/src/hal_buffers.c ****     }
 235:../../../os/hal/src/hal_buffers.c ****   }
 236:../../../os/hal/src/hal_buffers.c **** 
 237:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 238:../../../os/hal/src/hal_buffers.c **** 
 239:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 240:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 339               		.loc 1 240 0
 340 0028 E985      		ldd r30,Y+9
 341 002a FA85      		ldd r31,Y+10
 342 002c 9F01      		movw r18,r30
 343 002e 2E5F      		subi r18,-2
 344 0030 3F4F      		sbci r19,-1
 345 0032 3C8B      		std Y+20,r19
 346 0034 2B8B      		std Y+19,r18
 241:../../../os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 347               		.loc 1 241 0
 348 0036 8081      		ld r24,Z
 349 0038 9181      		ldd r25,Z+1
 350 003a 820F      		add r24,r18
 351 003c 931F      		adc r25,r19
 352 003e 9E8B      		std Y+22,r25
 353 0040 8D8B      		std Y+21,r24
 354               	.LVL24:
 355 0042 80E0      		ldi r24,0
 356 0044 90E0      		ldi r25,0
 357               	.L16:
 358               	/* epilogue start */
 359               	.LBE271:
 360               	.LBE270:
 242:../../../os/hal/src/hal_buffers.c **** 
 243:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 244:../../../os/hal/src/hal_buffers.c **** }
 361               		.loc 1 244 0
 362 0046 DF91      		pop r29
 363 0048 CF91      		pop r28
 364               	.LVL25:
 365 004a 1F91      		pop r17
 366 004c 0F91      		pop r16
 367               	.LVL26:
 368 004e 0895      		ret
 369               	.LVL27:
 370               	.L18:
 371               	.LBB272:
 229:../../../os/hal/src/hal_buffers.c ****     }
 372               		.loc 1 229 0
 373 0050 8EEF      		ldi r24,lo8(-2)
 374 0052 9FEF      		ldi r25,lo8(-1)
 375               	/* epilogue start */
 376               	.LBE272:
 377               		.loc 1 244 0
 378 0054 DF91      		pop r29
 379 0056 CF91      		pop r28
 380               	.LVL28:
 381 0058 1F91      		pop r17
 382 005a 0F91      		pop r16
 383               	.LVL29:
 384 005c 0895      		ret
 385               		.cfi_endproc
 386               	.LFE148:
 388               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 389               	.global	ibqGetFullBufferTimeout
 391               	ibqGetFullBufferTimeout:
 392               	.LFB147:
 191:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 393               		.loc 1 191 0
 394               		.cfi_startproc
 395               	.LVL30:
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 0 */
 399               	.L__stack_usage = 0
 400               	.LBB273:
 401               	.LBB274:
 402               	.LBB275:
 403               	.LBB276:
 404               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 405               		.loc 4 437 0
 406               	/* #APP */
 407               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 408 0000 F894      		cli
 409               	 ;  0 "" 2
 410               	/* #NOAPP */
 411               	.LBE276:
 412               	.LBE275:
 413               	.LBE274:
 414               	.LBE273:
 195:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 415               		.loc 1 195 0
 416 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 417               	.LVL31:
 418               	.LBB277:
 419               	.LBB278:
 420               	.LBB279:
 421               	.LBB280:
 422               	.LBB281:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 423               		.loc 4 447 0
 424               	/* #APP */
 425               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 426 0006 7894      		sei
 427               	 ;  0 "" 2
 428               	/* #NOAPP */
 429               	.LBE281:
 430               	.LBE280:
 431               	.LBE279:
 432               	.LBE278:
 433               	.LBE277:
 199:../../../os/hal/src/hal_buffers.c **** 
 434               		.loc 1 199 0
 435 0008 0895      		ret
 436               		.cfi_endproc
 437               	.LFE147:
 439               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 440               	.global	ibqReleaseEmptyBuffer
 442               	ibqReleaseEmptyBuffer:
 443               	.LFB149:
 245:../../../os/hal/src/hal_buffers.c **** 
 246:../../../os/hal/src/hal_buffers.c **** /**
 247:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 248:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 249:../../../os/hal/src/hal_buffers.c ****  *
 250:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 251:../../../os/hal/src/hal_buffers.c ****  *
 252:../../../os/hal/src/hal_buffers.c ****  * @api
 253:../../../os/hal/src/hal_buffers.c ****  */
 254:../../../os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 444               		.loc 1 254 0
 445               		.cfi_startproc
 446               	.LVL32:
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
 451 0000 DC01      		movw r26,r24
 452               	.LBB282:
 453               	.LBB283:
 454               	.LBB284:
 455               	.LBB285:
 437:../../../os/common/ports/AVR/chcore.h **** }
 456               		.loc 4 437 0
 457               	/* #APP */
 458               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 459 0002 F894      		cli
 460               	 ;  0 "" 2
 461               	.LVL33:
 462               	/* #NOAPP */
 463               	.LBE285:
 464               	.LBE284:
 465               	.LBE283:
 466               	.LBE282:
 467               	.LBB286:
 468               	.LBB287:
 255:../../../os/hal/src/hal_buffers.c **** 
 256:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 257:../../../os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 258:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 259:../../../os/hal/src/hal_buffers.c **** }
 260:../../../os/hal/src/hal_buffers.c **** 
 261:../../../os/hal/src/hal_buffers.c ****   /**
 262:../../../os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 263:../../../os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 264:../../../os/hal/src/hal_buffers.c ****    *
 265:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 266:../../../os/hal/src/hal_buffers.c ****    *
 267:../../../os/hal/src/hal_buffers.c ****    * @sclass
 268:../../../os/hal/src/hal_buffers.c ****    */
 269:../../../os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 270:../../../os/hal/src/hal_buffers.c **** 
 271:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 272:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 273:../../../os/hal/src/hal_buffers.c **** 
 274:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 469               		.loc 1 275 0
 470 0004 1596      		adiw r26,5
 471 0006 8D91      		ld r24,X+
 472 0008 9C91      		ld r25,X
 473 000a 1697      		sbiw r26,5+1
 474               	.LVL34:
 475 000c 0197      		sbiw r24,1
 476 000e 1696      		adiw r26,5+1
 477 0010 9C93      		st X,r25
 478 0012 8E93      		st -X,r24
 479 0014 1597      		sbiw r26,5
 276:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 480               		.loc 1 276 0
 481 0016 1996      		adiw r26,9
 482 0018 2D91      		ld r18,X+
 483 001a 3C91      		ld r19,X
 484 001c 1A97      		sbiw r26,9+1
 485 001e 1D96      		adiw r26,13
 486 0020 8D91      		ld r24,X+
 487 0022 9C91      		ld r25,X
 488 0024 1E97      		sbiw r26,13+1
 489 0026 820F      		add r24,r18
 490 0028 931F      		adc r25,r19
 491 002a 1A96      		adiw r26,9+1
 492 002c 9C93      		st X,r25
 493 002e 8E93      		st -X,r24
 494 0030 1997      		sbiw r26,9
 277:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 495               		.loc 1 277 0
 496 0032 1B96      		adiw r26,11
 497 0034 2D91      		ld r18,X+
 498 0036 3C91      		ld r19,X
 499 0038 1C97      		sbiw r26,11+1
 500 003a 8217      		cp r24,r18
 501 003c 9307      		cpc r25,r19
 502 003e 00F0      		brlo .L21
 278:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 503               		.loc 1 278 0
 504 0040 5196      		adiw r26,17
 505 0042 8D91      		ld r24,X+
 506 0044 9C91      		ld r25,X
 507 0046 5297      		sbiw r26,17+1
 508 0048 1A96      		adiw r26,9+1
 509 004a 9C93      		st X,r25
 510 004c 8E93      		st -X,r24
 511 004e 1997      		sbiw r26,9
 512               	.L21:
 279:../../../os/hal/src/hal_buffers.c ****   }
 280:../../../os/hal/src/hal_buffers.c **** 
 281:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 282:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 513               		.loc 1 282 0
 514 0050 5496      		adiw r26,19+1
 515 0052 1C92      		st X,__zero_reg__
 516 0054 1E92      		st -X,__zero_reg__
 517 0056 5397      		sbiw r26,19
 283:../../../os/hal/src/hal_buffers.c **** 
 284:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 285:../../../os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 518               		.loc 1 285 0
 519 0058 5796      		adiw r26,23
 520 005a ED91      		ld r30,X+
 521 005c FC91      		ld r31,X
 522 005e 5897      		sbiw r26,23+1
 523 0060 3097      		sbiw r30,0
 524 0062 01F0      		breq .L22
 525 0064 CD01      		movw r24,r26
 286:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 526               		.loc 1 286 0
 527 0066 1995      		eicall
 528               	.LVL35:
 529               	.L22:
 530               	.LBE287:
 531               	.LBE286:
 532               	.LBB288:
 533               	.LBB289:
 534               	.LBB290:
 535               	.LBB291:
 536               	.LBB292:
 537               		.loc 4 447 0
 538               	/* #APP */
 539               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 540 0068 7894      		sei
 541               	 ;  0 "" 2
 542               	/* #NOAPP */
 543 006a 0895      		ret
 544               	.LBE292:
 545               	.LBE291:
 546               	.LBE290:
 547               	.LBE289:
 548               	.LBE288:
 549               		.cfi_endproc
 550               	.LFE149:
 552               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 553               	.global	ibqReleaseEmptyBufferS
 555               	ibqReleaseEmptyBufferS:
 556               	.LFB150:
 269:../../../os/hal/src/hal_buffers.c **** 
 557               		.loc 1 269 0
 558               		.cfi_startproc
 559               	.LVL36:
 560               	/* prologue: function */
 561               	/* frame size = 0 */
 562               	/* stack size = 0 */
 563               	.L__stack_usage = 0
 564 0000 DC01      		movw r26,r24
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 565               		.loc 1 275 0
 566 0002 1596      		adiw r26,5
 567 0004 8D91      		ld r24,X+
 568 0006 9C91      		ld r25,X
 569 0008 1697      		sbiw r26,5+1
 570               	.LVL37:
 571 000a 0197      		sbiw r24,1
 572 000c 1696      		adiw r26,5+1
 573 000e 9C93      		st X,r25
 574 0010 8E93      		st -X,r24
 575 0012 1597      		sbiw r26,5
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 576               		.loc 1 276 0
 577 0014 1996      		adiw r26,9
 578 0016 2D91      		ld r18,X+
 579 0018 3C91      		ld r19,X
 580 001a 1A97      		sbiw r26,9+1
 581 001c 1D96      		adiw r26,13
 582 001e 8D91      		ld r24,X+
 583 0020 9C91      		ld r25,X
 584 0022 1E97      		sbiw r26,13+1
 585 0024 820F      		add r24,r18
 586 0026 931F      		adc r25,r19
 587 0028 1A96      		adiw r26,9+1
 588 002a 9C93      		st X,r25
 589 002c 8E93      		st -X,r24
 590 002e 1997      		sbiw r26,9
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 591               		.loc 1 277 0
 592 0030 1B96      		adiw r26,11
 593 0032 2D91      		ld r18,X+
 594 0034 3C91      		ld r19,X
 595 0036 1C97      		sbiw r26,11+1
 596 0038 8217      		cp r24,r18
 597 003a 9307      		cpc r25,r19
 598 003c 00F0      		brlo .L27
 278:../../../os/hal/src/hal_buffers.c ****   }
 599               		.loc 1 278 0
 600 003e 5196      		adiw r26,17
 601 0040 8D91      		ld r24,X+
 602 0042 9C91      		ld r25,X
 603 0044 5297      		sbiw r26,17+1
 604 0046 1A96      		adiw r26,9+1
 605 0048 9C93      		st X,r25
 606 004a 8E93      		st -X,r24
 607 004c 1997      		sbiw r26,9
 608               	.L27:
 282:../../../os/hal/src/hal_buffers.c **** 
 609               		.loc 1 282 0
 610 004e 5496      		adiw r26,19+1
 611 0050 1C92      		st X,__zero_reg__
 612 0052 1E92      		st -X,__zero_reg__
 613 0054 5397      		sbiw r26,19
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 614               		.loc 1 285 0
 615 0056 5796      		adiw r26,23
 616 0058 ED91      		ld r30,X+
 617 005a FC91      		ld r31,X
 618 005c 5897      		sbiw r26,23+1
 619 005e 3097      		sbiw r30,0
 620 0060 01F0      		breq .L26
 621               		.loc 1 286 0
 622 0062 CD01      		movw r24,r26
 623 0064 1994      		eijmp
 624               	.LVL38:
 625               	.L26:
 626 0066 0895      		ret
 627               		.cfi_endproc
 628               	.LFE150:
 630               		.section	.text.ibqGetTimeout,"ax",@progbits
 631               	.global	ibqGetTimeout
 633               	ibqGetTimeout:
 634               	.LFB151:
 287:../../../os/hal/src/hal_buffers.c ****   }
 288:../../../os/hal/src/hal_buffers.c **** }
 289:../../../os/hal/src/hal_buffers.c **** 
 290:../../../os/hal/src/hal_buffers.c **** /**
 291:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 292:../../../os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 293:../../../os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 294:../../../os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 295:../../../os/hal/src/hal_buffers.c ****  *
 296:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 297:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 298:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 299:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 300:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 301:../../../os/hal/src/hal_buffers.c ****  *                      .
 302:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 303:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 304:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 305:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 306:../../../os/hal/src/hal_buffers.c ****  *
 307:../../../os/hal/src/hal_buffers.c ****  * @api
 308:../../../os/hal/src/hal_buffers.c ****  */
 309:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 635               		.loc 1 309 0
 636               		.cfi_startproc
 637               	.LVL39:
 638 0000 0F93      		push r16
 639               	.LCFI10:
 640               		.cfi_def_cfa_offset 4
 641               		.cfi_offset 16, -3
 642 0002 1F93      		push r17
 643               	.LCFI11:
 644               		.cfi_def_cfa_offset 5
 645               		.cfi_offset 17, -4
 646 0004 CF93      		push r28
 647               	.LCFI12:
 648               		.cfi_def_cfa_offset 6
 649               		.cfi_offset 28, -5
 650 0006 DF93      		push r29
 651               	.LCFI13:
 652               		.cfi_def_cfa_offset 7
 653               		.cfi_offset 29, -6
 654               	/* prologue: function */
 655               	/* frame size = 0 */
 656               	/* stack size = 4 */
 657               	.L__stack_usage = 4
 658 0008 EC01      		movw r28,r24
 659               	.LBB293:
 660               	.LBB294:
 661               	.LBB295:
 662               	.LBB296:
 437:../../../os/common/ports/AVR/chcore.h **** }
 663               		.loc 4 437 0
 664               	/* #APP */
 665               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 666 000a F894      		cli
 667               	 ;  0 "" 2
 668               	/* #NOAPP */
 669               	.LBE296:
 670               	.LBE295:
 671               	.LBE294:
 672               	.LBE293:
 310:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 311:../../../os/hal/src/hal_buffers.c **** 
 312:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 313:../../../os/hal/src/hal_buffers.c **** 
 314:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 315:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 673               		.loc 1 315 0
 674 000c EB89      		ldd r30,Y+19
 675 000e FC89      		ldd r31,Y+20
 676 0010 3097      		sbiw r30,0
 677 0012 01F0      		breq .L40
 678               	.LVL40:
 679               	.L30:
 316:../../../os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 317:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 318:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 319:../../../os/hal/src/hal_buffers.c ****       return msg;
 320:../../../os/hal/src/hal_buffers.c ****     }
 321:../../../os/hal/src/hal_buffers.c ****   }
 322:../../../os/hal/src/hal_buffers.c **** 
 323:../../../os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 324:../../../os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 680               		.loc 1 324 0
 681 0014 0191      		ld r16,Z+
 682 0016 10E0      		ldi r17,0
 683               	.LVL41:
 325:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 684               		.loc 1 325 0
 685 0018 FC8B      		std Y+20,r31
 686 001a EB8B      		std Y+19,r30
 326:../../../os/hal/src/hal_buffers.c **** 
 327:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 328:../../../os/hal/src/hal_buffers.c ****      empty in the queue.*/
 329:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 687               		.loc 1 329 0
 688 001c 8D89      		ldd r24,Y+21
 689 001e 9E89      		ldd r25,Y+22
 690 0020 E817      		cp r30,r24
 691 0022 F907      		cpc r31,r25
 692 0024 00F0      		brlo .L34
 693               	.LVL42:
 694               	.LBB297:
 695               	.LBB298:
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 696               		.loc 1 275 0
 697 0026 8D81      		ldd r24,Y+5
 698 0028 9E81      		ldd r25,Y+6
 699 002a 0197      		sbiw r24,1
 700 002c 9E83      		std Y+6,r25
 701 002e 8D83      		std Y+5,r24
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 702               		.loc 1 276 0
 703 0030 2985      		ldd r18,Y+9
 704 0032 3A85      		ldd r19,Y+10
 705 0034 8D85      		ldd r24,Y+13
 706 0036 9E85      		ldd r25,Y+14
 707 0038 820F      		add r24,r18
 708 003a 931F      		adc r25,r19
 709 003c 9A87      		std Y+10,r25
 710 003e 8987      		std Y+9,r24
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 711               		.loc 1 277 0
 712 0040 2B85      		ldd r18,Y+11
 713 0042 3C85      		ldd r19,Y+12
 714 0044 8217      		cp r24,r18
 715 0046 9307      		cpc r25,r19
 716 0048 00F0      		brlo .L35
 278:../../../os/hal/src/hal_buffers.c ****   }
 717               		.loc 1 278 0
 718 004a 8989      		ldd r24,Y+17
 719 004c 9A89      		ldd r25,Y+18
 720 004e 9A87      		std Y+10,r25
 721 0050 8987      		std Y+9,r24
 722               	.L35:
 282:../../../os/hal/src/hal_buffers.c **** 
 723               		.loc 1 282 0
 724 0052 1C8A      		std Y+20,__zero_reg__
 725 0054 1B8A      		std Y+19,__zero_reg__
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 726               		.loc 1 285 0
 727 0056 EF89      		ldd r30,Y+23
 728 0058 F88D      		ldd r31,Y+24
 729 005a 3097      		sbiw r30,0
 730 005c 01F0      		breq .L34
 286:../../../os/hal/src/hal_buffers.c ****   }
 731               		.loc 1 286 0
 732 005e CE01      		movw r24,r28
 733 0060 1995      		eicall
 734               	.LVL43:
 735               	.L34:
 736               	.LBE298:
 737               	.LBE297:
 738               	.LBB299:
 739               	.LBB300:
 740               	.LBB301:
 741               	.LBB302:
 742               	.LBB303:
 743               		.loc 4 447 0
 744               	/* #APP */
 745               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 746 0062 7894      		sei
 747               	 ;  0 "" 2
 748               	/* #NOAPP */
 749               	.LBE303:
 750               	.LBE302:
 751               	.LBE301:
 752               	.LBE300:
 753               	.LBE299:
 330:../../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 331:../../../os/hal/src/hal_buffers.c ****   }
 332:../../../os/hal/src/hal_buffers.c **** 
 333:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 334:../../../os/hal/src/hal_buffers.c ****   return msg;
 754               		.loc 1 334 0
 755 0064 C801      		movw r24,r16
 756               	.LVL44:
 757               	.L32:
 758               	/* epilogue start */
 335:../../../os/hal/src/hal_buffers.c **** }
 759               		.loc 1 335 0
 760 0066 DF91      		pop r29
 761 0068 CF91      		pop r28
 762               	.LVL45:
 763 006a 1F91      		pop r17
 764 006c 0F91      		pop r16
 765 006e 0895      		ret
 766               	.LVL46:
 767               	.L40:
 316:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 768               		.loc 1 316 0
 769 0070 0E94 0000 		call ibqGetFullBufferTimeoutS
 770               	.LVL47:
 317:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 771               		.loc 1 317 0
 772 0074 0097      		sbiw r24,0
 773 0076 01F4      		brne .L31
 774 0078 EB89      		ldd r30,Y+19
 775 007a FC89      		ldd r31,Y+20
 776 007c 00C0      		rjmp .L30
 777               	.L31:
 778               	.LBB304:
 779               	.LBB305:
 780               	.LBB306:
 781               	.LBB307:
 782               	.LBB308:
 783               		.loc 4 447 0
 784               	/* #APP */
 785               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 786 007e 7894      		sei
 787               	 ;  0 "" 2
 788               	/* #NOAPP */
 789               	.LBE308:
 790               	.LBE307:
 791               	.LBE306:
 792               	.LBE305:
 793               	.LBE304:
 319:../../../os/hal/src/hal_buffers.c ****     }
 794               		.loc 1 319 0
 795 0080 00C0      		rjmp .L32
 796               		.cfi_endproc
 797               	.LFE151:
 799               		.section	.text.ibqReadTimeout,"ax",@progbits
 800               	.global	ibqReadTimeout
 802               	ibqReadTimeout:
 803               	.LFB152:
 336:../../../os/hal/src/hal_buffers.c **** 
 337:../../../os/hal/src/hal_buffers.c **** /**
 338:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 339:../../../os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 340:../../../os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 341:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 342:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 343:../../../os/hal/src/hal_buffers.c ****  *
 344:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 345:../../../os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 346:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 347:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 348:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 349:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 350:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 351:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 352:../../../os/hal/src/hal_buffers.c ****  *                      .
 353:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 354:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 355:../../../os/hal/src/hal_buffers.c ****  *
 356:../../../os/hal/src/hal_buffers.c ****  * @api
 357:../../../os/hal/src/hal_buffers.c ****  */
 358:../../../os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 359:../../../os/hal/src/hal_buffers.c ****                       size_t n, systime_t timeout) {
 804               		.loc 1 359 0
 805               		.cfi_startproc
 806               	.LVL48:
 807 0000 4F92      		push r4
 808               	.LCFI14:
 809               		.cfi_def_cfa_offset 4
 810               		.cfi_offset 4, -3
 811 0002 5F92      		push r5
 812               	.LCFI15:
 813               		.cfi_def_cfa_offset 5
 814               		.cfi_offset 5, -4
 815 0004 6F92      		push r6
 816               	.LCFI16:
 817               		.cfi_def_cfa_offset 6
 818               		.cfi_offset 6, -5
 819 0006 7F92      		push r7
 820               	.LCFI17:
 821               		.cfi_def_cfa_offset 7
 822               		.cfi_offset 7, -6
 823 0008 8F92      		push r8
 824               	.LCFI18:
 825               		.cfi_def_cfa_offset 8
 826               		.cfi_offset 8, -7
 827 000a 9F92      		push r9
 828               	.LCFI19:
 829               		.cfi_def_cfa_offset 9
 830               		.cfi_offset 9, -8
 831 000c AF92      		push r10
 832               	.LCFI20:
 833               		.cfi_def_cfa_offset 10
 834               		.cfi_offset 10, -9
 835 000e BF92      		push r11
 836               	.LCFI21:
 837               		.cfi_def_cfa_offset 11
 838               		.cfi_offset 11, -10
 839 0010 CF92      		push r12
 840               	.LCFI22:
 841               		.cfi_def_cfa_offset 12
 842               		.cfi_offset 12, -11
 843 0012 DF92      		push r13
 844               	.LCFI23:
 845               		.cfi_def_cfa_offset 13
 846               		.cfi_offset 13, -12
 847 0014 EF92      		push r14
 848               	.LCFI24:
 849               		.cfi_def_cfa_offset 14
 850               		.cfi_offset 14, -13
 851 0016 FF92      		push r15
 852               	.LCFI25:
 853               		.cfi_def_cfa_offset 15
 854               		.cfi_offset 15, -14
 855 0018 0F93      		push r16
 856               	.LCFI26:
 857               		.cfi_def_cfa_offset 16
 858               		.cfi_offset 16, -15
 859 001a 1F93      		push r17
 860               	.LCFI27:
 861               		.cfi_def_cfa_offset 17
 862               		.cfi_offset 17, -16
 863 001c CF93      		push r28
 864               	.LCFI28:
 865               		.cfi_def_cfa_offset 18
 866               		.cfi_offset 28, -17
 867 001e DF93      		push r29
 868               	.LCFI29:
 869               		.cfi_def_cfa_offset 19
 870               		.cfi_offset 29, -18
 871               	/* prologue: function */
 872               	/* frame size = 0 */
 873               	/* stack size = 16 */
 874               	.L__stack_usage = 16
 875 0020 EC01      		movw r28,r24
 876 0022 6B01      		movw r12,r22
 877 0024 5A01      		movw r10,r20
 878 0026 4901      		movw r8,r18
 879               	.LVL49:
 880               	.LBB309:
 881               	.LBB310:
 882               	.LBB311:
 883               	.LBB312:
 437:../../../os/common/ports/AVR/chcore.h **** }
 884               		.loc 4 437 0
 885               	/* #APP */
 886               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 887 0028 F894      		cli
 888               	 ;  0 "" 2
 889               	/* #NOAPP */
 890               	.LBE312:
 891               	.LBE311:
 892               	.LBE310:
 893               	.LBE309:
 894               	.LBB313:
 895               	.LBB314:
 896               	.LBB315:
 897               	.LBB316:
 898               	.LBB317:
 899               		.file 5 "../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @file    hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  34:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  38:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
  41:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * TODO: for models that have many timers,
  42:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *       could add AVR_ST_USE_TIMER
  43:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  44:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  45:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  46:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  47:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  48:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  49:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
  50:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * TODO: error checks for valid timer selected
  51:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  52:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  53:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  54:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
  55:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  56:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  57:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  58:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
  59:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  60:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  61:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  62:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
  63:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  64:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  65:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  66:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** extern "C" {
  67:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  68:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  69:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  70:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** }
  71:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  72:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  73:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  74:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  75:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  76:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #else
  77:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  78:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  79:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  80:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  81:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  82:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
  83:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  84:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  85:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /**
  86:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  87:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  88:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  89:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  90:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @notapi
  91:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  92:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
  93:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  94:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
 900               		.loc 5 94 0
 901 002a 4090 8400 		lds r4,132
 902 002e 5090 8500 		lds r5,132+1
 903               	.LBE317:
 904               	.LBE316:
 905               	.LBE315:
 906               	.LBE314:
 907               	.LBE313:
 360:../../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 361:../../../os/hal/src/hal_buffers.c ****   systime_t deadline;
 362:../../../os/hal/src/hal_buffers.c **** 
 363:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 364:../../../os/hal/src/hal_buffers.c **** 
 365:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 366:../../../os/hal/src/hal_buffers.c **** 
 367:../../../os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 368:../../../os/hal/src/hal_buffers.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 908               		.loc 1 368 0
 909 0032 420E      		add r4,r18
 910 0034 531E      		adc r5,r19
 911               	.LVL50:
 360:../../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 912               		.loc 1 360 0
 913 0036 E12C      		mov r14,__zero_reg__
 914 0038 F12C      		mov r15,__zero_reg__
 915               	.LBB318:
 916               	.LBB319:
 369:../../../os/hal/src/hal_buffers.c **** 
 370:../../../os/hal/src/hal_buffers.c ****   while (true) {
 371:../../../os/hal/src/hal_buffers.c ****     size_t size;
 372:../../../os/hal/src/hal_buffers.c **** 
 373:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 374:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 375:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 376:../../../os/hal/src/hal_buffers.c **** 
 377:../../../os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 378:../../../os/hal/src/hal_buffers.c ****          deadline.*/
 379:../../../os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 917               		.loc 1 379 0
 918 003a 3901      		movw r6,r18
 919 003c 21E0      		ldi r18,1
 920 003e 621A      		sub r6,r18
 921 0040 7108      		sbc r7,__zero_reg__
 922               	.LVL51:
 923 0042 00C0      		rjmp .L55
 924               	.LVL52:
 925               	.L60:
 926               	.LBE319:
 380:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 381:../../../os/hal/src/hal_buffers.c ****       }
 382:../../../os/hal/src/hal_buffers.c ****       else {
 383:../../../os/hal/src/hal_buffers.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 384:../../../os/hal/src/hal_buffers.c **** 
 385:../../../os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 386:../../../os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 387:../../../os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 388:../../../os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 389:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 390:../../../os/hal/src/hal_buffers.c ****           return r;
 391:../../../os/hal/src/hal_buffers.c ****         }
 392:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 393:../../../os/hal/src/hal_buffers.c ****       }
 394:../../../os/hal/src/hal_buffers.c **** 
 395:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 396:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 397:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 398:../../../os/hal/src/hal_buffers.c ****         return r;
 399:../../../os/hal/src/hal_buffers.c ****       }
 400:../../../os/hal/src/hal_buffers.c ****     }
 401:../../../os/hal/src/hal_buffers.c **** 
 402:../../../os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 403:../../../os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 404:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 405:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 406:../../../os/hal/src/hal_buffers.c ****     }
 407:../../../os/hal/src/hal_buffers.c **** 
 408:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 409:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 410:../../../os/hal/src/hal_buffers.c ****     if (size > 64U) {
 411:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 412:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, 64U);
 927               		.loc 1 412 0
 928 0044 80E4      		ldi r24,lo8(64)
 929 0046 FB01      		movw r30,r22
 930 0048 D601      		movw r26,r12
 931               		0:
 932 004a 0190      		ld r0,Z+
 933 004c 0D92      		st X+,r0
 934 004e 8A95      		dec r24
 935 0050 01F4      		brne 0b
 413:../../../os/hal/src/hal_buffers.c ****       bp        += 64U;
 936               		.loc 1 413 0
 937 0052 20E4      		ldi r18,64
 938 0054 C20E      		add r12,r18
 939 0056 D11C      		adc r13,__zero_reg__
 940               	.LVL53:
 414:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += 64U;
 941               		.loc 1 414 0
 942 0058 8B89      		ldd r24,Y+19
 943 005a 9C89      		ldd r25,Y+20
 944 005c 805C      		subi r24,-64
 945 005e 9F4F      		sbci r25,-1
 946 0060 9C8B      		std Y+20,r25
 947 0062 8B8B      		std Y+19,r24
 415:../../../os/hal/src/hal_buffers.c ****       r         += 64U;
 948               		.loc 1 415 0
 949 0064 20E4      		ldi r18,64
 950 0066 E20E      		add r14,r18
 951 0068 F11C      		adc r15,__zero_reg__
 952               	.LVL54:
 953               	.L50:
 416:../../../os/hal/src/hal_buffers.c ****     }
 417:../../../os/hal/src/hal_buffers.c ****     else {
 418:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 419:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 420:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 421:../../../os/hal/src/hal_buffers.c ****       r         += size;
 422:../../../os/hal/src/hal_buffers.c ****     }
 423:../../../os/hal/src/hal_buffers.c **** 
 424:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 425:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 954               		.loc 1 425 0
 955 006a 2D89      		ldd r18,Y+21
 956 006c 3E89      		ldd r19,Y+22
 957 006e 8217      		cp r24,r18
 958 0070 9307      		cpc r25,r19
 959 0072 00F0      		brlo .L52
 960               	.LVL55:
 961               	.LBB331:
 962               	.LBB332:
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 963               		.loc 1 275 0
 964 0074 8D81      		ldd r24,Y+5
 965 0076 9E81      		ldd r25,Y+6
 966 0078 0197      		sbiw r24,1
 967 007a 9E83      		std Y+6,r25
 968 007c 8D83      		std Y+5,r24
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 969               		.loc 1 276 0
 970 007e 2985      		ldd r18,Y+9
 971 0080 3A85      		ldd r19,Y+10
 972 0082 8D85      		ldd r24,Y+13
 973 0084 9E85      		ldd r25,Y+14
 974 0086 820F      		add r24,r18
 975 0088 931F      		adc r25,r19
 976 008a 9A87      		std Y+10,r25
 977 008c 8987      		std Y+9,r24
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 978               		.loc 1 277 0
 979 008e 2B85      		ldd r18,Y+11
 980 0090 3C85      		ldd r19,Y+12
 981 0092 8217      		cp r24,r18
 982 0094 9307      		cpc r25,r19
 983 0096 00F0      		brlo .L53
 278:../../../os/hal/src/hal_buffers.c ****   }
 984               		.loc 1 278 0
 985 0098 8989      		ldd r24,Y+17
 986 009a 9A89      		ldd r25,Y+18
 987 009c 9A87      		std Y+10,r25
 988 009e 8987      		std Y+9,r24
 989               	.L53:
 282:../../../os/hal/src/hal_buffers.c **** 
 990               		.loc 1 282 0
 991 00a0 1C8A      		std Y+20,__zero_reg__
 992 00a2 1B8A      		std Y+19,__zero_reg__
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 993               		.loc 1 285 0
 994 00a4 EF89      		ldd r30,Y+23
 995 00a6 F88D      		ldd r31,Y+24
 996 00a8 3097      		sbiw r30,0
 997 00aa 01F0      		breq .L52
 286:../../../os/hal/src/hal_buffers.c ****   }
 998               		.loc 1 286 0
 999 00ac CE01      		movw r24,r28
 1000 00ae 1995      		eicall
 1001               	.LVL56:
 1002               	.L52:
 1003               	.LBE332:
 1004               	.LBE331:
 1005               	.LBB333:
 1006               	.LBB334:
 1007               	.LBB335:
 1008               	.LBB336:
 1009               	.LBB337:
 1010               		.loc 4 447 0
 1011               	/* #APP */
 1012               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1013 00b0 7894      		sei
 1014               	 ;  0 "" 2
 1015               	/* #NOAPP */
 1016               	.LBE337:
 1017               	.LBE336:
 1018               	.LBE335:
 1019               	.LBE334:
 1020               	.LBE333:
 426:../../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 427:../../../os/hal/src/hal_buffers.c ****     }
 428:../../../os/hal/src/hal_buffers.c **** 
 429:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 430:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 431:../../../os/hal/src/hal_buffers.c ****     if (r >= n) {
 1021               		.loc 1 431 0
 1022 00b2 EA14      		cp r14,r10
 1023 00b4 FB04      		cpc r15,r11
 1024 00b6 00F0      		brlo .+2
 1025 00b8 00C0      		rjmp .L46
 1026               	.LBB338:
 1027               	.LBB339:
 1028               	.LBB340:
 1029               	.LBB341:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1030               		.loc 4 437 0
 1031               	/* #APP */
 1032               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1033 00ba F894      		cli
 1034               	 ;  0 "" 2
 1035               	.LVL57:
 1036               	/* #NOAPP */
 1037               	.L55:
 1038               	.LBE341:
 1039               	.LBE340:
 1040               	.LBE339:
 1041               	.LBE338:
 374:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 1042               		.loc 1 374 0
 1043 00bc 6B89      		ldd r22,Y+19
 1044 00be 7C89      		ldd r23,Y+20
 1045 00c0 6115      		cp r22,__zero_reg__
 1046 00c2 7105      		cpc r23,__zero_reg__
 1047 00c4 01F0      		breq .L59
 1048               	.L42:
 403:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 1049               		.loc 1 403 0
 1050 00c6 0D89      		ldd r16,Y+21
 1051 00c8 1E89      		ldd r17,Y+22
 1052               	.LVL58:
 404:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 1053               		.loc 1 404 0
 1054 00ca C501      		movw r24,r10
 1055 00cc 8E19      		sub r24,r14
 1056 00ce 9F09      		sbc r25,r15
 1057 00d0 061B      		sub r16,r22
 1058 00d2 170B      		sbc r17,r23
 1059               	.LVL59:
 1060 00d4 8017      		cp r24,r16
 1061 00d6 9107      		cpc r25,r17
 1062 00d8 00F4      		brsh .L48
 1063 00da 8C01      		movw r16,r24
 1064               	.LVL60:
 1065               	.L48:
 410:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 1066               		.loc 1 410 0
 1067 00dc 0134      		cpi r16,65
 1068 00de 1105      		cpc r17,__zero_reg__
 1069 00e0 00F0      		brlo .+2
 1070 00e2 00C0      		rjmp .L60
 418:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 1071               		.loc 1 418 0
 1072 00e4 A801      		movw r20,r16
 1073 00e6 C601      		movw r24,r12
 1074 00e8 0E94 0000 		call memcpy
 1075               	.LVL61:
 419:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 1076               		.loc 1 419 0
 1077 00ec C00E      		add r12,r16
 1078 00ee D11E      		adc r13,r17
 1079               	.LVL62:
 420:../../../os/hal/src/hal_buffers.c ****       r         += size;
 1080               		.loc 1 420 0
 1081 00f0 8B89      		ldd r24,Y+19
 1082 00f2 9C89      		ldd r25,Y+20
 1083 00f4 800F      		add r24,r16
 1084 00f6 911F      		adc r25,r17
 1085 00f8 9C8B      		std Y+20,r25
 1086 00fa 8B8B      		std Y+19,r24
 421:../../../os/hal/src/hal_buffers.c ****     }
 1087               		.loc 1 421 0
 1088 00fc E00E      		add r14,r16
 1089 00fe F11E      		adc r15,r17
 1090               	.LVL63:
 1091 0100 00C0      		rjmp .L50
 1092               	.LVL64:
 1093               	.L59:
 1094               	.LBB342:
 379:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 1095               		.loc 1 379 0
 1096 0102 8EEF      		ldi r24,-2
 1097 0104 6816      		cp r6,r24
 1098 0106 8FEF      		ldi r24,-1
 1099 0108 7806      		cpc r7,r24
 1100 010a 00F4      		brsh .L61
 1101               	.LBB320:
 1102               	.LBB321:
 1103               	.LBB322:
 1104               	.LBB323:
 1105               	.LBB324:
 1106               	.LBB325:
 1107               		.loc 5 94 0
 1108 010c 8091 8400 		lds r24,132
 1109 0110 9091 8500 		lds r25,132+1
 1110               	.LBE325:
 1111               	.LBE324:
 1112               	.LBE323:
 1113               	.LBE322:
 1114               	.LBE321:
 383:../../../os/hal/src/hal_buffers.c **** 
 1115               		.loc 1 383 0
 1116 0114 B201      		movw r22,r4
 1117 0116 681B      		sub r22,r24
 1118 0118 790B      		sbc r23,r25
 1119               	.LVL65:
 388:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 1120               		.loc 1 388 0
 1121 011a 8616      		cp r8,r22
 1122 011c 9706      		cpc r9,r23
 1123 011e 00F0      		brlo .L47
 392:../../../os/hal/src/hal_buffers.c ****       }
 1124               		.loc 1 392 0
 1125 0120 CE01      		movw r24,r28
 1126 0122 0E94 0000 		call ibqGetFullBufferTimeoutS
 1127               	.LVL66:
 1128               	.LBE320:
 396:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1129               		.loc 1 396 0
 1130 0126 892B      		or r24,r25
 1131 0128 01F4      		brne .L47
 1132               	.L62:
 1133 012a 6B89      		ldd r22,Y+19
 1134 012c 7C89      		ldd r23,Y+20
 1135 012e 00C0      		rjmp .L42
 1136               	.LVL67:
 1137               	.L61:
 380:../../../os/hal/src/hal_buffers.c ****       }
 1138               		.loc 1 380 0
 1139 0130 B401      		movw r22,r8
 1140 0132 CE01      		movw r24,r28
 1141 0134 0E94 0000 		call ibqGetFullBufferTimeoutS
 1142               	.LVL68:
 396:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1143               		.loc 1 396 0
 1144 0138 892B      		or r24,r25
 1145 013a 01F0      		breq .L62
 1146               	.LVL69:
 1147               	.L47:
 1148               	.LBB326:
 1149               	.LBB327:
 1150               	.LBB328:
 1151               	.LBB329:
 1152               	.LBB330:
 1153               		.loc 4 447 0
 1154               	/* #APP */
 1155               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1156 013c 7894      		sei
 1157               	 ;  0 "" 2
 1158               	/* #NOAPP */
 1159               	.L46:
 1160               	.LBE330:
 1161               	.LBE329:
 1162               	.LBE328:
 1163               	.LBE327:
 1164               	.LBE326:
 1165               	.LBE342:
 1166               	.LBE318:
 432:../../../os/hal/src/hal_buffers.c ****       return r;
 433:../../../os/hal/src/hal_buffers.c ****     }
 434:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 435:../../../os/hal/src/hal_buffers.c ****   }
 436:../../../os/hal/src/hal_buffers.c **** }
 1167               		.loc 1 436 0
 1168 013e C701      		movw r24,r14
 1169               	/* epilogue start */
 1170 0140 DF91      		pop r29
 1171 0142 CF91      		pop r28
 1172               	.LVL70:
 1173 0144 1F91      		pop r17
 1174 0146 0F91      		pop r16
 1175 0148 FF90      		pop r15
 1176 014a EF90      		pop r14
 1177               	.LVL71:
 1178 014c DF90      		pop r13
 1179 014e CF90      		pop r12
 1180               	.LVL72:
 1181 0150 BF90      		pop r11
 1182 0152 AF90      		pop r10
 1183               	.LVL73:
 1184 0154 9F90      		pop r9
 1185 0156 8F90      		pop r8
 1186               	.LVL74:
 1187 0158 7F90      		pop r7
 1188 015a 6F90      		pop r6
 1189               	.LVL75:
 1190 015c 5F90      		pop r5
 1191 015e 4F90      		pop r4
 1192               	.LVL76:
 1193 0160 0895      		ret
 1194               		.cfi_endproc
 1195               	.LFE152:
 1197               		.section	.text.obqObjectInit,"ax",@progbits
 1198               	.global	obqObjectInit
 1200               	obqObjectInit:
 1201               	.LFB153:
 437:../../../os/hal/src/hal_buffers.c **** 
 438:../../../os/hal/src/hal_buffers.c **** /**
 439:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 440:../../../os/hal/src/hal_buffers.c ****  *
 441:../../../os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 442:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 443:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 444:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 445:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 446:../../../os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 447:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 448:../../../os/hal/src/hal_buffers.c ****  *
 449:../../../os/hal/src/hal_buffers.c ****  * @init
 450:../../../os/hal/src/hal_buffers.c ****  */
 451:../../../os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 452:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 1202               		.loc 1 452 0
 1203               		.cfi_startproc
 1204               	.LVL77:
 1205 0000 CF92      		push r12
 1206               	.LCFI30:
 1207               		.cfi_def_cfa_offset 4
 1208               		.cfi_offset 12, -3
 1209 0002 DF92      		push r13
 1210               	.LCFI31:
 1211               		.cfi_def_cfa_offset 5
 1212               		.cfi_offset 13, -4
 1213 0004 EF92      		push r14
 1214               	.LCFI32:
 1215               		.cfi_def_cfa_offset 6
 1216               		.cfi_offset 14, -5
 1217 0006 FF92      		push r15
 1218               	.LCFI33:
 1219               		.cfi_def_cfa_offset 7
 1220               		.cfi_offset 15, -6
 1221 0008 0F93      		push r16
 1222               	.LCFI34:
 1223               		.cfi_def_cfa_offset 8
 1224               		.cfi_offset 16, -7
 1225 000a 1F93      		push r17
 1226               	.LCFI35:
 1227               		.cfi_def_cfa_offset 9
 1228               		.cfi_offset 17, -8
 1229               	/* prologue: function */
 1230               	/* frame size = 0 */
 1231               	/* stack size = 6 */
 1232               	.L__stack_usage = 6
 1233 000c FC01      		movw r30,r24
 1234               	.LVL78:
 1235               	.LBB343:
 1236               	.LBB344:
 1237               	.LBB345:
 1238               	.LBB346:
 550:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 1239               		.loc 2 550 0
 1240 000e 9183      		std Z+1,r25
 1241 0010 8083      		st Z,r24
 1242               		.loc 2 551 0
 1243 0012 9383      		std Z+3,r25
 1244 0014 8283      		std Z+2,r24
 1245               	.LVL79:
 1246               	.LBE346:
 1247               	.LBE345:
 1248               	.LBE344:
 1249               	.LBE343:
 453:../../../os/hal/src/hal_buffers.c **** 
 454:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 455:../../../os/hal/src/hal_buffers.c **** 
 456:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 457:../../../os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 1250               		.loc 1 457 0
 1251 0016 6483      		std Z+4,r22
 458:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 1252               		.loc 1 458 0
 1253 0018 1683      		std Z+6,r17
 1254 001a 0583      		std Z+5,r16
 459:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 1255               		.loc 1 459 0
 1256 001c 5287      		std Z+10,r21
 1257 001e 4187      		std Z+9,r20
 460:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 1258               		.loc 1 460 0
 1259 0020 5087      		std Z+8,r21
 1260 0022 4783      		std Z+7,r20
 461:../../../os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 1261               		.loc 1 461 0
 1262 0024 2E5F      		subi r18,-2
 1263 0026 3F4F      		sbci r19,-1
 1264               	.LVL80:
 1265 0028 029F      		mul r16,r18
 1266 002a C001      		movw r24,r0
 1267 002c 039F      		mul r16,r19
 1268 002e 900D      		add r25,r0
 1269 0030 129F      		mul r17,r18
 1270 0032 900D      		add r25,r0
 1271 0034 1124      		clr r1
 1272               	.LVL81:
 1273 0036 840F      		add r24,r20
 1274 0038 951F      		adc r25,r21
 1275 003a 9487      		std Z+12,r25
 1276 003c 8387      		std Z+11,r24
 462:../../../os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 1277               		.loc 1 462 0
 1278 003e 3687      		std Z+14,r19
 1279 0040 2587      		std Z+13,r18
 463:../../../os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 1280               		.loc 1 463 0
 1281 0042 108B      		std Z+16,r17
 1282 0044 0787      		std Z+15,r16
 464:../../../os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 1283               		.loc 1 464 0
 1284 0046 528B      		std Z+18,r21
 1285 0048 418B      		std Z+17,r20
 465:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1286               		.loc 1 465 0
 1287 004a 148A      		std Z+20,__zero_reg__
 1288 004c 138A      		std Z+19,__zero_reg__
 466:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1289               		.loc 1 466 0
 1290 004e 168A      		std Z+22,__zero_reg__
 1291 0050 158A      		std Z+21,__zero_reg__
 467:../../../os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 1292               		.loc 1 467 0
 1293 0052 F08E      		std Z+24,r15
 1294 0054 E78A      		std Z+23,r14
 468:../../../os/hal/src/hal_buffers.c ****   obqp->link      = link;
 1295               		.loc 1 468 0
 1296 0056 D28E      		std Z+26,r13
 1297 0058 C18E      		std Z+25,r12
 1298               	/* epilogue start */
 469:../../../os/hal/src/hal_buffers.c **** }
 1299               		.loc 1 469 0
 1300 005a 1F91      		pop r17
 1301 005c 0F91      		pop r16
 1302               	.LVL82:
 1303 005e FF90      		pop r15
 1304 0060 EF90      		pop r14
 1305               	.LVL83:
 1306 0062 DF90      		pop r13
 1307 0064 CF90      		pop r12
 1308               	.LVL84:
 1309 0066 0895      		ret
 1310               		.cfi_endproc
 1311               	.LFE153:
 1313               		.section	.text.obqResetI,"ax",@progbits
 1314               	.global	obqResetI
 1316               	obqResetI:
 1317               	.LFB154:
 470:../../../os/hal/src/hal_buffers.c **** 
 471:../../../os/hal/src/hal_buffers.c **** /**
 472:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 473:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 474:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 475:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 476:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 477:../../../os/hal/src/hal_buffers.c ****  *
 478:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 479:../../../os/hal/src/hal_buffers.c ****  *
 480:../../../os/hal/src/hal_buffers.c ****  * @iclass
 481:../../../os/hal/src/hal_buffers.c ****  */
 482:../../../os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1318               		.loc 1 482 0
 1319               		.cfi_startproc
 1320               	.LVL85:
 1321               	/* prologue: function */
 1322               	/* frame size = 0 */
 1323               	/* stack size = 0 */
 1324               	.L__stack_usage = 0
 1325 0000 FC01      		movw r30,r24
 483:../../../os/hal/src/hal_buffers.c **** 
 484:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 485:../../../os/hal/src/hal_buffers.c **** 
 486:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 1326               		.loc 1 486 0
 1327 0002 8785      		ldd r24,Z+15
 1328 0004 9089      		ldd r25,Z+16
 1329               	.LVL86:
 1330 0006 9683      		std Z+6,r25
 1331 0008 8583      		std Z+5,r24
 487:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 1332               		.loc 1 487 0
 1333 000a 8189      		ldd r24,Z+17
 1334 000c 9289      		ldd r25,Z+18
 1335 000e 9287      		std Z+10,r25
 1336 0010 8187      		std Z+9,r24
 488:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 1337               		.loc 1 488 0
 1338 0012 9087      		std Z+8,r25
 1339 0014 8783      		std Z+7,r24
 489:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1340               		.loc 1 489 0
 1341 0016 148A      		std Z+20,__zero_reg__
 1342 0018 138A      		std Z+19,__zero_reg__
 490:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1343               		.loc 1 490 0
 1344 001a 168A      		std Z+22,__zero_reg__
 1345 001c 158A      		std Z+21,__zero_reg__
 1346               	.LVL87:
 1347               	.LBB347:
 1348               	.LBB348:
 1349               		.loc 3 810 0
 1350 001e 6EEF      		ldi r22,lo8(-2)
 1351 0020 7FEF      		ldi r23,lo8(-1)
 1352 0022 CF01      		movw r24,r30
 1353 0024 0C94 0000 		jmp chThdDequeueAllI
 1354               	.LVL88:
 1355               	.LBE348:
 1356               	.LBE347:
 1357               		.cfi_endproc
 1358               	.LFE154:
 1360               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1361               	.global	obqGetFullBufferI
 1363               	obqGetFullBufferI:
 1364               	.LFB155:
 491:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 492:../../../os/hal/src/hal_buffers.c **** }
 493:../../../os/hal/src/hal_buffers.c **** 
 494:../../../os/hal/src/hal_buffers.c **** /**
 495:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 496:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 497:../../../os/hal/src/hal_buffers.c ****  *
 498:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 499:../../../os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 500:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 501:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 502:../../../os/hal/src/hal_buffers.c ****  *
 503:../../../os/hal/src/hal_buffers.c ****  * @iclass
 504:../../../os/hal/src/hal_buffers.c ****  */
 505:../../../os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 506:../../../os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1365               		.loc 1 506 0
 1366               		.cfi_startproc
 1367               	.LVL89:
 1368               	/* prologue: function */
 1369               	/* frame size = 0 */
 1370               	/* stack size = 0 */
 1371               	.L__stack_usage = 0
 1372 0000 FC01      		movw r30,r24
 507:../../../os/hal/src/hal_buffers.c **** 
 508:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 509:../../../os/hal/src/hal_buffers.c **** 
 510:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1373               		.loc 1 510 0
 1374 0002 2185      		ldd r18,Z+9
 1375 0004 3285      		ldd r19,Z+10
 1376 0006 8781      		ldd r24,Z+7
 1377 0008 9085      		ldd r25,Z+8
 1378               	.LVL90:
 1379 000a 8217      		cp r24,r18
 1380 000c 9307      		cpc r25,r19
 1381 000e 01F0      		breq .L72
 1382               	.L66:
 511:../../../os/hal/src/hal_buffers.c ****     return NULL;
 512:../../../os/hal/src/hal_buffers.c ****   }
 513:../../../os/hal/src/hal_buffers.c **** 
 514:../../../os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 515:../../../os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)obqp->brdptr);
 1383               		.loc 1 515 0
 1384 0010 F901      		movw r30,r18
 1385               	.LVL91:
 1386 0012 2191      		ld r18,Z+
 1387 0014 3191      		ld r19,Z+
 1388 0016 CF01      		movw r24,r30
 1389 0018 FB01      		movw r30,r22
 1390 001a 3183      		std Z+1,r19
 1391 001c 2083      		st Z,r18
 516:../../../os/hal/src/hal_buffers.c **** 
 517:../../../os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 518:../../../os/hal/src/hal_buffers.c **** }
 1392               		.loc 1 518 0
 1393 001e 0895      		ret
 1394               	.LVL92:
 1395               	.L72:
 510:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1396               		.loc 1 510 0 discriminator 1
 1397 0020 8581      		ldd r24,Z+5
 1398 0022 9681      		ldd r25,Z+6
 1399 0024 892B      		or r24,r25
 1400 0026 01F0      		breq .L66
 511:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1401               		.loc 1 511 0
 1402 0028 80E0      		ldi r24,0
 1403 002a 90E0      		ldi r25,0
 1404 002c 0895      		ret
 1405               		.cfi_endproc
 1406               	.LFE155:
 1408               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1409               	.global	obqReleaseEmptyBufferI
 1411               	obqReleaseEmptyBufferI:
 1412               	.LFB156:
 519:../../../os/hal/src/hal_buffers.c **** 
 520:../../../os/hal/src/hal_buffers.c **** /**
 521:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 522:../../../os/hal/src/hal_buffers.c ****  *
 523:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 524:../../../os/hal/src/hal_buffers.c ****  *
 525:../../../os/hal/src/hal_buffers.c ****  * @iclass
 526:../../../os/hal/src/hal_buffers.c ****  */
 527:../../../os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1413               		.loc 1 527 0
 1414               		.cfi_startproc
 1415               	.LVL93:
 1416               	/* prologue: function */
 1417               	/* frame size = 0 */
 1418               	/* stack size = 0 */
 1419               	.L__stack_usage = 0
 1420 0000 FC01      		movw r30,r24
 528:../../../os/hal/src/hal_buffers.c **** 
 529:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 530:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 531:../../../os/hal/src/hal_buffers.c **** 
 532:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 533:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1421               		.loc 1 533 0
 1422 0002 8581      		ldd r24,Z+5
 1423 0004 9681      		ldd r25,Z+6
 1424               	.LVL94:
 1425 0006 0196      		adiw r24,1
 1426 0008 9683      		std Z+6,r25
 1427 000a 8583      		std Z+5,r24
 534:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1428               		.loc 1 534 0
 1429 000c 2185      		ldd r18,Z+9
 1430 000e 3285      		ldd r19,Z+10
 1431 0010 8585      		ldd r24,Z+13
 1432 0012 9685      		ldd r25,Z+14
 1433 0014 820F      		add r24,r18
 1434 0016 931F      		adc r25,r19
 1435 0018 9287      		std Z+10,r25
 1436 001a 8187      		std Z+9,r24
 535:../../../os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1437               		.loc 1 535 0
 1438 001c 2385      		ldd r18,Z+11
 1439 001e 3485      		ldd r19,Z+12
 1440 0020 8217      		cp r24,r18
 1441 0022 9307      		cpc r25,r19
 1442 0024 00F0      		brlo .L74
 536:../../../os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1443               		.loc 1 536 0
 1444 0026 8189      		ldd r24,Z+17
 1445 0028 9289      		ldd r25,Z+18
 1446 002a 9287      		std Z+10,r25
 1447 002c 8187      		std Z+9,r24
 1448               	.L74:
 1449               	.LVL95:
 1450               	.LBB349:
 1451               	.LBB350:
 797:../../../os/hal/osal/rt/osal.h **** }
 1452               		.loc 3 797 0
 1453 002e 60E0      		ldi r22,0
 1454 0030 70E0      		ldi r23,0
 1455 0032 CF01      		movw r24,r30
 1456 0034 0C94 0000 		jmp chThdDequeueNextI
 1457               	.LVL96:
 1458               	.LBE350:
 1459               	.LBE349:
 1460               		.cfi_endproc
 1461               	.LFE156:
 1463               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1464               	.global	obqGetEmptyBufferTimeoutS
 1466               	obqGetEmptyBufferTimeoutS:
 1467               	.LFB158:
 537:../../../os/hal/src/hal_buffers.c ****   }
 538:../../../os/hal/src/hal_buffers.c **** 
 539:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 540:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 541:../../../os/hal/src/hal_buffers.c **** }
 542:../../../os/hal/src/hal_buffers.c **** 
 543:../../../os/hal/src/hal_buffers.c **** /**
 544:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 545:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 546:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 547:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 548:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 549:../../../os/hal/src/hal_buffers.c ****  *
 550:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 551:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 552:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 553:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 554:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 555:../../../os/hal/src/hal_buffers.c ****  *                      .
 556:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 557:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 558:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 559:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 560:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 561:../../../os/hal/src/hal_buffers.c ****  *
 562:../../../os/hal/src/hal_buffers.c ****  * @api
 563:../../../os/hal/src/hal_buffers.c ****  */
 564:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 565:../../../os/hal/src/hal_buffers.c ****                                 systime_t timeout) {
 566:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 567:../../../os/hal/src/hal_buffers.c **** 
 568:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 569:../../../os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 570:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 571:../../../os/hal/src/hal_buffers.c **** 
 572:../../../os/hal/src/hal_buffers.c ****   return msg;
 573:../../../os/hal/src/hal_buffers.c **** }
 574:../../../os/hal/src/hal_buffers.c **** 
 575:../../../os/hal/src/hal_buffers.c **** /**
 576:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 577:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 578:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 579:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 580:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 581:../../../os/hal/src/hal_buffers.c ****  *
 582:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 583:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 584:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 585:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 586:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 587:../../../os/hal/src/hal_buffers.c ****  *                      .
 588:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 589:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 590:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 591:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 592:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 593:../../../os/hal/src/hal_buffers.c ****  *
 594:../../../os/hal/src/hal_buffers.c ****  * @sclass
 595:../../../os/hal/src/hal_buffers.c ****  */
 596:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 597:../../../os/hal/src/hal_buffers.c ****                                 systime_t timeout) {
 1468               		.loc 1 597 0
 1469               		.cfi_startproc
 1470               	.LVL97:
 1471 0000 0F93      		push r16
 1472               	.LCFI36:
 1473               		.cfi_def_cfa_offset 4
 1474               		.cfi_offset 16, -3
 1475 0002 1F93      		push r17
 1476               	.LCFI37:
 1477               		.cfi_def_cfa_offset 5
 1478               		.cfi_offset 17, -4
 1479 0004 CF93      		push r28
 1480               	.LCFI38:
 1481               		.cfi_def_cfa_offset 6
 1482               		.cfi_offset 28, -5
 1483 0006 DF93      		push r29
 1484               	.LCFI39:
 1485               		.cfi_def_cfa_offset 7
 1486               		.cfi_offset 29, -6
 1487               	/* prologue: function */
 1488               	/* frame size = 0 */
 1489               	/* stack size = 4 */
 1490               	.L__stack_usage = 4
 1491 0008 EC01      		movw r28,r24
 1492 000a 8B01      		movw r16,r22
 598:../../../os/hal/src/hal_buffers.c **** 
 599:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 600:../../../os/hal/src/hal_buffers.c **** 
 601:../../../os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1493               		.loc 1 601 0
 1494 000c 00C0      		rjmp .L76
 1495               	.LVL98:
 1496               	.L78:
 1497               	.LBB359:
 602:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1498               		.loc 1 602 0
 1499 000e 8C81      		ldd r24,Y+4
 1500 0010 8111      		cpse r24,__zero_reg__
 1501 0012 00C0      		rjmp .L79
 1502               	.LVL99:
 1503               	.LBB360:
 1504               	.LBB361:
 784:../../../os/hal/osal/rt/osal.h **** }
 1505               		.loc 3 784 0
 1506 0014 B801      		movw r22,r16
 1507 0016 CE01      		movw r24,r28
 1508 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1509               	.LVL100:
 1510               	.LBE361:
 1511               	.LBE360:
 603:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 604:../../../os/hal/src/hal_buffers.c ****     }
 605:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 606:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1512               		.loc 1 606 0
 1513 001c 97FD      		sbrc r25,7
 1514 001e 00C0      		rjmp .L77
 1515               	.L76:
 1516               	.LBE359:
 601:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1517               		.loc 1 601 0
 1518 0020 8D81      		ldd r24,Y+5
 1519 0022 9E81      		ldd r25,Y+6
 1520 0024 892B      		or r24,r25
 1521 0026 01F0      		breq .L78
 1522               	.LVL101:
 1523               	.LBB362:
 1524               	.LBB363:
 607:../../../os/hal/src/hal_buffers.c ****       return msg;
 608:../../../os/hal/src/hal_buffers.c ****     }
 609:../../../os/hal/src/hal_buffers.c ****   }
 610:../../../os/hal/src/hal_buffers.c **** 
 611:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 612:../../../os/hal/src/hal_buffers.c **** 
 613:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 614:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1525               		.loc 1 614 0
 1526 0028 2F81      		ldd r18,Y+7
 1527 002a 3885      		ldd r19,Y+8
 1528 002c C901      		movw r24,r18
 1529 002e 0296      		adiw r24,2
 1530 0030 9C8B      		std Y+20,r25
 1531 0032 8B8B      		std Y+19,r24
 615:../../../os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1532               		.loc 1 615 0
 1533 0034 8D85      		ldd r24,Y+13
 1534 0036 9E85      		ldd r25,Y+14
 1535 0038 820F      		add r24,r18
 1536 003a 931F      		adc r25,r19
 1537 003c 9E8B      		std Y+22,r25
 1538 003e 8D8B      		std Y+21,r24
 1539               	.LVL102:
 1540 0040 80E0      		ldi r24,0
 1541 0042 90E0      		ldi r25,0
 1542               	.L77:
 1543               	/* epilogue start */
 1544               	.LBE363:
 1545               	.LBE362:
 616:../../../os/hal/src/hal_buffers.c **** 
 617:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 618:../../../os/hal/src/hal_buffers.c **** }
 1546               		.loc 1 618 0
 1547 0044 DF91      		pop r29
 1548 0046 CF91      		pop r28
 1549               	.LVL103:
 1550 0048 1F91      		pop r17
 1551 004a 0F91      		pop r16
 1552               	.LVL104:
 1553 004c 0895      		ret
 1554               	.LVL105:
 1555               	.L79:
 1556               	.LBB364:
 603:../../../os/hal/src/hal_buffers.c ****     }
 1557               		.loc 1 603 0
 1558 004e 8EEF      		ldi r24,lo8(-2)
 1559 0050 9FEF      		ldi r25,lo8(-1)
 1560               	/* epilogue start */
 1561               	.LBE364:
 1562               		.loc 1 618 0
 1563 0052 DF91      		pop r29
 1564 0054 CF91      		pop r28
 1565               	.LVL106:
 1566 0056 1F91      		pop r17
 1567 0058 0F91      		pop r16
 1568               	.LVL107:
 1569 005a 0895      		ret
 1570               		.cfi_endproc
 1571               	.LFE158:
 1573               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1574               	.global	obqGetEmptyBufferTimeout
 1576               	obqGetEmptyBufferTimeout:
 1577               	.LFB157:
 565:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 1578               		.loc 1 565 0
 1579               		.cfi_startproc
 1580               	.LVL108:
 1581               	/* prologue: function */
 1582               	/* frame size = 0 */
 1583               	/* stack size = 0 */
 1584               	.L__stack_usage = 0
 1585               	.LBB365:
 1586               	.LBB366:
 1587               	.LBB367:
 1588               	.LBB368:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1589               		.loc 4 437 0
 1590               	/* #APP */
 1591               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1592 0000 F894      		cli
 1593               	 ;  0 "" 2
 1594               	/* #NOAPP */
 1595               	.LBE368:
 1596               	.LBE367:
 1597               	.LBE366:
 1598               	.LBE365:
 569:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1599               		.loc 1 569 0
 1600 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1601               	.LVL109:
 1602               	.LBB369:
 1603               	.LBB370:
 1604               	.LBB371:
 1605               	.LBB372:
 1606               	.LBB373:
 1607               		.loc 4 447 0
 1608               	/* #APP */
 1609               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1610 0006 7894      		sei
 1611               	 ;  0 "" 2
 1612               	/* #NOAPP */
 1613               	.LBE373:
 1614               	.LBE372:
 1615               	.LBE371:
 1616               	.LBE370:
 1617               	.LBE369:
 573:../../../os/hal/src/hal_buffers.c **** 
 1618               		.loc 1 573 0
 1619 0008 0895      		ret
 1620               		.cfi_endproc
 1621               	.LFE157:
 1623               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1624               	.global	obqPostFullBuffer
 1626               	obqPostFullBuffer:
 1627               	.LFB159:
 619:../../../os/hal/src/hal_buffers.c **** 
 620:../../../os/hal/src/hal_buffers.c **** /**
 621:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 622:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 623:../../../os/hal/src/hal_buffers.c ****  *
 624:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 625:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 626:../../../os/hal/src/hal_buffers.c ****  *
 627:../../../os/hal/src/hal_buffers.c ****  * @api
 628:../../../os/hal/src/hal_buffers.c ****  */
 629:../../../os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 1628               		.loc 1 629 0
 1629               		.cfi_startproc
 1630               	.LVL110:
 1631               	/* prologue: function */
 1632               	/* frame size = 0 */
 1633               	/* stack size = 0 */
 1634               	.L__stack_usage = 0
 1635 0000 DC01      		movw r26,r24
 1636               	.LBB374:
 1637               	.LBB375:
 1638               	.LBB376:
 1639               	.LBB377:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1640               		.loc 4 437 0
 1641               	/* #APP */
 1642               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1643 0002 F894      		cli
 1644               	 ;  0 "" 2
 1645               	.LVL111:
 1646               	/* #NOAPP */
 1647               	.LBE377:
 1648               	.LBE376:
 1649               	.LBE375:
 1650               	.LBE374:
 1651               	.LBB378:
 1652               	.LBB379:
 630:../../../os/hal/src/hal_buffers.c **** 
 631:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 632:../../../os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 633:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 634:../../../os/hal/src/hal_buffers.c **** }
 635:../../../os/hal/src/hal_buffers.c **** 
 636:../../../os/hal/src/hal_buffers.c **** /**
 637:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 638:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 639:../../../os/hal/src/hal_buffers.c ****  *
 640:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 641:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 642:../../../os/hal/src/hal_buffers.c ****  *
 643:../../../os/hal/src/hal_buffers.c ****  * @sclass
 644:../../../os/hal/src/hal_buffers.c ****  */
 645:../../../os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 646:../../../os/hal/src/hal_buffers.c **** 
 647:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 648:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 649:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 650:../../../os/hal/src/hal_buffers.c **** 
 651:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 652:../../../os/hal/src/hal_buffers.c ****   *((size_t *)obqp->bwrptr) = size;
 1653               		.loc 1 652 0
 1654 0004 1796      		adiw r26,7
 1655 0006 ED91      		ld r30,X+
 1656 0008 FC91      		ld r31,X
 1657 000a 1897      		sbiw r26,7+1
 1658 000c 7183      		std Z+1,r23
 1659 000e 6083      		st Z,r22
 653:../../../os/hal/src/hal_buffers.c **** 
 654:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 655:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1660               		.loc 1 655 0
 1661 0010 1596      		adiw r26,5
 1662 0012 2D91      		ld r18,X+
 1663 0014 3C91      		ld r19,X
 1664 0016 1697      		sbiw r26,5+1
 1665 0018 2150      		subi r18,1
 1666 001a 3109      		sbc r19,__zero_reg__
 1667 001c 1696      		adiw r26,5+1
 1668 001e 3C93      		st X,r19
 1669 0020 2E93      		st -X,r18
 1670 0022 1597      		sbiw r26,5
 656:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1671               		.loc 1 656 0
 1672 0024 1D96      		adiw r26,13
 1673 0026 8D91      		ld r24,X+
 1674 0028 9C91      		ld r25,X
 1675 002a 1E97      		sbiw r26,13+1
 1676               	.LVL112:
 1677 002c 8E0F      		add r24,r30
 1678 002e 9F1F      		adc r25,r31
 1679 0030 1896      		adiw r26,7+1
 1680 0032 9C93      		st X,r25
 1681 0034 8E93      		st -X,r24
 1682 0036 1797      		sbiw r26,7
 657:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1683               		.loc 1 657 0
 1684 0038 1B96      		adiw r26,11
 1685 003a 2D91      		ld r18,X+
 1686 003c 3C91      		ld r19,X
 1687 003e 1C97      		sbiw r26,11+1
 1688 0040 8217      		cp r24,r18
 1689 0042 9307      		cpc r25,r19
 1690 0044 00F0      		brlo .L82
 658:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1691               		.loc 1 658 0
 1692 0046 5196      		adiw r26,17
 1693 0048 8D91      		ld r24,X+
 1694 004a 9C91      		ld r25,X
 1695 004c 5297      		sbiw r26,17+1
 1696 004e 1896      		adiw r26,7+1
 1697 0050 9C93      		st X,r25
 1698 0052 8E93      		st -X,r24
 1699 0054 1797      		sbiw r26,7
 1700               	.L82:
 659:../../../os/hal/src/hal_buffers.c ****   }
 660:../../../os/hal/src/hal_buffers.c **** 
 661:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 662:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1701               		.loc 1 662 0
 1702 0056 5496      		adiw r26,19+1
 1703 0058 1C92      		st X,__zero_reg__
 1704 005a 1E92      		st -X,__zero_reg__
 1705 005c 5397      		sbiw r26,19
 663:../../../os/hal/src/hal_buffers.c **** 
 664:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 665:../../../os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1706               		.loc 1 665 0
 1707 005e 5796      		adiw r26,23
 1708 0060 ED91      		ld r30,X+
 1709 0062 FC91      		ld r31,X
 1710 0064 5897      		sbiw r26,23+1
 1711 0066 3097      		sbiw r30,0
 1712 0068 01F0      		breq .L83
 1713 006a CD01      		movw r24,r26
 666:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1714               		.loc 1 666 0
 1715 006c 1995      		eicall
 1716               	.LVL113:
 1717               	.L83:
 1718               	.LBE379:
 1719               	.LBE378:
 1720               	.LBB380:
 1721               	.LBB381:
 1722               	.LBB382:
 1723               	.LBB383:
 1724               	.LBB384:
 1725               		.loc 4 447 0
 1726               	/* #APP */
 1727               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1728 006e 7894      		sei
 1729               	 ;  0 "" 2
 1730               	/* #NOAPP */
 1731 0070 0895      		ret
 1732               	.LBE384:
 1733               	.LBE383:
 1734               	.LBE382:
 1735               	.LBE381:
 1736               	.LBE380:
 1737               		.cfi_endproc
 1738               	.LFE159:
 1740               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1741               	.global	obqPostFullBufferS
 1743               	obqPostFullBufferS:
 1744               	.LFB160:
 645:../../../os/hal/src/hal_buffers.c **** 
 1745               		.loc 1 645 0
 1746               		.cfi_startproc
 1747               	.LVL114:
 1748               	/* prologue: function */
 1749               	/* frame size = 0 */
 1750               	/* stack size = 0 */
 1751               	.L__stack_usage = 0
 1752 0000 DC01      		movw r26,r24
 652:../../../os/hal/src/hal_buffers.c **** 
 1753               		.loc 1 652 0
 1754 0002 1796      		adiw r26,7
 1755 0004 ED91      		ld r30,X+
 1756 0006 FC91      		ld r31,X
 1757 0008 1897      		sbiw r26,7+1
 1758 000a 7183      		std Z+1,r23
 1759 000c 6083      		st Z,r22
 655:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1760               		.loc 1 655 0
 1761 000e 1596      		adiw r26,5
 1762 0010 2D91      		ld r18,X+
 1763 0012 3C91      		ld r19,X
 1764 0014 1697      		sbiw r26,5+1
 1765 0016 2150      		subi r18,1
 1766 0018 3109      		sbc r19,__zero_reg__
 1767 001a 1696      		adiw r26,5+1
 1768 001c 3C93      		st X,r19
 1769 001e 2E93      		st -X,r18
 1770 0020 1597      		sbiw r26,5
 656:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1771               		.loc 1 656 0
 1772 0022 1D96      		adiw r26,13
 1773 0024 8D91      		ld r24,X+
 1774 0026 9C91      		ld r25,X
 1775 0028 1E97      		sbiw r26,13+1
 1776               	.LVL115:
 1777 002a 8E0F      		add r24,r30
 1778 002c 9F1F      		adc r25,r31
 1779 002e 1896      		adiw r26,7+1
 1780 0030 9C93      		st X,r25
 1781 0032 8E93      		st -X,r24
 1782 0034 1797      		sbiw r26,7
 657:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1783               		.loc 1 657 0
 1784 0036 1B96      		adiw r26,11
 1785 0038 2D91      		ld r18,X+
 1786 003a 3C91      		ld r19,X
 1787 003c 1C97      		sbiw r26,11+1
 1788 003e 8217      		cp r24,r18
 1789 0040 9307      		cpc r25,r19
 1790 0042 00F0      		brlo .L88
 658:../../../os/hal/src/hal_buffers.c ****   }
 1791               		.loc 1 658 0
 1792 0044 5196      		adiw r26,17
 1793 0046 8D91      		ld r24,X+
 1794 0048 9C91      		ld r25,X
 1795 004a 5297      		sbiw r26,17+1
 1796 004c 1896      		adiw r26,7+1
 1797 004e 9C93      		st X,r25
 1798 0050 8E93      		st -X,r24
 1799 0052 1797      		sbiw r26,7
 1800               	.L88:
 662:../../../os/hal/src/hal_buffers.c **** 
 1801               		.loc 1 662 0
 1802 0054 5496      		adiw r26,19+1
 1803 0056 1C92      		st X,__zero_reg__
 1804 0058 1E92      		st -X,__zero_reg__
 1805 005a 5397      		sbiw r26,19
 665:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1806               		.loc 1 665 0
 1807 005c 5796      		adiw r26,23
 1808 005e ED91      		ld r30,X+
 1809 0060 FC91      		ld r31,X
 1810 0062 5897      		sbiw r26,23+1
 1811 0064 3097      		sbiw r30,0
 1812 0066 01F0      		breq .L87
 1813               		.loc 1 666 0
 1814 0068 CD01      		movw r24,r26
 1815 006a 1994      		eijmp
 1816               	.LVL116:
 1817               	.L87:
 1818 006c 0895      		ret
 1819               		.cfi_endproc
 1820               	.LFE160:
 1822               		.section	.text.obqPutTimeout,"ax",@progbits
 1823               	.global	obqPutTimeout
 1825               	obqPutTimeout:
 1826               	.LFB161:
 667:../../../os/hal/src/hal_buffers.c ****   }
 668:../../../os/hal/src/hal_buffers.c **** }
 669:../../../os/hal/src/hal_buffers.c **** 
 670:../../../os/hal/src/hal_buffers.c **** /**
 671:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 672:../../../os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 673:../../../os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 674:../../../os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 675:../../../os/hal/src/hal_buffers.c ****  *
 676:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 677:../../../os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 678:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 679:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 680:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 681:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 682:../../../os/hal/src/hal_buffers.c ****  *                      .
 683:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 684:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 685:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 686:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 687:../../../os/hal/src/hal_buffers.c ****  *
 688:../../../os/hal/src/hal_buffers.c ****  * @api
 689:../../../os/hal/src/hal_buffers.c ****  */
 690:../../../os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 691:../../../os/hal/src/hal_buffers.c ****                     systime_t timeout) {
 1827               		.loc 1 691 0
 1828               		.cfi_startproc
 1829               	.LVL117:
 1830 0000 1F93      		push r17
 1831               	.LCFI40:
 1832               		.cfi_def_cfa_offset 4
 1833               		.cfi_offset 17, -3
 1834 0002 CF93      		push r28
 1835               	.LCFI41:
 1836               		.cfi_def_cfa_offset 5
 1837               		.cfi_offset 28, -4
 1838 0004 DF93      		push r29
 1839               	.LCFI42:
 1840               		.cfi_def_cfa_offset 6
 1841               		.cfi_offset 29, -5
 1842               	/* prologue: function */
 1843               	/* frame size = 0 */
 1844               	/* stack size = 3 */
 1845               	.L__stack_usage = 3
 1846 0006 EC01      		movw r28,r24
 1847 0008 162F      		mov r17,r22
 1848               	.LBB385:
 1849               	.LBB386:
 1850               	.LBB387:
 1851               	.LBB388:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1852               		.loc 4 437 0
 1853               	/* #APP */
 1854               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1855 000a F894      		cli
 1856               	 ;  0 "" 2
 1857               	/* #NOAPP */
 1858               	.LBE388:
 1859               	.LBE387:
 1860               	.LBE386:
 1861               	.LBE385:
 692:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 693:../../../os/hal/src/hal_buffers.c **** 
 694:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 695:../../../os/hal/src/hal_buffers.c **** 
 696:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 697:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1862               		.loc 1 697 0
 1863 000c EB89      		ldd r30,Y+19
 1864 000e FC89      		ldd r31,Y+20
 1865 0010 3097      		sbiw r30,0
 1866 0012 01F0      		breq .L101
 1867               	.LVL118:
 1868               	.L91:
 698:../../../os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 699:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 700:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 701:../../../os/hal/src/hal_buffers.c ****       return msg;
 702:../../../os/hal/src/hal_buffers.c ****     }
 703:../../../os/hal/src/hal_buffers.c ****   }
 704:../../../os/hal/src/hal_buffers.c **** 
 705:../../../os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 706:../../../os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1869               		.loc 1 706 0
 1870 0014 1083      		st Z,r17
 707:../../../os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1871               		.loc 1 707 0
 1872 0016 8B89      		ldd r24,Y+19
 1873 0018 9C89      		ldd r25,Y+20
 1874 001a 0196      		adiw r24,1
 1875 001c 9C8B      		std Y+20,r25
 1876 001e 8B8B      		std Y+19,r24
 708:../../../os/hal/src/hal_buffers.c **** 
 709:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 710:../../../os/hal/src/hal_buffers.c ****      full in the queue.*/
 711:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1877               		.loc 1 711 0
 1878 0020 2D89      		ldd r18,Y+21
 1879 0022 3E89      		ldd r19,Y+22
 1880 0024 8217      		cp r24,r18
 1881 0026 9307      		cpc r25,r19
 1882 0028 00F0      		brlo .L95
 1883               	.LVL119:
 1884               	.LBB389:
 1885               	.LBB390:
 652:../../../os/hal/src/hal_buffers.c **** 
 1886               		.loc 1 652 0
 1887 002a EF81      		ldd r30,Y+7
 1888 002c F885      		ldd r31,Y+8
 1889 002e 2D85      		ldd r18,Y+13
 1890 0030 3E85      		ldd r19,Y+14
 1891 0032 2250      		subi r18,2
 1892 0034 3109      		sbc r19,__zero_reg__
 1893               	.LVL120:
 1894 0036 3183      		std Z+1,r19
 1895 0038 2083      		st Z,r18
 655:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1896               		.loc 1 655 0
 1897 003a 2D81      		ldd r18,Y+5
 1898 003c 3E81      		ldd r19,Y+6
 1899               	.LVL121:
 1900 003e 2150      		subi r18,1
 1901 0040 3109      		sbc r19,__zero_reg__
 1902 0042 3E83      		std Y+6,r19
 1903 0044 2D83      		std Y+5,r18
 1904               	.LVL122:
 656:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1905               		.loc 1 656 0
 1906 0046 8D85      		ldd r24,Y+13
 1907 0048 9E85      		ldd r25,Y+14
 1908 004a 8E0F      		add r24,r30
 1909 004c 9F1F      		adc r25,r31
 1910 004e 9887      		std Y+8,r25
 1911 0050 8F83      		std Y+7,r24
 657:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1912               		.loc 1 657 0
 1913 0052 2B85      		ldd r18,Y+11
 1914 0054 3C85      		ldd r19,Y+12
 1915 0056 8217      		cp r24,r18
 1916 0058 9307      		cpc r25,r19
 1917 005a 00F0      		brlo .L96
 658:../../../os/hal/src/hal_buffers.c ****   }
 1918               		.loc 1 658 0
 1919 005c 8989      		ldd r24,Y+17
 1920 005e 9A89      		ldd r25,Y+18
 1921 0060 9887      		std Y+8,r25
 1922 0062 8F83      		std Y+7,r24
 1923               	.L96:
 662:../../../os/hal/src/hal_buffers.c **** 
 1924               		.loc 1 662 0
 1925 0064 1C8A      		std Y+20,__zero_reg__
 1926 0066 1B8A      		std Y+19,__zero_reg__
 665:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1927               		.loc 1 665 0
 1928 0068 EF89      		ldd r30,Y+23
 1929 006a F88D      		ldd r31,Y+24
 1930 006c 3097      		sbiw r30,0
 1931 006e 01F0      		breq .L95
 666:../../../os/hal/src/hal_buffers.c ****   }
 1932               		.loc 1 666 0
 1933 0070 CE01      		movw r24,r28
 1934 0072 1995      		eicall
 1935               	.LVL123:
 1936               	.L95:
 1937               	.LBE390:
 1938               	.LBE389:
 1939               	.LBB391:
 1940               	.LBB392:
 1941               	.LBB393:
 1942               	.LBB394:
 1943               	.LBB395:
 1944               		.loc 4 447 0
 1945               	/* #APP */
 1946               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1947 0074 7894      		sei
 1948               	 ;  0 "" 2
 1949               	/* #NOAPP */
 1950               	.LBE395:
 1951               	.LBE394:
 1952               	.LBE393:
 1953               	.LBE392:
 1954               	.LBE391:
 712:../../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 713:../../../os/hal/src/hal_buffers.c ****   }
 714:../../../os/hal/src/hal_buffers.c **** 
 715:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 716:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 1955               		.loc 1 716 0
 1956 0076 80E0      		ldi r24,0
 1957 0078 90E0      		ldi r25,0
 1958               	.L93:
 1959               	/* epilogue start */
 717:../../../os/hal/src/hal_buffers.c **** }
 1960               		.loc 1 717 0
 1961 007a DF91      		pop r29
 1962 007c CF91      		pop r28
 1963               	.LVL124:
 1964 007e 1F91      		pop r17
 1965               	.LVL125:
 1966 0080 0895      		ret
 1967               	.LVL126:
 1968               	.L101:
 698:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1969               		.loc 1 698 0
 1970 0082 BA01      		movw r22,r20
 1971 0084 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1972               	.LVL127:
 699:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1973               		.loc 1 699 0
 1974 0088 0097      		sbiw r24,0
 1975 008a 01F4      		brne .L92
 1976 008c EB89      		ldd r30,Y+19
 1977 008e FC89      		ldd r31,Y+20
 1978 0090 00C0      		rjmp .L91
 1979               	.L92:
 1980               	.LBB396:
 1981               	.LBB397:
 1982               	.LBB398:
 1983               	.LBB399:
 1984               	.LBB400:
 1985               		.loc 4 447 0
 1986               	/* #APP */
 1987               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1988 0092 7894      		sei
 1989               	 ;  0 "" 2
 1990               	/* #NOAPP */
 1991               	.LBE400:
 1992               	.LBE399:
 1993               	.LBE398:
 1994               	.LBE397:
 1995               	.LBE396:
 701:../../../os/hal/src/hal_buffers.c ****     }
 1996               		.loc 1 701 0
 1997 0094 00C0      		rjmp .L93
 1998               		.cfi_endproc
 1999               	.LFE161:
 2001               		.section	.text.obqWriteTimeout,"ax",@progbits
 2002               	.global	obqWriteTimeout
 2004               	obqWriteTimeout:
 2005               	.LFB162:
 718:../../../os/hal/src/hal_buffers.c **** 
 719:../../../os/hal/src/hal_buffers.c **** /**
 720:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 721:../../../os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 722:../../../os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 723:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 724:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 725:../../../os/hal/src/hal_buffers.c ****  *
 726:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 727:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 728:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 729:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 730:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 731:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 732:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 733:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 734:../../../os/hal/src/hal_buffers.c ****  *                      .
 735:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 736:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 737:../../../os/hal/src/hal_buffers.c ****  *
 738:../../../os/hal/src/hal_buffers.c ****  * @api
 739:../../../os/hal/src/hal_buffers.c ****  */
 740:../../../os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 741:../../../os/hal/src/hal_buffers.c ****                        size_t n, systime_t timeout) {
 2006               		.loc 1 741 0
 2007               		.cfi_startproc
 2008               	.LVL128:
 2009 0000 4F92      		push r4
 2010               	.LCFI43:
 2011               		.cfi_def_cfa_offset 4
 2012               		.cfi_offset 4, -3
 2013 0002 5F92      		push r5
 2014               	.LCFI44:
 2015               		.cfi_def_cfa_offset 5
 2016               		.cfi_offset 5, -4
 2017 0004 6F92      		push r6
 2018               	.LCFI45:
 2019               		.cfi_def_cfa_offset 6
 2020               		.cfi_offset 6, -5
 2021 0006 7F92      		push r7
 2022               	.LCFI46:
 2023               		.cfi_def_cfa_offset 7
 2024               		.cfi_offset 7, -6
 2025 0008 8F92      		push r8
 2026               	.LCFI47:
 2027               		.cfi_def_cfa_offset 8
 2028               		.cfi_offset 8, -7
 2029 000a 9F92      		push r9
 2030               	.LCFI48:
 2031               		.cfi_def_cfa_offset 9
 2032               		.cfi_offset 9, -8
 2033 000c AF92      		push r10
 2034               	.LCFI49:
 2035               		.cfi_def_cfa_offset 10
 2036               		.cfi_offset 10, -9
 2037 000e BF92      		push r11
 2038               	.LCFI50:
 2039               		.cfi_def_cfa_offset 11
 2040               		.cfi_offset 11, -10
 2041 0010 CF92      		push r12
 2042               	.LCFI51:
 2043               		.cfi_def_cfa_offset 12
 2044               		.cfi_offset 12, -11
 2045 0012 DF92      		push r13
 2046               	.LCFI52:
 2047               		.cfi_def_cfa_offset 13
 2048               		.cfi_offset 13, -12
 2049 0014 EF92      		push r14
 2050               	.LCFI53:
 2051               		.cfi_def_cfa_offset 14
 2052               		.cfi_offset 14, -13
 2053 0016 FF92      		push r15
 2054               	.LCFI54:
 2055               		.cfi_def_cfa_offset 15
 2056               		.cfi_offset 15, -14
 2057 0018 0F93      		push r16
 2058               	.LCFI55:
 2059               		.cfi_def_cfa_offset 16
 2060               		.cfi_offset 16, -15
 2061 001a 1F93      		push r17
 2062               	.LCFI56:
 2063               		.cfi_def_cfa_offset 17
 2064               		.cfi_offset 17, -16
 2065 001c CF93      		push r28
 2066               	.LCFI57:
 2067               		.cfi_def_cfa_offset 18
 2068               		.cfi_offset 28, -17
 2069 001e DF93      		push r29
 2070               	.LCFI58:
 2071               		.cfi_def_cfa_offset 19
 2072               		.cfi_offset 29, -18
 2073               	/* prologue: function */
 2074               	/* frame size = 0 */
 2075               	/* stack size = 16 */
 2076               	.L__stack_usage = 16
 2077 0020 EC01      		movw r28,r24
 2078 0022 6B01      		movw r12,r22
 2079 0024 5A01      		movw r10,r20
 2080 0026 4901      		movw r8,r18
 2081               	.LVL129:
 2082               	.LBB401:
 2083               	.LBB402:
 2084               	.LBB403:
 2085               	.LBB404:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2086               		.loc 4 437 0
 2087               	/* #APP */
 2088               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2089 0028 F894      		cli
 2090               	 ;  0 "" 2
 2091               	/* #NOAPP */
 2092               	.LBE404:
 2093               	.LBE403:
 2094               	.LBE402:
 2095               	.LBE401:
 2096               	.LBB405:
 2097               	.LBB406:
 2098               	.LBB407:
 2099               	.LBB408:
 2100               	.LBB409:
 2101               		.loc 5 94 0
 2102 002a 4090 8400 		lds r4,132
 2103 002e 5090 8500 		lds r5,132+1
 2104               	.LBE409:
 2105               	.LBE408:
 2106               	.LBE407:
 2107               	.LBE406:
 2108               	.LBE405:
 742:../../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 743:../../../os/hal/src/hal_buffers.c ****   systime_t deadline;
 744:../../../os/hal/src/hal_buffers.c **** 
 745:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 746:../../../os/hal/src/hal_buffers.c **** 
 747:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 748:../../../os/hal/src/hal_buffers.c **** 
 749:../../../os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 750:../../../os/hal/src/hal_buffers.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 2109               		.loc 1 750 0
 2110 0032 420E      		add r4,r18
 2111 0034 531E      		adc r5,r19
 2112               	.LVL130:
 742:../../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 2113               		.loc 1 742 0
 2114 0036 E12C      		mov r14,__zero_reg__
 2115 0038 F12C      		mov r15,__zero_reg__
 2116               	.LBB410:
 2117               	.LBB411:
 751:../../../os/hal/src/hal_buffers.c **** 
 752:../../../os/hal/src/hal_buffers.c ****   while (true) {
 753:../../../os/hal/src/hal_buffers.c ****     size_t size;
 754:../../../os/hal/src/hal_buffers.c **** 
 755:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 756:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 757:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 758:../../../os/hal/src/hal_buffers.c **** 
 759:../../../os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 760:../../../os/hal/src/hal_buffers.c ****          deadline.*/
 761:../../../os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 2118               		.loc 1 761 0
 2119 003a 3901      		movw r6,r18
 2120 003c 21E0      		ldi r18,1
 2121 003e 621A      		sub r6,r18
 2122 0040 7108      		sbc r7,__zero_reg__
 2123               	.LVL131:
 2124 0042 00C0      		rjmp .L116
 2125               	.LVL132:
 2126               	.L121:
 2127               	.LBE411:
 762:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 763:../../../os/hal/src/hal_buffers.c ****       }
 764:../../../os/hal/src/hal_buffers.c ****       else {
 765:../../../os/hal/src/hal_buffers.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 766:../../../os/hal/src/hal_buffers.c **** 
 767:../../../os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 768:../../../os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 769:../../../os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 770:../../../os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 771:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 772:../../../os/hal/src/hal_buffers.c ****           return w;
 773:../../../os/hal/src/hal_buffers.c ****         }
 774:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 775:../../../os/hal/src/hal_buffers.c ****       }
 776:../../../os/hal/src/hal_buffers.c **** 
 777:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 778:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 779:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 780:../../../os/hal/src/hal_buffers.c ****         return w;
 781:../../../os/hal/src/hal_buffers.c ****       }
 782:../../../os/hal/src/hal_buffers.c ****     }
 783:../../../os/hal/src/hal_buffers.c **** 
 784:../../../os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 785:../../../os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 786:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 787:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 788:../../../os/hal/src/hal_buffers.c ****     }
 789:../../../os/hal/src/hal_buffers.c **** 
 790:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 791:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 792:../../../os/hal/src/hal_buffers.c ****     if (size > 64U) {
 793:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 794:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, 64U);
 2128               		.loc 1 794 0
 2129 0044 20E4      		ldi r18,lo8(64)
 2130 0046 F601      		movw r30,r12
 2131 0048 DC01      		movw r26,r24
 2132               		0:
 2133 004a 0190      		ld r0,Z+
 2134 004c 0D92      		st X+,r0
 2135 004e 2A95      		dec r18
 2136 0050 01F4      		brne 0b
 795:../../../os/hal/src/hal_buffers.c ****       bp        += 64U;
 2137               		.loc 1 795 0
 2138 0052 20E4      		ldi r18,64
 2139 0054 C20E      		add r12,r18
 2140 0056 D11C      		adc r13,__zero_reg__
 2141               	.LVL133:
 796:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += 64U;
 2142               		.loc 1 796 0
 2143 0058 8B89      		ldd r24,Y+19
 2144 005a 9C89      		ldd r25,Y+20
 2145 005c 805C      		subi r24,-64
 2146 005e 9F4F      		sbci r25,-1
 2147 0060 9C8B      		std Y+20,r25
 2148 0062 8B8B      		std Y+19,r24
 797:../../../os/hal/src/hal_buffers.c ****       w         += 64U;
 2149               		.loc 1 797 0
 2150 0064 20E4      		ldi r18,64
 2151 0066 E20E      		add r14,r18
 2152 0068 F11C      		adc r15,__zero_reg__
 2153               	.LVL134:
 2154               	.L111:
 798:../../../os/hal/src/hal_buffers.c ****     }
 799:../../../os/hal/src/hal_buffers.c ****     else {
 800:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 801:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 802:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 803:../../../os/hal/src/hal_buffers.c ****       w         += size;
 804:../../../os/hal/src/hal_buffers.c ****     }
 805:../../../os/hal/src/hal_buffers.c **** 
 806:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 807:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 2155               		.loc 1 807 0
 2156 006a 2D89      		ldd r18,Y+21
 2157 006c 3E89      		ldd r19,Y+22
 2158 006e 8217      		cp r24,r18
 2159 0070 9307      		cpc r25,r19
 2160 0072 00F0      		brlo .L113
 2161               	.LVL135:
 2162               	.LBB423:
 2163               	.LBB424:
 652:../../../os/hal/src/hal_buffers.c **** 
 2164               		.loc 1 652 0
 2165 0074 EF81      		ldd r30,Y+7
 2166 0076 F885      		ldd r31,Y+8
 2167 0078 8D85      		ldd r24,Y+13
 2168 007a 9E85      		ldd r25,Y+14
 2169 007c 0297      		sbiw r24,2
 2170               	.LVL136:
 2171 007e 9183      		std Z+1,r25
 2172 0080 8083      		st Z,r24
 655:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2173               		.loc 1 655 0
 2174 0082 2D81      		ldd r18,Y+5
 2175 0084 3E81      		ldd r19,Y+6
 2176 0086 2150      		subi r18,1
 2177 0088 3109      		sbc r19,__zero_reg__
 2178 008a 3E83      		std Y+6,r19
 2179 008c 2D83      		std Y+5,r18
 656:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2180               		.loc 1 656 0
 2181 008e 8D85      		ldd r24,Y+13
 2182 0090 9E85      		ldd r25,Y+14
 2183               	.LVL137:
 2184 0092 8E0F      		add r24,r30
 2185 0094 9F1F      		adc r25,r31
 2186 0096 9887      		std Y+8,r25
 2187 0098 8F83      		std Y+7,r24
 657:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2188               		.loc 1 657 0
 2189 009a 2B85      		ldd r18,Y+11
 2190 009c 3C85      		ldd r19,Y+12
 2191 009e 8217      		cp r24,r18
 2192 00a0 9307      		cpc r25,r19
 2193 00a2 00F0      		brlo .L114
 658:../../../os/hal/src/hal_buffers.c ****   }
 2194               		.loc 1 658 0
 2195 00a4 8989      		ldd r24,Y+17
 2196 00a6 9A89      		ldd r25,Y+18
 2197 00a8 9887      		std Y+8,r25
 2198 00aa 8F83      		std Y+7,r24
 2199               	.L114:
 662:../../../os/hal/src/hal_buffers.c **** 
 2200               		.loc 1 662 0
 2201 00ac 1C8A      		std Y+20,__zero_reg__
 2202 00ae 1B8A      		std Y+19,__zero_reg__
 665:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2203               		.loc 1 665 0
 2204 00b0 EF89      		ldd r30,Y+23
 2205 00b2 F88D      		ldd r31,Y+24
 2206 00b4 3097      		sbiw r30,0
 2207 00b6 01F0      		breq .L113
 666:../../../os/hal/src/hal_buffers.c ****   }
 2208               		.loc 1 666 0
 2209 00b8 CE01      		movw r24,r28
 2210 00ba 1995      		eicall
 2211               	.LVL138:
 2212               	.L113:
 2213               	.LBE424:
 2214               	.LBE423:
 2215               	.LBB425:
 2216               	.LBB426:
 2217               	.LBB427:
 2218               	.LBB428:
 2219               	.LBB429:
 2220               		.loc 4 447 0
 2221               	/* #APP */
 2222               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2223 00bc 7894      		sei
 2224               	 ;  0 "" 2
 2225               	/* #NOAPP */
 2226               	.LBE429:
 2227               	.LBE428:
 2228               	.LBE427:
 2229               	.LBE426:
 2230               	.LBE425:
 808:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 809:../../../os/hal/src/hal_buffers.c ****     }
 810:../../../os/hal/src/hal_buffers.c **** 
 811:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 812:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 813:../../../os/hal/src/hal_buffers.c ****     if (w >= n) {
 2231               		.loc 1 813 0
 2232 00be EA14      		cp r14,r10
 2233 00c0 FB04      		cpc r15,r11
 2234 00c2 00F0      		brlo .+2
 2235 00c4 00C0      		rjmp .L107
 2236               	.LBB430:
 2237               	.LBB431:
 2238               	.LBB432:
 2239               	.LBB433:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2240               		.loc 4 437 0
 2241               	/* #APP */
 2242               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2243 00c6 F894      		cli
 2244               	 ;  0 "" 2
 2245               	.LVL139:
 2246               	/* #NOAPP */
 2247               	.L116:
 2248               	.LBE433:
 2249               	.LBE432:
 2250               	.LBE431:
 2251               	.LBE430:
 756:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 2252               		.loc 1 756 0
 2253 00c8 8B89      		ldd r24,Y+19
 2254 00ca 9C89      		ldd r25,Y+20
 2255 00cc 0097      		sbiw r24,0
 2256 00ce 01F0      		breq .L120
 2257               	.L103:
 785:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 2258               		.loc 1 785 0
 2259 00d0 0D89      		ldd r16,Y+21
 2260 00d2 1E89      		ldd r17,Y+22
 2261               	.LVL140:
 786:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 2262               		.loc 1 786 0
 2263 00d4 9501      		movw r18,r10
 2264 00d6 2E19      		sub r18,r14
 2265 00d8 3F09      		sbc r19,r15
 2266 00da 081B      		sub r16,r24
 2267 00dc 190B      		sbc r17,r25
 2268               	.LVL141:
 2269 00de 2017      		cp r18,r16
 2270 00e0 3107      		cpc r19,r17
 2271 00e2 00F4      		brsh .L109
 2272 00e4 8901      		movw r16,r18
 2273               	.LVL142:
 2274               	.L109:
 792:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 2275               		.loc 1 792 0
 2276 00e6 0134      		cpi r16,65
 2277 00e8 1105      		cpc r17,__zero_reg__
 2278 00ea 00F0      		brlo .+2
 2279 00ec 00C0      		rjmp .L121
 800:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 2280               		.loc 1 800 0
 2281 00ee A801      		movw r20,r16
 2282 00f0 B601      		movw r22,r12
 2283 00f2 0E94 0000 		call memcpy
 2284               	.LVL143:
 801:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 2285               		.loc 1 801 0
 2286 00f6 C00E      		add r12,r16
 2287 00f8 D11E      		adc r13,r17
 2288               	.LVL144:
 802:../../../os/hal/src/hal_buffers.c ****       w         += size;
 2289               		.loc 1 802 0
 2290 00fa 8B89      		ldd r24,Y+19
 2291 00fc 9C89      		ldd r25,Y+20
 2292 00fe 800F      		add r24,r16
 2293 0100 911F      		adc r25,r17
 2294 0102 9C8B      		std Y+20,r25
 2295 0104 8B8B      		std Y+19,r24
 803:../../../os/hal/src/hal_buffers.c ****     }
 2296               		.loc 1 803 0
 2297 0106 E00E      		add r14,r16
 2298 0108 F11E      		adc r15,r17
 2299               	.LVL145:
 2300 010a 00C0      		rjmp .L111
 2301               	.LVL146:
 2302               	.L120:
 2303               	.LBB434:
 761:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 2304               		.loc 1 761 0
 2305 010c 8EEF      		ldi r24,-2
 2306 010e 6816      		cp r6,r24
 2307 0110 8FEF      		ldi r24,-1
 2308 0112 7806      		cpc r7,r24
 2309 0114 00F4      		brsh .L122
 2310               	.LBB412:
 2311               	.LBB413:
 2312               	.LBB414:
 2313               	.LBB415:
 2314               	.LBB416:
 2315               	.LBB417:
 2316               		.loc 5 94 0
 2317 0116 8091 8400 		lds r24,132
 2318 011a 9091 8500 		lds r25,132+1
 2319               	.LBE417:
 2320               	.LBE416:
 2321               	.LBE415:
 2322               	.LBE414:
 2323               	.LBE413:
 765:../../../os/hal/src/hal_buffers.c **** 
 2324               		.loc 1 765 0
 2325 011e B201      		movw r22,r4
 2326 0120 681B      		sub r22,r24
 2327 0122 790B      		sbc r23,r25
 2328               	.LVL147:
 770:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 2329               		.loc 1 770 0
 2330 0124 8616      		cp r8,r22
 2331 0126 9706      		cpc r9,r23
 2332 0128 00F0      		brlo .L108
 774:../../../os/hal/src/hal_buffers.c ****       }
 2333               		.loc 1 774 0
 2334 012a CE01      		movw r24,r28
 2335 012c 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2336               	.LVL148:
 2337               	.LBE412:
 778:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2338               		.loc 1 778 0
 2339 0130 892B      		or r24,r25
 2340 0132 01F4      		brne .L108
 2341               	.L123:
 2342 0134 8B89      		ldd r24,Y+19
 2343 0136 9C89      		ldd r25,Y+20
 2344               	.LVL149:
 2345 0138 00C0      		rjmp .L103
 2346               	.L122:
 762:../../../os/hal/src/hal_buffers.c ****       }
 2347               		.loc 1 762 0
 2348 013a B401      		movw r22,r8
 2349 013c CE01      		movw r24,r28
 2350 013e 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2351               	.LVL150:
 778:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2352               		.loc 1 778 0
 2353 0142 892B      		or r24,r25
 2354 0144 01F0      		breq .L123
 2355               	.LVL151:
 2356               	.L108:
 2357               	.LBB418:
 2358               	.LBB419:
 2359               	.LBB420:
 2360               	.LBB421:
 2361               	.LBB422:
 2362               		.loc 4 447 0
 2363               	/* #APP */
 2364               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2365 0146 7894      		sei
 2366               	 ;  0 "" 2
 2367               	/* #NOAPP */
 2368               	.L107:
 2369               	.LBE422:
 2370               	.LBE421:
 2371               	.LBE420:
 2372               	.LBE419:
 2373               	.LBE418:
 2374               	.LBE434:
 2375               	.LBE410:
 814:../../../os/hal/src/hal_buffers.c ****       return w;
 815:../../../os/hal/src/hal_buffers.c ****     }
 816:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 817:../../../os/hal/src/hal_buffers.c ****   }
 818:../../../os/hal/src/hal_buffers.c **** }
 2376               		.loc 1 818 0
 2377 0148 C701      		movw r24,r14
 2378               	/* epilogue start */
 2379 014a DF91      		pop r29
 2380 014c CF91      		pop r28
 2381               	.LVL152:
 2382 014e 1F91      		pop r17
 2383 0150 0F91      		pop r16
 2384 0152 FF90      		pop r15
 2385 0154 EF90      		pop r14
 2386               	.LVL153:
 2387 0156 DF90      		pop r13
 2388 0158 CF90      		pop r12
 2389               	.LVL154:
 2390 015a BF90      		pop r11
 2391 015c AF90      		pop r10
 2392               	.LVL155:
 2393 015e 9F90      		pop r9
 2394 0160 8F90      		pop r8
 2395               	.LVL156:
 2396 0162 7F90      		pop r7
 2397 0164 6F90      		pop r6
 2398               	.LVL157:
 2399 0166 5F90      		pop r5
 2400 0168 4F90      		pop r4
 2401               	.LVL158:
 2402 016a 0895      		ret
 2403               		.cfi_endproc
 2404               	.LFE162:
 2406               		.section	.text.obqTryFlushI,"ax",@progbits
 2407               	.global	obqTryFlushI
 2409               	obqTryFlushI:
 2410               	.LFB163:
 819:../../../os/hal/src/hal_buffers.c **** 
 820:../../../os/hal/src/hal_buffers.c **** /**
 821:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 822:../../../os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 823:../../../os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 824:../../../os/hal/src/hal_buffers.c ****  *          returned instead.
 825:../../../os/hal/src/hal_buffers.c ****  *
 826:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 827:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 828:../../../os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 829:../../../os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 830:../../../os/hal/src/hal_buffers.c ****  *
 831:../../../os/hal/src/hal_buffers.c ****  * @iclass
 832:../../../os/hal/src/hal_buffers.c ****  */
 833:../../../os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2411               		.loc 1 833 0
 2412               		.cfi_startproc
 2413               	.LVL159:
 2414               	/* prologue: function */
 2415               	/* frame size = 0 */
 2416               	/* stack size = 0 */
 2417               	.L__stack_usage = 0
 2418 0000 FC01      		movw r30,r24
 834:../../../os/hal/src/hal_buffers.c **** 
 835:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 836:../../../os/hal/src/hal_buffers.c **** 
 837:../../../os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 838:../../../os/hal/src/hal_buffers.c ****      it is not being written.*/
 839:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2419               		.loc 1 839 0
 2420 0002 A781      		ldd r26,Z+7
 2421 0004 B085      		ldd r27,Z+8
 2422 0006 8185      		ldd r24,Z+9
 2423 0008 9285      		ldd r25,Z+10
 2424               	.LVL160:
 2425 000a A817      		cp r26,r24
 2426 000c B907      		cpc r27,r25
 2427 000e 01F0      		breq .L133
 2428               	.L132:
 840:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 841:../../../os/hal/src/hal_buffers.c **** 
 842:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 843:../../../os/hal/src/hal_buffers.c **** 
 844:../../../os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 845:../../../os/hal/src/hal_buffers.c ****       *((size_t *)obqp->bwrptr) = size;
 846:../../../os/hal/src/hal_buffers.c **** 
 847:../../../os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 848:../../../os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 849:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 850:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 851:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 852:../../../os/hal/src/hal_buffers.c ****       }
 853:../../../os/hal/src/hal_buffers.c **** 
 854:../../../os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 855:../../../os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 856:../../../os/hal/src/hal_buffers.c **** 
 857:../../../os/hal/src/hal_buffers.c ****       return true;
 858:../../../os/hal/src/hal_buffers.c ****     }
 859:../../../os/hal/src/hal_buffers.c ****   }
 860:../../../os/hal/src/hal_buffers.c ****   return false;
 2429               		.loc 1 860 0
 2430 0010 80E0      		ldi r24,0
 861:../../../os/hal/src/hal_buffers.c **** }
 2431               		.loc 1 861 0
 2432 0012 0895      		ret
 2433               	.L133:
 839:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2434               		.loc 1 839 0 discriminator 1
 2435 0014 8581      		ldd r24,Z+5
 2436 0016 9681      		ldd r25,Z+6
 2437 0018 892B      		or r24,r25
 2438 001a 01F0      		breq .L132
 839:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2439               		.loc 1 839 0 is_stmt 0
 2440 001c 8389      		ldd r24,Z+19
 2441 001e 9489      		ldd r25,Z+20
 2442 0020 0097      		sbiw r24,0
 2443 0022 01F0      		breq .L132
 2444               	.LBB435:
 840:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2445               		.loc 1 840 0 is_stmt 1
 2446 0024 0297      		sbiw r24,2
 2447 0026 8A1B      		sub r24,r26
 2448 0028 9B0B      		sbc r25,r27
 2449               	.LVL161:
 842:../../../os/hal/src/hal_buffers.c **** 
 2450               		.loc 1 842 0
 2451 002a 01F0      		breq .L132
 845:../../../os/hal/src/hal_buffers.c **** 
 2452               		.loc 1 845 0
 2453 002c 1196      		adiw r26,1
 2454 002e 9C93      		st X,r25
 2455 0030 8E93      		st -X,r24
 848:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2456               		.loc 1 848 0
 2457 0032 8581      		ldd r24,Z+5
 2458 0034 9681      		ldd r25,Z+6
 2459               	.LVL162:
 2460 0036 0197      		sbiw r24,1
 2461 0038 9683      		std Z+6,r25
 2462 003a 8583      		std Z+5,r24
 2463               	.LVL163:
 849:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2464               		.loc 1 849 0
 2465 003c 8585      		ldd r24,Z+13
 2466 003e 9685      		ldd r25,Z+14
 2467 0040 A80F      		add r26,r24
 2468 0042 B91F      		adc r27,r25
 2469               	.LVL164:
 2470 0044 B087      		std Z+8,r27
 2471 0046 A783      		std Z+7,r26
 2472               	.LVL165:
 850:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2473               		.loc 1 850 0
 2474 0048 8385      		ldd r24,Z+11
 2475 004a 9485      		ldd r25,Z+12
 2476 004c A817      		cp r26,r24
 2477 004e B907      		cpc r27,r25
 2478 0050 00F0      		brlo .L127
 851:../../../os/hal/src/hal_buffers.c ****       }
 2479               		.loc 1 851 0
 2480 0052 8189      		ldd r24,Z+17
 2481 0054 9289      		ldd r25,Z+18
 2482 0056 9087      		std Z+8,r25
 2483 0058 8783      		std Z+7,r24
 2484               	.L127:
 855:../../../os/hal/src/hal_buffers.c **** 
 2485               		.loc 1 855 0
 2486 005a 148A      		std Z+20,__zero_reg__
 2487 005c 138A      		std Z+19,__zero_reg__
 857:../../../os/hal/src/hal_buffers.c ****     }
 2488               		.loc 1 857 0
 2489 005e 81E0      		ldi r24,lo8(1)
 2490 0060 0895      		ret
 2491               	.LBE435:
 2492               		.cfi_endproc
 2493               	.LFE163:
 2495               		.section	.text.obqFlush,"ax",@progbits
 2496               	.global	obqFlush
 2498               	obqFlush:
 2499               	.LFB164:
 862:../../../os/hal/src/hal_buffers.c **** 
 863:../../../os/hal/src/hal_buffers.c **** /**
 864:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 865:../../../os/hal/src/hal_buffers.c ****  *
 866:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 867:../../../os/hal/src/hal_buffers.c ****  *
 868:../../../os/hal/src/hal_buffers.c ****  * @api
 869:../../../os/hal/src/hal_buffers.c ****  */
 870:../../../os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2500               		.loc 1 870 0
 2501               		.cfi_startproc
 2502               	.LVL166:
 2503               	/* prologue: function */
 2504               	/* frame size = 0 */
 2505               	/* stack size = 0 */
 2506               	.L__stack_usage = 0
 2507 0000 DC01      		movw r26,r24
 2508               	.LBB436:
 2509               	.LBB437:
 2510               	.LBB438:
 2511               	.LBB439:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2512               		.loc 4 437 0
 2513               	/* #APP */
 2514               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2515 0002 F894      		cli
 2516               	 ;  0 "" 2
 2517               	/* #NOAPP */
 2518               	.LBE439:
 2519               	.LBE438:
 2520               	.LBE437:
 2521               	.LBE436:
 871:../../../os/hal/src/hal_buffers.c **** 
 872:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 873:../../../os/hal/src/hal_buffers.c **** 
 874:../../../os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 875:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2522               		.loc 1 875 0
 2523 0004 5396      		adiw r26,19
 2524 0006 8D91      		ld r24,X+
 2525 0008 9C91      		ld r25,X
 2526 000a 5497      		sbiw r26,19+1
 2527               	.LVL167:
 2528 000c 0097      		sbiw r24,0
 2529 000e 01F0      		breq .L136
 2530               	.LBB440:
 876:../../../os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 2531               		.loc 1 876 0
 2532 0010 1796      		adiw r26,7
 2533 0012 ED91      		ld r30,X+
 2534 0014 FC91      		ld r31,X
 2535 0016 1897      		sbiw r26,7+1
 2536 0018 0297      		sbiw r24,2
 2537 001a 8E1B      		sub r24,r30
 2538 001c 9F0B      		sbc r25,r31
 2539               	.LVL168:
 877:../../../os/hal/src/hal_buffers.c **** 
 878:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2540               		.loc 1 878 0
 2541 001e 01F0      		breq .L136
 2542               	.LVL169:
 2543               	.LBB441:
 2544               	.LBB442:
 652:../../../os/hal/src/hal_buffers.c **** 
 2545               		.loc 1 652 0
 2546 0020 9183      		std Z+1,r25
 2547 0022 8083      		st Z,r24
 655:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2548               		.loc 1 655 0
 2549 0024 1596      		adiw r26,5
 2550 0026 8D91      		ld r24,X+
 2551 0028 9C91      		ld r25,X
 2552 002a 1697      		sbiw r26,5+1
 2553               	.LVL170:
 2554 002c 0197      		sbiw r24,1
 2555 002e 1696      		adiw r26,5+1
 2556 0030 9C93      		st X,r25
 2557 0032 8E93      		st -X,r24
 2558 0034 1597      		sbiw r26,5
 2559               	.LVL171:
 656:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2560               		.loc 1 656 0
 2561 0036 1D96      		adiw r26,13
 2562 0038 8D91      		ld r24,X+
 2563 003a 9C91      		ld r25,X
 2564 003c 1E97      		sbiw r26,13+1
 2565 003e E80F      		add r30,r24
 2566 0040 F91F      		adc r31,r25
 2567               	.LVL172:
 2568 0042 1896      		adiw r26,7+1
 2569 0044 FC93      		st X,r31
 2570 0046 EE93      		st -X,r30
 2571 0048 1797      		sbiw r26,7
 2572               	.LVL173:
 657:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2573               		.loc 1 657 0
 2574 004a 1B96      		adiw r26,11
 2575 004c 8D91      		ld r24,X+
 2576 004e 9C91      		ld r25,X
 2577 0050 1C97      		sbiw r26,11+1
 2578 0052 E817      		cp r30,r24
 2579 0054 F907      		cpc r31,r25
 2580 0056 00F0      		brlo .L138
 658:../../../os/hal/src/hal_buffers.c ****   }
 2581               		.loc 1 658 0
 2582 0058 5196      		adiw r26,17
 2583 005a 8D91      		ld r24,X+
 2584 005c 9C91      		ld r25,X
 2585 005e 5297      		sbiw r26,17+1
 2586 0060 1896      		adiw r26,7+1
 2587 0062 9C93      		st X,r25
 2588 0064 8E93      		st -X,r24
 2589 0066 1797      		sbiw r26,7
 2590               	.L138:
 662:../../../os/hal/src/hal_buffers.c **** 
 2591               		.loc 1 662 0
 2592 0068 5496      		adiw r26,19+1
 2593 006a 1C92      		st X,__zero_reg__
 2594 006c 1E92      		st -X,__zero_reg__
 2595 006e 5397      		sbiw r26,19
 665:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2596               		.loc 1 665 0
 2597 0070 5796      		adiw r26,23
 2598 0072 ED91      		ld r30,X+
 2599 0074 FC91      		ld r31,X
 2600 0076 5897      		sbiw r26,23+1
 2601 0078 3097      		sbiw r30,0
 2602 007a 01F0      		breq .L136
 2603 007c CD01      		movw r24,r26
 666:../../../os/hal/src/hal_buffers.c ****   }
 2604               		.loc 1 666 0
 2605 007e 1995      		eicall
 2606               	.LVL174:
 2607               	.L136:
 2608               	.LBE442:
 2609               	.LBE441:
 2610               	.LBE440:
 2611               	.LBB443:
 2612               	.LBB444:
 2613               	.LBB445:
 2614               	.LBB446:
 2615               	.LBB447:
 2616               		.loc 4 447 0
 2617               	/* #APP */
 2618               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2619 0080 7894      		sei
 2620               	 ;  0 "" 2
 2621               	/* #NOAPP */
 2622 0082 0895      		ret
 2623               	.LBE447:
 2624               	.LBE446:
 2625               	.LBE445:
 2626               	.LBE444:
 2627               	.LBE443:
 2628               		.cfi_endproc
 2629               	.LFE164:
 2631               		.text
 2632               	.Letext0:
 2633               		.file 6 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 2634               		.file 7 "/usr/lib/avr/include/stdint.h"
 2635               		.file 8 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2636               		.file 9 "../../../os/rt/include/chsystypes.h"
 2637               		.file 10 "../../../os/rt/include/chsem.h"
 2638               		.file 11 "../../../os/rt/include/chmtx.h"
 2639               		.file 12 "../../../os/hal/include/hal_buffers.h"
 2640               		.file 13 "../../../os/common/ports/AVR/chcore_timer.h"
 2641               		.file 14 "../../../os/rt/include/chsys.h"
 2642               		.file 15 "../../../os/rt/include/chvt.h"
 2643               		.file 16 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
     /tmp/cc9nWYng.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc9nWYng.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc9nWYng.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc9nWYng.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc9nWYng.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc9nWYng.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc9nWYng.s:14     .text.ibqObjectInit:0000000000000000 ibqObjectInit
     /tmp/cc9nWYng.s:132    .text.ibqResetI:0000000000000000 ibqResetI
     /tmp/cc9nWYng.s:178    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
     /tmp/cc9nWYng.s:219    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
     /tmp/cc9nWYng.s:280    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
     /tmp/cc9nWYng.s:391    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
     /tmp/cc9nWYng.s:442    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
     /tmp/cc9nWYng.s:555    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
     /tmp/cc9nWYng.s:633    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
     /tmp/cc9nWYng.s:802    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
     /tmp/cc9nWYng.s:1200   .text.obqObjectInit:0000000000000000 obqObjectInit
     /tmp/cc9nWYng.s:1316   .text.obqResetI:0000000000000000 obqResetI
     /tmp/cc9nWYng.s:1363   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
     /tmp/cc9nWYng.s:1411   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
     /tmp/cc9nWYng.s:1466   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
     /tmp/cc9nWYng.s:1576   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
     /tmp/cc9nWYng.s:1626   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
     /tmp/cc9nWYng.s:1743   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
     /tmp/cc9nWYng.s:1825   .text.obqPutTimeout:0000000000000000 obqPutTimeout
     /tmp/cc9nWYng.s:2004   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
     /tmp/cc9nWYng.s:2409   .text.obqTryFlushI:0000000000000000 obqTryFlushI
     /tmp/cc9nWYng.s:2498   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy

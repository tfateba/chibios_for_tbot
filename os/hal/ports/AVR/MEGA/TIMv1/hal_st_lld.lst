   1               		.file	"hal_st_lld.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.__vector_17,"ax",@progbits
  12               	.global	__vector_17
  14               	__vector_17:
  15               	.LFB143:
  16               		.file 1 "../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c"
   1:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*
   2:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
   4:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
   8:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  10:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** */
  16:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  17:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /**
  18:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @file    hal_st_lld.c
  19:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @brief   AVR ST subsystem low level driver source.
  20:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  *
  21:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @addtogroup ST
  22:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @{
  23:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  */
  24:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  25:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #include "hal.h"
  26:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  27:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
  28:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  29:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  30:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  32:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  33:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /**
  34:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @brief  Timer maximum value
  35:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  */
  36:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #define AVR_TIMER_COUNTER_MAX 255
  37:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  38:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Driver exported variables.                                                */
  40:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  41:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  42:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  43:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Driver local types.                                                       */
  44:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  45:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  46:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  47:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Driver local variables and types.                                         */
  48:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  49:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  50:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)
  51:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  52:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Work out what the timer interrupt is called on this MCU */
  53:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #ifdef TIMER0_COMPA_vect
  54:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_VECT TIMER0_COMPA_vect
  55:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #elif defined(TIMER_COMPA_vect)
  56:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_VECT TIMER_COMPA_vect
  57:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #elif defined(TIMER0_COMP_vect)
  58:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_VECT TIMER0_COMP_vect
  59:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #else
  60:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #error "Cannot find interrupt vector name for timer"
  61:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #endif
  62:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  63:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Find the most suitable prescaler setting for the desired OSAL_ST_FREQUENCY */
  64:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #if ((F_CPU / OSAL_ST_FREQUENCY) <= AVR_TIMER_COUNTER_MAX)
  65:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  66:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 1
  67:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER_BITS ((0<<CS02)|(0<<CS01)|(1<<CS00)) /* CLK      */
  68:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  69:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #elif ((F_CPU / OSAL_ST_FREQUENCY / 8) <= AVR_TIMER_COUNTER_MAX)
  70:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  71:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 8
  72:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER_BITS ((0<<CS02)|(1<<CS01)|(0<<CS00)) /* CLK/8    */
  73:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  74:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #elif ((F_CPU / OSAL_ST_FREQUENCY / 64) <= AVR_TIMER_COUNTER_MAX)
  75:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  76:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 64
  77:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  78:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #ifdef __AVR_ATmega128__
  79:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS ((1<<CS02)|(0<<CS01)|(0<<CS00)) /* CLK/64   */
  80:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #else
  81:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS ((0<<CS02)|(1<<CS01)|(1<<CS00)) /* CLK/64   */
  82:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #endif
  83:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  84:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #elif ((F_CPU / OSAL_ST_FREQUENCY / 256) <= AVR_TIMER_COUNTER_MAX)
  85:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  86:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 256
  87:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  88:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #ifdef __AVR_ATmega128__
  89:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS ((1<<CS02)|(1<<CS01)|(0<<CS00)) /* CLK/256  */
  90:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #else
  91:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS ((1<<CS02)|(0<<CS01)|(0<<CS00)) /* CLK/256  */
  92:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #endif
  93:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  94:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #elif ((F_CPU / OSAL_ST_FREQUENCY / 1024) <= AVR_TIMER_COUNTER_MAX)
  95:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  96:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 1024
  97:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
  98:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #ifdef __AVR_ATmega128__
  99:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS (1<<CS02)|(1<<CS01)|(1<<CS00); /* CLK/1024 */
 100:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #else
 101:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS (1<<CS02)|(0<<CS01)|(1<<CS00); /* CLK/1024 */
 102:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #endif
 103:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 104:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #else
 105:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #error "Frequency too low for timer, please set OSAL_ST_FREQUENCY to a higher value"
 106:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #endif
 107:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 108:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #define AVR_TIMER_COUNTER (F_CPU / OSAL_ST_FREQUENCY / AVR_TIMER_PRESCALER)
 109:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 110:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Test if OSAL_ST_FREQUENCY can be matched exactly using this timer */
 111:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #define F_CPU_ (AVR_TIMER_COUNTER * AVR_TIMER_PRESCALER * OSAL_ST_FREQUENCY)
 112:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #if (F_CPU_ != F_CPU)
 113:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   #warning "OSAL_ST_FREQUENCY cannot be generated exactly using timer"
 114:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #endif
 115:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #undef F_CPU_
 116:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 117:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 118:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 119:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)
 120:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 121:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* FIXME: Prescaler is now fixed in 1024.
 122:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  *        Should add support for calculating best value according to
 123:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  *        user requested configuration.
 124:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  */
 125:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #define PRESCALER (_BV(CS12) | _BV(CS10))
 126:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 127:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 128:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 129:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 130:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Driver local functions.                                                   */
 131:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 132:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 133:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 134:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Driver interrupt handlers.                                                */
 135:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 136:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 137:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)
 138:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 139:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /**
 140:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @brief Timer handler for periodic mode.
 141:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  */
 142:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
 143:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 144:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   OSAL_IRQ_PROLOGUE();
 145:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 146:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   osalSysLockFromISR();
 147:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   osalOsTimerHandlerI();
 148:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   osalSysUnlockFromISR();
 149:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 150:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   OSAL_IRQ_EPILOGUE();
 151:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** }
 152:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 153:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 154:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 155:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)
 156:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 157:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /**
 158:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @brief Timer handler for free running mode.
 159:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  */
 160:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
  17               		.loc 1 160 0
  18               		.cfi_startproc
  19 0000 1F92      		push r1
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 1, -3
  23 0002 0F92      		push r0
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 0, -4
  27 0004 0FB6      		in r0,__SREG__
  28 0006 0F92      		push r0
  29 0008 1124      		clr __zero_reg__
  30 000a 0BB6      		in r0,__RAMPZ__
  31 000c 0F92      		push r0
  32 000e 2F93      		push r18
  33               	.LCFI2:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 18, -5
  36 0010 3F93      		push r19
  37               	.LCFI3:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 19, -6
  40 0012 4F93      		push r20
  41               	.LCFI4:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 20, -7
  44 0014 5F93      		push r21
  45               	.LCFI5:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 21, -8
  48 0016 6F93      		push r22
  49               	.LCFI6:
  50               		.cfi_def_cfa_offset 10
  51               		.cfi_offset 22, -9
  52 0018 7F93      		push r23
  53               	.LCFI7:
  54               		.cfi_def_cfa_offset 11
  55               		.cfi_offset 23, -10
  56 001a 8F93      		push r24
  57               	.LCFI8:
  58               		.cfi_def_cfa_offset 12
  59               		.cfi_offset 24, -11
  60 001c 9F93      		push r25
  61               	.LCFI9:
  62               		.cfi_def_cfa_offset 13
  63               		.cfi_offset 25, -12
  64 001e AF93      		push r26
  65               	.LCFI10:
  66               		.cfi_def_cfa_offset 14
  67               		.cfi_offset 26, -13
  68 0020 BF93      		push r27
  69               	.LCFI11:
  70               		.cfi_def_cfa_offset 15
  71               		.cfi_offset 27, -14
  72 0022 EF93      		push r30
  73               	.LCFI12:
  74               		.cfi_def_cfa_offset 16
  75               		.cfi_offset 30, -15
  76 0024 FF93      		push r31
  77               	.LCFI13:
  78               		.cfi_def_cfa_offset 17
  79               		.cfi_offset 31, -16
  80               	/* prologue: Signal */
  81               	/* frame size = 0 */
  82               	/* stack size = 16 */
  83               	.L__stack_usage = 16
 161:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 162:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   OSAL_IRQ_PROLOGUE();
  84               		.loc 1 162 0
  85 0026 81E0      		ldi r24,lo8(1)
  86 0028 8093 0000 		sts __avr_in_isr,r24
  87               	.LBB16:
  88               	.LBB17:
  89               		.file 2 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:../../../os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:../../../os/hal/osal/rt/osal.h ****  */
 181:../../../os/hal/osal/rt/osal.h **** typedef struct {
 182:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:../../../os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:../../../os/hal/osal/rt/osal.h **** } event_source_t;
 185:../../../os/hal/osal/rt/osal.h **** #endif
 186:../../../os/hal/osal/rt/osal.h **** 
 187:../../../os/hal/osal/rt/osal.h **** /**
 188:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:../../../os/hal/osal/rt/osal.h ****  */
 192:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:../../../os/hal/osal/rt/osal.h **** #else
 196:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:../../../os/hal/osal/rt/osal.h **** #endif
 198:../../../os/hal/osal/rt/osal.h **** 
 199:../../../os/hal/osal/rt/osal.h **** #if 0
 200:../../../os/hal/osal/rt/osal.h **** /**
 201:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:../../../os/hal/osal/rt/osal.h ****  */
 207:../../../os/hal/osal/rt/osal.h **** typedef struct {
 208:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:../../../os/hal/osal/rt/osal.h **** #endif
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:../../../os/hal/osal/rt/osal.h **** 
 216:../../../os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:../../../os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:../../../os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:../../../os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:../../../os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:../../../os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:../../../os/hal/osal/rt/osal.h **** 
 223:../../../os/hal/osal/rt/osal.h **** /**
 224:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:../../../os/hal/osal/rt/osal.h ****  * @{
 226:../../../os/hal/osal/rt/osal.h ****  */
 227:../../../os/hal/osal/rt/osal.h **** /**
 228:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 231:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:../../../os/hal/osal/rt/osal.h ****  *
 236:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:../../../os/hal/osal/rt/osal.h ****  *
 239:../../../os/hal/osal/rt/osal.h ****  * @api
 240:../../../os/hal/osal/rt/osal.h ****  */
 241:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:../../../os/hal/osal/rt/osal.h **** 
 243:../../../os/hal/osal/rt/osal.h **** /**
 244:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 248:../../../os/hal/osal/rt/osal.h ****  *
 249:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:../../../os/hal/osal/rt/osal.h ****  *
 251:../../../os/hal/osal/rt/osal.h ****  * @api
 252:../../../os/hal/osal/rt/osal.h ****  */
 253:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:../../../os/hal/osal/rt/osal.h **** 
 255:../../../os/hal/osal/rt/osal.h **** /**
 256:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:../../../os/hal/osal/rt/osal.h ****  */
 265:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:../../../os/hal/osal/rt/osal.h **** /** @} */
 267:../../../os/hal/osal/rt/osal.h **** 
 268:../../../os/hal/osal/rt/osal.h **** /**
 269:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:../../../os/hal/osal/rt/osal.h ****  * @{
 271:../../../os/hal/osal/rt/osal.h ****  */
 272:../../../os/hal/osal/rt/osal.h **** /**
 273:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:../../../os/hal/osal/rt/osal.h ****  */
 275:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:../../../os/hal/osal/rt/osal.h **** 
 277:../../../os/hal/osal/rt/osal.h **** /**
 278:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:../../../os/hal/osal/rt/osal.h ****  */
 281:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:../../../os/hal/osal/rt/osal.h **** 
 283:../../../os/hal/osal/rt/osal.h **** /**
 284:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:../../../os/hal/osal/rt/osal.h ****  */
 287:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:../../../os/hal/osal/rt/osal.h **** 
 289:../../../os/hal/osal/rt/osal.h **** /**
 290:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:../../../os/hal/osal/rt/osal.h ****  *
 293:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:../../../os/hal/osal/rt/osal.h ****  */
 295:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:../../../os/hal/osal/rt/osal.h **** /** @} */
 297:../../../os/hal/osal/rt/osal.h **** 
 298:../../../os/hal/osal/rt/osal.h **** /**
 299:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:../../../os/hal/osal/rt/osal.h ****  * @{
 301:../../../os/hal/osal/rt/osal.h ****  */
 302:../../../os/hal/osal/rt/osal.h **** /**
 303:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:../../../os/hal/osal/rt/osal.h ****  *
 307:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:../../../os/hal/osal/rt/osal.h ****  *
 310:../../../os/hal/osal/rt/osal.h ****  * @api
 311:../../../os/hal/osal/rt/osal.h ****  */
 312:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:../../../os/hal/osal/rt/osal.h **** 
 314:../../../os/hal/osal/rt/osal.h **** /**
 315:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:../../../os/hal/osal/rt/osal.h ****  *
 319:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:../../../os/hal/osal/rt/osal.h ****  *
 322:../../../os/hal/osal/rt/osal.h ****  * @api
 323:../../../os/hal/osal/rt/osal.h ****  */
 324:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:../../../os/hal/osal/rt/osal.h **** 
 326:../../../os/hal/osal/rt/osal.h **** /**
 327:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:../../../os/hal/osal/rt/osal.h ****  *
 331:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:../../../os/hal/osal/rt/osal.h ****  *
 334:../../../os/hal/osal/rt/osal.h ****  * @api
 335:../../../os/hal/osal/rt/osal.h ****  */
 336:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:../../../os/hal/osal/rt/osal.h **** /** @} */
 338:../../../os/hal/osal/rt/osal.h **** 
 339:../../../os/hal/osal/rt/osal.h **** /**
 340:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:../../../os/hal/osal/rt/osal.h ****  * @{
 342:../../../os/hal/osal/rt/osal.h ****  */
 343:../../../os/hal/osal/rt/osal.h **** /**
 344:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:../../../os/hal/osal/rt/osal.h ****  *
 348:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:../../../os/hal/osal/rt/osal.h **** 
 356:../../../os/hal/osal/rt/osal.h **** /**
 357:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:../../../os/hal/osal/rt/osal.h ****  *
 362:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @api
 367:../../../os/hal/osal/rt/osal.h ****  */
 368:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:../../../os/hal/osal/rt/osal.h **** 
 370:../../../os/hal/osal/rt/osal.h **** /**
 371:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:../../../os/hal/osal/rt/osal.h ****  *
 376:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @api
 381:../../../os/hal/osal/rt/osal.h ****  */
 382:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:../../../os/hal/osal/rt/osal.h **** /** @} */
 384:../../../os/hal/osal/rt/osal.h **** 
 385:../../../os/hal/osal/rt/osal.h **** /**
 386:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:../../../os/hal/osal/rt/osal.h ****  * @{
 388:../../../os/hal/osal/rt/osal.h ****  */
 389:../../../os/hal/osal/rt/osal.h **** /**
 390:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:../../../os/hal/osal/rt/osal.h ****  *
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:../../../os/hal/osal/rt/osal.h ****  *
 397:../../../os/hal/osal/rt/osal.h ****  * @api
 398:../../../os/hal/osal/rt/osal.h ****  */
 399:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:../../../os/hal/osal/rt/osal.h **** 
 401:../../../os/hal/osal/rt/osal.h **** /**
 402:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:../../../os/hal/osal/rt/osal.h ****  *
 408:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:../../../os/hal/osal/rt/osal.h ****  *
 410:../../../os/hal/osal/rt/osal.h ****  * @api
 411:../../../os/hal/osal/rt/osal.h ****  */
 412:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:../../../os/hal/osal/rt/osal.h **** 
 414:../../../os/hal/osal/rt/osal.h **** /**
 415:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 417:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:../../../os/hal/osal/rt/osal.h ****  *
 421:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:../../../os/hal/osal/rt/osal.h ****  *
 423:../../../os/hal/osal/rt/osal.h ****  * @api
 424:../../../os/hal/osal/rt/osal.h ****  */
 425:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:../../../os/hal/osal/rt/osal.h **** /** @} */
 427:../../../os/hal/osal/rt/osal.h **** 
 428:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:../../../os/hal/osal/rt/osal.h **** extern "C" {
 434:../../../os/hal/osal/rt/osal.h **** #endif
 435:../../../os/hal/osal/rt/osal.h **** 
 436:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:../../../os/hal/osal/rt/osal.h **** }
 438:../../../os/hal/osal/rt/osal.h **** #endif
 439:../../../os/hal/osal/rt/osal.h **** 
 440:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:../../../os/hal/osal/rt/osal.h **** 
 444:../../../os/hal/osal/rt/osal.h **** /**
 445:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:../../../os/hal/osal/rt/osal.h ****  *
 447:../../../os/hal/osal/rt/osal.h ****  * @api
 448:../../../os/hal/osal/rt/osal.h ****  */
 449:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:../../../os/hal/osal/rt/osal.h **** 
 451:../../../os/hal/osal/rt/osal.h **** }
 452:../../../os/hal/osal/rt/osal.h **** 
 453:../../../os/hal/osal/rt/osal.h **** /**
 454:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:../../../os/hal/osal/rt/osal.h ****  *
 456:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:../../../os/hal/osal/rt/osal.h ****  *
 458:../../../os/hal/osal/rt/osal.h ****  * @api
 459:../../../os/hal/osal/rt/osal.h ****  */
 460:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:../../../os/hal/osal/rt/osal.h **** }
 464:../../../os/hal/osal/rt/osal.h **** 
 465:../../../os/hal/osal/rt/osal.h **** /**
 466:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:../../../os/hal/osal/rt/osal.h ****  *
 468:../../../os/hal/osal/rt/osal.h ****  * @special
 469:../../../os/hal/osal/rt/osal.h ****  */
 470:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:../../../os/hal/osal/rt/osal.h **** 
 472:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 473:../../../os/hal/osal/rt/osal.h **** }
 474:../../../os/hal/osal/rt/osal.h **** 
 475:../../../os/hal/osal/rt/osal.h **** /**
 476:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:../../../os/hal/osal/rt/osal.h ****  *
 478:../../../os/hal/osal/rt/osal.h ****  * @special
 479:../../../os/hal/osal/rt/osal.h ****  */
 480:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:../../../os/hal/osal/rt/osal.h **** 
 482:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 483:../../../os/hal/osal/rt/osal.h **** }
 484:../../../os/hal/osal/rt/osal.h **** 
 485:../../../os/hal/osal/rt/osal.h **** /**
 486:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:../../../os/hal/osal/rt/osal.h ****  *
 489:../../../os/hal/osal/rt/osal.h ****  * @special
 490:../../../os/hal/osal/rt/osal.h ****  */
 491:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 494:../../../os/hal/osal/rt/osal.h **** }
 495:../../../os/hal/osal/rt/osal.h **** 
 496:../../../os/hal/osal/rt/osal.h **** /**
 497:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:../../../os/hal/osal/rt/osal.h ****  *
 500:../../../os/hal/osal/rt/osal.h ****  * @special
 501:../../../os/hal/osal/rt/osal.h ****  */
 502:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:../../../os/hal/osal/rt/osal.h **** 
 504:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:../../../os/hal/osal/rt/osal.h **** }
 506:../../../os/hal/osal/rt/osal.h **** 
 507:../../../os/hal/osal/rt/osal.h **** /**
 508:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:../../../os/hal/osal/rt/osal.h ****  *
 511:../../../os/hal/osal/rt/osal.h ****  * @special
 512:../../../os/hal/osal/rt/osal.h ****  */
 513:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:../../../os/hal/osal/rt/osal.h **** 
 515:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:../../../os/hal/osal/rt/osal.h **** }
 517:../../../os/hal/osal/rt/osal.h **** 
 518:../../../os/hal/osal/rt/osal.h **** /**
 519:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:../../../os/hal/osal/rt/osal.h ****  *
 522:../../../os/hal/osal/rt/osal.h ****  * @special
 523:../../../os/hal/osal/rt/osal.h ****  */
 524:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:../../../os/hal/osal/rt/osal.h **** 
 526:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:../../../os/hal/osal/rt/osal.h **** }
 528:../../../os/hal/osal/rt/osal.h **** 
 529:../../../os/hal/osal/rt/osal.h **** /**
 530:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:../../../os/hal/osal/rt/osal.h ****  *          is known.
 535:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:../../../os/hal/osal/rt/osal.h ****  *
 537:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @xclass
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:../../../os/hal/osal/rt/osal.h ****  *
 552:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:../../../os/hal/osal/rt/osal.h ****  *
 554:../../../os/hal/osal/rt/osal.h ****  * @xclass
 555:../../../os/hal/osal/rt/osal.h ****  */
 556:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:../../../os/hal/osal/rt/osal.h **** 
 558:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:../../../os/hal/osal/rt/osal.h **** }
 560:../../../os/hal/osal/rt/osal.h **** 
 561:../../../os/hal/osal/rt/osal.h **** /**
 562:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:../../../os/hal/osal/rt/osal.h ****  *          value.
 565:../../../os/hal/osal/rt/osal.h ****  *
 566:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:../../../os/hal/osal/rt/osal.h ****  *
 568:../../../os/hal/osal/rt/osal.h ****  * @xclass
 569:../../../os/hal/osal/rt/osal.h ****  */
 570:../../../os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:../../../os/hal/osal/rt/osal.h **** 
 573:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:../../../os/hal/osal/rt/osal.h **** }
 575:../../../os/hal/osal/rt/osal.h **** #endif
 576:../../../os/hal/osal/rt/osal.h **** 
 577:../../../os/hal/osal/rt/osal.h **** /**
 578:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:../../../os/hal/osal/rt/osal.h ****  */
 582:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:../../../os/hal/osal/rt/osal.h **** 
 585:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
  90               		.loc 2 585 0
  91 002c 0E94 0000 		call chSysTimerHandlerI
  92               	.LVL0:
  93               	.LBE17:
  94               	.LBE16:
 163:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 164:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   // TODO: reset status if required
 165:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 166:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   osalSysLockFromISR();
 167:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   osalOsTimerHandlerI();
 168:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   osalSysUnlockFromISR();
 169:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 170:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   OSAL_IRQ_EPILOGUE();
  95               		.loc 1 170 0
  96 0030 1092 0000 		sts __avr_in_isr,__zero_reg__
  97 0034 0E94 0000 		call chSchIsPreemptionRequired
  98               	.LVL1:
  99 0038 8111      		cpse r24,__zero_reg__
 100               		.loc 1 170 0 is_stmt 0 discriminator 1
 101 003a 0E94 0000 		call chSchDoReschedule
 102               	.LVL2:
 103               	.L1:
 104               	/* epilogue start */
 171:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** }
 105               		.loc 1 171 0 is_stmt 1
 106 003e FF91      		pop r31
 107 0040 EF91      		pop r30
 108 0042 BF91      		pop r27
 109 0044 AF91      		pop r26
 110 0046 9F91      		pop r25
 111 0048 8F91      		pop r24
 112 004a 7F91      		pop r23
 113 004c 6F91      		pop r22
 114 004e 5F91      		pop r21
 115 0050 4F91      		pop r20
 116 0052 3F91      		pop r19
 117 0054 2F91      		pop r18
 118 0056 0F90      		pop r0
 119 0058 0BBE      		out __RAMPZ__,r0
 120 005a 0F90      		pop r0
 121 005c 0FBE      		out __SREG__,r0
 122 005e 0F90      		pop r0
 123 0060 1F90      		pop r1
 124 0062 1895      		reti
 125               		.cfi_endproc
 126               	.LFE143:
 128               		.section	.text.st_lld_init,"ax",@progbits
 129               	.global	st_lld_init
 131               	st_lld_init:
 132               	.LFB144:
 172:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 173:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 174:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 175:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 176:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /* Driver exported functions.                                                */
 177:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 178:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 179:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** /**
 180:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @brief   Low level ST driver initialization.
 181:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  *
 182:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  * @notapi
 183:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****  */
 184:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** void st_lld_init(void) {
 133               		.loc 1 184 0
 134               		.cfi_startproc
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 0 */
 138               	.L__stack_usage = 0
 185:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 186:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)
 187:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 188:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   /*
 189:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****    * Periodic mode uses Timer 1 (16 bit).
 190:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****    */
 191:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 192:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   /* CTC mode, no clock source */
 193:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   TCCR1A     = 0;
 139               		.loc 1 193 0
 140 0000 1092 8000 		sts 128,__zero_reg__
 194:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   TCCR1B     = _BV(WGM12);
 141               		.loc 1 194 0
 142 0004 E1E8      		ldi r30,lo8(-127)
 143 0006 F0E0      		ldi r31,0
 144 0008 88E0      		ldi r24,lo8(8)
 145 000a 8083      		st Z,r24
 195:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c **** 
 196:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   /* start disabled */
 197:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   TCCR1C     = 0;
 146               		.loc 1 197 0
 147 000c 1092 8200 		sts 130,__zero_reg__
 198:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   OCR1A      = 0;
 148               		.loc 1 198 0
 149 0010 1092 8900 		sts 136+1,__zero_reg__
 150 0014 1092 8800 		sts 136,__zero_reg__
 199:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   TCNT1      = 0;
 151               		.loc 1 199 0
 152 0018 1092 8500 		sts 132+1,__zero_reg__
 153 001c 1092 8400 		sts 132,__zero_reg__
 200:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   TIFR_REG   = _BV(OCF1A);                                  /* Reset pending.   */
 154               		.loc 1 200 0
 155 0020 82E0      		ldi r24,lo8(2)
 156 0022 86BB      		out 0x16,r24
 201:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   TIMSK_REG  = 0;
 157               		.loc 1 201 0
 158 0024 1092 6F00 		sts 111,__zero_reg__
 202:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.c ****   TCCR1B     = PRESCALER;
 159               		.loc 1 202 0
 160 0028 85E0      		ldi r24,lo8(5)
 161 002a 8083      		st Z,r24
 162 002c 0895      		ret
 163               		.cfi_endproc
 164               	.LFE144:
 166               		.text
 167               	.Letext0:
 168               		.file 3 "/usr/lib/avr/include/stdint.h"
 169               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 170               		.file 5 "../../../os/rt/include/chsystypes.h"
 171               		.file 6 "../../../os/rt/include/chschd.h"
 172               		.file 7 "../../../os/common/ports/AVR/chcore.h"
 173               		.file 8 "../../../os/rt/include/chsem.h"
 174               		.file 9 "../../../os/rt/include/chmtx.h"
 175               		.file 10 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_st_lld.c
     /tmp/cc5S6Akn.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc5S6Akn.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc5S6Akn.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc5S6Akn.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc5S6Akn.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc5S6Akn.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc5S6Akn.s:14     .text.__vector_17:0000000000000000 __vector_17
     /tmp/cc5S6Akn.s:131    .text.st_lld_init:0000000000000000 st_lld_init

UNDEFINED SYMBOLS
__avr_in_isr
chSysTimerHandlerI
chSchIsPreemptionRequired
chSchDoReschedule

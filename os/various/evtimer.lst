   1               		.file	"evtimer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.tmrcb,"ax",@progbits
  13               	tmrcb:
  14               	.LFB114:
  15               		.file 1 "../../../os/various/evtimer.c"
   1:../../../os/various/evtimer.c **** /*
   2:../../../os/various/evtimer.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/various/evtimer.c **** 
   4:../../../os/various/evtimer.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/various/evtimer.c ****     you may not use this file except in compliance with the License.
   6:../../../os/various/evtimer.c ****     You may obtain a copy of the License at
   7:../../../os/various/evtimer.c **** 
   8:../../../os/various/evtimer.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/various/evtimer.c **** 
  10:../../../os/various/evtimer.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/various/evtimer.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/various/evtimer.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/various/evtimer.c ****     See the License for the specific language governing permissions and
  14:../../../os/various/evtimer.c ****     limitations under the License.
  15:../../../os/various/evtimer.c **** */
  16:../../../os/various/evtimer.c **** 
  17:../../../os/various/evtimer.c **** /**
  18:../../../os/various/evtimer.c ****  * @file    evtimer.c
  19:../../../os/various/evtimer.c ****  * @brief   Events Generator Timer code.
  20:../../../os/various/evtimer.c ****  *
  21:../../../os/various/evtimer.c ****  * @addtogroup event_timer
  22:../../../os/various/evtimer.c ****  * @{
  23:../../../os/various/evtimer.c ****  */
  24:../../../os/various/evtimer.c **** 
  25:../../../os/various/evtimer.c **** #include "ch.h"
  26:../../../os/various/evtimer.c **** #include "evtimer.h"
  27:../../../os/various/evtimer.c **** 
  28:../../../os/various/evtimer.c **** /*===========================================================================*/
  29:../../../os/various/evtimer.c **** /* Module local definitions.                                                 */
  30:../../../os/various/evtimer.c **** /*===========================================================================*/
  31:../../../os/various/evtimer.c **** 
  32:../../../os/various/evtimer.c **** /*===========================================================================*/
  33:../../../os/various/evtimer.c **** /* Module exported variables.                                                */
  34:../../../os/various/evtimer.c **** /*===========================================================================*/
  35:../../../os/various/evtimer.c **** 
  36:../../../os/various/evtimer.c **** /*===========================================================================*/
  37:../../../os/various/evtimer.c **** /* Module local types.                                                       */
  38:../../../os/various/evtimer.c **** /*===========================================================================*/
  39:../../../os/various/evtimer.c **** 
  40:../../../os/various/evtimer.c **** /*===========================================================================*/
  41:../../../os/various/evtimer.c **** /* Module local variables.                                                   */
  42:../../../os/various/evtimer.c **** /*===========================================================================*/
  43:../../../os/various/evtimer.c **** 
  44:../../../os/various/evtimer.c **** /*===========================================================================*/
  45:../../../os/various/evtimer.c **** /* Module local functions.                                                   */
  46:../../../os/various/evtimer.c **** /*===========================================================================*/
  47:../../../os/various/evtimer.c **** 
  48:../../../os/various/evtimer.c **** static void tmrcb(void *p) {
  16               		.loc 1 48 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 28, -3
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 29, -4
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 EC01      		movw r28,r24
  32               	.LVL1:
  33               	.LBB43:
  34               	.LBB44:
  35               		.file 2 "../../../os/rt/include/chevents.h"
   1:../../../os/rt/include/chevents.h **** /*
   2:../../../os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chevents.h **** 
   4:../../../os/rt/include/chevents.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chevents.h **** 
   6:../../../os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chevents.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chevents.h ****     (at your option) any later version.
  10:../../../os/rt/include/chevents.h **** 
  11:../../../os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chevents.h **** 
  16:../../../os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chevents.h **** */
  19:../../../os/rt/include/chevents.h **** /*
  20:../../../os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../../os/rt/include/chevents.h ****  */
  22:../../../os/rt/include/chevents.h **** 
  23:../../../os/rt/include/chevents.h **** /**
  24:../../../os/rt/include/chevents.h ****  * @file    chevents.h
  25:../../../os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:../../../os/rt/include/chevents.h ****  *
  27:../../../os/rt/include/chevents.h ****  * @addtogroup events
  28:../../../os/rt/include/chevents.h ****  * @{
  29:../../../os/rt/include/chevents.h ****  */
  30:../../../os/rt/include/chevents.h **** 
  31:../../../os/rt/include/chevents.h **** #ifndef CHEVENTS_H
  32:../../../os/rt/include/chevents.h **** #define CHEVENTS_H
  33:../../../os/rt/include/chevents.h **** 
  34:../../../os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:../../../os/rt/include/chevents.h **** 
  36:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  37:../../../os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  39:../../../os/rt/include/chevents.h **** 
  40:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  41:../../../os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  43:../../../os/rt/include/chevents.h **** 
  44:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  45:../../../os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  47:../../../os/rt/include/chevents.h **** 
  48:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  49:../../../os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  51:../../../os/rt/include/chevents.h **** 
  52:../../../os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  53:../../../os/rt/include/chevents.h **** 
  54:../../../os/rt/include/chevents.h **** /**
  55:../../../os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  56:../../../os/rt/include/chevents.h ****  */
  57:../../../os/rt/include/chevents.h **** struct event_listener {
  58:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief Next Event Listener
  59:../../../os/rt/include/chevents.h ****                                                     registered on the event
  60:../../../os/rt/include/chevents.h ****                                                     source.                 */
  61:../../../os/rt/include/chevents.h ****   thread_t              *listener;      /**< @brief Thread interested in the
  62:../../../os/rt/include/chevents.h ****                                                     event source.           */
  63:../../../os/rt/include/chevents.h ****   eventmask_t           events;         /**< @brief Events to be set in
  64:../../../os/rt/include/chevents.h ****                                                     the listening thread.   */
  65:../../../os/rt/include/chevents.h ****   eventflags_t          flags;          /**< @brief Flags added to the listener
  66:../../../os/rt/include/chevents.h ****                                                     by the event source.    */
  67:../../../os/rt/include/chevents.h ****   eventflags_t          wflags;         /**< @brief Flags that this listener
  68:../../../os/rt/include/chevents.h ****                                                     interested in.          */
  69:../../../os/rt/include/chevents.h **** };
  70:../../../os/rt/include/chevents.h **** 
  71:../../../os/rt/include/chevents.h **** /**
  72:../../../os/rt/include/chevents.h ****  * @brief   Event Source structure.
  73:../../../os/rt/include/chevents.h ****  */
  74:../../../os/rt/include/chevents.h **** typedef struct event_source {
  75:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief First Event Listener
  76:../../../os/rt/include/chevents.h ****                                                     registered on the Event
  77:../../../os/rt/include/chevents.h ****                                                     Source.                 */
  78:../../../os/rt/include/chevents.h **** } event_source_t;
  79:../../../os/rt/include/chevents.h **** 
  80:../../../os/rt/include/chevents.h **** /**
  81:../../../os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  82:../../../os/rt/include/chevents.h ****  */
  83:../../../os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  84:../../../os/rt/include/chevents.h **** 
  85:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  86:../../../os/rt/include/chevents.h **** /* Module macros.                                                            */
  87:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  88:../../../os/rt/include/chevents.h **** 
  89:../../../os/rt/include/chevents.h **** /**
  90:../../../os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  91:../../../os/rt/include/chevents.h ****  */
  92:../../../os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  93:../../../os/rt/include/chevents.h **** 
  94:../../../os/rt/include/chevents.h **** /**
  95:../../../os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  96:../../../os/rt/include/chevents.h ****  */
  97:../../../os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
  98:../../../os/rt/include/chevents.h **** 
  99:../../../os/rt/include/chevents.h **** /**
 100:../../../os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 101:../../../os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 102:../../../os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 103:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 104:../../../os/rt/include/chevents.h ****  */
 105:../../../os/rt/include/chevents.h **** #define _EVENTSOURCE_DATA(name) {(void *)(&name)}
 106:../../../os/rt/include/chevents.h **** 
 107:../../../os/rt/include/chevents.h **** /**
 108:../../../os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 109:../../../os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 110:../../../os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 111:../../../os/rt/include/chevents.h ****  *
 112:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 113:../../../os/rt/include/chevents.h ****  */
 114:../../../os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = _EVENTSOURCE_DATA(name)
 115:../../../os/rt/include/chevents.h **** 
 116:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 117:../../../os/rt/include/chevents.h **** /* External declarations.                                                    */
 118:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 119:../../../os/rt/include/chevents.h **** 
 120:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 121:../../../os/rt/include/chevents.h **** extern "C" {
 122:../../../os/rt/include/chevents.h **** #endif
 123:../../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 124:../../../os/rt/include/chevents.h ****                                   event_listener_t *elp,
 125:../../../os/rt/include/chevents.h ****                                   eventmask_t events,
 126:../../../os/rt/include/chevents.h ****                                   eventflags_t wflags);
 127:../../../os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 128:../../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 129:../../../os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 130:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 131:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 132:../../../os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 133:../../../os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 134:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 135:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 136:../../../os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 137:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 138:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 139:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 140:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 141:../../../os/rt/include/chevents.h **** #endif
 142:../../../os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 143:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time);
 144:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time);
 145:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time);
 146:../../../os/rt/include/chevents.h **** #endif
 147:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 148:../../../os/rt/include/chevents.h **** }
 149:../../../os/rt/include/chevents.h **** #endif
 150:../../../os/rt/include/chevents.h **** 
 151:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 152:../../../os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 153:../../../os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 154:../../../os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 155:../../../os/rt/include/chevents.h **** #endif
 156:../../../os/rt/include/chevents.h **** 
 157:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 158:../../../os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 159:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 160:../../../os/rt/include/chevents.h **** 
 161:../../../os/rt/include/chevents.h **** /**
 162:../../../os/rt/include/chevents.h ****  * @brief   Initializes an Event Source.
 163:../../../os/rt/include/chevents.h ****  * @note    This function can be invoked before the kernel is initialized
 164:../../../os/rt/include/chevents.h ****  *          because it just prepares a @p event_source_t structure.
 165:../../../os/rt/include/chevents.h ****  *
 166:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 167:../../../os/rt/include/chevents.h ****  *
 168:../../../os/rt/include/chevents.h ****  * @init
 169:../../../os/rt/include/chevents.h ****  */
 170:../../../os/rt/include/chevents.h **** static inline void chEvtObjectInit(event_source_t *esp) {
 171:../../../os/rt/include/chevents.h **** 
 172:../../../os/rt/include/chevents.h ****   esp->next = (event_listener_t *)esp;
 173:../../../os/rt/include/chevents.h **** }
 174:../../../os/rt/include/chevents.h **** 
 175:../../../os/rt/include/chevents.h **** /**
 176:../../../os/rt/include/chevents.h ****  * @brief   Registers an Event Listener on an Event Source.
 177:../../../os/rt/include/chevents.h ****  * @details Once a thread has registered as listener on an event source it
 178:../../../os/rt/include/chevents.h ****  *          will be notified of all events broadcasted there.
 179:../../../os/rt/include/chevents.h ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
 180:../../../os/rt/include/chevents.h ****  *          different threads.
 181:../../../os/rt/include/chevents.h ****  *
 182:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 183:../../../os/rt/include/chevents.h ****  * @param[out] elp      pointer to the @p event_listener_t structure
 184:../../../os/rt/include/chevents.h ****  * @param[in] events    the mask of events to be ORed to the thread when
 185:../../../os/rt/include/chevents.h ****  *                      the event source is broadcasted
 186:../../../os/rt/include/chevents.h ****  *
 187:../../../os/rt/include/chevents.h ****  * @api
 188:../../../os/rt/include/chevents.h ****  */
 189:../../../os/rt/include/chevents.h **** static inline void chEvtRegisterMask(event_source_t *esp,
 190:../../../os/rt/include/chevents.h ****                                      event_listener_t *elp,
 191:../../../os/rt/include/chevents.h ****                                      eventmask_t events) {
 192:../../../os/rt/include/chevents.h **** 
 193:../../../os/rt/include/chevents.h ****   chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 194:../../../os/rt/include/chevents.h **** }
 195:../../../os/rt/include/chevents.h **** 
 196:../../../os/rt/include/chevents.h **** /**
 197:../../../os/rt/include/chevents.h ****  * @brief   Registers an Event Listener on an Event Source.
 198:../../../os/rt/include/chevents.h ****  * @note    Multiple Event Listeners can use the same event identifier, the
 199:../../../os/rt/include/chevents.h ****  *          listener will share the callback function.
 200:../../../os/rt/include/chevents.h ****  *
 201:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the  @p event_source_t structure
 202:../../../os/rt/include/chevents.h ****  * @param[out] elp      pointer to the @p event_listener_t structure
 203:../../../os/rt/include/chevents.h ****  * @param[in] event     numeric identifier assigned to the Event Listener.
 204:../../../os/rt/include/chevents.h ****  *                      The value must range between zero and the size, in bit,
 205:../../../os/rt/include/chevents.h ****  *                      of the @p eventmask_t type minus one.
 206:../../../os/rt/include/chevents.h ****  *
 207:../../../os/rt/include/chevents.h ****  * @api
 208:../../../os/rt/include/chevents.h ****  */
 209:../../../os/rt/include/chevents.h **** static inline void chEvtRegister(event_source_t *esp,
 210:../../../os/rt/include/chevents.h ****                                  event_listener_t *elp,
 211:../../../os/rt/include/chevents.h ****                                  eventid_t event) {
 212:../../../os/rt/include/chevents.h **** 
 213:../../../os/rt/include/chevents.h ****   chEvtRegisterMask(esp, elp, EVENT_MASK(event));
 214:../../../os/rt/include/chevents.h **** }
 215:../../../os/rt/include/chevents.h **** 
 216:../../../os/rt/include/chevents.h **** /**
 217:../../../os/rt/include/chevents.h ****  * @brief   Verifies if there is at least one @p event_listener_t registered.
 218:../../../os/rt/include/chevents.h ****  *
 219:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 220:../../../os/rt/include/chevents.h ****  * @return              The event source status.
 221:../../../os/rt/include/chevents.h ****  *
 222:../../../os/rt/include/chevents.h ****  * @iclass
 223:../../../os/rt/include/chevents.h ****  */
 224:../../../os/rt/include/chevents.h **** static inline bool chEvtIsListeningI(event_source_t *esp) {
 225:../../../os/rt/include/chevents.h **** 
 226:../../../os/rt/include/chevents.h ****   return (bool)(esp != (event_source_t *)esp->next);
 227:../../../os/rt/include/chevents.h **** }
 228:../../../os/rt/include/chevents.h **** 
 229:../../../os/rt/include/chevents.h **** /**
 230:../../../os/rt/include/chevents.h ****  * @brief   Signals all the Event Listeners registered on the specified Event
 231:../../../os/rt/include/chevents.h ****  *          Source.
 232:../../../os/rt/include/chevents.h ****  *
 233:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 234:../../../os/rt/include/chevents.h ****  *
 235:../../../os/rt/include/chevents.h ****  * @api
 236:../../../os/rt/include/chevents.h ****  */
 237:../../../os/rt/include/chevents.h **** static inline void chEvtBroadcast(event_source_t *esp) {
 238:../../../os/rt/include/chevents.h **** 
 239:../../../os/rt/include/chevents.h ****   chEvtBroadcastFlags(esp, (eventflags_t)0);
 240:../../../os/rt/include/chevents.h **** }
 241:../../../os/rt/include/chevents.h **** 
 242:../../../os/rt/include/chevents.h **** /**
 243:../../../os/rt/include/chevents.h ****  * @brief   Signals all the Event Listeners registered on the specified Event
 244:../../../os/rt/include/chevents.h ****  *          Source.
 245:../../../os/rt/include/chevents.h ****  * @post    This function does not reschedule so a call to a rescheduling
 246:../../../os/rt/include/chevents.h ****  *          function must be performed before unlocking the kernel. Note that
 247:../../../os/rt/include/chevents.h ****  *          interrupt handlers always reschedule on exit so an explicit
 248:../../../os/rt/include/chevents.h ****  *          reschedule must not be performed in ISRs.
 249:../../../os/rt/include/chevents.h ****  *
 250:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 251:../../../os/rt/include/chevents.h ****  *
 252:../../../os/rt/include/chevents.h ****  * @iclass
 253:../../../os/rt/include/chevents.h ****  */
 254:../../../os/rt/include/chevents.h **** static inline void chEvtBroadcastI(event_source_t *esp) {
 255:../../../os/rt/include/chevents.h **** 
 256:../../../os/rt/include/chevents.h ****   chEvtBroadcastFlagsI(esp, (eventflags_t)0);
  36               		.loc 2 256 0
  37 0006 60E0      		ldi r22,0
  38 0008 0A96      		adiw r24,10
  39               	.LVL2:
  40 000a 0E94 0000 		call chEvtBroadcastFlagsI
  41               	.LVL3:
  42               	.LBE44:
  43               	.LBE43:
  49:../../../os/various/evtimer.c ****   event_timer_t *etp = p;
  50:../../../os/various/evtimer.c **** 
  51:../../../os/various/evtimer.c ****   chSysLockFromISR();
  52:../../../os/various/evtimer.c ****   chEvtBroadcastI(&etp->et_es);
  53:../../../os/various/evtimer.c ****   chVTDoSetI(&etp->et_vt, etp->et_interval, tmrcb, etp);
  44               		.loc 1 53 0
  45 000e 6C85      		ldd r22,Y+12
  46 0010 7D85      		ldd r23,Y+13
  47 0012 9E01      		movw r18,r28
  48 0014 40E0      		ldi r20,lo8(gs(tmrcb))
  49 0016 50E0      		ldi r21,hi8(gs(tmrcb))
  50 0018 CE01      		movw r24,r28
  51               	/* epilogue start */
  54:../../../os/various/evtimer.c ****   chSysUnlockFromISR();
  55:../../../os/various/evtimer.c **** }
  52               		.loc 1 55 0
  53 001a DF91      		pop r29
  54 001c CF91      		pop r28
  55               	.LVL4:
  53:../../../os/various/evtimer.c ****   chSysUnlockFromISR();
  56               		.loc 1 53 0
  57 001e 0C94 0000 		jmp chVTDoSetI
  58               	.LVL5:
  59               		.cfi_endproc
  60               	.LFE114:
  62               		.section	.text.evtObjectInit,"ax",@progbits
  63               	.global	evtObjectInit
  65               	evtObjectInit:
  66               	.LFB115:
  56:../../../os/various/evtimer.c **** 
  57:../../../os/various/evtimer.c **** /*===========================================================================*/
  58:../../../os/various/evtimer.c **** /* Module exported functions.                                                */
  59:../../../os/various/evtimer.c **** /*===========================================================================*/
  60:../../../os/various/evtimer.c **** 
  61:../../../os/various/evtimer.c **** /**
  62:../../../os/various/evtimer.c ****  * @brief Initializes an @p event_timer_t structure.
  63:../../../os/various/evtimer.c ****  *
  64:../../../os/various/evtimer.c ****  * @param[out] etp      the @p event_timer_t structure to be initialized
  65:../../../os/various/evtimer.c ****  * @param[in] time      the interval in system ticks
  66:../../../os/various/evtimer.c ****  */
  67:../../../os/various/evtimer.c **** void evtObjectInit(event_timer_t *etp, systime_t time) {
  67               		.loc 1 67 0
  68               		.cfi_startproc
  69               	.LVL6:
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  74 0000 FC01      		movw r30,r24
  75               	.LVL7:
  68:../../../os/various/evtimer.c **** 
  69:../../../os/various/evtimer.c ****   chEvtObjectInit(&etp->et_es);
  76               		.loc 1 69 0
  77 0002 0A96      		adiw r24,10
  78               	.LVL8:
  79               	.LBB45:
  80               	.LBB46:
 172:../../../os/rt/include/chevents.h **** }
  81               		.loc 2 172 0
  82 0004 9387      		std Z+11,r25
  83 0006 8287      		std Z+10,r24
  84               	.LVL9:
  85               	.LBE46:
  86               	.LBE45:
  87               	.LBB47:
  88               	.LBB48:
  89               		.file 3 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chvt.h **** 
   4:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chvt.h **** 
   6:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chvt.h ****     (at your option) any later version.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /**
  36:../../../os/rt/include/chvt.h ****  * @name    Special time constants
  37:../../../os/rt/include/chvt.h ****  * @{
  38:../../../os/rt/include/chvt.h ****  */
  39:../../../os/rt/include/chvt.h **** /**
  40:../../../os/rt/include/chvt.h ****  * @brief   Zero time specification for some functions with a timeout
  41:../../../os/rt/include/chvt.h ****  *          specification.
  42:../../../os/rt/include/chvt.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:../../../os/rt/include/chvt.h ****  *          see the specific function documentation.
  44:../../../os/rt/include/chvt.h ****  */
  45:../../../os/rt/include/chvt.h **** #define TIME_IMMEDIATE  ((systime_t)0)
  46:../../../os/rt/include/chvt.h **** 
  47:../../../os/rt/include/chvt.h **** /**
  48:../../../os/rt/include/chvt.h ****  * @brief   Infinite time specification for all functions with a timeout
  49:../../../os/rt/include/chvt.h ****  *          specification.
  50:../../../os/rt/include/chvt.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:../../../os/rt/include/chvt.h ****  *          see the specific function documentation.
  52:../../../os/rt/include/chvt.h ****  */
  53:../../../os/rt/include/chvt.h **** #define TIME_INFINITE   ((systime_t)-1)
  54:../../../os/rt/include/chvt.h **** 
  55:../../../os/rt/include/chvt.h **** /**
  56:../../../os/rt/include/chvt.h ****  * @brief   Maximum time constant.
  57:../../../os/rt/include/chvt.h ****  */
  58:../../../os/rt/include/chvt.h **** #define TIME_MAXIMUM    ((systime_t)-2)
  59:../../../os/rt/include/chvt.h **** /** @} */
  60:../../../os/rt/include/chvt.h **** 
  61:../../../os/rt/include/chvt.h **** /**
  62:../../../os/rt/include/chvt.h ****  * @brief   Maximum unsigned integer.
  63:../../../os/rt/include/chvt.h ****  */
  64:../../../os/rt/include/chvt.h **** #define __UINT_MAX      ((unsigned int)-1)
  65:../../../os/rt/include/chvt.h **** 
  66:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  68:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  69:../../../os/rt/include/chvt.h **** 
  70:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  71:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  72:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  73:../../../os/rt/include/chvt.h **** 
  74:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32)
  75:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16 or 32"
  76:../../../os/rt/include/chvt.h **** #endif
  77:../../../os/rt/include/chvt.h **** 
  78:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_FREQUENCY <= 0
  79:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be greater than zero"
  80:../../../os/rt/include/chvt.h **** #endif
  81:../../../os/rt/include/chvt.h **** 
  82:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  83:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  84:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  85:../../../os/rt/include/chvt.h **** #endif
  86:../../../os/rt/include/chvt.h **** 
  87:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  88:../../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  89:../../../os/rt/include/chvt.h **** #endif
  90:../../../os/rt/include/chvt.h **** 
  91:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  92:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  93:../../../os/rt/include/chvt.h **** #endif
  94:../../../os/rt/include/chvt.h **** 
  95:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  96:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  97:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  98:../../../os/rt/include/chvt.h **** 
  99:../../../os/rt/include/chvt.h **** /*===========================================================================*/
 100:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
 101:../../../os/rt/include/chvt.h **** /*===========================================================================*/
 102:../../../os/rt/include/chvt.h **** 
 103:../../../os/rt/include/chvt.h **** /**
 104:../../../os/rt/include/chvt.h ****  * @name    Fast time conversion utilities
 105:../../../os/rt/include/chvt.h ****  * @{
 106:../../../os/rt/include/chvt.h ****  */
 107:../../../os/rt/include/chvt.h **** /**
 108:../../../os/rt/include/chvt.h ****  * @brief   Seconds to system ticks.
 109:../../../os/rt/include/chvt.h ****  * @details Converts from seconds to system ticks number.
 110:../../../os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 111:../../../os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 112:../../../os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 113:../../../os/rt/include/chvt.h ****  *          converted.
 114:../../../os/rt/include/chvt.h ****  *
 115:../../../os/rt/include/chvt.h ****  * @param[in] sec       number of seconds
 116:../../../os/rt/include/chvt.h ****  * @return              The number of ticks.
 117:../../../os/rt/include/chvt.h ****  *
 118:../../../os/rt/include/chvt.h ****  * @api
 119:../../../os/rt/include/chvt.h ****  */
 120:../../../os/rt/include/chvt.h **** #define S2ST(sec)                                                           \
 121:../../../os/rt/include/chvt.h ****   ((systime_t)((uint32_t)(sec) * (uint32_t)CH_CFG_ST_FREQUENCY))
 122:../../../os/rt/include/chvt.h **** 
 123:../../../os/rt/include/chvt.h **** /**
 124:../../../os/rt/include/chvt.h ****  * @brief   Milliseconds to system ticks.
 125:../../../os/rt/include/chvt.h ****  * @details Converts from milliseconds to system ticks number.
 126:../../../os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 127:../../../os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 128:../../../os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 129:../../../os/rt/include/chvt.h ****  *          converted.
 130:../../../os/rt/include/chvt.h ****  *
 131:../../../os/rt/include/chvt.h ****  * @param[in] msec      number of milliseconds
 132:../../../os/rt/include/chvt.h ****  * @return              The number of ticks.
 133:../../../os/rt/include/chvt.h ****  *
 134:../../../os/rt/include/chvt.h ****  * @api
 135:../../../os/rt/include/chvt.h ****  */
 136:../../../os/rt/include/chvt.h **** #define MS2ST(msec)                                                         \
 137:../../../os/rt/include/chvt.h ****   ((systime_t)(((((uint32_t)(msec)) *                                       \
 138:../../../os/rt/include/chvt.h ****                  ((uint32_t)CH_CFG_ST_FREQUENCY)) + 999UL) / 1000UL))
 139:../../../os/rt/include/chvt.h **** 
 140:../../../os/rt/include/chvt.h **** /**
 141:../../../os/rt/include/chvt.h ****  * @brief   Microseconds to system ticks.
 142:../../../os/rt/include/chvt.h ****  * @details Converts from microseconds to system ticks number.
 143:../../../os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 144:../../../os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 145:../../../os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 146:../../../os/rt/include/chvt.h ****  *          converted.
 147:../../../os/rt/include/chvt.h ****  *
 148:../../../os/rt/include/chvt.h ****  * @param[in] usec      number of microseconds
 149:../../../os/rt/include/chvt.h ****  * @return              The number of ticks.
 150:../../../os/rt/include/chvt.h ****  *
 151:../../../os/rt/include/chvt.h ****  * @api
 152:../../../os/rt/include/chvt.h ****  */
 153:../../../os/rt/include/chvt.h **** #define US2ST(usec)                                                         \
 154:../../../os/rt/include/chvt.h ****   ((systime_t)(((((uint32_t)(usec)) *                                       \
 155:../../../os/rt/include/chvt.h ****                  ((uint32_t)CH_CFG_ST_FREQUENCY)) + 999999UL) / 1000000UL))
 156:../../../os/rt/include/chvt.h **** 
 157:../../../os/rt/include/chvt.h **** /**
 158:../../../os/rt/include/chvt.h ****  * @brief   System ticks to seconds.
 159:../../../os/rt/include/chvt.h ****  * @details Converts from system ticks number to seconds.
 160:../../../os/rt/include/chvt.h ****  * @note    The result is rounded up to the next second boundary.
 161:../../../os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 162:../../../os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 163:../../../os/rt/include/chvt.h ****  *          converted.
 164:../../../os/rt/include/chvt.h ****  *
 165:../../../os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 166:../../../os/rt/include/chvt.h ****  * @return              The number of seconds.
 167:../../../os/rt/include/chvt.h ****  *
 168:../../../os/rt/include/chvt.h ****  * @api
 169:../../../os/rt/include/chvt.h ****  */
 170:../../../os/rt/include/chvt.h **** #define ST2S(n) (((n) + CH_CFG_ST_FREQUENCY - 1UL) / CH_CFG_ST_FREQUENCY)
 171:../../../os/rt/include/chvt.h **** 
 172:../../../os/rt/include/chvt.h **** /**
 173:../../../os/rt/include/chvt.h ****  * @brief   System ticks to milliseconds.
 174:../../../os/rt/include/chvt.h ****  * @details Converts from system ticks number to milliseconds.
 175:../../../os/rt/include/chvt.h ****  * @note    The result is rounded up to the next millisecond boundary.
 176:../../../os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 177:../../../os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 178:../../../os/rt/include/chvt.h ****  *          converted.
 179:../../../os/rt/include/chvt.h ****  *
 180:../../../os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 181:../../../os/rt/include/chvt.h ****  * @return              The number of milliseconds.
 182:../../../os/rt/include/chvt.h ****  *
 183:../../../os/rt/include/chvt.h ****  * @api
 184:../../../os/rt/include/chvt.h ****  */
 185:../../../os/rt/include/chvt.h **** #define ST2MS(n) (((n) * 1000UL + CH_CFG_ST_FREQUENCY - 1UL) /              \
 186:../../../os/rt/include/chvt.h ****                   CH_CFG_ST_FREQUENCY)
 187:../../../os/rt/include/chvt.h **** 
 188:../../../os/rt/include/chvt.h **** /**
 189:../../../os/rt/include/chvt.h ****  * @brief   System ticks to microseconds.
 190:../../../os/rt/include/chvt.h ****  * @details Converts from system ticks number to microseconds.
 191:../../../os/rt/include/chvt.h ****  * @note    The result is rounded up to the next microsecond boundary.
 192:../../../os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 193:../../../os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 194:../../../os/rt/include/chvt.h ****  *          converted.
 195:../../../os/rt/include/chvt.h ****  *
 196:../../../os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 197:../../../os/rt/include/chvt.h ****  * @return              The number of microseconds.
 198:../../../os/rt/include/chvt.h ****  *
 199:../../../os/rt/include/chvt.h ****  * @api
 200:../../../os/rt/include/chvt.h ****  */
 201:../../../os/rt/include/chvt.h **** #define ST2US(n) (((n) * 1000000UL + CH_CFG_ST_FREQUENCY - 1UL) /           \
 202:../../../os/rt/include/chvt.h ****                   CH_CFG_ST_FREQUENCY)
 203:../../../os/rt/include/chvt.h **** /** @} */
 204:../../../os/rt/include/chvt.h **** 
 205:../../../os/rt/include/chvt.h **** /*===========================================================================*/
 206:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
 207:../../../os/rt/include/chvt.h **** /*===========================================================================*/
 208:../../../os/rt/include/chvt.h **** 
 209:../../../os/rt/include/chvt.h **** /*
 210:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
 211:../../../os/rt/include/chvt.h ****  */
 212:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
 213:../../../os/rt/include/chvt.h **** extern "C" {
 214:../../../os/rt/include/chvt.h **** #endif
 215:../../../os/rt/include/chvt.h ****   void _vt_init(void);
 216:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
 217:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
 218:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
 219:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
 220:../../../os/rt/include/chvt.h **** }
 221:../../../os/rt/include/chvt.h **** #endif
 222:../../../os/rt/include/chvt.h **** 
 223:../../../os/rt/include/chvt.h **** /*===========================================================================*/
 224:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
 225:../../../os/rt/include/chvt.h **** /*===========================================================================*/
 226:../../../os/rt/include/chvt.h **** 
 227:../../../os/rt/include/chvt.h **** /**
 228:../../../os/rt/include/chvt.h ****  * @name    Secure time conversion utilities
 229:../../../os/rt/include/chvt.h ****  * @{
 230:../../../os/rt/include/chvt.h ****  */
 231:../../../os/rt/include/chvt.h **** /**
 232:../../../os/rt/include/chvt.h ****  * @brief   Seconds to system ticks.
 233:../../../os/rt/include/chvt.h ****  * @details Converts from seconds to system ticks number.
 234:../../../os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 235:../../../os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 236:../../../os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 237:../../../os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 238:../../../os/rt/include/chvt.h ****  *
 239:../../../os/rt/include/chvt.h ****  * @param[in] sec       number of seconds
 240:../../../os/rt/include/chvt.h ****  * @return              The number of ticks.
 241:../../../os/rt/include/chvt.h ****  *
 242:../../../os/rt/include/chvt.h ****  * @api
 243:../../../os/rt/include/chvt.h ****  */
 244:../../../os/rt/include/chvt.h **** static inline systime_t LL_S2ST(unsigned int sec) {
 245:../../../os/rt/include/chvt.h ****   uint64_t ticks = (uint64_t)sec * (uint64_t)CH_CFG_ST_FREQUENCY;
 246:../../../os/rt/include/chvt.h **** 
 247:../../../os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 248:../../../os/rt/include/chvt.h **** 
 249:../../../os/rt/include/chvt.h ****   return (systime_t)ticks;
 250:../../../os/rt/include/chvt.h **** }
 251:../../../os/rt/include/chvt.h **** 
 252:../../../os/rt/include/chvt.h **** /**
 253:../../../os/rt/include/chvt.h ****  * @brief   Milliseconds to system ticks.
 254:../../../os/rt/include/chvt.h ****  * @details Converts from milliseconds to system ticks number.
 255:../../../os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 256:../../../os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 257:../../../os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 258:../../../os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 259:../../../os/rt/include/chvt.h ****  *
 260:../../../os/rt/include/chvt.h ****  * @param[in] msec      number of milliseconds
 261:../../../os/rt/include/chvt.h ****  * @return              The number of ticks.
 262:../../../os/rt/include/chvt.h ****  *
 263:../../../os/rt/include/chvt.h ****  * @api
 264:../../../os/rt/include/chvt.h ****  */
 265:../../../os/rt/include/chvt.h **** static inline systime_t LL_MS2ST(unsigned int msec) {
 266:../../../os/rt/include/chvt.h ****   uint64_t ticks = (((uint64_t)msec * (uint64_t)CH_CFG_ST_FREQUENCY) + 999ULL)
 267:../../../os/rt/include/chvt.h ****                    / 1000ULL;
 268:../../../os/rt/include/chvt.h **** 
 269:../../../os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 270:../../../os/rt/include/chvt.h **** 
 271:../../../os/rt/include/chvt.h ****   return (systime_t)ticks;
 272:../../../os/rt/include/chvt.h **** }
 273:../../../os/rt/include/chvt.h **** 
 274:../../../os/rt/include/chvt.h **** /**
 275:../../../os/rt/include/chvt.h ****  * @brief   Microseconds to system ticks.
 276:../../../os/rt/include/chvt.h ****  * @details Converts from microseconds to system ticks number.
 277:../../../os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 278:../../../os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 279:../../../os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 280:../../../os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 281:../../../os/rt/include/chvt.h ****  *
 282:../../../os/rt/include/chvt.h ****  * @param[in] usec      number of microseconds
 283:../../../os/rt/include/chvt.h ****  * @return              The number of ticks.
 284:../../../os/rt/include/chvt.h ****  *
 285:../../../os/rt/include/chvt.h ****  * @api
 286:../../../os/rt/include/chvt.h ****  */
 287:../../../os/rt/include/chvt.h **** static inline systime_t LL_US2ST(unsigned int usec) {
 288:../../../os/rt/include/chvt.h ****   uint64_t ticks = (((uint64_t)usec * (uint64_t)CH_CFG_ST_FREQUENCY) + 999999ULL)
 289:../../../os/rt/include/chvt.h ****                    / 1000000ULL;
 290:../../../os/rt/include/chvt.h **** 
 291:../../../os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 292:../../../os/rt/include/chvt.h **** 
 293:../../../os/rt/include/chvt.h ****   return (systime_t)ticks;
 294:../../../os/rt/include/chvt.h **** }
 295:../../../os/rt/include/chvt.h **** 
 296:../../../os/rt/include/chvt.h **** /**
 297:../../../os/rt/include/chvt.h ****  * @brief   System ticks to seconds.
 298:../../../os/rt/include/chvt.h ****  * @details Converts from system ticks number to seconds.
 299:../../../os/rt/include/chvt.h ****  * @note    The result is rounded up to the next second boundary.
 300:../../../os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 301:../../../os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 302:../../../os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 303:../../../os/rt/include/chvt.h ****  *
 304:../../../os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 305:../../../os/rt/include/chvt.h ****  * @return              The number of seconds.
 306:../../../os/rt/include/chvt.h ****  *
 307:../../../os/rt/include/chvt.h ****  * @api
 308:../../../os/rt/include/chvt.h ****  */
 309:../../../os/rt/include/chvt.h **** static inline unsigned int LL_ST2S(systime_t n) {
 310:../../../os/rt/include/chvt.h ****   uint64_t sec = ((uint64_t)n + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 311:../../../os/rt/include/chvt.h ****                  / (uint64_t)CH_CFG_ST_FREQUENCY;
 312:../../../os/rt/include/chvt.h **** 
 313:../../../os/rt/include/chvt.h ****   chDbgAssert(sec < (uint64_t)__UINT_MAX, "conversion overflow");
 314:../../../os/rt/include/chvt.h **** 
 315:../../../os/rt/include/chvt.h ****   return (unsigned int)sec;
 316:../../../os/rt/include/chvt.h **** }
 317:../../../os/rt/include/chvt.h **** 
 318:../../../os/rt/include/chvt.h **** /**
 319:../../../os/rt/include/chvt.h ****  * @brief   System ticks to milliseconds.
 320:../../../os/rt/include/chvt.h ****  * @details Converts from system ticks number to milliseconds.
 321:../../../os/rt/include/chvt.h ****  * @note    The result is rounded up to the next millisecond boundary.
 322:../../../os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 323:../../../os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 324:../../../os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 325:../../../os/rt/include/chvt.h ****  *
 326:../../../os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 327:../../../os/rt/include/chvt.h ****  * @return              The number of milliseconds.
 328:../../../os/rt/include/chvt.h ****  *
 329:../../../os/rt/include/chvt.h ****  * @api
 330:../../../os/rt/include/chvt.h ****  */
 331:../../../os/rt/include/chvt.h **** static inline unsigned int LL_ST2MS(systime_t n) {
 332:../../../os/rt/include/chvt.h ****   uint64_t msec = (((uint64_t)n * 1000ULL) + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 333:../../../os/rt/include/chvt.h ****                    / (uint64_t)CH_CFG_ST_FREQUENCY;
 334:../../../os/rt/include/chvt.h **** 
 335:../../../os/rt/include/chvt.h ****   chDbgAssert(msec < (uint64_t)__UINT_MAX, "conversion overflow");
 336:../../../os/rt/include/chvt.h **** 
 337:../../../os/rt/include/chvt.h ****   return (unsigned int)msec;
 338:../../../os/rt/include/chvt.h **** }
 339:../../../os/rt/include/chvt.h **** 
 340:../../../os/rt/include/chvt.h **** /**
 341:../../../os/rt/include/chvt.h ****  * @brief   System ticks to microseconds.
 342:../../../os/rt/include/chvt.h ****  * @details Converts from system ticks number to microseconds.
 343:../../../os/rt/include/chvt.h ****  * @note    The result is rounded up to the next microsecond boundary.
 344:../../../os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 345:../../../os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 346:../../../os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 347:../../../os/rt/include/chvt.h ****  *
 348:../../../os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 349:../../../os/rt/include/chvt.h ****  * @return              The number of microseconds.
 350:../../../os/rt/include/chvt.h ****  *
 351:../../../os/rt/include/chvt.h ****  * @api
 352:../../../os/rt/include/chvt.h ****  */
 353:../../../os/rt/include/chvt.h **** static inline unsigned int LL_ST2US(systime_t n) {
 354:../../../os/rt/include/chvt.h ****   uint64_t usec = (((uint64_t)n * 1000000ULL) + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 355:../../../os/rt/include/chvt.h ****                    / (uint64_t)CH_CFG_ST_FREQUENCY;
 356:../../../os/rt/include/chvt.h **** 
 357:../../../os/rt/include/chvt.h ****   chDbgAssert(usec < (uint64_t)__UINT_MAX, "conversion overflow");
 358:../../../os/rt/include/chvt.h **** 
 359:../../../os/rt/include/chvt.h ****   return (unsigned int)usec;
 360:../../../os/rt/include/chvt.h **** }
 361:../../../os/rt/include/chvt.h **** /** @} */
 362:../../../os/rt/include/chvt.h **** 
 363:../../../os/rt/include/chvt.h **** /**
 364:../../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
 365:../../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
 366:../../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
 367:../../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
 368:../../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
 369:../../../os/rt/include/chvt.h ****  *
 370:../../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 371:../../../os/rt/include/chvt.h ****  *
 372:../../../os/rt/include/chvt.h ****  * @init
 373:../../../os/rt/include/chvt.h ****  */
 374:../../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 375:../../../os/rt/include/chvt.h **** 
 376:../../../os/rt/include/chvt.h ****   vtp->func = NULL;
  90               		.loc 3 376 0
  91 0008 1782      		std Z+7,__zero_reg__
  92 000a 1682      		std Z+6,__zero_reg__
  93               	.LBE48:
  94               	.LBE47:
  70:../../../os/various/evtimer.c ****   chVTObjectInit(&etp->et_vt);
  71:../../../os/various/evtimer.c ****   etp->et_interval = time;
  95               		.loc 1 71 0
  96 000c 7587      		std Z+13,r23
  97 000e 6487      		std Z+12,r22
  98 0010 0895      		ret
  99               		.cfi_endproc
 100               	.LFE115:
 102               		.section	.text.evtStart,"ax",@progbits
 103               	.global	evtStart
 105               	evtStart:
 106               	.LFB116:
  72:../../../os/various/evtimer.c **** }
  73:../../../os/various/evtimer.c **** 
  74:../../../os/various/evtimer.c **** /**
  75:../../../os/various/evtimer.c ****  * @brief   Starts the timer
  76:../../../os/various/evtimer.c ****  * @details If the timer was already running then the function has no effect.
  77:../../../os/various/evtimer.c ****  *
  78:../../../os/various/evtimer.c ****  * @param[in] etp       pointer to an initialized @p event_timer_t structure.
  79:../../../os/various/evtimer.c ****  */
  80:../../../os/various/evtimer.c **** void evtStart(event_timer_t *etp) {
 107               		.loc 1 80 0
 108               		.cfi_startproc
 109               	.LVL10:
 110 0000 0F93      		push r16
 111               	.LCFI2:
 112               		.cfi_def_cfa_offset 4
 113               		.cfi_offset 16, -3
 114 0002 1F93      		push r17
 115               	.LCFI3:
 116               		.cfi_def_cfa_offset 5
 117               		.cfi_offset 17, -4
 118 0004 CF93      		push r28
 119               	.LCFI4:
 120               		.cfi_def_cfa_offset 6
 121               		.cfi_offset 28, -5
 122 0006 DF93      		push r29
 123               	.LCFI5:
 124               		.cfi_def_cfa_offset 7
 125               		.cfi_offset 29, -6
 126               	/* prologue: function */
 127               	/* frame size = 0 */
 128               	/* stack size = 4 */
 129               	.L__stack_usage = 4
 130 0008 EC01      		movw r28,r24
  81:../../../os/various/evtimer.c **** 
  82:../../../os/various/evtimer.c ****   chVTSet(&etp->et_vt, etp->et_interval, tmrcb, etp);
 131               		.loc 1 82 0
 132 000a 0C85      		ldd r16,Y+12
 133 000c 1D85      		ldd r17,Y+13
 134               	.LVL11:
 135               	.LBB62:
 136               	.LBB63:
 137               	.LBB64:
 138               	.LBB65:
 139               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 140               		.loc 4 437 0
 141               	/* #APP */
 142               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 143 000e F894      		cli
 144               	 ;  0 "" 2
 145               	.LVL12:
 146               	/* #NOAPP */
 147               	.LBE65:
 148               	.LBE64:
 149               	.LBE63:
 150               	.LBB66:
 151               	.LBB67:
 152               	.LBB68:
 153               	.LBB69:
 377:../../../os/rt/include/chvt.h **** }
 378:../../../os/rt/include/chvt.h **** 
 379:../../../os/rt/include/chvt.h **** /**
 380:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 381:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 382:../../../os/rt/include/chvt.h ****  *          invocation.
 383:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 384:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 385:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 386:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 387:../../../os/rt/include/chvt.h ****  *
 388:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 389:../../../os/rt/include/chvt.h ****  *
 390:../../../os/rt/include/chvt.h ****  * @xclass
 391:../../../os/rt/include/chvt.h ****  */
 392:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 393:../../../os/rt/include/chvt.h **** 
 394:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 395:../../../os/rt/include/chvt.h ****   return ch.vtlist.systime;
 396:../../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 397:../../../os/rt/include/chvt.h ****   return port_timer_get_time();
 398:../../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 399:../../../os/rt/include/chvt.h **** }
 400:../../../os/rt/include/chvt.h **** 
 401:../../../os/rt/include/chvt.h **** /**
 402:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 403:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 404:../../../os/rt/include/chvt.h ****  *          invocation.
 405:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 406:../../../os/rt/include/chvt.h ****  *
 407:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 408:../../../os/rt/include/chvt.h ****  *
 409:../../../os/rt/include/chvt.h ****  * @api
 410:../../../os/rt/include/chvt.h ****  */
 411:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 412:../../../os/rt/include/chvt.h ****   systime_t systime;
 413:../../../os/rt/include/chvt.h **** 
 414:../../../os/rt/include/chvt.h ****   chSysLock();
 415:../../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 416:../../../os/rt/include/chvt.h ****   chSysUnlock();
 417:../../../os/rt/include/chvt.h **** 
 418:../../../os/rt/include/chvt.h ****   return systime;
 419:../../../os/rt/include/chvt.h **** }
 420:../../../os/rt/include/chvt.h **** 
 421:../../../os/rt/include/chvt.h **** /**
 422:../../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 423:../../../os/rt/include/chvt.h ****  *
 424:../../../os/rt/include/chvt.h ****  * @param[in] start     start time
 425:../../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 426:../../../os/rt/include/chvt.h ****  *
 427:../../../os/rt/include/chvt.h ****  * @xclass
 428:../../../os/rt/include/chvt.h ****  */
 429:../../../os/rt/include/chvt.h **** static inline systime_t chVTTimeElapsedSinceX(systime_t start) {
 430:../../../os/rt/include/chvt.h **** 
 431:../../../os/rt/include/chvt.h ****   return chVTGetSystemTimeX() - start;
 432:../../../os/rt/include/chvt.h **** }
 433:../../../os/rt/include/chvt.h **** 
 434:../../../os/rt/include/chvt.h **** /**
 435:../../../os/rt/include/chvt.h ****  * @brief   Checks if the specified time is within the specified time window.
 436:../../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 437:../../../os/rt/include/chvt.h ****  *          whole time range is specified.
 438:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context.
 439:../../../os/rt/include/chvt.h ****  *
 440:../../../os/rt/include/chvt.h ****  * @param[in] time      the time to be verified
 441:../../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 442:../../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 443:../../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 444:../../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 445:../../../os/rt/include/chvt.h ****  *
 446:../../../os/rt/include/chvt.h ****  * @xclass
 447:../../../os/rt/include/chvt.h ****  */
 448:../../../os/rt/include/chvt.h **** static inline bool chVTIsTimeWithinX(systime_t time,
 449:../../../os/rt/include/chvt.h ****                                      systime_t start,
 450:../../../os/rt/include/chvt.h ****                                      systime_t end) {
 451:../../../os/rt/include/chvt.h **** 
 452:../../../os/rt/include/chvt.h ****   return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 453:../../../os/rt/include/chvt.h **** }
 454:../../../os/rt/include/chvt.h **** 
 455:../../../os/rt/include/chvt.h **** /**
 456:../../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 457:../../../os/rt/include/chvt.h ****  *          window.
 458:../../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 459:../../../os/rt/include/chvt.h ****  *          whole time range is specified.
 460:../../../os/rt/include/chvt.h ****  *
 461:../../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 462:../../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 463:../../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 464:../../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 465:../../../os/rt/include/chvt.h ****  *
 466:../../../os/rt/include/chvt.h ****  * @xclass
 467:../../../os/rt/include/chvt.h ****  */
 468:../../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 469:../../../os/rt/include/chvt.h **** 
 470:../../../os/rt/include/chvt.h ****   return chVTIsTimeWithinX(chVTGetSystemTimeX(), start, end);
 471:../../../os/rt/include/chvt.h **** }
 472:../../../os/rt/include/chvt.h **** 
 473:../../../os/rt/include/chvt.h **** /**
 474:../../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 475:../../../os/rt/include/chvt.h ****  *          window.
 476:../../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 477:../../../os/rt/include/chvt.h ****  *          whole time range is specified.
 478:../../../os/rt/include/chvt.h ****  *
 479:../../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 480:../../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 481:../../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 482:../../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 483:../../../os/rt/include/chvt.h ****  *
 484:../../../os/rt/include/chvt.h ****  * @api
 485:../../../os/rt/include/chvt.h ****  */
 486:../../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 487:../../../os/rt/include/chvt.h **** 
 488:../../../os/rt/include/chvt.h ****   return chVTIsTimeWithinX(chVTGetSystemTime(), start, end);
 489:../../../os/rt/include/chvt.h **** }
 490:../../../os/rt/include/chvt.h **** 
 491:../../../os/rt/include/chvt.h **** /**
 492:../../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 493:../../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 494:../../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 495:../../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 496:../../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 497:../../../os/rt/include/chvt.h ****  *
 498:../../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 499:../../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 500:../../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 501:../../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 502:../../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 503:../../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 504:../../../os/rt/include/chvt.h ****  *
 505:../../../os/rt/include/chvt.h ****  * @iclass
 506:../../../os/rt/include/chvt.h ****  */
 507:../../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(systime_t *timep) {
 508:../../../os/rt/include/chvt.h **** 
 509:../../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 510:../../../os/rt/include/chvt.h **** 
 511:../../../os/rt/include/chvt.h ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 512:../../../os/rt/include/chvt.h ****     return false;
 513:../../../os/rt/include/chvt.h ****   }
 514:../../../os/rt/include/chvt.h **** 
 515:../../../os/rt/include/chvt.h ****   if (timep != NULL) {
 516:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 517:../../../os/rt/include/chvt.h ****     *timep = ch.vtlist.next->delta;
 518:../../../os/rt/include/chvt.h **** #else
 519:../../../os/rt/include/chvt.h ****     *timep = ch.vtlist.lasttime + ch.vtlist.next->delta +
 520:../../../os/rt/include/chvt.h ****              CH_CFG_ST_TIMEDELTA - chVTGetSystemTimeX();
 521:../../../os/rt/include/chvt.h **** #endif
 522:../../../os/rt/include/chvt.h ****   }
 523:../../../os/rt/include/chvt.h **** 
 524:../../../os/rt/include/chvt.h ****   return true;
 525:../../../os/rt/include/chvt.h **** }
 526:../../../os/rt/include/chvt.h **** 
 527:../../../os/rt/include/chvt.h **** /**
 528:../../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 529:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 530:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 531:../../../os/rt/include/chvt.h ****  *
 532:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 533:../../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 534:../../../os/rt/include/chvt.h ****  *
 535:../../../os/rt/include/chvt.h ****  * @iclass
 536:../../../os/rt/include/chvt.h ****  */
 537:../../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
 538:../../../os/rt/include/chvt.h **** 
 539:../../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 540:../../../os/rt/include/chvt.h **** 
 541:../../../os/rt/include/chvt.h ****   return (bool)(vtp->func != NULL);
 542:../../../os/rt/include/chvt.h **** }
 543:../../../os/rt/include/chvt.h **** 
 544:../../../os/rt/include/chvt.h **** /**
 545:../../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 546:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 547:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 548:../../../os/rt/include/chvt.h ****  *
 549:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 550:../../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 551:../../../os/rt/include/chvt.h ****  *
 552:../../../os/rt/include/chvt.h ****  * @api
 553:../../../os/rt/include/chvt.h ****  */
 554:../../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(virtual_timer_t *vtp) {
 555:../../../os/rt/include/chvt.h ****   bool b;
 556:../../../os/rt/include/chvt.h **** 
 557:../../../os/rt/include/chvt.h ****   chSysLock();
 558:../../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 559:../../../os/rt/include/chvt.h ****   chSysUnlock();
 560:../../../os/rt/include/chvt.h **** 
 561:../../../os/rt/include/chvt.h ****   return b;
 562:../../../os/rt/include/chvt.h **** }
 563:../../../os/rt/include/chvt.h **** 
 564:../../../os/rt/include/chvt.h **** /**
 565:../../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 566:../../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 567:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 568:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 569:../../../os/rt/include/chvt.h ****  *
 570:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 571:../../../os/rt/include/chvt.h ****  *
 572:../../../os/rt/include/chvt.h ****  * @iclass
 573:../../../os/rt/include/chvt.h ****  */
 574:../../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 575:../../../os/rt/include/chvt.h **** 
 576:../../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 154               		.loc 3 576 0
 155 0010 8E81      		ldd r24,Y+6
 156 0012 9F81      		ldd r25,Y+7
 157               	.LVL13:
 158 0014 892B      		or r24,r25
 159 0016 01F0      		breq .L4
 577:../../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 160               		.loc 3 577 0
 161 0018 CE01      		movw r24,r28
 162 001a 0E94 0000 		call chVTDoResetI
 163               	.LVL14:
 164               	.L4:
 165               	.LBE69:
 166               	.LBE68:
 578:../../../os/rt/include/chvt.h ****   }
 579:../../../os/rt/include/chvt.h **** }
 580:../../../os/rt/include/chvt.h **** 
 581:../../../os/rt/include/chvt.h **** /**
 582:../../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 583:../../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 584:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 585:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 586:../../../os/rt/include/chvt.h ****  *
 587:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 588:../../../os/rt/include/chvt.h ****  *
 589:../../../os/rt/include/chvt.h ****  * @api
 590:../../../os/rt/include/chvt.h ****  */
 591:../../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 592:../../../os/rt/include/chvt.h **** 
 593:../../../os/rt/include/chvt.h ****   chSysLock();
 594:../../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 595:../../../os/rt/include/chvt.h ****   chSysUnlock();
 596:../../../os/rt/include/chvt.h **** }
 597:../../../os/rt/include/chvt.h **** 
 598:../../../os/rt/include/chvt.h **** /**
 599:../../../os/rt/include/chvt.h ****  * @brief   Enables a virtual timer.
 600:../../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 601:../../../os/rt/include/chvt.h ****  *          using the new parameters.
 602:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 603:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 604:../../../os/rt/include/chvt.h ****  *
 605:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 606:../../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 607:../../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 608:../../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 609:../../../os/rt/include/chvt.h ****  *                        normal time specification.
 610:../../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 611:../../../os/rt/include/chvt.h ****  *                      .
 612:../../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 613:../../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 614:../../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 615:../../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 616:../../../os/rt/include/chvt.h ****  *                      function
 617:../../../os/rt/include/chvt.h ****  *
 618:../../../os/rt/include/chvt.h ****  * @iclass
 619:../../../os/rt/include/chvt.h ****  */
 620:../../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
 621:../../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 622:../../../os/rt/include/chvt.h **** 
 623:../../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 624:../../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 167               		.loc 3 624 0
 168 001e 9E01      		movw r18,r28
 169 0020 40E0      		ldi r20,lo8(gs(tmrcb))
 170 0022 50E0      		ldi r21,hi8(gs(tmrcb))
 171 0024 B801      		movw r22,r16
 172 0026 CE01      		movw r24,r28
 173 0028 0E94 0000 		call chVTDoSetI
 174               	.LVL15:
 175               	.LBE67:
 176               	.LBE66:
 177               	.LBB70:
 178               	.LBB71:
 179               	.LBB72:
 180               	.LBB73:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 181               		.loc 4 447 0
 182               	/* #APP */
 183               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 184 002c 7894      		sei
 185               	 ;  0 "" 2
 186               	.LVL16:
 187               	/* epilogue start */
 188               	/* #NOAPP */
 189               	.LBE73:
 190               	.LBE72:
 191               	.LBE71:
 192               	.LBE70:
 193               	.LBE62:
  83:../../../os/various/evtimer.c **** }
 194               		.loc 1 83 0
 195 002e DF91      		pop r29
 196 0030 CF91      		pop r28
 197               	.LVL17:
 198 0032 1F91      		pop r17
 199 0034 0F91      		pop r16
 200 0036 0895      		ret
 201               		.cfi_endproc
 202               	.LFE116:
 204               		.text
 205               	.Letext0:
 206               		.file 5 "/usr/lib/avr/include/stdint.h"
 207               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 208               		.file 7 "../../../os/rt/include/chsystypes.h"
 209               		.file 8 "../../../os/rt/include/chschd.h"
 210               		.file 9 "../../../os/rt/include/chsem.h"
 211               		.file 10 "../../../os/rt/include/chmtx.h"
 212               		.file 11 "../../../os/various/evtimer.h"
 213               		.file 12 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 evtimer.c
     /tmp/ccLU0qbp.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLU0qbp.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLU0qbp.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLU0qbp.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccLU0qbp.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLU0qbp.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLU0qbp.s:13     .text.tmrcb:0000000000000000 tmrcb
     /tmp/ccLU0qbp.s:65     .text.evtObjectInit:0000000000000000 evtObjectInit
     /tmp/ccLU0qbp.s:105    .text.evtStart:0000000000000000 evtStart

UNDEFINED SYMBOLS
chEvtBroadcastFlagsI
chVTDoSetI
chVTDoResetI

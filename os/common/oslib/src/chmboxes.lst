   1               		.file	"chmboxes.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.chMBObjectInit,"ax",@progbits
  12               	.global	chMBObjectInit
  14               	chMBObjectInit:
  15               	.LFB113:
  16               		.file 1 "../../../os/common/oslib/src/chmboxes.c"
   1:../../../os/common/oslib/src/chmboxes.c **** /*
   2:../../../os/common/oslib/src/chmboxes.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/oslib/src/chmboxes.c **** 
   4:../../../os/common/oslib/src/chmboxes.c ****     This file is part of ChibiOS.
   5:../../../os/common/oslib/src/chmboxes.c **** 
   6:../../../os/common/oslib/src/chmboxes.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/oslib/src/chmboxes.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/oslib/src/chmboxes.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/oslib/src/chmboxes.c ****     (at your option) any later version.
  10:../../../os/common/oslib/src/chmboxes.c **** 
  11:../../../os/common/oslib/src/chmboxes.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/oslib/src/chmboxes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/oslib/src/chmboxes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/oslib/src/chmboxes.c ****     GNU General Public License for more details.
  15:../../../os/common/oslib/src/chmboxes.c **** 
  16:../../../os/common/oslib/src/chmboxes.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/oslib/src/chmboxes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/oslib/src/chmboxes.c **** */
  19:../../../os/common/oslib/src/chmboxes.c **** 
  20:../../../os/common/oslib/src/chmboxes.c **** /**
  21:../../../os/common/oslib/src/chmboxes.c ****  * @file    chmboxes.c
  22:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Mailboxes code.
  23:../../../os/common/oslib/src/chmboxes.c ****  *
  24:../../../os/common/oslib/src/chmboxes.c ****  * @addtogroup mailboxes
  25:../../../os/common/oslib/src/chmboxes.c ****  * @details Asynchronous messages.
  26:../../../os/common/oslib/src/chmboxes.c ****  *          <h2>Operation mode</h2>
  27:../../../os/common/oslib/src/chmboxes.c ****  *          A mailbox is an asynchronous communication mechanism.<br>
  28:../../../os/common/oslib/src/chmboxes.c ****  *          Operations defined for mailboxes:
  29:../../../os/common/oslib/src/chmboxes.c ****  *          - <b>Post</b>: Posts a message on the mailbox in FIFO order.
  30:../../../os/common/oslib/src/chmboxes.c ****  *          - <b>Post Ahead</b>: Posts a message on the mailbox with urgent
  31:../../../os/common/oslib/src/chmboxes.c ****  *            priority.
  32:../../../os/common/oslib/src/chmboxes.c ****  *          - <b>Fetch</b>: A message is fetched from the mailbox and removed
  33:../../../os/common/oslib/src/chmboxes.c ****  *            from the queue.
  34:../../../os/common/oslib/src/chmboxes.c ****  *          - <b>Reset</b>: The mailbox is emptied and all the stored messages
  35:../../../os/common/oslib/src/chmboxes.c ****  *            are lost.
  36:../../../os/common/oslib/src/chmboxes.c ****  *          .
  37:../../../os/common/oslib/src/chmboxes.c ****  *          A message is a variable of type msg_t that is guaranteed to have
  38:../../../os/common/oslib/src/chmboxes.c ****  *          the same size of and be compatible with (data) pointers (anyway an
  39:../../../os/common/oslib/src/chmboxes.c ****  *          explicit cast is needed).
  40:../../../os/common/oslib/src/chmboxes.c ****  *          If larger messages need to be exchanged then a pointer to a
  41:../../../os/common/oslib/src/chmboxes.c ****  *          structure can be posted in the mailbox but the posting side has
  42:../../../os/common/oslib/src/chmboxes.c ****  *          no predefined way to know when the message has been processed. A
  43:../../../os/common/oslib/src/chmboxes.c ****  *          possible approach is to allocate memory (from a memory pool for
  44:../../../os/common/oslib/src/chmboxes.c ****  *          example) from the posting side and free it on the fetching side.
  45:../../../os/common/oslib/src/chmboxes.c ****  *          Another approach is to set a "done" flag into the structure pointed
  46:../../../os/common/oslib/src/chmboxes.c ****  *          by the message.
  47:../../../os/common/oslib/src/chmboxes.c ****  * @pre     In order to use the mailboxes APIs the @p CH_CFG_USE_MAILBOXES
  48:../../../os/common/oslib/src/chmboxes.c ****  *          option must be enabled in @p chconf.h.
  49:../../../os/common/oslib/src/chmboxes.c ****  * @note    Compatible with RT and NIL.
  50:../../../os/common/oslib/src/chmboxes.c ****  * @{
  51:../../../os/common/oslib/src/chmboxes.c ****  */
  52:../../../os/common/oslib/src/chmboxes.c **** 
  53:../../../os/common/oslib/src/chmboxes.c **** #include "ch.h"
  54:../../../os/common/oslib/src/chmboxes.c **** 
  55:../../../os/common/oslib/src/chmboxes.c **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  56:../../../os/common/oslib/src/chmboxes.c **** 
  57:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  58:../../../os/common/oslib/src/chmboxes.c **** /* Module exported variables.                                                */
  59:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  60:../../../os/common/oslib/src/chmboxes.c **** 
  61:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  62:../../../os/common/oslib/src/chmboxes.c **** /* Module local types.                                                       */
  63:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  64:../../../os/common/oslib/src/chmboxes.c **** 
  65:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  66:../../../os/common/oslib/src/chmboxes.c **** /* Module local variables.                                                   */
  67:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  68:../../../os/common/oslib/src/chmboxes.c **** 
  69:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  70:../../../os/common/oslib/src/chmboxes.c **** /* Module local functions.                                                   */
  71:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  72:../../../os/common/oslib/src/chmboxes.c **** 
  73:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  74:../../../os/common/oslib/src/chmboxes.c **** /* Module exported functions.                                                */
  75:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  76:../../../os/common/oslib/src/chmboxes.c **** 
  77:../../../os/common/oslib/src/chmboxes.c **** /**
  78:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Initializes a @p mailbox_t object.
  79:../../../os/common/oslib/src/chmboxes.c ****  *
  80:../../../os/common/oslib/src/chmboxes.c ****  * @param[out] mbp      the pointer to the @p mailbox_t structure to be
  81:../../../os/common/oslib/src/chmboxes.c ****  *                      initialized
  82:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
  83:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] n         number of elements in the buffer array
  84:../../../os/common/oslib/src/chmboxes.c ****  *
  85:../../../os/common/oslib/src/chmboxes.c ****  * @init
  86:../../../os/common/oslib/src/chmboxes.c ****  */
  87:../../../os/common/oslib/src/chmboxes.c **** void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {
  17               		.loc 1 87 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24 0000 FC01      		movw r30,r24
  88:../../../os/common/oslib/src/chmboxes.c **** 
  89:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));
  90:../../../os/common/oslib/src/chmboxes.c **** 
  91:../../../os/common/oslib/src/chmboxes.c ****   mbp->buffer = buf;
  25               		.loc 1 91 0
  26 0002 7183      		std Z+1,r23
  27 0004 6083      		st Z,r22
  92:../../../os/common/oslib/src/chmboxes.c ****   mbp->rdptr  = buf;
  28               		.loc 1 92 0
  29 0006 7783      		std Z+7,r23
  30 0008 6683      		std Z+6,r22
  93:../../../os/common/oslib/src/chmboxes.c ****   mbp->wrptr  = buf;
  31               		.loc 1 93 0
  32 000a 7583      		std Z+5,r23
  33 000c 6483      		std Z+4,r22
  94:../../../os/common/oslib/src/chmboxes.c ****   mbp->top    = &buf[n];
  34               		.loc 1 94 0
  35 000e 440F      		lsl r20
  36 0010 550B      		sbc r21,r21
  37               	.LVL1:
  38 0012 640F      		add r22,r20
  39 0014 751F      		adc r23,r21
  40               	.LVL2:
  41 0016 7383      		std Z+3,r23
  42 0018 6283      		std Z+2,r22
  95:../../../os/common/oslib/src/chmboxes.c ****   mbp->cnt    = (cnt_t)0;
  43               		.loc 1 95 0
  44 001a 1086      		std Z+8,__zero_reg__
  96:../../../os/common/oslib/src/chmboxes.c ****   mbp->reset  = false;
  45               		.loc 1 96 0
  46 001c 1186      		std Z+9,__zero_reg__
  97:../../../os/common/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qw);
  47               		.loc 1 97 0
  48 001e 0A96      		adiw r24,10
  49               	.LVL3:
  50               	.LBB82:
  51               	.LBB83:
  52               	.LBB84:
  53               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:../../../os/rt/include/chschd.h **** #endif
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:../../../os/rt/include/chschd.h **** #endif
 124:../../../os/rt/include/chschd.h **** 
 125:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:../../../os/rt/include/chschd.h **** #endif
 128:../../../os/rt/include/chschd.h **** 
 129:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 130:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 132:../../../os/rt/include/chschd.h **** 
 133:../../../os/rt/include/chschd.h **** /**
 134:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:../../../os/rt/include/chschd.h ****  */
 136:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 137:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:../../../os/rt/include/chschd.h **** };
 139:../../../os/rt/include/chschd.h **** 
 140:../../../os/rt/include/chschd.h **** /**
 141:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:../../../os/rt/include/chschd.h ****  */
 143:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 144:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:../../../os/rt/include/chschd.h **** };
 147:../../../os/rt/include/chschd.h **** 
 148:../../../os/rt/include/chschd.h **** /**
 149:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:../../../os/rt/include/chschd.h ****  */
 154:../../../os/rt/include/chschd.h **** struct ch_thread {
 155:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:../../../os/rt/include/chschd.h **** #endif
 162:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:../../../os/rt/include/chschd.h ****   /**
 165:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:../../../os/rt/include/chschd.h ****    */
 167:../../../os/rt/include/chschd.h ****   const char            *name;
 168:../../../os/rt/include/chschd.h **** #endif
 169:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:../../../os/rt/include/chschd.h ****   /**
 172:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 175:../../../os/rt/include/chschd.h ****    */
 176:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:../../../os/rt/include/chschd.h **** #endif
 178:../../../os/rt/include/chschd.h ****   /**
 179:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:../../../os/rt/include/chschd.h ****    */
 181:../../../os/rt/include/chschd.h ****   tstate_t              state;
 182:../../../os/rt/include/chschd.h ****   /**
 183:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:../../../os/rt/include/chschd.h ****    */
 185:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 186:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:../../../os/rt/include/chschd.h ****    */
 190:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 191:../../../os/rt/include/chschd.h **** #endif
 192:../../../os/rt/include/chschd.h ****   /**
 193:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:../../../os/rt/include/chschd.h ****    */
 195:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:../../../os/rt/include/chschd.h ****   tslices_t             preempt;
 197:../../../os/rt/include/chschd.h **** #endif
 198:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:../../../os/rt/include/chschd.h ****   /**
 200:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:../../../os/rt/include/chschd.h ****    */
 203:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 204:../../../os/rt/include/chschd.h **** #endif
 205:../../../os/rt/include/chschd.h ****   /**
 206:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:../../../os/rt/include/chschd.h ****    */
 210:../../../os/rt/include/chschd.h ****   union {
 211:../../../os/rt/include/chschd.h ****     /**
 212:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:../../../os/rt/include/chschd.h ****      */
 217:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:../../../os/rt/include/chschd.h ****     /**
 219:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:../../../os/rt/include/chschd.h ****      *          this thread.
 223:../../../os/rt/include/chschd.h ****      */
 224:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 225:../../../os/rt/include/chschd.h ****     /**
 226:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:../../../os/rt/include/chschd.h ****      *          states.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 232:../../../os/rt/include/chschd.h ****     /**
 233:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:../../../os/rt/include/chschd.h ****      *          state.
 237:../../../os/rt/include/chschd.h ****      */
 238:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:../../../os/rt/include/chschd.h ****     /**
 241:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:../../../os/rt/include/chschd.h ****      */
 243:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:../../../os/rt/include/chschd.h **** #endif
 245:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:../../../os/rt/include/chschd.h ****     /**
 247:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:../../../os/rt/include/chschd.h ****      *          state.
 251:../../../os/rt/include/chschd.h ****      */
 252:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:../../../os/rt/include/chschd.h **** #endif
 254:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:../../../os/rt/include/chschd.h ****     /**
 256:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:../../../os/rt/include/chschd.h ****      *          state.
 260:../../../os/rt/include/chschd.h ****      */
 261:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:../../../os/rt/include/chschd.h **** #endif
 263:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:../../../os/rt/include/chschd.h ****     /**
 265:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:../../../os/rt/include/chschd.h ****      */
 269:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:../../../os/rt/include/chschd.h **** #endif
 271:../../../os/rt/include/chschd.h ****   }                     u;
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:../../../os/rt/include/chschd.h ****    */
 282:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:../../../os/rt/include/chschd.h **** #endif
 284:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:../../../os/rt/include/chschd.h ****   /**
 286:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:../../../os/rt/include/chschd.h ****    */
 288:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 289:../../../os/rt/include/chschd.h **** #endif
 290:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:../../../os/rt/include/chschd.h ****    */
 295:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:../../../os/rt/include/chschd.h ****   /**
 297:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:../../../os/rt/include/chschd.h ****    */
 299:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 300:../../../os/rt/include/chschd.h **** #endif
 301:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:../../../os/rt/include/chschd.h ****   /**
 304:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:../../../os/rt/include/chschd.h ****    */
 306:../../../os/rt/include/chschd.h ****   void                  *mpool;
 307:../../../os/rt/include/chschd.h **** #endif
 308:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:../../../os/rt/include/chschd.h ****   /**
 310:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:../../../os/rt/include/chschd.h ****    */
 312:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:../../../os/rt/include/chschd.h **** #endif
 314:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:../../../os/rt/include/chschd.h **** #endif
 318:../../../os/rt/include/chschd.h **** };
 319:../../../os/rt/include/chschd.h **** 
 320:../../../os/rt/include/chschd.h **** /**
 321:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:../../../os/rt/include/chschd.h ****  *
 323:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:../../../os/rt/include/chschd.h ****  */
 325:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 331:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 333:../../../os/rt/include/chschd.h **** };
 334:../../../os/rt/include/chschd.h **** 
 335:../../../os/rt/include/chschd.h **** /**
 336:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:../../../os/rt/include/chschd.h ****  */
 341:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:../../../os/rt/include/chschd.h ****                                                 list.                       */
 344:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:../../../os/rt/include/chschd.h ****                                                 list.                       */
 346:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:../../../os/rt/include/chschd.h **** #endif
 350:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:../../../os/rt/include/chschd.h ****   /**
 352:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:../../../os/rt/include/chschd.h ****    */
 354:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 356:../../../os/rt/include/chschd.h **** #endif
 357:../../../os/rt/include/chschd.h **** };
 358:../../../os/rt/include/chschd.h **** 
 359:../../../os/rt/include/chschd.h **** /**
 360:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:../../../os/rt/include/chschd.h ****  */
 362:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 363:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 368:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:../../../os/rt/include/chschd.h **** #endif
 372:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 375:../../../os/rt/include/chschd.h **** };
 376:../../../os/rt/include/chschd.h **** 
 377:../../../os/rt/include/chschd.h **** /**
 378:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:../../../os/rt/include/chschd.h ****  */
 380:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 381:../../../os/rt/include/chschd.h ****   /**
 382:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:../../../os/rt/include/chschd.h ****    */
 388:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:../../../os/rt/include/chschd.h ****   /**
 391:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:../../../os/rt/include/chschd.h ****    */
 393:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:../../../os/rt/include/chschd.h ****   /**
 395:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:../../../os/rt/include/chschd.h ****    */
 397:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:../../../os/rt/include/chschd.h **** #endif
 399:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:../../../os/rt/include/chschd.h ****   /**
 401:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:../../../os/rt/include/chschd.h ****    */
 403:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:../../../os/rt/include/chschd.h **** #endif
 405:../../../os/rt/include/chschd.h **** };
 406:../../../os/rt/include/chschd.h **** 
 407:../../../os/rt/include/chschd.h **** /**
 408:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 409:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:../../../os/rt/include/chschd.h ****  *          stacks.
 411:../../../os/rt/include/chschd.h ****  */
 412:../../../os/rt/include/chschd.h **** struct ch_system {
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:../../../os/rt/include/chschd.h ****   /**
 418:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:../../../os/rt/include/chschd.h ****    */
 420:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:../../../os/rt/include/chschd.h ****   /**
 422:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 423:../../../os/rt/include/chschd.h ****    */
 424:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:../../../os/rt/include/chschd.h ****   /**
 426:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:../../../os/rt/include/chschd.h ****    */
 428:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 429:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:../../../os/rt/include/chschd.h ****   /**
 431:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:../../../os/rt/include/chschd.h ****    */
 433:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:../../../os/rt/include/chschd.h **** #endif
 435:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:../../../os/rt/include/chschd.h ****   /**
 437:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:../../../os/rt/include/chschd.h ****    */
 439:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:../../../os/rt/include/chschd.h **** #endif
 441:../../../os/rt/include/chschd.h **** };
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 444:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 446:../../../os/rt/include/chschd.h **** 
 447:../../../os/rt/include/chschd.h **** /**
 448:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:../../../os/rt/include/chschd.h ****  *
 450:../../../os/rt/include/chschd.h ****  * @notapi
 451:../../../os/rt/include/chschd.h ****  */
 452:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** /**
 455:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:../../../os/rt/include/chschd.h ****  */
 459:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:../../../os/rt/include/chschd.h **** 
 461:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 462:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 464:../../../os/rt/include/chschd.h **** 
 465:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 467:../../../os/rt/include/chschd.h **** #endif
 468:../../../os/rt/include/chschd.h **** 
 469:../../../os/rt/include/chschd.h **** /*
 470:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 471:../../../os/rt/include/chschd.h ****  */
 472:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 473:../../../os/rt/include/chschd.h **** extern "C" {
 474:../../../os/rt/include/chschd.h **** #endif
 475:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 496:../../../os/rt/include/chschd.h **** }
 497:../../../os/rt/include/chschd.h **** #endif
 498:../../../os/rt/include/chschd.h **** 
 499:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 500:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 502:../../../os/rt/include/chschd.h **** 
 503:../../../os/rt/include/chschd.h **** /**
 504:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:../../../os/rt/include/chschd.h ****  *
 506:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:../../../os/rt/include/chschd.h ****  *
 508:../../../os/rt/include/chschd.h ****  * @notapi
 509:../../../os/rt/include/chschd.h ****  */
 510:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:../../../os/rt/include/chschd.h **** 
 512:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:../../../os/rt/include/chschd.h **** }
 514:../../../os/rt/include/chschd.h **** 
 515:../../../os/rt/include/chschd.h **** /**
 516:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:../../../os/rt/include/chschd.h ****  *
 518:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 520:../../../os/rt/include/chschd.h ****  *
 521:../../../os/rt/include/chschd.h ****  * @notapi
 522:../../../os/rt/include/chschd.h ****  */
 523:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:../../../os/rt/include/chschd.h **** 
 525:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:../../../os/rt/include/chschd.h **** }
 527:../../../os/rt/include/chschd.h **** 
 528:../../../os/rt/include/chschd.h **** /**
 529:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:../../../os/rt/include/chschd.h ****  *
 531:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 533:../../../os/rt/include/chschd.h ****  *
 534:../../../os/rt/include/chschd.h ****  * @notapi
 535:../../../os/rt/include/chschd.h ****  */
 536:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:../../../os/rt/include/chschd.h **** 
 538:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:../../../os/rt/include/chschd.h **** }
 540:../../../os/rt/include/chschd.h **** 
 541:../../../os/rt/include/chschd.h **** /**
 542:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:../../../os/rt/include/chschd.h ****  *
 544:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @notapi
 547:../../../os/rt/include/chschd.h ****  */
 548:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:../../../os/rt/include/chschd.h **** 
 550:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  54               		.loc 2 550 0
  55 0020 9387      		std Z+11,r25
  56 0022 8287      		std Z+10,r24
 551:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  57               		.loc 2 551 0
  58 0024 9587      		std Z+13,r25
  59 0026 8487      		std Z+12,r24
  60               	.LVL4:
  61               	.LBE84:
  62               	.LBE83:
  63               	.LBE82:
  98:../../../os/common/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qr);
  64               		.loc 1 98 0
  65 0028 0496      		adiw r24,4
  66               	.LVL5:
  67               	.LBB85:
  68               	.LBB86:
  69               	.LBB87:
 550:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  70               		.loc 2 550 0
  71 002a 9787      		std Z+15,r25
  72 002c 8687      		std Z+14,r24
  73               		.loc 2 551 0
  74 002e 918B      		std Z+17,r25
  75 0030 808B      		std Z+16,r24
  76               	.LVL6:
  77 0032 0895      		ret
  78               	.LBE87:
  79               	.LBE86:
  80               	.LBE85:
  81               		.cfi_endproc
  82               	.LFE113:
  84               		.section	.text.chMBResetI,"ax",@progbits
  85               	.global	chMBResetI
  87               	chMBResetI:
  88               	.LFB115:
  99:../../../os/common/oslib/src/chmboxes.c **** }
 100:../../../os/common/oslib/src/chmboxes.c **** 
 101:../../../os/common/oslib/src/chmboxes.c **** /**
 102:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 103:../../../os/common/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 104:../../../os/common/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 105:../../../os/common/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 106:../../../os/common/oslib/src/chmboxes.c ****  *          return @p MSG reset until the mailbox is enabled again using
 107:../../../os/common/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 108:../../../os/common/oslib/src/chmboxes.c ****  *
 109:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 110:../../../os/common/oslib/src/chmboxes.c ****  *
 111:../../../os/common/oslib/src/chmboxes.c ****  * @api
 112:../../../os/common/oslib/src/chmboxes.c ****  */
 113:../../../os/common/oslib/src/chmboxes.c **** void chMBReset(mailbox_t *mbp) {
 114:../../../os/common/oslib/src/chmboxes.c **** 
 115:../../../os/common/oslib/src/chmboxes.c ****   chSysLock();
 116:../../../os/common/oslib/src/chmboxes.c ****   chMBResetI(mbp);
 117:../../../os/common/oslib/src/chmboxes.c ****   chSchRescheduleS();
 118:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 119:../../../os/common/oslib/src/chmboxes.c **** }
 120:../../../os/common/oslib/src/chmboxes.c **** 
 121:../../../os/common/oslib/src/chmboxes.c **** /**
 122:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 123:../../../os/common/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 124:../../../os/common/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 125:../../../os/common/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 126:../../../os/common/oslib/src/chmboxes.c ****  *          return @p MSG reset until the mailbox is enabled again using
 127:../../../os/common/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 128:../../../os/common/oslib/src/chmboxes.c ****  *
 129:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 130:../../../os/common/oslib/src/chmboxes.c ****  *
 131:../../../os/common/oslib/src/chmboxes.c ****  * @api
 132:../../../os/common/oslib/src/chmboxes.c ****  */
 133:../../../os/common/oslib/src/chmboxes.c **** void chMBResetI(mailbox_t *mbp) {
  89               		.loc 1 133 0
  90               		.cfi_startproc
  91               	.LVL7:
  92 0000 CF93      		push r28
  93               	.LCFI0:
  94               		.cfi_def_cfa_offset 4
  95               		.cfi_offset 28, -3
  96 0002 DF93      		push r29
  97               	.LCFI1:
  98               		.cfi_def_cfa_offset 5
  99               		.cfi_offset 29, -4
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* stack size = 2 */
 103               	.L__stack_usage = 2
 104 0004 EC01      		movw r28,r24
 134:../../../os/common/oslib/src/chmboxes.c **** 
 135:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 136:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 137:../../../os/common/oslib/src/chmboxes.c **** 
 138:../../../os/common/oslib/src/chmboxes.c ****   mbp->wrptr = mbp->buffer;
 105               		.loc 1 138 0
 106 0006 8881      		ld r24,Y
 107 0008 9981      		ldd r25,Y+1
 108               	.LVL8:
 109 000a 9D83      		std Y+5,r25
 110 000c 8C83      		std Y+4,r24
 139:../../../os/common/oslib/src/chmboxes.c ****   mbp->rdptr = mbp->buffer;
 111               		.loc 1 139 0
 112 000e 9F83      		std Y+7,r25
 113 0010 8E83      		std Y+6,r24
 140:../../../os/common/oslib/src/chmboxes.c ****   mbp->cnt   = (cnt_t)0;
 114               		.loc 1 140 0
 115 0012 1886      		std Y+8,__zero_reg__
 141:../../../os/common/oslib/src/chmboxes.c ****   mbp->reset = true;
 116               		.loc 1 141 0
 117 0014 81E0      		ldi r24,lo8(1)
 118 0016 8987      		std Y+9,r24
 142:../../../os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qw, MSG_RESET);
 119               		.loc 1 142 0
 120 0018 6EEF      		ldi r22,lo8(-2)
 121 001a 7FEF      		ldi r23,lo8(-1)
 122 001c CE01      		movw r24,r28
 123 001e 0A96      		adiw r24,10
 124 0020 0E94 0000 		call chThdDequeueAllI
 125               	.LVL9:
 143:../../../os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 126               		.loc 1 143 0
 127 0024 6EEF      		ldi r22,lo8(-2)
 128 0026 7FEF      		ldi r23,lo8(-1)
 129 0028 CE01      		movw r24,r28
 130 002a 0E96      		adiw r24,14
 131               	/* epilogue start */
 144:../../../os/common/oslib/src/chmboxes.c **** }
 132               		.loc 1 144 0
 133 002c DF91      		pop r29
 134 002e CF91      		pop r28
 135               	.LVL10:
 143:../../../os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 136               		.loc 1 143 0
 137 0030 0C94 0000 		jmp chThdDequeueAllI
 138               	.LVL11:
 139               		.cfi_endproc
 140               	.LFE115:
 142               		.section	.text.chMBReset,"ax",@progbits
 143               	.global	chMBReset
 145               	chMBReset:
 146               	.LFB114:
 113:../../../os/common/oslib/src/chmboxes.c **** 
 147               		.loc 1 113 0
 148               		.cfi_startproc
 149               	.LVL12:
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
 154               	.LBB88:
 155               	.LBB89:
 156               	.LBB90:
 157               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 158               		.loc 3 437 0
 159               	/* #APP */
 160               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 161 0000 F894      		cli
 162               	 ;  0 "" 2
 163               	/* #NOAPP */
 164               	.LBE90:
 165               	.LBE89:
 166               	.LBE88:
 116:../../../os/common/oslib/src/chmboxes.c ****   chSchRescheduleS();
 167               		.loc 1 116 0
 168 0002 0E94 0000 		call chMBResetI
 169               	.LVL13:
 117:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 170               		.loc 1 117 0
 171 0006 0E94 0000 		call chSchRescheduleS
 172               	.LVL14:
 173               	.LBB91:
 174               	.LBB92:
 175               	.LBB93:
 176               	.LBB94:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 177               		.loc 3 447 0
 178               	/* #APP */
 179               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 180 000a 7894      		sei
 181               	 ;  0 "" 2
 182               	/* #NOAPP */
 183 000c 0895      		ret
 184               	.LBE94:
 185               	.LBE93:
 186               	.LBE92:
 187               	.LBE91:
 188               		.cfi_endproc
 189               	.LFE114:
 191               		.section	.text.chMBPostS,"ax",@progbits
 192               	.global	chMBPostS
 194               	chMBPostS:
 195               	.LFB117:
 145:../../../os/common/oslib/src/chmboxes.c **** 
 146:../../../os/common/oslib/src/chmboxes.c **** /**
 147:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 148:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 149:../../../os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 150:../../../os/common/oslib/src/chmboxes.c ****  *
 151:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 152:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 153:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 154:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 155:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 156:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 157:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 158:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 159:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 160:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 161:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 162:../../../os/common/oslib/src/chmboxes.c ****  *
 163:../../../os/common/oslib/src/chmboxes.c ****  * @api
 164:../../../os/common/oslib/src/chmboxes.c ****  */
 165:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 166:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 167:../../../os/common/oslib/src/chmboxes.c **** 
 168:../../../os/common/oslib/src/chmboxes.c ****   chSysLock();
 169:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBPostS(mbp, msg, timeout);
 170:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 171:../../../os/common/oslib/src/chmboxes.c **** 
 172:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 173:../../../os/common/oslib/src/chmboxes.c **** }
 174:../../../os/common/oslib/src/chmboxes.c **** 
 175:../../../os/common/oslib/src/chmboxes.c **** /**
 176:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 177:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 178:../../../os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 179:../../../os/common/oslib/src/chmboxes.c ****  *
 180:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 181:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 182:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 183:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 184:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 185:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 186:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 187:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 188:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 189:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 190:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 191:../../../os/common/oslib/src/chmboxes.c ****  *
 192:../../../os/common/oslib/src/chmboxes.c ****  * @sclass
 193:../../../os/common/oslib/src/chmboxes.c ****  */
 194:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostS(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 196               		.loc 1 194 0
 197               		.cfi_startproc
 198               	.LVL15:
 199 0000 CF92      		push r12
 200               	.LCFI2:
 201               		.cfi_def_cfa_offset 4
 202               		.cfi_offset 12, -3
 203 0002 DF92      		push r13
 204               	.LCFI3:
 205               		.cfi_def_cfa_offset 5
 206               		.cfi_offset 13, -4
 207 0004 EF92      		push r14
 208               	.LCFI4:
 209               		.cfi_def_cfa_offset 6
 210               		.cfi_offset 14, -5
 211 0006 FF92      		push r15
 212               	.LCFI5:
 213               		.cfi_def_cfa_offset 7
 214               		.cfi_offset 15, -6
 215 0008 0F93      		push r16
 216               	.LCFI6:
 217               		.cfi_def_cfa_offset 8
 218               		.cfi_offset 16, -7
 219 000a 1F93      		push r17
 220               	.LCFI7:
 221               		.cfi_def_cfa_offset 9
 222               		.cfi_offset 17, -8
 223 000c CF93      		push r28
 224               	.LCFI8:
 225               		.cfi_def_cfa_offset 10
 226               		.cfi_offset 28, -9
 227 000e DF93      		push r29
 228               	.LCFI9:
 229               		.cfi_def_cfa_offset 11
 230               		.cfi_offset 29, -10
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 8 */
 234               	.L__stack_usage = 8
 235 0010 EC01      		movw r28,r24
 236 0012 7B01      		movw r14,r22
 237 0014 8A01      		movw r16,r20
 195:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 196:../../../os/common/oslib/src/chmboxes.c **** 
 197:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 198:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 199:../../../os/common/oslib/src/chmboxes.c **** 
 200:../../../os/common/oslib/src/chmboxes.c ****   do {
 201:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 202:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 203:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 204:../../../os/common/oslib/src/chmboxes.c ****     }
 205:../../../os/common/oslib/src/chmboxes.c **** 
 206:../../../os/common/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 207:../../../os/common/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 208:../../../os/common/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 209:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 210:../../../os/common/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 211:../../../os/common/oslib/src/chmboxes.c ****       }
 212:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 213:../../../os/common/oslib/src/chmboxes.c **** 
 214:../../../os/common/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 215:../../../os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 216:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 217:../../../os/common/oslib/src/chmboxes.c **** 
 218:../../../os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 219:../../../os/common/oslib/src/chmboxes.c ****     }
 220:../../../os/common/oslib/src/chmboxes.c **** 
 221:../../../os/common/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 222:../../../os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 238               		.loc 1 222 0
 239 0016 6C01      		movw r12,r24
 240 0018 8AE0      		ldi r24,10
 241 001a C80E      		add r12,r24
 242 001c D11C      		adc r13,__zero_reg__
 243               	.LVL16:
 244 001e 00C0      		rjmp .L8
 245               	.LVL17:
 246               	.L14:
 247 0020 4881      		ld r20,Y
 248 0022 5981      		ldd r21,Y+1
 249 0024 2A81      		ldd r18,Y+2
 250 0026 3B81      		ldd r19,Y+3
 251               	.LVL18:
 207:../../../os/common/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 252               		.loc 1 207 0
 253 0028 C901      		movw r24,r18
 254 002a 841B      		sub r24,r20
 255 002c 950B      		sbc r25,r21
 256 002e 9595      		asr r25
 257 0030 8795      		ror r24
 258 0032 9885      		ldd r25,Y+8
 259 0034 891B      		sub r24,r25
 260 0036 1816      		cp __zero_reg__,r24
 261 0038 04F0      		brlt .L13
 262               		.loc 1 222 0
 263 003a B801      		movw r22,r16
 264 003c C601      		movw r24,r12
 265 003e 0E94 0000 		call chThdEnqueueTimeoutS
 266               	.LVL19:
 223:../../../os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 267               		.loc 1 223 0
 268 0042 0097      		sbiw r24,0
 269 0044 01F4      		brne .L5
 270               	.LVL20:
 271               	.L8:
 202:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 272               		.loc 1 202 0
 273 0046 8985      		ldd r24,Y+9
 274 0048 8823      		tst r24
 275 004a 01F0      		breq .L14
 203:../../../os/common/oslib/src/chmboxes.c ****     }
 276               		.loc 1 203 0
 277 004c 8EEF      		ldi r24,lo8(-2)
 278 004e 9FEF      		ldi r25,lo8(-1)
 279               	.L5:
 280               	/* epilogue start */
 224:../../../os/common/oslib/src/chmboxes.c **** 
 225:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 226:../../../os/common/oslib/src/chmboxes.c **** }
 281               		.loc 1 226 0
 282 0050 DF91      		pop r29
 283 0052 CF91      		pop r28
 284               	.LVL21:
 285 0054 1F91      		pop r17
 286 0056 0F91      		pop r16
 287               	.LVL22:
 288 0058 FF90      		pop r15
 289 005a EF90      		pop r14
 290               	.LVL23:
 291 005c DF90      		pop r13
 292 005e CF90      		pop r12
 293               	.LVL24:
 294 0060 0895      		ret
 295               	.LVL25:
 296               	.L13:
 208:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 297               		.loc 1 208 0
 298 0062 EC81      		ldd r30,Y+4
 299 0064 FD81      		ldd r31,Y+5
 300 0066 CF01      		movw r24,r30
 301 0068 0296      		adiw r24,2
 302 006a 9D83      		std Y+5,r25
 303 006c 8C83      		std Y+4,r24
 304 006e F182      		std Z+1,r15
 305 0070 E082      		st Z,r14
 209:../../../os/common/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 306               		.loc 1 209 0
 307 0072 8217      		cp r24,r18
 308 0074 9307      		cpc r25,r19
 309 0076 00F0      		brlo .L7
 210:../../../os/common/oslib/src/chmboxes.c ****       }
 310               		.loc 1 210 0
 311 0078 5D83      		std Y+5,r21
 312 007a 4C83      		std Y+4,r20
 313               	.L7:
 314               	.LVL26:
 315               	.LBB105:
 316               	.LBB106:
 212:../../../os/common/oslib/src/chmboxes.c **** 
 317               		.loc 1 212 0
 318 007c 8885      		ldd r24,Y+8
 319 007e 8F5F      		subi r24,lo8(-(1))
 320 0080 8887      		std Y+8,r24
 215:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 321               		.loc 1 215 0
 322 0082 60E0      		ldi r22,0
 323 0084 70E0      		ldi r23,0
 324 0086 CE01      		movw r24,r28
 325 0088 0E96      		adiw r24,14
 326 008a 0E94 0000 		call chThdDequeueNextI
 327               	.LVL27:
 216:../../../os/common/oslib/src/chmboxes.c **** 
 328               		.loc 1 216 0
 329 008e 0E94 0000 		call chSchRescheduleS
 330               	.LVL28:
 331 0092 80E0      		ldi r24,0
 332 0094 90E0      		ldi r25,0
 333 0096 00C0      		rjmp .L5
 334               	.LBE106:
 335               	.LBE105:
 336               		.cfi_endproc
 337               	.LFE117:
 339               		.section	.text.chMBPost,"ax",@progbits
 340               	.global	chMBPost
 342               	chMBPost:
 343               	.LFB116:
 165:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 344               		.loc 1 165 0
 345               		.cfi_startproc
 346               	.LVL29:
 347               	/* prologue: function */
 348               	/* frame size = 0 */
 349               	/* stack size = 0 */
 350               	.L__stack_usage = 0
 351               	.LBB107:
 352               	.LBB108:
 353               	.LBB109:
 437:../../../os/common/ports/AVR/chcore.h **** }
 354               		.loc 3 437 0
 355               	/* #APP */
 356               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 357 0000 F894      		cli
 358               	 ;  0 "" 2
 359               	/* #NOAPP */
 360               	.LBE109:
 361               	.LBE108:
 362               	.LBE107:
 169:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 363               		.loc 1 169 0
 364 0002 0E94 0000 		call chMBPostS
 365               	.LVL30:
 366               	.LBB110:
 367               	.LBB111:
 368               	.LBB112:
 369               	.LBB113:
 370               		.loc 3 447 0
 371               	/* #APP */
 372               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 373 0006 7894      		sei
 374               	 ;  0 "" 2
 375               	/* #NOAPP */
 376               	.LBE113:
 377               	.LBE112:
 378               	.LBE111:
 379               	.LBE110:
 173:../../../os/common/oslib/src/chmboxes.c **** 
 380               		.loc 1 173 0
 381 0008 0895      		ret
 382               		.cfi_endproc
 383               	.LFE116:
 385               		.section	.text.chMBPostI,"ax",@progbits
 386               	.global	chMBPostI
 388               	chMBPostI:
 389               	.LFB118:
 227:../../../os/common/oslib/src/chmboxes.c **** 
 228:../../../os/common/oslib/src/chmboxes.c **** /**
 229:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 230:../../../os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 231:../../../os/common/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 232:../../../os/common/oslib/src/chmboxes.c ****  *
 233:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 234:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 235:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 236:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 237:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 238:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 239:../../../os/common/oslib/src/chmboxes.c ****  *                      posted.
 240:../../../os/common/oslib/src/chmboxes.c ****  *
 241:../../../os/common/oslib/src/chmboxes.c ****  * @iclass
 242:../../../os/common/oslib/src/chmboxes.c ****  */
 243:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 390               		.loc 1 243 0
 391               		.cfi_startproc
 392               	.LVL31:
 393               	/* prologue: function */
 394               	/* frame size = 0 */
 395               	/* stack size = 0 */
 396               	.L__stack_usage = 0
 397 0000 FC01      		movw r30,r24
 244:../../../os/common/oslib/src/chmboxes.c **** 
 245:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 246:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 247:../../../os/common/oslib/src/chmboxes.c **** 
 248:../../../os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 249:../../../os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 398               		.loc 1 249 0
 399 0002 8185      		ldd r24,Z+9
 400               	.LVL32:
 401 0004 8111      		cpse r24,__zero_reg__
 402 0006 00C0      		rjmp .L19
 403               	.LVL33:
 404 0008 4081      		ld r20,Z
 405 000a 5181      		ldd r21,Z+1
 406 000c 2281      		ldd r18,Z+2
 407 000e 3381      		ldd r19,Z+3
 408               	.LVL34:
 250:../../../os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 251:../../../os/common/oslib/src/chmboxes.c ****   }
 252:../../../os/common/oslib/src/chmboxes.c **** 
 253:../../../os/common/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 254:../../../os/common/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 409               		.loc 1 254 0
 410 0010 C901      		movw r24,r18
 411 0012 841B      		sub r24,r20
 412 0014 950B      		sbc r25,r21
 413 0016 9595      		asr r25
 414 0018 8795      		ror r24
 415 001a 9085      		ldd r25,Z+8
 416 001c 891B      		sub r24,r25
 417 001e 1816      		cp __zero_reg__,r24
 418 0020 04F4      		brge .L20
 255:../../../os/common/oslib/src/chmboxes.c ****     *mbp->wrptr++ = msg;
 419               		.loc 1 255 0
 420 0022 A481      		ldd r26,Z+4
 421 0024 B581      		ldd r27,Z+5
 422 0026 CD01      		movw r24,r26
 423 0028 0296      		adiw r24,2
 424 002a 9583      		std Z+5,r25
 425 002c 8483      		std Z+4,r24
 426 002e 6D93      		st X+,r22
 427 0030 7C93      		st X,r23
 256:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->wrptr >= mbp->top) {
 428               		.loc 1 256 0
 429 0032 8217      		cp r24,r18
 430 0034 9307      		cpc r25,r19
 431 0036 00F0      		brlo .L18
 257:../../../os/common/oslib/src/chmboxes.c ****       mbp->wrptr = mbp->buffer;
 432               		.loc 1 257 0
 433 0038 5583      		std Z+5,r21
 434 003a 4483      		std Z+4,r20
 435               	.L18:
 258:../../../os/common/oslib/src/chmboxes.c ****     }
 259:../../../os/common/oslib/src/chmboxes.c ****     mbp->cnt++;
 436               		.loc 1 259 0
 437 003c 8085      		ldd r24,Z+8
 438 003e 8F5F      		subi r24,lo8(-(1))
 439 0040 8087      		std Z+8,r24
 260:../../../os/common/oslib/src/chmboxes.c **** 
 261:../../../os/common/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 262:../../../os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 440               		.loc 1 262 0
 441 0042 60E0      		ldi r22,0
 442 0044 70E0      		ldi r23,0
 443               	.LVL35:
 444 0046 CF01      		movw r24,r30
 445 0048 0E96      		adiw r24,14
 446 004a 0E94 0000 		call chThdDequeueNextI
 447               	.LVL36:
 263:../../../os/common/oslib/src/chmboxes.c **** 
 264:../../../os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 448               		.loc 1 264 0
 449 004e 80E0      		ldi r24,0
 450 0050 90E0      		ldi r25,0
 451 0052 0895      		ret
 452               	.LVL37:
 453               	.L19:
 250:../../../os/common/oslib/src/chmboxes.c ****   }
 454               		.loc 1 250 0
 455 0054 8EEF      		ldi r24,lo8(-2)
 456 0056 9FEF      		ldi r25,lo8(-1)
 457 0058 0895      		ret
 458               	.LVL38:
 459               	.L20:
 265:../../../os/common/oslib/src/chmboxes.c ****   }
 266:../../../os/common/oslib/src/chmboxes.c **** 
 267:../../../os/common/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 268:../../../os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 460               		.loc 1 268 0
 461 005a 8FEF      		ldi r24,lo8(-1)
 462 005c 9FEF      		ldi r25,lo8(-1)
 269:../../../os/common/oslib/src/chmboxes.c **** }
 463               		.loc 1 269 0
 464 005e 0895      		ret
 465               		.cfi_endproc
 466               	.LFE118:
 468               		.section	.text.chMBPostAheadS,"ax",@progbits
 469               	.global	chMBPostAheadS
 471               	chMBPostAheadS:
 472               	.LFB120:
 270:../../../os/common/oslib/src/chmboxes.c **** 
 271:../../../os/common/oslib/src/chmboxes.c **** /**
 272:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 273:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 274:../../../os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 275:../../../os/common/oslib/src/chmboxes.c ****  *
 276:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 277:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 278:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 279:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 280:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 281:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 282:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 283:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 284:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 285:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 286:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 287:../../../os/common/oslib/src/chmboxes.c ****  *
 288:../../../os/common/oslib/src/chmboxes.c ****  * @api
 289:../../../os/common/oslib/src/chmboxes.c ****  */
 290:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 291:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 292:../../../os/common/oslib/src/chmboxes.c **** 
 293:../../../os/common/oslib/src/chmboxes.c ****   chSysLock();
 294:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBPostAheadS(mbp, msg, timeout);
 295:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 296:../../../os/common/oslib/src/chmboxes.c **** 
 297:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 298:../../../os/common/oslib/src/chmboxes.c **** }
 299:../../../os/common/oslib/src/chmboxes.c **** 
 300:../../../os/common/oslib/src/chmboxes.c **** /**
 301:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 302:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 303:../../../os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 304:../../../os/common/oslib/src/chmboxes.c ****  *
 305:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 306:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 307:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 308:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 309:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 310:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 311:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 312:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 313:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 314:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 315:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 316:../../../os/common/oslib/src/chmboxes.c ****  *
 317:../../../os/common/oslib/src/chmboxes.c ****  * @sclass
 318:../../../os/common/oslib/src/chmboxes.c ****  */
 319:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostAheadS(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 473               		.loc 1 319 0
 474               		.cfi_startproc
 475               	.LVL39:
 476 0000 CF92      		push r12
 477               	.LCFI10:
 478               		.cfi_def_cfa_offset 4
 479               		.cfi_offset 12, -3
 480 0002 DF92      		push r13
 481               	.LCFI11:
 482               		.cfi_def_cfa_offset 5
 483               		.cfi_offset 13, -4
 484 0004 EF92      		push r14
 485               	.LCFI12:
 486               		.cfi_def_cfa_offset 6
 487               		.cfi_offset 14, -5
 488 0006 FF92      		push r15
 489               	.LCFI13:
 490               		.cfi_def_cfa_offset 7
 491               		.cfi_offset 15, -6
 492 0008 0F93      		push r16
 493               	.LCFI14:
 494               		.cfi_def_cfa_offset 8
 495               		.cfi_offset 16, -7
 496 000a 1F93      		push r17
 497               	.LCFI15:
 498               		.cfi_def_cfa_offset 9
 499               		.cfi_offset 17, -8
 500 000c CF93      		push r28
 501               	.LCFI16:
 502               		.cfi_def_cfa_offset 10
 503               		.cfi_offset 28, -9
 504 000e DF93      		push r29
 505               	.LCFI17:
 506               		.cfi_def_cfa_offset 11
 507               		.cfi_offset 29, -10
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 8 */
 511               	.L__stack_usage = 8
 512 0010 EC01      		movw r28,r24
 513 0012 7B01      		movw r14,r22
 514 0014 8A01      		movw r16,r20
 320:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 321:../../../os/common/oslib/src/chmboxes.c **** 
 322:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 323:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 324:../../../os/common/oslib/src/chmboxes.c **** 
 325:../../../os/common/oslib/src/chmboxes.c ****   do {
 326:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 327:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 328:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 329:../../../os/common/oslib/src/chmboxes.c ****     }
 330:../../../os/common/oslib/src/chmboxes.c **** 
 331:../../../os/common/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 332:../../../os/common/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 333:../../../os/common/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 334:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 335:../../../os/common/oslib/src/chmboxes.c ****       }
 336:../../../os/common/oslib/src/chmboxes.c ****       *mbp->rdptr = msg;
 337:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 338:../../../os/common/oslib/src/chmboxes.c **** 
 339:../../../os/common/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 340:../../../os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 341:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 342:../../../os/common/oslib/src/chmboxes.c **** 
 343:../../../os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 344:../../../os/common/oslib/src/chmboxes.c ****     }
 345:../../../os/common/oslib/src/chmboxes.c **** 
 346:../../../os/common/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 347:../../../os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 515               		.loc 1 347 0
 516 0016 6C01      		movw r12,r24
 517 0018 8AE0      		ldi r24,10
 518 001a C80E      		add r12,r24
 519 001c D11C      		adc r13,__zero_reg__
 520               	.LVL40:
 521 001e 00C0      		rjmp .L26
 522               	.LVL41:
 523               	.L32:
 524 0020 2881      		ld r18,Y
 525 0022 3981      		ldd r19,Y+1
 526 0024 4A81      		ldd r20,Y+2
 527 0026 5B81      		ldd r21,Y+3
 528               	.LVL42:
 332:../../../os/common/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 529               		.loc 1 332 0
 530 0028 CA01      		movw r24,r20
 531 002a 821B      		sub r24,r18
 532 002c 930B      		sbc r25,r19
 533 002e 9595      		asr r25
 534 0030 8795      		ror r24
 535 0032 9885      		ldd r25,Y+8
 536 0034 891B      		sub r24,r25
 537 0036 1816      		cp __zero_reg__,r24
 538 0038 04F0      		brlt .L31
 539               		.loc 1 347 0
 540 003a B801      		movw r22,r16
 541 003c C601      		movw r24,r12
 542 003e 0E94 0000 		call chThdEnqueueTimeoutS
 543               	.LVL43:
 348:../../../os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 544               		.loc 1 348 0
 545 0042 0097      		sbiw r24,0
 546 0044 01F4      		brne .L22
 547               	.LVL44:
 548               	.L26:
 327:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 549               		.loc 1 327 0
 550 0046 8985      		ldd r24,Y+9
 551 0048 8823      		tst r24
 552 004a 01F0      		breq .L32
 328:../../../os/common/oslib/src/chmboxes.c ****     }
 553               		.loc 1 328 0
 554 004c 8EEF      		ldi r24,lo8(-2)
 555 004e 9FEF      		ldi r25,lo8(-1)
 556               	.L22:
 557               	/* epilogue start */
 349:../../../os/common/oslib/src/chmboxes.c **** 
 350:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 351:../../../os/common/oslib/src/chmboxes.c **** }
 558               		.loc 1 351 0
 559 0050 DF91      		pop r29
 560 0052 CF91      		pop r28
 561               	.LVL45:
 562 0054 1F91      		pop r17
 563 0056 0F91      		pop r16
 564               	.LVL46:
 565 0058 FF90      		pop r15
 566 005a EF90      		pop r14
 567               	.LVL47:
 568 005c DF90      		pop r13
 569 005e CF90      		pop r12
 570               	.LVL48:
 571 0060 0895      		ret
 572               	.LVL49:
 573               	.L31:
 333:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 574               		.loc 1 333 0
 575 0062 EE81      		ldd r30,Y+6
 576 0064 FF81      		ldd r31,Y+7
 577 0066 3297      		sbiw r30,2
 578 0068 E217      		cp r30,r18
 579 006a F307      		cpc r31,r19
 580 006c 00F4      		brsh .L30
 334:../../../os/common/oslib/src/chmboxes.c ****       }
 581               		.loc 1 334 0
 582 006e FA01      		movw r30,r20
 583 0070 3297      		sbiw r30,2
 584               	.L30:
 585 0072 FF83      		std Y+7,r31
 586 0074 EE83      		std Y+6,r30
 587               	.LVL50:
 588               	.LBB124:
 589               	.LBB125:
 336:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 590               		.loc 1 336 0
 591 0076 F182      		std Z+1,r15
 592 0078 E082      		st Z,r14
 337:../../../os/common/oslib/src/chmboxes.c **** 
 593               		.loc 1 337 0
 594 007a 8885      		ldd r24,Y+8
 595 007c 8F5F      		subi r24,lo8(-(1))
 596 007e 8887      		std Y+8,r24
 340:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 597               		.loc 1 340 0
 598 0080 60E0      		ldi r22,0
 599 0082 70E0      		ldi r23,0
 600 0084 CE01      		movw r24,r28
 601 0086 0E96      		adiw r24,14
 602 0088 0E94 0000 		call chThdDequeueNextI
 603               	.LVL51:
 341:../../../os/common/oslib/src/chmboxes.c **** 
 604               		.loc 1 341 0
 605 008c 0E94 0000 		call chSchRescheduleS
 606               	.LVL52:
 607 0090 80E0      		ldi r24,0
 608 0092 90E0      		ldi r25,0
 609 0094 00C0      		rjmp .L22
 610               	.LBE125:
 611               	.LBE124:
 612               		.cfi_endproc
 613               	.LFE120:
 615               		.section	.text.chMBPostAhead,"ax",@progbits
 616               	.global	chMBPostAhead
 618               	chMBPostAhead:
 619               	.LFB119:
 290:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 620               		.loc 1 290 0
 621               		.cfi_startproc
 622               	.LVL53:
 623               	/* prologue: function */
 624               	/* frame size = 0 */
 625               	/* stack size = 0 */
 626               	.L__stack_usage = 0
 627               	.LBB126:
 628               	.LBB127:
 629               	.LBB128:
 437:../../../os/common/ports/AVR/chcore.h **** }
 630               		.loc 3 437 0
 631               	/* #APP */
 632               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 633 0000 F894      		cli
 634               	 ;  0 "" 2
 635               	/* #NOAPP */
 636               	.LBE128:
 637               	.LBE127:
 638               	.LBE126:
 294:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 639               		.loc 1 294 0
 640 0002 0E94 0000 		call chMBPostAheadS
 641               	.LVL54:
 642               	.LBB129:
 643               	.LBB130:
 644               	.LBB131:
 645               	.LBB132:
 646               		.loc 3 447 0
 647               	/* #APP */
 648               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 649 0006 7894      		sei
 650               	 ;  0 "" 2
 651               	/* #NOAPP */
 652               	.LBE132:
 653               	.LBE131:
 654               	.LBE130:
 655               	.LBE129:
 298:../../../os/common/oslib/src/chmboxes.c **** 
 656               		.loc 1 298 0
 657 0008 0895      		ret
 658               		.cfi_endproc
 659               	.LFE119:
 661               		.section	.text.chMBPostAheadI,"ax",@progbits
 662               	.global	chMBPostAheadI
 664               	chMBPostAheadI:
 665               	.LFB121:
 352:../../../os/common/oslib/src/chmboxes.c **** 
 353:../../../os/common/oslib/src/chmboxes.c **** /**
 354:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 355:../../../os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 356:../../../os/common/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 357:../../../os/common/oslib/src/chmboxes.c ****  *
 358:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 359:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 360:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 361:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 362:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 363:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 364:../../../os/common/oslib/src/chmboxes.c ****  *                      posted.
 365:../../../os/common/oslib/src/chmboxes.c ****  *
 366:../../../os/common/oslib/src/chmboxes.c ****  * @iclass
 367:../../../os/common/oslib/src/chmboxes.c ****  */
 368:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 666               		.loc 1 368 0
 667               		.cfi_startproc
 668               	.LVL55:
 669               	/* prologue: function */
 670               	/* frame size = 0 */
 671               	/* stack size = 0 */
 672               	.L__stack_usage = 0
 673 0000 FC01      		movw r30,r24
 369:../../../os/common/oslib/src/chmboxes.c **** 
 370:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 371:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 372:../../../os/common/oslib/src/chmboxes.c **** 
 373:../../../os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 374:../../../os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 674               		.loc 1 374 0
 675 0002 8185      		ldd r24,Z+9
 676               	.LVL56:
 677 0004 8111      		cpse r24,__zero_reg__
 678 0006 00C0      		rjmp .L38
 679               	.LVL57:
 680 0008 2081      		ld r18,Z
 681 000a 3181      		ldd r19,Z+1
 682 000c 4281      		ldd r20,Z+2
 683 000e 5381      		ldd r21,Z+3
 684               	.LVL58:
 375:../../../os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 376:../../../os/common/oslib/src/chmboxes.c ****   }
 377:../../../os/common/oslib/src/chmboxes.c **** 
 378:../../../os/common/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 379:../../../os/common/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 685               		.loc 1 379 0
 686 0010 CA01      		movw r24,r20
 687 0012 821B      		sub r24,r18
 688 0014 930B      		sbc r25,r19
 689 0016 9595      		asr r25
 690 0018 8795      		ror r24
 691 001a 9085      		ldd r25,Z+8
 692 001c 891B      		sub r24,r25
 693 001e 1816      		cp __zero_reg__,r24
 694 0020 04F4      		brge .L39
 380:../../../os/common/oslib/src/chmboxes.c ****     if (--mbp->rdptr < mbp->buffer) {
 695               		.loc 1 380 0
 696 0022 A681      		ldd r26,Z+6
 697 0024 B781      		ldd r27,Z+7
 698 0026 1297      		sbiw r26,2
 699 0028 A217      		cp r26,r18
 700 002a B307      		cpc r27,r19
 701 002c 00F4      		brsh .L40
 381:../../../os/common/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->top - 1;
 702               		.loc 1 381 0
 703 002e DA01      		movw r26,r20
 704 0030 1297      		sbiw r26,2
 705               	.L40:
 706 0032 B783      		std Z+7,r27
 707 0034 A683      		std Z+6,r26
 382:../../../os/common/oslib/src/chmboxes.c ****     }
 383:../../../os/common/oslib/src/chmboxes.c ****     *mbp->rdptr = msg;
 708               		.loc 1 383 0
 709 0036 6D93      		st X+,r22
 710 0038 7C93      		st X,r23
 384:../../../os/common/oslib/src/chmboxes.c ****     mbp->cnt++;
 711               		.loc 1 384 0
 712 003a 8085      		ldd r24,Z+8
 713 003c 8F5F      		subi r24,lo8(-(1))
 714 003e 8087      		std Z+8,r24
 385:../../../os/common/oslib/src/chmboxes.c **** 
 386:../../../os/common/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 387:../../../os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 715               		.loc 1 387 0
 716 0040 60E0      		ldi r22,0
 717 0042 70E0      		ldi r23,0
 718               	.LVL59:
 719 0044 CF01      		movw r24,r30
 720 0046 0E96      		adiw r24,14
 721 0048 0E94 0000 		call chThdDequeueNextI
 722               	.LVL60:
 388:../../../os/common/oslib/src/chmboxes.c **** 
 389:../../../os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 723               		.loc 1 389 0
 724 004c 80E0      		ldi r24,0
 725 004e 90E0      		ldi r25,0
 726 0050 0895      		ret
 727               	.LVL61:
 728               	.L38:
 375:../../../os/common/oslib/src/chmboxes.c ****   }
 729               		.loc 1 375 0
 730 0052 8EEF      		ldi r24,lo8(-2)
 731 0054 9FEF      		ldi r25,lo8(-1)
 732 0056 0895      		ret
 733               	.LVL62:
 734               	.L39:
 390:../../../os/common/oslib/src/chmboxes.c ****   }
 391:../../../os/common/oslib/src/chmboxes.c **** 
 392:../../../os/common/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 393:../../../os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 735               		.loc 1 393 0
 736 0058 8FEF      		ldi r24,lo8(-1)
 737 005a 9FEF      		ldi r25,lo8(-1)
 394:../../../os/common/oslib/src/chmboxes.c **** }
 738               		.loc 1 394 0
 739 005c 0895      		ret
 740               		.cfi_endproc
 741               	.LFE121:
 743               		.section	.text.chMBFetchS,"ax",@progbits
 744               	.global	chMBFetchS
 746               	chMBFetchS:
 747               	.LFB123:
 395:../../../os/common/oslib/src/chmboxes.c **** 
 396:../../../os/common/oslib/src/chmboxes.c **** /**
 397:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 398:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 399:../../../os/common/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 400:../../../os/common/oslib/src/chmboxes.c ****  *
 401:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 402:../../../os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 403:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 404:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 405:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 406:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 407:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 408:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 409:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 410:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 411:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 412:../../../os/common/oslib/src/chmboxes.c ****  *
 413:../../../os/common/oslib/src/chmboxes.c ****  * @api
 414:../../../os/common/oslib/src/chmboxes.c ****  */
 415:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 416:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 417:../../../os/common/oslib/src/chmboxes.c **** 
 418:../../../os/common/oslib/src/chmboxes.c ****   chSysLock();
 419:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBFetchS(mbp, msgp, timeout);
 420:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 421:../../../os/common/oslib/src/chmboxes.c **** 
 422:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 423:../../../os/common/oslib/src/chmboxes.c **** }
 424:../../../os/common/oslib/src/chmboxes.c **** 
 425:../../../os/common/oslib/src/chmboxes.c **** /**
 426:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 427:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 428:../../../os/common/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 429:../../../os/common/oslib/src/chmboxes.c ****  *
 430:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 431:../../../os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 432:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 433:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 434:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 435:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 436:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 437:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 438:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 439:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 440:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 441:../../../os/common/oslib/src/chmboxes.c ****  *
 442:../../../os/common/oslib/src/chmboxes.c ****  * @sclass
 443:../../../os/common/oslib/src/chmboxes.c ****  */
 444:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBFetchS(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 748               		.loc 1 444 0
 749               		.cfi_startproc
 750               	.LVL63:
 751 0000 CF92      		push r12
 752               	.LCFI18:
 753               		.cfi_def_cfa_offset 4
 754               		.cfi_offset 12, -3
 755 0002 DF92      		push r13
 756               	.LCFI19:
 757               		.cfi_def_cfa_offset 5
 758               		.cfi_offset 13, -4
 759 0004 EF92      		push r14
 760               	.LCFI20:
 761               		.cfi_def_cfa_offset 6
 762               		.cfi_offset 14, -5
 763 0006 FF92      		push r15
 764               	.LCFI21:
 765               		.cfi_def_cfa_offset 7
 766               		.cfi_offset 15, -6
 767 0008 0F93      		push r16
 768               	.LCFI22:
 769               		.cfi_def_cfa_offset 8
 770               		.cfi_offset 16, -7
 771 000a 1F93      		push r17
 772               	.LCFI23:
 773               		.cfi_def_cfa_offset 9
 774               		.cfi_offset 17, -8
 775 000c CF93      		push r28
 776               	.LCFI24:
 777               		.cfi_def_cfa_offset 10
 778               		.cfi_offset 28, -9
 779 000e DF93      		push r29
 780               	.LCFI25:
 781               		.cfi_def_cfa_offset 11
 782               		.cfi_offset 29, -10
 783               	/* prologue: function */
 784               	/* frame size = 0 */
 785               	/* stack size = 8 */
 786               	.L__stack_usage = 8
 787 0010 EC01      		movw r28,r24
 788 0012 6B01      		movw r12,r22
 789 0014 7A01      		movw r14,r20
 445:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 446:../../../os/common/oslib/src/chmboxes.c **** 
 447:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 448:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 449:../../../os/common/oslib/src/chmboxes.c **** 
 450:../../../os/common/oslib/src/chmboxes.c ****   do {
 451:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 452:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 453:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 454:../../../os/common/oslib/src/chmboxes.c ****     }
 455:../../../os/common/oslib/src/chmboxes.c **** 
 456:../../../os/common/oslib/src/chmboxes.c ****     /* Is there a message in queue? if so then fetch.*/
 457:../../../os/common/oslib/src/chmboxes.c ****     if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
 458:../../../os/common/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 459:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 460:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 461:../../../os/common/oslib/src/chmboxes.c ****       }
 462:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt--;
 463:../../../os/common/oslib/src/chmboxes.c **** 
 464:../../../os/common/oslib/src/chmboxes.c ****       /* If there is a writer waiting then makes it ready.*/
 465:../../../os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qw, MSG_OK);
 466:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 467:../../../os/common/oslib/src/chmboxes.c **** 
 468:../../../os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 469:../../../os/common/oslib/src/chmboxes.c ****     }
 470:../../../os/common/oslib/src/chmboxes.c **** 
 471:../../../os/common/oslib/src/chmboxes.c ****     /* No message in the queue, waiting for a message to become available.*/
 472:../../../os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 790               		.loc 1 472 0
 791 0016 8C01      		movw r16,r24
 792 0018 025F      		subi r16,-14
 793 001a 1F4F      		sbci r17,-1
 794 001c 00C0      		rjmp .L45
 795               	.LVL64:
 796               	.L50:
 457:../../../os/common/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 797               		.loc 1 457 0
 798 001e 8885      		ldd r24,Y+8
 799 0020 1816      		cp __zero_reg__,r24
 800 0022 04F0      		brlt .L49
 801               		.loc 1 472 0
 802 0024 B701      		movw r22,r14
 803 0026 C801      		movw r24,r16
 804 0028 0E94 0000 		call chThdEnqueueTimeoutS
 805               	.LVL65:
 473:../../../os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 806               		.loc 1 473 0
 807 002c 0097      		sbiw r24,0
 808 002e 01F4      		brne .L42
 809               	.LVL66:
 810               	.L45:
 452:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 811               		.loc 1 452 0
 812 0030 8985      		ldd r24,Y+9
 813 0032 8823      		tst r24
 814 0034 01F0      		breq .L50
 453:../../../os/common/oslib/src/chmboxes.c ****     }
 815               		.loc 1 453 0
 816 0036 8EEF      		ldi r24,lo8(-2)
 817 0038 9FEF      		ldi r25,lo8(-1)
 818               	.L42:
 819               	/* epilogue start */
 474:../../../os/common/oslib/src/chmboxes.c **** 
 475:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 476:../../../os/common/oslib/src/chmboxes.c **** }
 820               		.loc 1 476 0
 821 003a DF91      		pop r29
 822 003c CF91      		pop r28
 823               	.LVL67:
 824 003e 1F91      		pop r17
 825 0040 0F91      		pop r16
 826               	.LVL68:
 827 0042 FF90      		pop r15
 828 0044 EF90      		pop r14
 829               	.LVL69:
 830 0046 DF90      		pop r13
 831 0048 CF90      		pop r12
 832               	.LVL70:
 833 004a 0895      		ret
 834               	.LVL71:
 835               	.L49:
 836               	.LBB137:
 837               	.LBB138:
 458:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 838               		.loc 1 458 0
 839 004c EE81      		ldd r30,Y+6
 840 004e FF81      		ldd r31,Y+7
 841 0050 CF01      		movw r24,r30
 842 0052 0296      		adiw r24,2
 843 0054 9F83      		std Y+7,r25
 844 0056 8E83      		std Y+6,r24
 845 0058 2081      		ld r18,Z
 846 005a 3181      		ldd r19,Z+1
 847 005c F601      		movw r30,r12
 848 005e 3183      		std Z+1,r19
 849 0060 2083      		st Z,r18
 459:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 850               		.loc 1 459 0
 851 0062 2A81      		ldd r18,Y+2
 852 0064 3B81      		ldd r19,Y+3
 853 0066 8217      		cp r24,r18
 854 0068 9307      		cpc r25,r19
 855 006a 00F0      		brlo .L44
 460:../../../os/common/oslib/src/chmboxes.c ****       }
 856               		.loc 1 460 0
 857 006c 8881      		ld r24,Y
 858 006e 9981      		ldd r25,Y+1
 859 0070 9F83      		std Y+7,r25
 860 0072 8E83      		std Y+6,r24
 861               	.L44:
 462:../../../os/common/oslib/src/chmboxes.c **** 
 862               		.loc 1 462 0
 863 0074 8885      		ldd r24,Y+8
 864 0076 8150      		subi r24,lo8(-(-1))
 865 0078 8887      		std Y+8,r24
 465:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 866               		.loc 1 465 0
 867 007a 60E0      		ldi r22,0
 868 007c 70E0      		ldi r23,0
 869 007e CE01      		movw r24,r28
 870 0080 0A96      		adiw r24,10
 871 0082 0E94 0000 		call chThdDequeueNextI
 872               	.LVL72:
 466:../../../os/common/oslib/src/chmboxes.c **** 
 873               		.loc 1 466 0
 874 0086 0E94 0000 		call chSchRescheduleS
 875               	.LVL73:
 876 008a 80E0      		ldi r24,0
 877 008c 90E0      		ldi r25,0
 878 008e 00C0      		rjmp .L42
 879               	.LBE138:
 880               	.LBE137:
 881               		.cfi_endproc
 882               	.LFE123:
 884               		.section	.text.chMBFetch,"ax",@progbits
 885               	.global	chMBFetch
 887               	chMBFetch:
 888               	.LFB122:
 415:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 889               		.loc 1 415 0
 890               		.cfi_startproc
 891               	.LVL74:
 892               	/* prologue: function */
 893               	/* frame size = 0 */
 894               	/* stack size = 0 */
 895               	.L__stack_usage = 0
 896               	.LBB139:
 897               	.LBB140:
 898               	.LBB141:
 437:../../../os/common/ports/AVR/chcore.h **** }
 899               		.loc 3 437 0
 900               	/* #APP */
 901               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 902 0000 F894      		cli
 903               	 ;  0 "" 2
 904               	/* #NOAPP */
 905               	.LBE141:
 906               	.LBE140:
 907               	.LBE139:
 419:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 908               		.loc 1 419 0
 909 0002 0E94 0000 		call chMBFetchS
 910               	.LVL75:
 911               	.LBB142:
 912               	.LBB143:
 913               	.LBB144:
 914               	.LBB145:
 915               		.loc 3 447 0
 916               	/* #APP */
 917               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 918 0006 7894      		sei
 919               	 ;  0 "" 2
 920               	/* #NOAPP */
 921               	.LBE145:
 922               	.LBE144:
 923               	.LBE143:
 924               	.LBE142:
 423:../../../os/common/oslib/src/chmboxes.c **** 
 925               		.loc 1 423 0
 926 0008 0895      		ret
 927               		.cfi_endproc
 928               	.LFE122:
 930               		.section	.text.chMBFetchI,"ax",@progbits
 931               	.global	chMBFetchI
 933               	chMBFetchI:
 934               	.LFB124:
 477:../../../os/common/oslib/src/chmboxes.c **** 
 478:../../../os/common/oslib/src/chmboxes.c **** /**
 479:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 480:../../../os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 481:../../../os/common/oslib/src/chmboxes.c ****  *          condition if the queue is empty.
 482:../../../os/common/oslib/src/chmboxes.c ****  *
 483:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 484:../../../os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 485:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 486:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 487:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 488:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 489:../../../os/common/oslib/src/chmboxes.c ****  *                      fetched.
 490:../../../os/common/oslib/src/chmboxes.c ****  *
 491:../../../os/common/oslib/src/chmboxes.c ****  * @iclass
 492:../../../os/common/oslib/src/chmboxes.c ****  */
 493:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 935               		.loc 1 493 0
 936               		.cfi_startproc
 937               	.LVL76:
 938               	/* prologue: function */
 939               	/* frame size = 0 */
 940               	/* stack size = 0 */
 941               	.L__stack_usage = 0
 942 0000 FC01      		movw r30,r24
 494:../../../os/common/oslib/src/chmboxes.c **** 
 495:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 496:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 497:../../../os/common/oslib/src/chmboxes.c **** 
 498:../../../os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 499:../../../os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 943               		.loc 1 499 0
 944 0002 8185      		ldd r24,Z+9
 945               	.LVL77:
 946 0004 8111      		cpse r24,__zero_reg__
 947 0006 00C0      		rjmp .L55
 948               	.LVL78:
 500:../../../os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 501:../../../os/common/oslib/src/chmboxes.c ****   }
 502:../../../os/common/oslib/src/chmboxes.c **** 
 503:../../../os/common/oslib/src/chmboxes.c ****   /* Is there a message in queue? if so then fetch.*/
 504:../../../os/common/oslib/src/chmboxes.c ****   if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
 949               		.loc 1 504 0
 950 0008 8085      		ldd r24,Z+8
 951 000a 1816      		cp __zero_reg__,r24
 952 000c 04F4      		brge .L56
 505:../../../os/common/oslib/src/chmboxes.c ****     *msgp = *mbp->rdptr++;
 953               		.loc 1 505 0
 954 000e A681      		ldd r26,Z+6
 955 0010 B781      		ldd r27,Z+7
 956 0012 CD01      		movw r24,r26
 957 0014 0296      		adiw r24,2
 958 0016 9783      		std Z+7,r25
 959 0018 8683      		std Z+6,r24
 960 001a 2D91      		ld r18,X+
 961 001c 3C91      		ld r19,X
 962 001e DB01      		movw r26,r22
 963 0020 2D93      		st X+,r18
 964 0022 3C93      		st X,r19
 506:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->rdptr >= mbp->top) {
 965               		.loc 1 506 0
 966 0024 2281      		ldd r18,Z+2
 967 0026 3381      		ldd r19,Z+3
 968 0028 8217      		cp r24,r18
 969 002a 9307      		cpc r25,r19
 970 002c 00F0      		brlo .L54
 507:../../../os/common/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->buffer;
 971               		.loc 1 507 0
 972 002e 8081      		ld r24,Z
 973 0030 9181      		ldd r25,Z+1
 974 0032 9783      		std Z+7,r25
 975 0034 8683      		std Z+6,r24
 976               	.L54:
 508:../../../os/common/oslib/src/chmboxes.c ****     }
 509:../../../os/common/oslib/src/chmboxes.c ****     mbp->cnt--;
 977               		.loc 1 509 0
 978 0036 8085      		ldd r24,Z+8
 979 0038 8150      		subi r24,lo8(-(-1))
 980 003a 8087      		std Z+8,r24
 510:../../../os/common/oslib/src/chmboxes.c **** 
 511:../../../os/common/oslib/src/chmboxes.c ****     /* If there is a writer waiting then makes it ready.*/
 512:../../../os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qw, MSG_OK);
 981               		.loc 1 512 0
 982 003c 60E0      		ldi r22,0
 983 003e 70E0      		ldi r23,0
 984               	.LVL79:
 985 0040 CF01      		movw r24,r30
 986 0042 0A96      		adiw r24,10
 987 0044 0E94 0000 		call chThdDequeueNextI
 988               	.LVL80:
 513:../../../os/common/oslib/src/chmboxes.c **** 
 514:../../../os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 989               		.loc 1 514 0
 990 0048 80E0      		ldi r24,0
 991 004a 90E0      		ldi r25,0
 992 004c 0895      		ret
 993               	.LVL81:
 994               	.L55:
 500:../../../os/common/oslib/src/chmboxes.c ****   }
 995               		.loc 1 500 0
 996 004e 8EEF      		ldi r24,lo8(-2)
 997 0050 9FEF      		ldi r25,lo8(-1)
 998 0052 0895      		ret
 999               	.LVL82:
 1000               	.L56:
 515:../../../os/common/oslib/src/chmboxes.c ****   }
 516:../../../os/common/oslib/src/chmboxes.c **** 
 517:../../../os/common/oslib/src/chmboxes.c ****   /* No message, immediate timeout.*/
 518:../../../os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 1001               		.loc 1 518 0
 1002 0054 8FEF      		ldi r24,lo8(-1)
 1003 0056 9FEF      		ldi r25,lo8(-1)
 519:../../../os/common/oslib/src/chmboxes.c **** }
 1004               		.loc 1 519 0
 1005 0058 0895      		ret
 1006               		.cfi_endproc
 1007               	.LFE124:
 1009               		.text
 1010               	.Letext0:
 1011               		.file 4 "/usr/lib/avr/include/stdint.h"
 1012               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1013               		.file 6 "../../../os/rt/include/chsystypes.h"
 1014               		.file 7 "../../../os/rt/include/chsem.h"
 1015               		.file 8 "../../../os/rt/include/chmtx.h"
 1016               		.file 9 "../../../os/common/oslib/include/chmboxes.h"
 1017               		.file 10 "../../../os/rt/include/chthreads.h"
 1018               		.file 11 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmboxes.c
     /tmp/ccxDjHBm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxDjHBm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxDjHBm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxDjHBm.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccxDjHBm.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxDjHBm.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxDjHBm.s:14     .text.chMBObjectInit:0000000000000000 chMBObjectInit
     /tmp/ccxDjHBm.s:87     .text.chMBResetI:0000000000000000 chMBResetI
     /tmp/ccxDjHBm.s:145    .text.chMBReset:0000000000000000 chMBReset
     /tmp/ccxDjHBm.s:194    .text.chMBPostS:0000000000000000 chMBPostS
     /tmp/ccxDjHBm.s:342    .text.chMBPost:0000000000000000 chMBPost
     /tmp/ccxDjHBm.s:388    .text.chMBPostI:0000000000000000 chMBPostI
     /tmp/ccxDjHBm.s:471    .text.chMBPostAheadS:0000000000000000 chMBPostAheadS
     /tmp/ccxDjHBm.s:618    .text.chMBPostAhead:0000000000000000 chMBPostAhead
     /tmp/ccxDjHBm.s:664    .text.chMBPostAheadI:0000000000000000 chMBPostAheadI
     /tmp/ccxDjHBm.s:746    .text.chMBFetchS:0000000000000000 chMBFetchS
     /tmp/ccxDjHBm.s:887    .text.chMBFetch:0000000000000000 chMBFetch
     /tmp/ccxDjHBm.s:933    .text.chMBFetchI:0000000000000000 chMBFetchI

UNDEFINED SYMBOLS
chThdDequeueAllI
chSchRescheduleS
chThdEnqueueTimeoutS
chThdDequeueNextI

   1               		.file	"chcore.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text._port_switch,"ax",@progbits
  12               		.weak	_port_switch
  14               	_port_switch:
  15               	.LFB113:
  16               		.file 1 "../../../os/common/ports/AVR/chcore.c"
   1:../../../os/common/ports/AVR/chcore.c **** /*
   2:../../../os/common/ports/AVR/chcore.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.c **** 
   4:../../../os/common/ports/AVR/chcore.c ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.c **** 
   6:../../../os/common/ports/AVR/chcore.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.c ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.c **** 
  11:../../../os/common/ports/AVR/chcore.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.c ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.c **** 
  16:../../../os/common/ports/AVR/chcore.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.c **** */
  19:../../../os/common/ports/AVR/chcore.c **** 
  20:../../../os/common/ports/AVR/chcore.c **** /**
  21:../../../os/common/ports/AVR/chcore.c ****  * @file    AVR/chcore.c
  22:../../../os/common/ports/AVR/chcore.c ****  * @brief   AVR architecture port code.
  23:../../../os/common/ports/AVR/chcore.c ****  *
  24:../../../os/common/ports/AVR/chcore.c ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.c ****  * @{
  26:../../../os/common/ports/AVR/chcore.c ****  */
  27:../../../os/common/ports/AVR/chcore.c **** 
  28:../../../os/common/ports/AVR/chcore.c **** #include "ch.h"
  29:../../../os/common/ports/AVR/chcore.c **** 
  30:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  31:../../../os/common/ports/AVR/chcore.c **** /* Module local definitions.                                                 */
  32:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  33:../../../os/common/ports/AVR/chcore.c **** 
  34:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  35:../../../os/common/ports/AVR/chcore.c **** /* Module exported variables.                                                */
  36:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.c **** 
  38:../../../os/common/ports/AVR/chcore.c **** /* Executing-in-ISR global flag.*/
  39:../../../os/common/ports/AVR/chcore.c **** bool __avr_in_isr;
  40:../../../os/common/ports/AVR/chcore.c **** 
  41:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  42:../../../os/common/ports/AVR/chcore.c **** /* Module local types.                                                       */
  43:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  44:../../../os/common/ports/AVR/chcore.c **** 
  45:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  46:../../../os/common/ports/AVR/chcore.c **** /* Module local variables.                                                   */
  47:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  48:../../../os/common/ports/AVR/chcore.c **** 
  49:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  50:../../../os/common/ports/AVR/chcore.c **** /* Module local functions.                                                   */
  51:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  52:../../../os/common/ports/AVR/chcore.c **** 
  53:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  54:../../../os/common/ports/AVR/chcore.c **** /* Module exported functions.                                                */
  55:../../../os/common/ports/AVR/chcore.c **** /*===========================================================================*/
  56:../../../os/common/ports/AVR/chcore.c **** 
  57:../../../os/common/ports/AVR/chcore.c **** /**
  58:../../../os/common/ports/AVR/chcore.c ****  * @brief   Performs a context switch between two threads.
  59:../../../os/common/ports/AVR/chcore.c ****  * @details This is the most critical code in any port, this function
  60:../../../os/common/ports/AVR/chcore.c ****  *          is responsible for the context switch between 2 threads.
  61:../../../os/common/ports/AVR/chcore.c ****  * @note    The implementation of this code affects <b>directly</b> the context
  62:../../../os/common/ports/AVR/chcore.c ****  *          switch performance so optimize here as much as you can.
  63:../../../os/common/ports/AVR/chcore.c ****  *
  64:../../../os/common/ports/AVR/chcore.c ****  * @param[in] ntp       the thread to be switched in
  65:../../../os/common/ports/AVR/chcore.c ****  * @param[in] otp       the thread to be switched out
  66:../../../os/common/ports/AVR/chcore.c ****  *
  67:../../../os/common/ports/AVR/chcore.c ****  * @todo    Put into an asm module, use of naked attribute is problematic.
  68:../../../os/common/ports/AVR/chcore.c ****  */
  69:../../../os/common/ports/AVR/chcore.c **** #if !defined(__DOXYGEN__)
  70:../../../os/common/ports/AVR/chcore.c **** __attribute__((naked, weak))
  71:../../../os/common/ports/AVR/chcore.c **** #endif
  72:../../../os/common/ports/AVR/chcore.c **** void _port_switch(thread_t *ntp, thread_t *otp) {
  17               		.loc 1 72 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: naked */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  73:../../../os/common/ports/AVR/chcore.c **** 
  74:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r2");
  24               		.loc 1 74 0
  25               	/* #APP */
  26               	 ;  74 "../../../os/common/ports/AVR/chcore.c" 1
  27 0000 2F92      		push    r2
  28               	 ;  0 "" 2
  75:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r3");
  29               		.loc 1 75 0
  30               	 ;  75 "../../../os/common/ports/AVR/chcore.c" 1
  31 0002 3F92      		push    r3
  32               	 ;  0 "" 2
  76:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r4");
  33               		.loc 1 76 0
  34               	 ;  76 "../../../os/common/ports/AVR/chcore.c" 1
  35 0004 4F92      		push    r4
  36               	 ;  0 "" 2
  77:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r5");
  37               		.loc 1 77 0
  38               	 ;  77 "../../../os/common/ports/AVR/chcore.c" 1
  39 0006 5F92      		push    r5
  40               	 ;  0 "" 2
  78:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r6");
  41               		.loc 1 78 0
  42               	 ;  78 "../../../os/common/ports/AVR/chcore.c" 1
  43 0008 6F92      		push    r6
  44               	 ;  0 "" 2
  79:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r7");
  45               		.loc 1 79 0
  46               	 ;  79 "../../../os/common/ports/AVR/chcore.c" 1
  47 000a 7F92      		push    r7
  48               	 ;  0 "" 2
  80:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r8");
  49               		.loc 1 80 0
  50               	 ;  80 "../../../os/common/ports/AVR/chcore.c" 1
  51 000c 8F92      		push    r8
  52               	 ;  0 "" 2
  81:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r9");
  53               		.loc 1 81 0
  54               	 ;  81 "../../../os/common/ports/AVR/chcore.c" 1
  55 000e 9F92      		push    r9
  56               	 ;  0 "" 2
  82:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r10");
  57               		.loc 1 82 0
  58               	 ;  82 "../../../os/common/ports/AVR/chcore.c" 1
  59 0010 AF92      		push    r10
  60               	 ;  0 "" 2
  83:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r11");
  61               		.loc 1 83 0
  62               	 ;  83 "../../../os/common/ports/AVR/chcore.c" 1
  63 0012 BF92      		push    r11
  64               	 ;  0 "" 2
  84:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r12");
  65               		.loc 1 84 0
  66               	 ;  84 "../../../os/common/ports/AVR/chcore.c" 1
  67 0014 CF92      		push    r12
  68               	 ;  0 "" 2
  85:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r13");
  69               		.loc 1 85 0
  70               	 ;  85 "../../../os/common/ports/AVR/chcore.c" 1
  71 0016 DF92      		push    r13
  72               	 ;  0 "" 2
  86:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r14");
  73               		.loc 1 86 0
  74               	 ;  86 "../../../os/common/ports/AVR/chcore.c" 1
  75 0018 EF92      		push    r14
  76               	 ;  0 "" 2
  87:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r15");
  77               		.loc 1 87 0
  78               	 ;  87 "../../../os/common/ports/AVR/chcore.c" 1
  79 001a FF92      		push    r15
  80               	 ;  0 "" 2
  88:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r16");
  81               		.loc 1 88 0
  82               	 ;  88 "../../../os/common/ports/AVR/chcore.c" 1
  83 001c 0F93      		push    r16
  84               	 ;  0 "" 2
  89:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r17");
  85               		.loc 1 89 0
  86               	 ;  89 "../../../os/common/ports/AVR/chcore.c" 1
  87 001e 1F93      		push    r17
  88               	 ;  0 "" 2
  90:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r28");
  89               		.loc 1 90 0
  90               	 ;  90 "../../../os/common/ports/AVR/chcore.c" 1
  91 0020 CF93      		push    r28
  92               	 ;  0 "" 2
  91:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("push    r29");
  93               		.loc 1 91 0
  94               	 ;  91 "../../../os/common/ports/AVR/chcore.c" 1
  95 0022 DF93      		push    r29
  96               	 ;  0 "" 2
  92:../../../os/common/ports/AVR/chcore.c **** 
  93:../../../os/common/ports/AVR/chcore.c **** #if defined(_CHIBIOS_RT_)
  94:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("movw    r30, r22");
  97               		.loc 1 94 0
  98               	 ;  94 "../../../os/common/ports/AVR/chcore.c" 1
  99 0024 FB01      		movw    r30, r22
 100               	 ;  0 "" 2
  95:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("in      r0, 0x3d");
 101               		.loc 1 95 0
 102               	 ;  95 "../../../os/common/ports/AVR/chcore.c" 1
 103 0026 0DB6      		in      r0, 0x3d
 104               	 ;  0 "" 2
  96:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("std     Z+5, r0");
 105               		.loc 1 96 0
 106               	 ;  96 "../../../os/common/ports/AVR/chcore.c" 1
 107 0028 0582      		std     Z+5, r0
 108               	 ;  0 "" 2
  97:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("in      r0, 0x3e");
 109               		.loc 1 97 0
 110               	 ;  97 "../../../os/common/ports/AVR/chcore.c" 1
 111 002a 0EB6      		in      r0, 0x3e
 112               	 ;  0 "" 2
  98:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("std     Z+6, r0");
 113               		.loc 1 98 0
 114               	 ;  98 "../../../os/common/ports/AVR/chcore.c" 1
 115 002c 0682      		std     Z+6, r0
 116               	 ;  0 "" 2
  99:../../../os/common/ports/AVR/chcore.c **** 
 100:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("movw    r30, r24");
 117               		.loc 1 100 0
 118               	 ;  100 "../../../os/common/ports/AVR/chcore.c" 1
 119 002e FC01      		movw    r30, r24
 120               	 ;  0 "" 2
 101:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("ldd     r0, Z+5");
 121               		.loc 1 101 0
 122               	 ;  101 "../../../os/common/ports/AVR/chcore.c" 1
 123 0030 0580      		ldd     r0, Z+5
 124               	 ;  0 "" 2
 102:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("out     0x3d, r0");
 125               		.loc 1 102 0
 126               	 ;  102 "../../../os/common/ports/AVR/chcore.c" 1
 127 0032 0DBE      		out     0x3d, r0
 128               	 ;  0 "" 2
 103:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("ldd     r0, Z+6");
 129               		.loc 1 103 0
 130               	 ;  103 "../../../os/common/ports/AVR/chcore.c" 1
 131 0034 0680      		ldd     r0, Z+6
 132               	 ;  0 "" 2
 104:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("out     0x3e, r0");
 133               		.loc 1 104 0
 134               	 ;  104 "../../../os/common/ports/AVR/chcore.c" 1
 135 0036 0EBE      		out     0x3e, r0
 136               	 ;  0 "" 2
 105:../../../os/common/ports/AVR/chcore.c **** #endif
 106:../../../os/common/ports/AVR/chcore.c **** 
 107:../../../os/common/ports/AVR/chcore.c **** #if defined(_CHIBIOS_NIL_)
 108:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("movw    r30, r22");
 109:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("in      r0, 0x3d");
 110:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("std     Z+0, r0");
 111:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("in      r0, 0x3e");
 112:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("std     Z+1, r0");
 113:../../../os/common/ports/AVR/chcore.c **** 
 114:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("movw    r30, r24");
 115:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("ldd     r0, Z+0");
 116:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("out     0x3d, r0");
 117:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("ldd     r0, Z+1");
 118:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("out     0x3e, r0");
 119:../../../os/common/ports/AVR/chcore.c **** #endif
 120:../../../os/common/ports/AVR/chcore.c **** 
 121:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r29");
 137               		.loc 1 121 0
 138               	 ;  121 "../../../os/common/ports/AVR/chcore.c" 1
 139 0038 DF91      		pop     r29
 140               	 ;  0 "" 2
 122:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r28");
 141               		.loc 1 122 0
 142               	 ;  122 "../../../os/common/ports/AVR/chcore.c" 1
 143 003a CF91      		pop     r28
 144               	 ;  0 "" 2
 123:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r17");
 145               		.loc 1 123 0
 146               	 ;  123 "../../../os/common/ports/AVR/chcore.c" 1
 147 003c 1F91      		pop     r17
 148               	 ;  0 "" 2
 124:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r16");
 149               		.loc 1 124 0
 150               	 ;  124 "../../../os/common/ports/AVR/chcore.c" 1
 151 003e 0F91      		pop     r16
 152               	 ;  0 "" 2
 125:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r15");
 153               		.loc 1 125 0
 154               	 ;  125 "../../../os/common/ports/AVR/chcore.c" 1
 155 0040 FF90      		pop     r15
 156               	 ;  0 "" 2
 126:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r14");
 157               		.loc 1 126 0
 158               	 ;  126 "../../../os/common/ports/AVR/chcore.c" 1
 159 0042 EF90      		pop     r14
 160               	 ;  0 "" 2
 127:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r13");
 161               		.loc 1 127 0
 162               	 ;  127 "../../../os/common/ports/AVR/chcore.c" 1
 163 0044 DF90      		pop     r13
 164               	 ;  0 "" 2
 128:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r12");
 165               		.loc 1 128 0
 166               	 ;  128 "../../../os/common/ports/AVR/chcore.c" 1
 167 0046 CF90      		pop     r12
 168               	 ;  0 "" 2
 129:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r11");
 169               		.loc 1 129 0
 170               	 ;  129 "../../../os/common/ports/AVR/chcore.c" 1
 171 0048 BF90      		pop     r11
 172               	 ;  0 "" 2
 130:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r10");
 173               		.loc 1 130 0
 174               	 ;  130 "../../../os/common/ports/AVR/chcore.c" 1
 175 004a AF90      		pop     r10
 176               	 ;  0 "" 2
 131:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r9");
 177               		.loc 1 131 0
 178               	 ;  131 "../../../os/common/ports/AVR/chcore.c" 1
 179 004c 9F90      		pop     r9
 180               	 ;  0 "" 2
 132:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r8");
 181               		.loc 1 132 0
 182               	 ;  132 "../../../os/common/ports/AVR/chcore.c" 1
 183 004e 8F90      		pop     r8
 184               	 ;  0 "" 2
 133:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r7");
 185               		.loc 1 133 0
 186               	 ;  133 "../../../os/common/ports/AVR/chcore.c" 1
 187 0050 7F90      		pop     r7
 188               	 ;  0 "" 2
 134:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r6");
 189               		.loc 1 134 0
 190               	 ;  134 "../../../os/common/ports/AVR/chcore.c" 1
 191 0052 6F90      		pop     r6
 192               	 ;  0 "" 2
 135:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r5");
 193               		.loc 1 135 0
 194               	 ;  135 "../../../os/common/ports/AVR/chcore.c" 1
 195 0054 5F90      		pop     r5
 196               	 ;  0 "" 2
 136:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r4");
 197               		.loc 1 136 0
 198               	 ;  136 "../../../os/common/ports/AVR/chcore.c" 1
 199 0056 4F90      		pop     r4
 200               	 ;  0 "" 2
 137:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r3");
 201               		.loc 1 137 0
 202               	 ;  137 "../../../os/common/ports/AVR/chcore.c" 1
 203 0058 3F90      		pop     r3
 204               	 ;  0 "" 2
 138:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("pop     r2");
 205               		.loc 1 138 0
 206               	 ;  138 "../../../os/common/ports/AVR/chcore.c" 1
 207 005a 2F90      		pop     r2
 208               	 ;  0 "" 2
 139:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("ret");
 209               		.loc 1 139 0
 210               	 ;  139 "../../../os/common/ports/AVR/chcore.c" 1
 211 005c 0895      		ret
 212               	 ;  0 "" 2
 213               	/* epilogue start */
 140:../../../os/common/ports/AVR/chcore.c **** }
 214               		.loc 1 140 0
 215               	/* #NOAPP */
 216               		.cfi_endproc
 217               	.LFE113:
 219               		.section	.text._port_thread_start,"ax",@progbits
 220               	.global	_port_thread_start
 222               	_port_thread_start:
 223               	.LFB114:
 141:../../../os/common/ports/AVR/chcore.c **** 
 142:../../../os/common/ports/AVR/chcore.c **** /**
 143:../../../os/common/ports/AVR/chcore.c ****  * @brief   Start a thread by invoking its work function.
 144:../../../os/common/ports/AVR/chcore.c ****  * @details If the work function returns @p chThdExit() is automatically
 145:../../../os/common/ports/AVR/chcore.c ****  *          invoked.
 146:../../../os/common/ports/AVR/chcore.c ****  */
 147:../../../os/common/ports/AVR/chcore.c **** void _port_thread_start(void) {
 224               		.loc 1 147 0
 225               		.cfi_startproc
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
 230               	.LBB8:
 231               	.LBB9:
 232               	.LBB10:
 233               	.LBB11:
 234               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 235               		.loc 2 447 0
 236               	/* #APP */
 237               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 238 0000 7894      		sei
 239               	 ;  0 "" 2
 240               	/* #NOAPP */
 241               	.LBE11:
 242               	.LBE10:
 243               	.LBE9:
 244               	.LBE8:
 148:../../../os/common/ports/AVR/chcore.c **** 
 149:../../../os/common/ports/AVR/chcore.c ****   chSysUnlock();
 150:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("movw    r24, r4");
 245               		.loc 1 150 0
 246               	/* #APP */
 247               	 ;  150 "../../../os/common/ports/AVR/chcore.c" 1
 248 0002 C201      		movw    r24, r4
 249               	 ;  0 "" 2
 151:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("movw    r30, r2");
 250               		.loc 1 151 0
 251               	 ;  151 "../../../os/common/ports/AVR/chcore.c" 1
 252 0004 F101      		movw    r30, r2
 253               	 ;  0 "" 2
 152:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("icall");
 254               		.loc 1 152 0
 255               	 ;  152 "../../../os/common/ports/AVR/chcore.c" 1
 256 0006 0995      		icall
 257               	 ;  0 "" 2
 153:../../../os/common/ports/AVR/chcore.c **** #if defined(_CHIBIOS_RT_)
 154:../../../os/common/ports/AVR/chcore.c ****   asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
 258               		.loc 1 154 0
 259               	 ;  154 "../../../os/common/ports/AVR/chcore.c" 1
 260 0008 0E94 0000 		call    chThdExit
 261               	 ;  0 "" 2
 262               	/* #NOAPP */
 263 000c 0895      		ret
 264               		.cfi_endproc
 265               	.LFE114:
 267               		.comm	__avr_in_isr,1,1
 268               		.text
 269               	.Letext0:
 270               		.file 3 "/usr/lib/avr/include/stdint.h"
 271               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 272               		.file 5 "../../../os/rt/include/chsystypes.h"
 273               		.file 6 "../../../os/rt/include/chschd.h"
 274               		.file 7 "../../../os/rt/include/chsem.h"
 275               		.file 8 "../../../os/rt/include/chmtx.h"
 276               		.file 9 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chcore.c
     /tmp/ccNVcTRv.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccNVcTRv.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccNVcTRv.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccNVcTRv.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccNVcTRv.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccNVcTRv.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccNVcTRv.s:14     .text._port_switch:0000000000000000 _port_switch
     /tmp/ccNVcTRv.s:222    .text._port_thread_start:0000000000000000 _port_thread_start
                            *COM*:0000000000000001 __avr_in_isr

UNDEFINED SYMBOLS
chThdExit
__do_clear_bss

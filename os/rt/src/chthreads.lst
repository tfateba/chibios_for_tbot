   1               		.file	"chthreads.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text._thread_init,"ax",@progbits
  12               	.global	_thread_init
  14               	_thread_init:
  15               	.LFB113:
  16               		.file 1 "../../../os/rt/src/chthreads.c"
   1:../../../os/rt/src/chthreads.c **** /*
   2:../../../os/rt/src/chthreads.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/src/chthreads.c **** 
   4:../../../os/rt/src/chthreads.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chthreads.c **** 
   6:../../../os/rt/src/chthreads.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chthreads.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chthreads.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chthreads.c ****     (at your option) any later version.
  10:../../../os/rt/src/chthreads.c **** 
  11:../../../os/rt/src/chthreads.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chthreads.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chthreads.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chthreads.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chthreads.c **** 
  16:../../../os/rt/src/chthreads.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chthreads.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chthreads.c **** */
  19:../../../os/rt/src/chthreads.c **** 
  20:../../../os/rt/src/chthreads.c **** /**
  21:../../../os/rt/src/chthreads.c ****  * @file    chthreads.c
  22:../../../os/rt/src/chthreads.c ****  * @brief   Threads code.
  23:../../../os/rt/src/chthreads.c ****  *
  24:../../../os/rt/src/chthreads.c ****  * @addtogroup threads
  25:../../../os/rt/src/chthreads.c ****  * @details Threads related APIs and services.
  26:../../../os/rt/src/chthreads.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chthreads.c ****  *          A thread is an abstraction of an independent instructions flow.
  28:../../../os/rt/src/chthreads.c ****  *          In ChibiOS/RT a thread is represented by a "C" function owning
  29:../../../os/rt/src/chthreads.c ****  *          a processor context, state informations and a dedicated stack
  30:../../../os/rt/src/chthreads.c ****  *          area. In this scenario static variables are shared among all
  31:../../../os/rt/src/chthreads.c ****  *          threads while automatic variables are local to the thread.<br>
  32:../../../os/rt/src/chthreads.c ****  *          Operations defined for threads:
  33:../../../os/rt/src/chthreads.c ****  *          - <b>Create</b>, a thread is started on the specified thread
  34:../../../os/rt/src/chthreads.c ****  *            function. This operation is available in multiple variants,
  35:../../../os/rt/src/chthreads.c ****  *            both static and dynamic.
  36:../../../os/rt/src/chthreads.c ****  *          - <b>Exit</b>, a thread terminates by returning from its top
  37:../../../os/rt/src/chthreads.c ****  *            level function or invoking a specific API, the thread can
  38:../../../os/rt/src/chthreads.c ****  *            return a value that can be retrieved by other threads.
  39:../../../os/rt/src/chthreads.c ****  *          - <b>Wait</b>, a thread waits for the termination of another
  40:../../../os/rt/src/chthreads.c ****  *            thread and retrieves its return value.
  41:../../../os/rt/src/chthreads.c ****  *          - <b>Resume</b>, a thread created in suspended state is started.
  42:../../../os/rt/src/chthreads.c ****  *          - <b>Sleep</b>, the execution of a thread is suspended for the
  43:../../../os/rt/src/chthreads.c ****  *            specified amount of time or the specified future absolute time
  44:../../../os/rt/src/chthreads.c ****  *            is reached.
  45:../../../os/rt/src/chthreads.c ****  *          - <b>SetPriority</b>, a thread changes its own priority level.
  46:../../../os/rt/src/chthreads.c ****  *          - <b>Yield</b>, a thread voluntarily renounces to its time slot.
  47:../../../os/rt/src/chthreads.c ****  *          .
  48:../../../os/rt/src/chthreads.c ****  * @{
  49:../../../os/rt/src/chthreads.c ****  */
  50:../../../os/rt/src/chthreads.c **** 
  51:../../../os/rt/src/chthreads.c **** #include "ch.h"
  52:../../../os/rt/src/chthreads.c **** 
  53:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  54:../../../os/rt/src/chthreads.c **** /* Module local definitions.                                                 */
  55:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  56:../../../os/rt/src/chthreads.c **** 
  57:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  58:../../../os/rt/src/chthreads.c **** /* Module exported variables.                                                */
  59:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  60:../../../os/rt/src/chthreads.c **** 
  61:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  62:../../../os/rt/src/chthreads.c **** /* Module local types.                                                       */
  63:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  64:../../../os/rt/src/chthreads.c **** 
  65:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  66:../../../os/rt/src/chthreads.c **** /* Module local variables.                                                   */
  67:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  68:../../../os/rt/src/chthreads.c **** 
  69:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  70:../../../os/rt/src/chthreads.c **** /* Module local functions.                                                   */
  71:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  72:../../../os/rt/src/chthreads.c **** 
  73:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  74:../../../os/rt/src/chthreads.c **** /* Module exported functions.                                                */
  75:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  76:../../../os/rt/src/chthreads.c **** 
  77:../../../os/rt/src/chthreads.c **** /**
  78:../../../os/rt/src/chthreads.c ****  * @brief   Initializes a thread structure.
  79:../../../os/rt/src/chthreads.c ****  * @note    This is an internal functions, do not use it in application code.
  80:../../../os/rt/src/chthreads.c ****  *
  81:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
  82:../../../os/rt/src/chthreads.c ****  * @param[in] name      thread name
  83:../../../os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
  84:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter.
  85:../../../os/rt/src/chthreads.c ****  *
  86:../../../os/rt/src/chthreads.c ****  * @notapi
  87:../../../os/rt/src/chthreads.c ****  */
  88:../../../os/rt/src/chthreads.c **** thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
  17               		.loc 1 88 0
  18               		.cfi_startproc
  19               	.LVL0:
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 28, -3
  24 0002 DF93      		push r29
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 5
  27               		.cfi_offset 29, -4
  28               	/* prologue: function */
  29               	/* frame size = 0 */
  30               	/* stack size = 2 */
  31               	.L__stack_usage = 2
  32 0004 FC01      		movw r30,r24
  89:../../../os/rt/src/chthreads.c **** 
  90:../../../os/rt/src/chthreads.c ****   tp->prio      = prio;
  33               		.loc 1 90 0
  34 0006 4483      		std Z+4,r20
  91:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
  35               		.loc 1 91 0
  36 0008 82E0      		ldi r24,lo8(2)
  37               	.LVL1:
  38 000a 8587      		std Z+13,r24
  92:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
  39               		.loc 1 92 0
  40 000c 1686      		std Z+14,__zero_reg__
  93:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
  94:../../../os/rt/src/chthreads.c ****   tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
  95:../../../os/rt/src/chthreads.c **** #endif
  96:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
  97:../../../os/rt/src/chthreads.c ****   tp->realprio  = prio;
  41               		.loc 1 97 0
  42 000e 438F      		std Z+27,r20
  98:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
  43               		.loc 1 98 0
  44 0010 128E      		std Z+26,__zero_reg__
  45 0012 118E      		std Z+25,__zero_reg__
  99:../../../os/rt/src/chthreads.c **** #endif
 100:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_EVENTS == TRUE
 101:../../../os/rt/src/chthreads.c ****   tp->epending  = (eventmask_t)0;
  46               		.loc 1 101 0
  47 0014 108E      		std Z+24,__zero_reg__
 102:../../../os/rt/src/chthreads.c **** #endif
 103:../../../os/rt/src/chthreads.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 104:../../../os/rt/src/chthreads.c ****   tp->time      = (systime_t)0;
 105:../../../os/rt/src/chthreads.c **** #endif
 106:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 107:../../../os/rt/src/chthreads.c ****   tp->refs      = (trefs_t)1;
  48               		.loc 1 107 0
  49 0016 81E0      		ldi r24,lo8(1)
  50 0018 8787      		std Z+15,r24
 108:../../../os/rt/src/chthreads.c ****   tp->name      = name;
  51               		.loc 1 108 0
  52 001a 7487      		std Z+12,r23
  53 001c 6387      		std Z+11,r22
 109:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
  54               		.loc 1 109 0
  55 001e A0E0      		ldi r26,lo8(ch)
  56 0020 B0E0      		ldi r27,hi8(ch)
  57 0022 B087      		std Z+8,r27
  58 0024 A783      		std Z+7,r26
  59 0026 1996      		adiw r26,9
  60 0028 CD91      		ld r28,X+
  61 002a DC91      		ld r29,X
  62 002c 1A97      		sbiw r26,9+1
  63 002e D287      		std Z+10,r29
  64 0030 C187      		std Z+9,r28
  65 0032 F887      		std Y+8,r31
  66 0034 EF83      		std Y+7,r30
  67 0036 1A96      		adiw r26,9+1
  68 0038 FC93      		st X,r31
  69 003a EE93      		st -X,r30
  70 003c 1997      		sbiw r26,9
  71               	.LVL2:
 110:../../../os/rt/src/chthreads.c **** #else
 111:../../../os/rt/src/chthreads.c ****   (void)name;
 112:../../../os/rt/src/chthreads.c **** #endif
 113:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 114:../../../os/rt/src/chthreads.c ****   list_init(&tp->waiting);
  72               		.loc 1 114 0
  73 003e CF01      		movw r24,r30
  74 0040 4296      		adiw r24,18
  75               	.LVL3:
  76               	.LBB214:
  77               	.LBB215:
  78               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:../../../os/rt/include/chschd.h **** #endif
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:../../../os/rt/include/chschd.h **** #endif
 124:../../../os/rt/include/chschd.h **** 
 125:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:../../../os/rt/include/chschd.h **** #endif
 128:../../../os/rt/include/chschd.h **** 
 129:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 130:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 132:../../../os/rt/include/chschd.h **** 
 133:../../../os/rt/include/chschd.h **** /**
 134:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:../../../os/rt/include/chschd.h ****  */
 136:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 137:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:../../../os/rt/include/chschd.h **** };
 139:../../../os/rt/include/chschd.h **** 
 140:../../../os/rt/include/chschd.h **** /**
 141:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:../../../os/rt/include/chschd.h ****  */
 143:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 144:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:../../../os/rt/include/chschd.h **** };
 147:../../../os/rt/include/chschd.h **** 
 148:../../../os/rt/include/chschd.h **** /**
 149:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:../../../os/rt/include/chschd.h ****  */
 154:../../../os/rt/include/chschd.h **** struct ch_thread {
 155:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:../../../os/rt/include/chschd.h **** #endif
 162:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:../../../os/rt/include/chschd.h ****   /**
 165:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:../../../os/rt/include/chschd.h ****    */
 167:../../../os/rt/include/chschd.h ****   const char            *name;
 168:../../../os/rt/include/chschd.h **** #endif
 169:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:../../../os/rt/include/chschd.h ****   /**
 172:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 175:../../../os/rt/include/chschd.h ****    */
 176:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:../../../os/rt/include/chschd.h **** #endif
 178:../../../os/rt/include/chschd.h ****   /**
 179:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:../../../os/rt/include/chschd.h ****    */
 181:../../../os/rt/include/chschd.h ****   tstate_t              state;
 182:../../../os/rt/include/chschd.h ****   /**
 183:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:../../../os/rt/include/chschd.h ****    */
 185:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 186:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:../../../os/rt/include/chschd.h ****    */
 190:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 191:../../../os/rt/include/chschd.h **** #endif
 192:../../../os/rt/include/chschd.h ****   /**
 193:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:../../../os/rt/include/chschd.h ****    */
 195:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:../../../os/rt/include/chschd.h ****   tslices_t             preempt;
 197:../../../os/rt/include/chschd.h **** #endif
 198:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:../../../os/rt/include/chschd.h ****   /**
 200:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:../../../os/rt/include/chschd.h ****    */
 203:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 204:../../../os/rt/include/chschd.h **** #endif
 205:../../../os/rt/include/chschd.h ****   /**
 206:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:../../../os/rt/include/chschd.h ****    */
 210:../../../os/rt/include/chschd.h ****   union {
 211:../../../os/rt/include/chschd.h ****     /**
 212:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:../../../os/rt/include/chschd.h ****      */
 217:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:../../../os/rt/include/chschd.h ****     /**
 219:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:../../../os/rt/include/chschd.h ****      *          this thread.
 223:../../../os/rt/include/chschd.h ****      */
 224:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 225:../../../os/rt/include/chschd.h ****     /**
 226:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:../../../os/rt/include/chschd.h ****      *          states.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 232:../../../os/rt/include/chschd.h ****     /**
 233:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:../../../os/rt/include/chschd.h ****      *          state.
 237:../../../os/rt/include/chschd.h ****      */
 238:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:../../../os/rt/include/chschd.h ****     /**
 241:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:../../../os/rt/include/chschd.h ****      */
 243:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:../../../os/rt/include/chschd.h **** #endif
 245:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:../../../os/rt/include/chschd.h ****     /**
 247:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:../../../os/rt/include/chschd.h ****      *          state.
 251:../../../os/rt/include/chschd.h ****      */
 252:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:../../../os/rt/include/chschd.h **** #endif
 254:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:../../../os/rt/include/chschd.h ****     /**
 256:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:../../../os/rt/include/chschd.h ****      *          state.
 260:../../../os/rt/include/chschd.h ****      */
 261:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:../../../os/rt/include/chschd.h **** #endif
 263:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:../../../os/rt/include/chschd.h ****     /**
 265:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:../../../os/rt/include/chschd.h ****      */
 269:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:../../../os/rt/include/chschd.h **** #endif
 271:../../../os/rt/include/chschd.h ****   }                     u;
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:../../../os/rt/include/chschd.h ****    */
 282:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:../../../os/rt/include/chschd.h **** #endif
 284:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:../../../os/rt/include/chschd.h ****   /**
 286:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:../../../os/rt/include/chschd.h ****    */
 288:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 289:../../../os/rt/include/chschd.h **** #endif
 290:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:../../../os/rt/include/chschd.h ****    */
 295:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:../../../os/rt/include/chschd.h ****   /**
 297:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:../../../os/rt/include/chschd.h ****    */
 299:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 300:../../../os/rt/include/chschd.h **** #endif
 301:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:../../../os/rt/include/chschd.h ****   /**
 304:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:../../../os/rt/include/chschd.h ****    */
 306:../../../os/rt/include/chschd.h ****   void                  *mpool;
 307:../../../os/rt/include/chschd.h **** #endif
 308:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:../../../os/rt/include/chschd.h ****   /**
 310:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:../../../os/rt/include/chschd.h ****    */
 312:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:../../../os/rt/include/chschd.h **** #endif
 314:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:../../../os/rt/include/chschd.h **** #endif
 318:../../../os/rt/include/chschd.h **** };
 319:../../../os/rt/include/chschd.h **** 
 320:../../../os/rt/include/chschd.h **** /**
 321:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:../../../os/rt/include/chschd.h ****  *
 323:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:../../../os/rt/include/chschd.h ****  */
 325:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 331:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 333:../../../os/rt/include/chschd.h **** };
 334:../../../os/rt/include/chschd.h **** 
 335:../../../os/rt/include/chschd.h **** /**
 336:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:../../../os/rt/include/chschd.h ****  */
 341:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:../../../os/rt/include/chschd.h ****                                                 list.                       */
 344:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:../../../os/rt/include/chschd.h ****                                                 list.                       */
 346:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:../../../os/rt/include/chschd.h **** #endif
 350:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:../../../os/rt/include/chschd.h ****   /**
 352:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:../../../os/rt/include/chschd.h ****    */
 354:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 356:../../../os/rt/include/chschd.h **** #endif
 357:../../../os/rt/include/chschd.h **** };
 358:../../../os/rt/include/chschd.h **** 
 359:../../../os/rt/include/chschd.h **** /**
 360:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:../../../os/rt/include/chschd.h ****  */
 362:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 363:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 368:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:../../../os/rt/include/chschd.h **** #endif
 372:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 375:../../../os/rt/include/chschd.h **** };
 376:../../../os/rt/include/chschd.h **** 
 377:../../../os/rt/include/chschd.h **** /**
 378:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:../../../os/rt/include/chschd.h ****  */
 380:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 381:../../../os/rt/include/chschd.h ****   /**
 382:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:../../../os/rt/include/chschd.h ****    */
 388:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:../../../os/rt/include/chschd.h ****   /**
 391:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:../../../os/rt/include/chschd.h ****    */
 393:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:../../../os/rt/include/chschd.h ****   /**
 395:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:../../../os/rt/include/chschd.h ****    */
 397:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:../../../os/rt/include/chschd.h **** #endif
 399:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:../../../os/rt/include/chschd.h ****   /**
 401:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:../../../os/rt/include/chschd.h ****    */
 403:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:../../../os/rt/include/chschd.h **** #endif
 405:../../../os/rt/include/chschd.h **** };
 406:../../../os/rt/include/chschd.h **** 
 407:../../../os/rt/include/chschd.h **** /**
 408:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 409:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:../../../os/rt/include/chschd.h ****  *          stacks.
 411:../../../os/rt/include/chschd.h ****  */
 412:../../../os/rt/include/chschd.h **** struct ch_system {
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:../../../os/rt/include/chschd.h ****   /**
 418:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:../../../os/rt/include/chschd.h ****    */
 420:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:../../../os/rt/include/chschd.h ****   /**
 422:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 423:../../../os/rt/include/chschd.h ****    */
 424:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:../../../os/rt/include/chschd.h ****   /**
 426:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:../../../os/rt/include/chschd.h ****    */
 428:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 429:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:../../../os/rt/include/chschd.h ****   /**
 431:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:../../../os/rt/include/chschd.h ****    */
 433:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:../../../os/rt/include/chschd.h **** #endif
 435:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:../../../os/rt/include/chschd.h ****   /**
 437:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:../../../os/rt/include/chschd.h ****    */
 439:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:../../../os/rt/include/chschd.h **** #endif
 441:../../../os/rt/include/chschd.h **** };
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 444:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 446:../../../os/rt/include/chschd.h **** 
 447:../../../os/rt/include/chschd.h **** /**
 448:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:../../../os/rt/include/chschd.h ****  *
 450:../../../os/rt/include/chschd.h ****  * @notapi
 451:../../../os/rt/include/chschd.h ****  */
 452:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** /**
 455:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:../../../os/rt/include/chschd.h ****  */
 459:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:../../../os/rt/include/chschd.h **** 
 461:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 462:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 464:../../../os/rt/include/chschd.h **** 
 465:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 467:../../../os/rt/include/chschd.h **** #endif
 468:../../../os/rt/include/chschd.h **** 
 469:../../../os/rt/include/chschd.h **** /*
 470:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 471:../../../os/rt/include/chschd.h ****  */
 472:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 473:../../../os/rt/include/chschd.h **** extern "C" {
 474:../../../os/rt/include/chschd.h **** #endif
 475:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 496:../../../os/rt/include/chschd.h **** }
 497:../../../os/rt/include/chschd.h **** #endif
 498:../../../os/rt/include/chschd.h **** 
 499:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 500:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 502:../../../os/rt/include/chschd.h **** 
 503:../../../os/rt/include/chschd.h **** /**
 504:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:../../../os/rt/include/chschd.h ****  *
 506:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:../../../os/rt/include/chschd.h ****  *
 508:../../../os/rt/include/chschd.h ****  * @notapi
 509:../../../os/rt/include/chschd.h ****  */
 510:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:../../../os/rt/include/chschd.h **** 
 512:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
  79               		.loc 2 512 0
  80 0042 938B      		std Z+19,r25
  81 0044 828B      		std Z+18,r24
  82               	.LVL4:
  83               	.LBE215:
  84               	.LBE214:
 115:../../../os/rt/src/chthreads.c **** #endif
 116:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MESSAGES == TRUE
 117:../../../os/rt/src/chthreads.c ****   queue_init(&tp->msgqueue);
  85               		.loc 1 117 0
  86 0046 0296      		adiw r24,2
  87               	.LVL5:
  88               	.LBB216:
  89               	.LBB217:
 513:../../../os/rt/include/chschd.h **** }
 514:../../../os/rt/include/chschd.h **** 
 515:../../../os/rt/include/chschd.h **** /**
 516:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:../../../os/rt/include/chschd.h ****  *
 518:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 520:../../../os/rt/include/chschd.h ****  *
 521:../../../os/rt/include/chschd.h ****  * @notapi
 522:../../../os/rt/include/chschd.h ****  */
 523:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:../../../os/rt/include/chschd.h **** 
 525:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:../../../os/rt/include/chschd.h **** }
 527:../../../os/rt/include/chschd.h **** 
 528:../../../os/rt/include/chschd.h **** /**
 529:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:../../../os/rt/include/chschd.h ****  *
 531:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 533:../../../os/rt/include/chschd.h ****  *
 534:../../../os/rt/include/chschd.h ****  * @notapi
 535:../../../os/rt/include/chschd.h ****  */
 536:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:../../../os/rt/include/chschd.h **** 
 538:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:../../../os/rt/include/chschd.h **** }
 540:../../../os/rt/include/chschd.h **** 
 541:../../../os/rt/include/chschd.h **** /**
 542:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:../../../os/rt/include/chschd.h ****  *
 544:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @notapi
 547:../../../os/rt/include/chschd.h ****  */
 548:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:../../../os/rt/include/chschd.h **** 
 550:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  90               		.loc 2 550 0
  91 0048 958B      		std Z+21,r25
  92 004a 848B      		std Z+20,r24
 551:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  93               		.loc 2 551 0
  94 004c 978B      		std Z+23,r25
  95 004e 868B      		std Z+22,r24
  96               	.LVL6:
  97               	.LBE217:
  98               	.LBE216:
 118:../../../os/rt/src/chthreads.c **** #endif
 119:../../../os/rt/src/chthreads.c **** #if CH_DBG_STATISTICS == TRUE
 120:../../../os/rt/src/chthreads.c ****   chTMObjectInit(&tp->stats);
 121:../../../os/rt/src/chthreads.c **** #endif
 122:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_INIT_HOOK(tp);
 123:../../../os/rt/src/chthreads.c ****   return tp;
 124:../../../os/rt/src/chthreads.c **** }
  99               		.loc 1 124 0
 100 0050 CF01      		movw r24,r30
 101               	/* epilogue start */
 102 0052 DF91      		pop r29
 103 0054 CF91      		pop r28
 104 0056 0895      		ret
 105               		.cfi_endproc
 106               	.LFE113:
 108               		.section	.text.chThdCreateSuspendedI,"ax",@progbits
 109               	.global	chThdCreateSuspendedI
 111               	chThdCreateSuspendedI:
 112               	.LFB114:
 125:../../../os/rt/src/chthreads.c **** 
 126:../../../os/rt/src/chthreads.c **** #if (CH_DBG_FILL_THREADS == TRUE) || defined(__DOXYGEN__)
 127:../../../os/rt/src/chthreads.c **** /**
 128:../../../os/rt/src/chthreads.c ****  * @brief   Memory fill utility.
 129:../../../os/rt/src/chthreads.c ****  *
 130:../../../os/rt/src/chthreads.c ****  * @param[in] startp    first address to fill
 131:../../../os/rt/src/chthreads.c ****  * @param[in] endp      last address to fill +1
 132:../../../os/rt/src/chthreads.c ****  * @param[in] v         filler value
 133:../../../os/rt/src/chthreads.c ****  *
 134:../../../os/rt/src/chthreads.c ****  * @notapi
 135:../../../os/rt/src/chthreads.c ****  */
 136:../../../os/rt/src/chthreads.c **** void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
 137:../../../os/rt/src/chthreads.c **** 
 138:../../../os/rt/src/chthreads.c ****   while (startp < endp) {
 139:../../../os/rt/src/chthreads.c ****     *startp++ = v;
 140:../../../os/rt/src/chthreads.c ****   }
 141:../../../os/rt/src/chthreads.c **** }
 142:../../../os/rt/src/chthreads.c **** #endif /* CH_DBG_FILL_THREADS */
 143:../../../os/rt/src/chthreads.c **** 
 144:../../../os/rt/src/chthreads.c **** /**
 145:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 146:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 147:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 148:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 149:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 150:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 151:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 152:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 153:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 154:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 155:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 156:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 157:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 158:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 159:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 160:../../../os/rt/src/chthreads.c ****  *
 161:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 162:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 163:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 164:../../../os/rt/src/chthreads.c ****  *
 165:../../../os/rt/src/chthreads.c ****  * @iclass
 166:../../../os/rt/src/chthreads.c ****  */
 167:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 113               		.loc 1 167 0
 114               		.cfi_startproc
 115               	.LVL7:
 116 0000 CF93      		push r28
 117               	.LCFI2:
 118               		.cfi_def_cfa_offset 4
 119               		.cfi_offset 28, -3
 120 0002 DF93      		push r29
 121               	.LCFI3:
 122               		.cfi_def_cfa_offset 5
 123               		.cfi_offset 29, -4
 124               	/* prologue: function */
 125               	/* frame size = 0 */
 126               	/* stack size = 2 */
 127               	.L__stack_usage = 2
 168:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 169:../../../os/rt/src/chthreads.c **** 
 170:../../../os/rt/src/chthreads.c ****   chDbgCheckClassI();
 171:../../../os/rt/src/chthreads.c ****   chDbgCheck(tdp != NULL);
 172:../../../os/rt/src/chthreads.c ****   chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 173:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
 174:../../../os/rt/src/chthreads.c ****              (tdp->wend > tdp->wbase) &&
 175:../../../os/rt/src/chthreads.c ****              (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
 176:../../../os/rt/src/chthreads.c ****   chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 177:../../../os/rt/src/chthreads.c **** 
 178:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 179:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 180:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 181:../../../os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)tdp->wend -
 128               		.loc 1 181 0
 129 0004 DC01      		movw r26,r24
 130 0006 1496      		adiw r26,4
 131 0008 4D91      		ld r20,X+
 132 000a 5C91      		ld r21,X
 133 000c 1597      		sbiw r26,4+1
 134 000e FA01      		movw r30,r20
 135 0010 7C97      		sbiw r30,28
 136               	.LVL8:
 182:../../../os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 183:../../../os/rt/src/chthreads.c **** 
 184:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 185:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 186:../../../os/rt/src/chthreads.c ****   tp->wabase = tdp->wbase;
 187:../../../os/rt/src/chthreads.c **** #endif
 188:../../../os/rt/src/chthreads.c **** 
 189:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 190:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 137               		.loc 1 190 0
 138 0012 EA01      		movw r28,r20
 139 0014 E297      		sbiw r28,50
 140 0016 D683      		std Z+6,r29
 141 0018 C583      		std Z+5,r28
 142 001a 1796      		adiw r26,7
 143 001c 2C91      		ld r18,X
 144 001e 1797      		sbiw r26,7
 145 0020 2A8B      		std Y+18,r18
 146 0022 1896      		adiw r26,8
 147 0024 2C91      		ld r18,X
 148 0026 1897      		sbiw r26,8
 149 0028 298B      		std Y+17,r18
 150 002a 1996      		adiw r26,9
 151 002c 2C91      		ld r18,X
 152 002e 1997      		sbiw r26,9
 153 0030 288B      		std Y+16,r18
 154 0032 1A96      		adiw r26,10
 155 0034 2C91      		ld r18,X
 156 0036 1A97      		sbiw r26,10
 157 0038 2F87      		std Y+15,r18
 158 003a 1B8A      		std Y+19,__zero_reg__
 159 003c 20E0      		ldi r18,lo8(gs(_port_thread_start))
 160 003e 30E0      		ldi r19,hi8(gs(_port_thread_start))
 161 0040 3C8B      		std Y+20,r19
 162 0042 2D8B      		std Y+21,r18
 191:../../../os/rt/src/chthreads.c **** 
 192:../../../os/rt/src/chthreads.c ****   /* The driver object is initialized but not started.*/
 193:../../../os/rt/src/chthreads.c ****   return _thread_init(tp, tdp->name, tdp->prio);
 163               		.loc 1 193 0
 164 0044 1696      		adiw r26,6
 165 0046 2C91      		ld r18,X
 166 0048 1697      		sbiw r26,6
 167 004a 8D91      		ld r24,X+
 168 004c 9C91      		ld r25,X
 169               	.LVL9:
 170               	.LBB218:
 171               	.LBB219:
  90:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 172               		.loc 1 90 0
 173 004e 2483      		std Z+4,r18
  91:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 174               		.loc 1 91 0
 175 0050 32E0      		ldi r19,lo8(2)
 176 0052 3587      		std Z+13,r19
  92:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 177               		.loc 1 92 0
 178 0054 1686      		std Z+14,__zero_reg__
  97:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 179               		.loc 1 97 0
 180 0056 238F      		std Z+27,r18
  98:../../../os/rt/src/chthreads.c **** #endif
 181               		.loc 1 98 0
 182 0058 128E      		std Z+26,__zero_reg__
 183 005a 118E      		std Z+25,__zero_reg__
 101:../../../os/rt/src/chthreads.c **** #endif
 184               		.loc 1 101 0
 185 005c 108E      		std Z+24,__zero_reg__
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 186               		.loc 1 107 0
 187 005e 21E0      		ldi r18,lo8(1)
 188               	.LVL10:
 189 0060 2787      		std Z+15,r18
 108:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
 190               		.loc 1 108 0
 191 0062 9487      		std Z+12,r25
 192 0064 8387      		std Z+11,r24
 109:../../../os/rt/src/chthreads.c **** #else
 193               		.loc 1 109 0
 194 0066 C0E0      		ldi r28,lo8(ch)
 195 0068 D0E0      		ldi r29,hi8(ch)
 196 006a D087      		std Z+8,r29
 197 006c C783      		std Z+7,r28
 198 006e 8985      		ldd r24,Y+9
 199 0070 9A85      		ldd r25,Y+10
 200               	.LVL11:
 201 0072 9287      		std Z+10,r25
 202 0074 8187      		std Z+9,r24
 203 0076 DC01      		movw r26,r24
 204               	.LVL12:
 205 0078 1896      		adiw r26,7+1
 206 007a FC93      		st X,r31
 207 007c EE93      		st -X,r30
 208 007e 1797      		sbiw r26,7
 209               	.LVL13:
 210 0080 FA87      		std Y+10,r31
 211 0082 E987      		std Y+9,r30
 212               	.LVL14:
 213               	.LBB220:
 214               	.LBB221:
 512:../../../os/rt/include/chschd.h **** }
 215               		.loc 2 512 0
 216 0084 EA01      		movw r28,r20
 217 0086 2A97      		sbiw r28,10
 218               	.LVL15:
 219 0088 D983      		std Y+1,r29
 220 008a C883      		st Y,r28
 221               	.LVL16:
 222               	.LBE221:
 223               	.LBE220:
 117:../../../os/rt/src/chthreads.c **** #endif
 224               		.loc 1 117 0
 225 008c DA01      		movw r26,r20
 226 008e 1897      		sbiw r26,8
 227               	.LVL17:
 228               	.LBB222:
 229               	.LBB223:
 550:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 230               		.loc 2 550 0
 231 0090 0B2E      		mov __tmp_reg__,r27
 232 0092 1196      		adiw r26,1
 233 0094 0C92      		st X,__tmp_reg__
 234 0096 1197      		sbiw r26,1
 235 0098 AC93      		st X,r26
 236               		.loc 2 551 0
 237 009a 0A2E      		mov __tmp_reg__,r26
 238 009c 1B2E      		mov __zero_reg__,r27
 239 009e 1396      		adiw r26,2+1
 240 00a0 1C92      		st X,__zero_reg__
 241 00a2 0E92      		st -X,__tmp_reg__
 242 00a4 1124      		clr __zero_reg__
 243 00a6 1297      		sbiw r26,2
 244               	.LVL18:
 245               	.LBE223:
 246               	.LBE222:
 247               	.LBE219:
 248               	.LBE218:
 194:../../../os/rt/src/chthreads.c **** }
 249               		.loc 1 194 0
 250 00a8 CF01      		movw r24,r30
 251               	/* epilogue start */
 252 00aa DF91      		pop r29
 253 00ac CF91      		pop r28
 254 00ae 0895      		ret
 255               		.cfi_endproc
 256               	.LFE114:
 258               		.section	.text.chThdCreateSuspended,"ax",@progbits
 259               	.global	chThdCreateSuspended
 261               	chThdCreateSuspended:
 262               	.LFB115:
 195:../../../os/rt/src/chthreads.c **** 
 196:../../../os/rt/src/chthreads.c **** /**
 197:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 198:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 199:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 200:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 201:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 202:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 203:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 204:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 205:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 206:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 207:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 208:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 209:../../../os/rt/src/chthreads.c ****  *
 210:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 211:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 212:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 213:../../../os/rt/src/chthreads.c ****  *
 214:../../../os/rt/src/chthreads.c ****  * @api
 215:../../../os/rt/src/chthreads.c ****  */
 216:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 263               		.loc 1 216 0
 264               		.cfi_startproc
 265               	.LVL19:
 266               	/* prologue: function */
 267               	/* frame size = 0 */
 268               	/* stack size = 0 */
 269               	.L__stack_usage = 0
 270               	.LBB224:
 271               	.LBB225:
 272               	.LBB226:
 273               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 274               		.loc 3 437 0
 275               	/* #APP */
 276               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 277 0000 F894      		cli
 278               	 ;  0 "" 2
 279               	/* #NOAPP */
 280               	.LBE226:
 281               	.LBE225:
 282               	.LBE224:
 217:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 218:../../../os/rt/src/chthreads.c **** 
 219:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 220:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 221:../../../os/rt/src/chthreads.c ****               "working area in use");
 222:../../../os/rt/src/chthreads.c **** #endif
 223:../../../os/rt/src/chthreads.c **** 
 224:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 225:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 226:../../../os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 227:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 228:../../../os/rt/src/chthreads.c **** #endif
 229:../../../os/rt/src/chthreads.c **** 
 230:../../../os/rt/src/chthreads.c ****   chSysLock();
 231:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 283               		.loc 1 231 0
 284 0002 0E94 0000 		call chThdCreateSuspendedI
 285               	.LVL20:
 286               	.LBB227:
 287               	.LBB228:
 288               	.LBB229:
 289               	.LBB230:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 290               		.loc 3 447 0
 291               	/* #APP */
 292               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 293 0006 7894      		sei
 294               	 ;  0 "" 2
 295               	/* #NOAPP */
 296               	.LBE230:
 297               	.LBE229:
 298               	.LBE228:
 299               	.LBE227:
 232:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 233:../../../os/rt/src/chthreads.c **** 
 234:../../../os/rt/src/chthreads.c ****   return tp;
 235:../../../os/rt/src/chthreads.c **** }
 300               		.loc 1 235 0
 301 0008 0895      		ret
 302               		.cfi_endproc
 303               	.LFE115:
 305               		.section	.text.chThdCreateI,"ax",@progbits
 306               	.global	chThdCreateI
 308               	chThdCreateI:
 309               	.LFB116:
 236:../../../os/rt/src/chthreads.c **** 
 237:../../../os/rt/src/chthreads.c **** /**
 238:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 239:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 240:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 241:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 242:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 243:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 244:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 245:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 246:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 247:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 248:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 249:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 250:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 251:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 252:../../../os/rt/src/chthreads.c ****  *
 253:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 254:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 255:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 256:../../../os/rt/src/chthreads.c ****  *
 257:../../../os/rt/src/chthreads.c ****  * @iclass
 258:../../../os/rt/src/chthreads.c ****  */
 259:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 310               		.loc 1 259 0
 311               		.cfi_startproc
 312               	.LVL21:
 313               	/* prologue: function */
 314               	/* frame size = 0 */
 315               	/* stack size = 0 */
 316               	.L__stack_usage = 0
 260:../../../os/rt/src/chthreads.c **** 
 261:../../../os/rt/src/chthreads.c ****   return chSchReadyI(chThdCreateSuspendedI(tdp));
 317               		.loc 1 261 0
 318 0000 0E94 0000 		call chThdCreateSuspendedI
 319               	.LVL22:
 320 0004 0C94 0000 		jmp chSchReadyI
 321               	.LVL23:
 322               		.cfi_endproc
 323               	.LFE116:
 325               		.section	.text.chThdCreate,"ax",@progbits
 326               	.global	chThdCreate
 328               	chThdCreate:
 329               	.LFB117:
 262:../../../os/rt/src/chthreads.c **** }
 263:../../../os/rt/src/chthreads.c **** 
 264:../../../os/rt/src/chthreads.c **** /**
 265:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 266:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 267:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 268:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 269:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 270:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 271:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 272:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 273:../../../os/rt/src/chthreads.c ****  *
 274:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 275:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 276:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 277:../../../os/rt/src/chthreads.c ****  *
 278:../../../os/rt/src/chthreads.c ****  * @iclass
 279:../../../os/rt/src/chthreads.c ****  */
 280:../../../os/rt/src/chthreads.c **** thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 330               		.loc 1 280 0
 331               		.cfi_startproc
 332               	.LVL24:
 333 0000 CF93      		push r28
 334               	.LCFI4:
 335               		.cfi_def_cfa_offset 4
 336               		.cfi_offset 28, -3
 337 0002 DF93      		push r29
 338               	.LCFI5:
 339               		.cfi_def_cfa_offset 5
 340               		.cfi_offset 29, -4
 341               	/* prologue: function */
 342               	/* frame size = 0 */
 343               	/* stack size = 2 */
 344               	.L__stack_usage = 2
 345               	.LBB231:
 346               	.LBB232:
 347               	.LBB233:
 437:../../../os/common/ports/AVR/chcore.h **** }
 348               		.loc 3 437 0
 349               	/* #APP */
 350               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 351 0004 F894      		cli
 352               	 ;  0 "" 2
 353               	/* #NOAPP */
 354               	.LBE233:
 355               	.LBE232:
 356               	.LBE231:
 281:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 282:../../../os/rt/src/chthreads.c **** 
 283:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 284:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 285:../../../os/rt/src/chthreads.c ****               "working area in use");
 286:../../../os/rt/src/chthreads.c **** #endif
 287:../../../os/rt/src/chthreads.c **** 
 288:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 289:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 290:../../../os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 291:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 292:../../../os/rt/src/chthreads.c **** #endif
 293:../../../os/rt/src/chthreads.c **** 
 294:../../../os/rt/src/chthreads.c ****   chSysLock();
 295:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 357               		.loc 1 295 0
 358 0006 0E94 0000 		call chThdCreateSuspendedI
 359               	.LVL25:
 360 000a EC01      		movw r28,r24
 361               	.LVL26:
 296:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 362               		.loc 1 296 0
 363 000c 60E0      		ldi r22,0
 364 000e 70E0      		ldi r23,0
 365 0010 0E94 0000 		call chSchWakeupS
 366               	.LVL27:
 367               	.LBB234:
 368               	.LBB235:
 369               	.LBB236:
 370               	.LBB237:
 371               		.loc 3 447 0
 372               	/* #APP */
 373               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 374 0014 7894      		sei
 375               	 ;  0 "" 2
 376               	/* #NOAPP */
 377               	.LBE237:
 378               	.LBE236:
 379               	.LBE235:
 380               	.LBE234:
 297:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 298:../../../os/rt/src/chthreads.c **** 
 299:../../../os/rt/src/chthreads.c ****   return tp;
 300:../../../os/rt/src/chthreads.c **** }
 381               		.loc 1 300 0
 382 0016 CE01      		movw r24,r28
 383               	/* epilogue start */
 384 0018 DF91      		pop r29
 385 001a CF91      		pop r28
 386               	.LVL28:
 387 001c 0895      		ret
 388               		.cfi_endproc
 389               	.LFE117:
 391               		.section	.rodata.str1.1,"aMS",@progbits,1
 392               	.LC0:
 393 0000 6E6F 6E61 		.string	"noname"
 393      6D65 00
 394               		.section	.text.chThdCreateStatic,"ax",@progbits
 395               	.global	chThdCreateStatic
 397               	chThdCreateStatic:
 398               	.LFB118:
 301:../../../os/rt/src/chthreads.c **** 
 302:../../../os/rt/src/chthreads.c **** /**
 303:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 304:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 305:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 306:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 307:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 308:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 309:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 310:../../../os/rt/src/chthreads.c ****  *
 311:../../../os/rt/src/chthreads.c ****  * @param[out] wsp      pointer to a working area dedicated to the thread stack
 312:../../../os/rt/src/chthreads.c ****  * @param[in] size      size of the working area
 313:../../../os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
 314:../../../os/rt/src/chthreads.c ****  * @param[in] pf        the thread function
 315:../../../os/rt/src/chthreads.c ****  * @param[in] arg       an argument passed to the thread function. It can be
 316:../../../os/rt/src/chthreads.c ****  *                      @p NULL.
 317:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 318:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 319:../../../os/rt/src/chthreads.c ****  *
 320:../../../os/rt/src/chthreads.c ****  * @api
 321:../../../os/rt/src/chthreads.c ****  */
 322:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateStatic(void *wsp, size_t size,
 323:../../../os/rt/src/chthreads.c ****                             tprio_t prio, tfunc_t pf, void *arg) {
 399               		.loc 1 323 0
 400               		.cfi_startproc
 401               	.LVL29:
 402 0000 0F93      		push r16
 403               	.LCFI6:
 404               		.cfi_def_cfa_offset 4
 405               		.cfi_offset 16, -3
 406 0002 1F93      		push r17
 407               	.LCFI7:
 408               		.cfi_def_cfa_offset 5
 409               		.cfi_offset 17, -4
 410 0004 CF93      		push r28
 411               	.LCFI8:
 412               		.cfi_def_cfa_offset 6
 413               		.cfi_offset 28, -5
 414 0006 DF93      		push r29
 415               	.LCFI9:
 416               		.cfi_def_cfa_offset 7
 417               		.cfi_offset 29, -6
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 420               	/* stack size = 4 */
 421               	.L__stack_usage = 4
 422               	.LBB238:
 423               	.LBB239:
 424               	.LBB240:
 437:../../../os/common/ports/AVR/chcore.h **** }
 425               		.loc 3 437 0
 426               	/* #APP */
 427               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 428 0008 F894      		cli
 429               	 ;  0 "" 2
 430               	/* #NOAPP */
 431               	.LBE240:
 432               	.LBE239:
 433               	.LBE238:
 324:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 325:../../../os/rt/src/chthreads.c **** 
 326:../../../os/rt/src/chthreads.c ****   chDbgCheck((wsp != NULL) &&
 327:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(wsp, PORT_WORKING_AREA_ALIGN) &&
 328:../../../os/rt/src/chthreads.c ****              (size >= THD_WORKING_AREA_SIZE(0)) &&
 329:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
 330:../../../os/rt/src/chthreads.c ****              (prio <= HIGHPRIO) && (pf != NULL));
 331:../../../os/rt/src/chthreads.c **** 
 332:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 333:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 334:../../../os/rt/src/chthreads.c ****               "working area in use");
 335:../../../os/rt/src/chthreads.c **** #endif
 336:../../../os/rt/src/chthreads.c **** 
 337:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 338:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)wsp,
 339:../../../os/rt/src/chthreads.c ****                   (uint8_t *)wsp + size,
 340:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 341:../../../os/rt/src/chthreads.c **** #endif
 342:../../../os/rt/src/chthreads.c **** 
 343:../../../os/rt/src/chthreads.c ****   chSysLock();
 344:../../../os/rt/src/chthreads.c **** 
 345:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 346:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 347:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 348:../../../os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)wsp + size -
 434               		.loc 1 348 0
 435 000a 6C51      		subi r22,28
 436 000c 7109      		sbc r23,__zero_reg__
 437               	.LVL30:
 438 000e EC01      		movw r28,r24
 439 0010 C60F      		add r28,r22
 440 0012 D71F      		adc r29,r23
 441               	.LVL31:
 349:../../../os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 350:../../../os/rt/src/chthreads.c **** 
 351:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 352:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 353:../../../os/rt/src/chthreads.c ****   tp->wabase = (stkalign_t *)wsp;
 354:../../../os/rt/src/chthreads.c **** #endif
 355:../../../os/rt/src/chthreads.c **** 
 356:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 357:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 442               		.loc 1 357 0
 443 0014 FE01      		movw r30,r28
 444 0016 7697      		sbiw r30,22
 445 0018 FE83      		std Y+6,r31
 446 001a ED83      		std Y+5,r30
 447 001c 228B      		std Z+18,r18
 448 001e 318B      		std Z+17,r19
 449 0020 008B      		std Z+16,r16
 450 0022 1787      		std Z+15,r17
 451 0024 138A      		std Z+19,__zero_reg__
 452 0026 80E0      		ldi r24,lo8(gs(_port_thread_start))
 453 0028 90E0      		ldi r25,hi8(gs(_port_thread_start))
 454               	.LVL32:
 455 002a 948B      		std Z+20,r25
 456 002c 858B      		std Z+21,r24
 457               	.LVL33:
 458               	.LBB241:
 459               	.LBB242:
  90:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 460               		.loc 1 90 0
 461 002e 4C83      		std Y+4,r20
  91:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 462               		.loc 1 91 0
 463 0030 82E0      		ldi r24,lo8(2)
 464 0032 8D87      		std Y+13,r24
  92:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 465               		.loc 1 92 0
 466 0034 1E86      		std Y+14,__zero_reg__
  97:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 467               		.loc 1 97 0
 468 0036 4B8F      		std Y+27,r20
  98:../../../os/rt/src/chthreads.c **** #endif
 469               		.loc 1 98 0
 470 0038 1A8E      		std Y+26,__zero_reg__
 471 003a 198E      		std Y+25,__zero_reg__
 101:../../../os/rt/src/chthreads.c **** #endif
 472               		.loc 1 101 0
 473 003c 188E      		std Y+24,__zero_reg__
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 474               		.loc 1 107 0
 475 003e 81E0      		ldi r24,lo8(1)
 476 0040 8F87      		std Y+15,r24
 108:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
 477               		.loc 1 108 0
 478 0042 80E0      		ldi r24,lo8(.LC0)
 479 0044 90E0      		ldi r25,hi8(.LC0)
 480 0046 9C87      		std Y+12,r25
 481 0048 8B87      		std Y+11,r24
 109:../../../os/rt/src/chthreads.c **** #else
 482               		.loc 1 109 0
 483 004a E0E0      		ldi r30,lo8(ch)
 484 004c F0E0      		ldi r31,hi8(ch)
 485 004e F887      		std Y+8,r31
 486 0050 EF83      		std Y+7,r30
 487 0052 A185      		ldd r26,Z+9
 488 0054 B285      		ldd r27,Z+10
 489 0056 BA87      		std Y+10,r27
 490 0058 A987      		std Y+9,r26
 491 005a 1896      		adiw r26,7+1
 492 005c DC93      		st X,r29
 493 005e CE93      		st -X,r28
 494 0060 1797      		sbiw r26,7
 495 0062 D287      		std Z+10,r29
 496 0064 C187      		std Z+9,r28
 497               	.LVL34:
 114:../../../os/rt/src/chthreads.c **** #endif
 498               		.loc 1 114 0
 499 0066 CE01      		movw r24,r28
 500 0068 4296      		adiw r24,18
 501               	.LVL35:
 502               	.LBB243:
 503               	.LBB244:
 512:../../../os/rt/include/chschd.h **** }
 504               		.loc 2 512 0
 505 006a 9B8B      		std Y+19,r25
 506 006c 8A8B      		std Y+18,r24
 507               	.LVL36:
 508               	.LBE244:
 509               	.LBE243:
 117:../../../os/rt/src/chthreads.c **** #endif
 510               		.loc 1 117 0
 511 006e 0296      		adiw r24,2
 512               	.LVL37:
 513               	.LBB245:
 514               	.LBB246:
 550:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 515               		.loc 2 550 0
 516 0070 9D8B      		std Y+21,r25
 517 0072 8C8B      		std Y+20,r24
 518               		.loc 2 551 0
 519 0074 9F8B      		std Y+23,r25
 520 0076 8E8B      		std Y+22,r24
 521               	.LVL38:
 522               	.LBE246:
 523               	.LBE245:
 524               	.LBE242:
 525               	.LBE241:
 358:../../../os/rt/src/chthreads.c **** 
 359:../../../os/rt/src/chthreads.c ****   tp = _thread_init(tp, "noname", prio);
 360:../../../os/rt/src/chthreads.c **** 
 361:../../../os/rt/src/chthreads.c ****   /* Starting the thread immediately.*/
 362:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 526               		.loc 1 362 0
 527 0078 60E0      		ldi r22,0
 528 007a 70E0      		ldi r23,0
 529               	.LVL39:
 530 007c CE01      		movw r24,r28
 531 007e 0E94 0000 		call chSchWakeupS
 532               	.LVL40:
 533               	.LBB247:
 534               	.LBB248:
 535               	.LBB249:
 536               	.LBB250:
 537               		.loc 3 447 0
 538               	/* #APP */
 539               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 540 0082 7894      		sei
 541               	 ;  0 "" 2
 542               	/* #NOAPP */
 543               	.LBE250:
 544               	.LBE249:
 545               	.LBE248:
 546               	.LBE247:
 363:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 364:../../../os/rt/src/chthreads.c **** 
 365:../../../os/rt/src/chthreads.c ****   return tp;
 366:../../../os/rt/src/chthreads.c **** }
 547               		.loc 1 366 0
 548 0084 CE01      		movw r24,r28
 549               	/* epilogue start */
 550 0086 DF91      		pop r29
 551 0088 CF91      		pop r28
 552 008a 1F91      		pop r17
 553 008c 0F91      		pop r16
 554               	.LVL41:
 555 008e 0895      		ret
 556               		.cfi_endproc
 557               	.LFE118:
 559               		.section	.text.chThdStart,"ax",@progbits
 560               	.global	chThdStart
 562               	chThdStart:
 563               	.LFB119:
 367:../../../os/rt/src/chthreads.c **** 
 368:../../../os/rt/src/chthreads.c **** /**
 369:../../../os/rt/src/chthreads.c ****  * @brief   Resumes a thread created with @p chThdCreateI().
 370:../../../os/rt/src/chthreads.c ****  *
 371:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 372:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 373:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 374:../../../os/rt/src/chthreads.c ****  *
 375:../../../os/rt/src/chthreads.c ****  * @api
 376:../../../os/rt/src/chthreads.c ****  */
 377:../../../os/rt/src/chthreads.c **** thread_t *chThdStart(thread_t *tp) {
 564               		.loc 1 377 0
 565               		.cfi_startproc
 566               	.LVL42:
 567 0000 CF93      		push r28
 568               	.LCFI10:
 569               		.cfi_def_cfa_offset 4
 570               		.cfi_offset 28, -3
 571 0002 DF93      		push r29
 572               	.LCFI11:
 573               		.cfi_def_cfa_offset 5
 574               		.cfi_offset 29, -4
 575               	/* prologue: function */
 576               	/* frame size = 0 */
 577               	/* stack size = 2 */
 578               	.L__stack_usage = 2
 579 0004 EC01      		movw r28,r24
 580               	.LBB251:
 581               	.LBB252:
 582               	.LBB253:
 437:../../../os/common/ports/AVR/chcore.h **** }
 583               		.loc 3 437 0
 584               	/* #APP */
 585               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 586 0006 F894      		cli
 587               	 ;  0 "" 2
 588               	/* #NOAPP */
 589               	.LBE253:
 590               	.LBE252:
 591               	.LBE251:
 378:../../../os/rt/src/chthreads.c **** 
 379:../../../os/rt/src/chthreads.c ****   chSysLock();
 380:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 381:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 592               		.loc 1 381 0
 593 0008 60E0      		ldi r22,0
 594 000a 70E0      		ldi r23,0
 595 000c 0E94 0000 		call chSchWakeupS
 596               	.LVL43:
 597               	.LBB254:
 598               	.LBB255:
 599               	.LBB256:
 600               	.LBB257:
 601               		.loc 3 447 0
 602               	/* #APP */
 603               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 604 0010 7894      		sei
 605               	 ;  0 "" 2
 606               	/* #NOAPP */
 607               	.LBE257:
 608               	.LBE256:
 609               	.LBE255:
 610               	.LBE254:
 382:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 383:../../../os/rt/src/chthreads.c **** 
 384:../../../os/rt/src/chthreads.c ****   return tp;
 385:../../../os/rt/src/chthreads.c **** }
 611               		.loc 1 385 0
 612 0012 CE01      		movw r24,r28
 613               	/* epilogue start */
 614 0014 DF91      		pop r29
 615 0016 CF91      		pop r28
 616               	.LVL44:
 617 0018 0895      		ret
 618               		.cfi_endproc
 619               	.LFE119:
 621               		.section	.text.chThdAddRef,"ax",@progbits
 622               	.global	chThdAddRef
 624               	chThdAddRef:
 625               	.LFB120:
 386:../../../os/rt/src/chthreads.c **** 
 387:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 388:../../../os/rt/src/chthreads.c **** /**
 389:../../../os/rt/src/chthreads.c ****  * @brief   Adds a reference to a thread object.
 390:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_DYNAMIC must be enabled in
 391:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 392:../../../os/rt/src/chthreads.c ****  *
 393:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 394:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter
 395:../../../os/rt/src/chthreads.c ****  *                      representing the new reference.
 396:../../../os/rt/src/chthreads.c ****  *
 397:../../../os/rt/src/chthreads.c ****  * @api
 398:../../../os/rt/src/chthreads.c ****  */
 399:../../../os/rt/src/chthreads.c **** thread_t *chThdAddRef(thread_t *tp) {
 626               		.loc 1 399 0
 627               		.cfi_startproc
 628               	.LVL45:
 629               	/* prologue: function */
 630               	/* frame size = 0 */
 631               	/* stack size = 0 */
 632               	.L__stack_usage = 0
 633               	.LBB258:
 634               	.LBB259:
 635               	.LBB260:
 437:../../../os/common/ports/AVR/chcore.h **** }
 636               		.loc 3 437 0
 637               	/* #APP */
 638               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 639 0000 F894      		cli
 640               	 ;  0 "" 2
 641               	/* #NOAPP */
 642               	.LBE260:
 643               	.LBE259:
 644               	.LBE258:
 400:../../../os/rt/src/chthreads.c **** 
 401:../../../os/rt/src/chthreads.c ****   chSysLock();
 402:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 403:../../../os/rt/src/chthreads.c ****   tp->refs++;
 645               		.loc 1 403 0
 646 0002 FC01      		movw r30,r24
 647 0004 2785      		ldd r18,Z+15
 648 0006 2F5F      		subi r18,lo8(-(1))
 649 0008 2787      		std Z+15,r18
 650               	.LBB261:
 651               	.LBB262:
 652               	.LBB263:
 653               	.LBB264:
 654               		.loc 3 447 0
 655               	/* #APP */
 656               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 657 000a 7894      		sei
 658               	 ;  0 "" 2
 659               	/* #NOAPP */
 660               	.LBE264:
 661               	.LBE263:
 662               	.LBE262:
 663               	.LBE261:
 404:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 405:../../../os/rt/src/chthreads.c **** 
 406:../../../os/rt/src/chthreads.c ****   return tp;
 407:../../../os/rt/src/chthreads.c **** }
 664               		.loc 1 407 0
 665 000c 0895      		ret
 666               		.cfi_endproc
 667               	.LFE120:
 669               		.section	.text.chThdRelease,"ax",@progbits
 670               	.global	chThdRelease
 672               	chThdRelease:
 673               	.LFB121:
 408:../../../os/rt/src/chthreads.c **** 
 409:../../../os/rt/src/chthreads.c **** /**
 410:../../../os/rt/src/chthreads.c ****  * @brief   Releases a reference to a thread object.
 411:../../../os/rt/src/chthreads.c ****  * @details If the references counter reaches zero <b>and</b> the thread
 412:../../../os/rt/src/chthreads.c ****  *          is in the @p CH_STATE_FINAL state then the thread's memory is
 413:../../../os/rt/src/chthreads.c ****  *          returned to the proper allocator and the thread is removed
 414:../../../os/rt/src/chthreads.c ****  *          from the registry.<br>
 415:../../../os/rt/src/chthreads.c ****  *          Threads whose counter reaches zero and are still active become
 416:../../../os/rt/src/chthreads.c ****  *          "detached" and will be removed from registry on termination.
 417:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_DYNAMIC must be enabled in
 418:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 419:../../../os/rt/src/chthreads.c ****  * @note    Static threads are not affected.
 420:../../../os/rt/src/chthreads.c ****  *
 421:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 422:../../../os/rt/src/chthreads.c ****  *
 423:../../../os/rt/src/chthreads.c ****  * @api
 424:../../../os/rt/src/chthreads.c ****  */
 425:../../../os/rt/src/chthreads.c **** void chThdRelease(thread_t *tp) {
 674               		.loc 1 425 0
 675               		.cfi_startproc
 676               	.LVL46:
 677               	/* prologue: function */
 678               	/* frame size = 0 */
 679               	/* stack size = 0 */
 680               	.L__stack_usage = 0
 681 0000 FC01      		movw r30,r24
 682               	.LBB285:
 683               	.LBB286:
 684               	.LBB287:
 437:../../../os/common/ports/AVR/chcore.h **** }
 685               		.loc 3 437 0
 686               	/* #APP */
 687               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 688 0002 F894      		cli
 689               	 ;  0 "" 2
 690               	/* #NOAPP */
 691               	.LBE287:
 692               	.LBE286:
 693               	.LBE285:
 426:../../../os/rt/src/chthreads.c **** 
 427:../../../os/rt/src/chthreads.c ****   chSysLock();
 428:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 429:../../../os/rt/src/chthreads.c ****   tp->refs--;
 694               		.loc 1 429 0
 695 0004 9785      		ldd r25,Z+15
 696 0006 9150      		subi r25,lo8(-(-1))
 697 0008 9787      		std Z+15,r25
 430:../../../os/rt/src/chthreads.c **** 
 431:../../../os/rt/src/chthreads.c ****   /* If the references counter reaches zero and the thread is in its
 432:../../../os/rt/src/chthreads.c ****      terminated state then the memory can be returned to the proper
 433:../../../os/rt/src/chthreads.c ****      allocator.*/
 434:../../../os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 698               		.loc 1 434 0
 699 000a 9111      		cpse r25,__zero_reg__
 700 000c 00C0      		rjmp .L10
 701               		.loc 1 434 0 is_stmt 0 discriminator 1
 702 000e 8585      		ldd r24,Z+13
 703               	.LVL47:
 704 0010 8F30      		cpi r24,lo8(15)
 705 0012 01F0      		breq .L13
 706               	.L10:
 707               	.LBB288:
 708               	.LBB289:
 709               	.LBB290:
 710               	.LBB291:
 711               		.loc 3 447 0 is_stmt 1
 712               	/* #APP */
 713               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 714 0014 7894      		sei
 715               	 ;  0 "" 2
 716               	/* #NOAPP */
 717 0016 0895      		ret
 718               	.L13:
 719               	.LVL48:
 720               	.LBE291:
 721               	.LBE290:
 722               	.LBE289:
 723               	.LBE288:
 724               	.LBB292:
 725               	.LBB293:
 435:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 726               		.loc 1 435 0
 727 0018 A185      		ldd r26,Z+9
 728 001a B285      		ldd r27,Z+10
 729 001c 8781      		ldd r24,Z+7
 730 001e 9085      		ldd r25,Z+8
 731 0020 1896      		adiw r26,7+1
 732 0022 9C93      		st X,r25
 733 0024 8E93      		st -X,r24
 734 0026 1797      		sbiw r26,7
 735 0028 0780      		ldd __tmp_reg__,Z+7
 736 002a F085      		ldd r31,Z+8
 737 002c E02D      		mov r30,__tmp_reg__
 738               	.LVL49:
 739 002e B287      		std Z+10,r27
 740 0030 A187      		std Z+9,r26
 741               	.LBB294:
 742               	.LBB295:
 743               	.LBB296:
 744               	.LBB297:
 745               		.loc 3 447 0
 746               	/* #APP */
 747               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 748 0032 7894      		sei
 749               	 ;  0 "" 2
 750               	/* #NOAPP */
 751 0034 0895      		ret
 752               	.LBE297:
 753               	.LBE296:
 754               	.LBE295:
 755               	.LBE294:
 756               	.LBE293:
 757               	.LBE292:
 758               		.cfi_endproc
 759               	.LFE121:
 761               		.section	.text.chThdExitS,"ax",@progbits
 762               	.global	chThdExitS
 764               	chThdExitS:
 765               	.LFB123:
 436:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 437:../../../os/rt/src/chthreads.c **** 
 438:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 439:../../../os/rt/src/chthreads.c ****     switch (tp->flags & CH_FLAG_MODE_MASK) {
 440:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_HEAP == TRUE
 441:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_HEAP:
 442:../../../os/rt/src/chthreads.c ****       chHeapFree(chThdGetWorkingAreaX(tp));
 443:../../../os/rt/src/chthreads.c ****       break;
 444:../../../os/rt/src/chthreads.c **** #endif
 445:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MEMPOOLS == TRUE
 446:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_MPOOL:
 447:../../../os/rt/src/chthreads.c ****       chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 448:../../../os/rt/src/chthreads.c ****       break;
 449:../../../os/rt/src/chthreads.c **** #endif
 450:../../../os/rt/src/chthreads.c ****     default:
 451:../../../os/rt/src/chthreads.c ****       /* Nothing else to do for static threads.*/
 452:../../../os/rt/src/chthreads.c ****       break;
 453:../../../os/rt/src/chthreads.c ****     }
 454:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_DYNAMIC == TRUE */
 455:../../../os/rt/src/chthreads.c ****     return;
 456:../../../os/rt/src/chthreads.c ****   }
 457:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 458:../../../os/rt/src/chthreads.c **** }
 459:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 460:../../../os/rt/src/chthreads.c **** 
 461:../../../os/rt/src/chthreads.c **** /**
 462:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 463:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 464:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 465:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 466:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 467:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 468:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 469:../../../os/rt/src/chthreads.c ****  *          the dead code.
 470:../../../os/rt/src/chthreads.c ****  *
 471:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 472:../../../os/rt/src/chthreads.c ****  *
 473:../../../os/rt/src/chthreads.c ****  * @api
 474:../../../os/rt/src/chthreads.c ****  */
 475:../../../os/rt/src/chthreads.c **** void chThdExit(msg_t msg) {
 476:../../../os/rt/src/chthreads.c **** 
 477:../../../os/rt/src/chthreads.c ****   chSysLock();
 478:../../../os/rt/src/chthreads.c ****   chThdExitS(msg);
 479:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 480:../../../os/rt/src/chthreads.c **** }
 481:../../../os/rt/src/chthreads.c **** 
 482:../../../os/rt/src/chthreads.c **** /**
 483:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 484:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 485:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 486:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 487:../../../os/rt/src/chthreads.c ****  * @post    Exiting a non-static thread that does not have references
 488:../../../os/rt/src/chthreads.c ****  *          (detached) causes the thread to remain in the registry.
 489:../../../os/rt/src/chthreads.c ****  *          It can only be removed by performing a registry scan operation.
 490:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 491:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 492:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 493:../../../os/rt/src/chthreads.c ****  *          the dead code.
 494:../../../os/rt/src/chthreads.c ****  *
 495:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 496:../../../os/rt/src/chthreads.c ****  *
 497:../../../os/rt/src/chthreads.c ****  * @sclass
 498:../../../os/rt/src/chthreads.c ****  */
 499:../../../os/rt/src/chthreads.c **** void chThdExitS(msg_t msg) {
 766               		.loc 1 499 0
 767               		.cfi_startproc
 768               	.LVL50:
 769 0000 0F93      		push r16
 770               	.LCFI12:
 771               		.cfi_def_cfa_offset 4
 772               		.cfi_offset 16, -3
 773 0002 1F93      		push r17
 774               	.LCFI13:
 775               		.cfi_def_cfa_offset 5
 776               		.cfi_offset 17, -4
 777 0004 CF93      		push r28
 778               	.LCFI14:
 779               		.cfi_def_cfa_offset 6
 780               		.cfi_offset 28, -5
 781 0006 DF93      		push r29
 782               	.LCFI15:
 783               		.cfi_def_cfa_offset 7
 784               		.cfi_offset 29, -6
 785               	/* prologue: function */
 786               	/* frame size = 0 */
 787               	/* stack size = 4 */
 788               	.L__stack_usage = 4
 500:../../../os/rt/src/chthreads.c ****   thread_t *tp = currp;
 789               		.loc 1 500 0
 790 0008 C091 0000 		lds r28,ch+11
 791 000c D091 0000 		lds r29,ch+11+1
 792               	.LVL51:
 501:../../../os/rt/src/chthreads.c **** 
 502:../../../os/rt/src/chthreads.c ****   /* Storing exit message.*/
 503:../../../os/rt/src/chthreads.c ****   tp->u.exitcode = msg;
 793               		.loc 1 503 0
 794 0010 998B      		std Y+17,r25
 795 0012 888B      		std Y+16,r24
 504:../../../os/rt/src/chthreads.c **** 
 505:../../../os/rt/src/chthreads.c ****   /* Exit handler hook.*/
 506:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_EXIT_HOOK(tp);
 507:../../../os/rt/src/chthreads.c **** 
 508:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 509:../../../os/rt/src/chthreads.c ****   /* Waking up any waiting thread.*/
 510:../../../os/rt/src/chthreads.c ****   while (list_notempty(&tp->waiting)) {
 796               		.loc 1 510 0
 797 0014 8E01      		movw r16,r28
 798 0016 0E5E      		subi r16,-18
 799 0018 1F4F      		sbci r17,-1
 800               	.LVL52:
 801               	.LBB298:
 802               	.LBB299:
 538:../../../os/rt/include/chschd.h **** }
 803               		.loc 2 538 0
 804 001a 8A89      		ldd r24,Y+18
 805 001c 9B89      		ldd r25,Y+19
 806               	.LVL53:
 807               	.LBE299:
 808               	.LBE298:
 809               		.loc 1 510 0
 810 001e 0817      		cp r16,r24
 811 0020 1907      		cpc r17,r25
 812 0022 01F0      		breq .L19
 813               	.LVL54:
 814               	.L20:
 815               	.LBB301:
 816               	.LBB302:
 552:../../../os/rt/include/chschd.h **** }
 553:../../../os/rt/include/chschd.h **** 
 554:../../../os/rt/include/chschd.h **** /**
 555:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 556:../../../os/rt/include/chschd.h ****  *
 557:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 558:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 559:../../../os/rt/include/chschd.h ****  *
 560:../../../os/rt/include/chschd.h ****  * @notapi
 561:../../../os/rt/include/chschd.h ****  */
 562:../../../os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 563:../../../os/rt/include/chschd.h **** 
 564:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 565:../../../os/rt/include/chschd.h **** }
 566:../../../os/rt/include/chschd.h **** 
 567:../../../os/rt/include/chschd.h **** /**
 568:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 569:../../../os/rt/include/chschd.h ****  *
 570:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 571:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 572:../../../os/rt/include/chschd.h ****  *
 573:../../../os/rt/include/chschd.h ****  * @notapi
 574:../../../os/rt/include/chschd.h ****  */
 575:../../../os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 576:../../../os/rt/include/chschd.h **** 
 577:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 578:../../../os/rt/include/chschd.h **** }
 579:../../../os/rt/include/chschd.h **** 
 580:../../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 581:../../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 582:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 583:../../../os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 584:../../../os/rt/include/chschd.h **** 
 585:../../../os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 586:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 587:../../../os/rt/include/chschd.h **** }
 588:../../../os/rt/include/chschd.h **** 
 589:../../../os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 590:../../../os/rt/include/chschd.h **** 
 591:../../../os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 592:../../../os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 817               		.loc 2 592 0
 818 0024 FC01      		movw r30,r24
 819 0026 2081      		ld r18,Z
 820 0028 3181      		ldd r19,Z+1
 821 002a 3B8B      		std Y+19,r19
 822 002c 2A8B      		std Y+18,r18
 823               	.LVL55:
 824               	.LBE302:
 825               	.LBE301:
 511:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(list_remove(&tp->waiting));
 826               		.loc 1 511 0
 827 002e 0E94 0000 		call chSchReadyI
 828               	.LVL56:
 829               	.LBB303:
 830               	.LBB300:
 538:../../../os/rt/include/chschd.h **** }
 831               		.loc 2 538 0
 832 0032 8A89      		ldd r24,Y+18
 833 0034 9B89      		ldd r25,Y+19
 834               	.LVL57:
 835               	.LBE300:
 836               	.LBE303:
 510:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(list_remove(&tp->waiting));
 837               		.loc 1 510 0
 838 0036 8017      		cp r24,r16
 839 0038 9107      		cpc r25,r17
 840 003a 01F4      		brne .L20
 841               	.L19:
 512:../../../os/rt/src/chthreads.c ****   }
 513:../../../os/rt/src/chthreads.c **** #endif
 514:../../../os/rt/src/chthreads.c **** 
 515:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 516:../../../os/rt/src/chthreads.c ****   /* Static threads with no references are immediately removed from the
 517:../../../os/rt/src/chthreads.c ****      registry because there is no memory to recover.*/
 518:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 519:../../../os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) &&
 520:../../../os/rt/src/chthreads.c ****       ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 521:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 522:../../../os/rt/src/chthreads.c ****   }
 523:../../../os/rt/src/chthreads.c **** #else
 524:../../../os/rt/src/chthreads.c ****   if (tp->refs == (trefs_t)0) {
 842               		.loc 1 524 0
 843 003c 8F85      		ldd r24,Y+15
 844 003e 8111      		cpse r24,__zero_reg__
 845 0040 00C0      		rjmp .L17
 525:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 846               		.loc 1 525 0
 847 0042 E985      		ldd r30,Y+9
 848 0044 FA85      		ldd r31,Y+10
 849 0046 8F81      		ldd r24,Y+7
 850 0048 9885      		ldd r25,Y+8
 851 004a 9087      		std Z+8,r25
 852 004c 8783      		std Z+7,r24
 853 004e AF81      		ldd r26,Y+7
 854 0050 B885      		ldd r27,Y+8
 855 0052 1A96      		adiw r26,9+1
 856 0054 FC93      		st X,r31
 857 0056 EE93      		st -X,r30
 858 0058 1997      		sbiw r26,9
 859               	.L17:
 526:../../../os/rt/src/chthreads.c ****   }
 527:../../../os/rt/src/chthreads.c **** #endif
 528:../../../os/rt/src/chthreads.c **** #endif
 529:../../../os/rt/src/chthreads.c **** 
 530:../../../os/rt/src/chthreads.c ****   /* Going into final state.*/
 531:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_FINAL);
 860               		.loc 1 531 0
 861 005a 8FE0      		ldi r24,lo8(15)
 862               	/* epilogue start */
 532:../../../os/rt/src/chthreads.c **** 
 533:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 534:../../../os/rt/src/chthreads.c ****   chDbgAssert(false, "zombies apocalypse");
 535:../../../os/rt/src/chthreads.c **** }
 863               		.loc 1 535 0
 864 005c DF91      		pop r29
 865 005e CF91      		pop r28
 866               	.LVL58:
 867 0060 1F91      		pop r17
 868 0062 0F91      		pop r16
 869               	.LVL59:
 531:../../../os/rt/src/chthreads.c **** 
 870               		.loc 1 531 0
 871 0064 0C94 0000 		jmp chSchGoSleepS
 872               	.LVL60:
 873               		.cfi_endproc
 874               	.LFE123:
 876               		.section	.text.chThdExit,"ax",@progbits
 877               	.global	chThdExit
 879               	chThdExit:
 880               	.LFB122:
 475:../../../os/rt/src/chthreads.c **** 
 881               		.loc 1 475 0
 882               		.cfi_startproc
 883               	.LVL61:
 884               	/* prologue: function */
 885               	/* frame size = 0 */
 886               	/* stack size = 0 */
 887               	.L__stack_usage = 0
 888               	.LBB304:
 889               	.LBB305:
 890               	.LBB306:
 437:../../../os/common/ports/AVR/chcore.h **** }
 891               		.loc 3 437 0
 892               	/* #APP */
 893               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 894 0000 F894      		cli
 895               	 ;  0 "" 2
 896               	/* #NOAPP */
 897               	.LBE306:
 898               	.LBE305:
 899               	.LBE304:
 478:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 900               		.loc 1 478 0
 901 0002 0C94 0000 		jmp chThdExitS
 902               	.LVL62:
 903               		.cfi_endproc
 904               	.LFE122:
 906               		.section	.text.chThdWait,"ax",@progbits
 907               	.global	chThdWait
 909               	chThdWait:
 910               	.LFB124:
 536:../../../os/rt/src/chthreads.c **** 
 537:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 538:../../../os/rt/src/chthreads.c **** /**
 539:../../../os/rt/src/chthreads.c ****  * @brief   Blocks the execution of the invoking thread until the specified
 540:../../../os/rt/src/chthreads.c ****  *          thread terminates then the exit code is returned.
 541:../../../os/rt/src/chthreads.c ****  * @details This function waits for the specified thread to terminate then
 542:../../../os/rt/src/chthreads.c ****  *          decrements its reference counter, if the counter reaches zero then
 543:../../../os/rt/src/chthreads.c ****  *          the thread working area is returned to the proper allocator and
 544:../../../os/rt/src/chthreads.c ****  *          the thread is removed from registry.
 545:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_WAITEXIT must be enabled in
 546:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 547:../../../os/rt/src/chthreads.c ****  * @post    Enabling @p chThdWait() requires 2-4 (depending on the
 548:../../../os/rt/src/chthreads.c ****  *          architecture) extra bytes in the @p thread_t structure.
 549:../../../os/rt/src/chthreads.c ****  * @note    If @p CH_CFG_USE_DYNAMIC is not specified this function just waits
 550:../../../os/rt/src/chthreads.c ****  *          for the thread termination, no memory allocators are involved.
 551:../../../os/rt/src/chthreads.c ****  *
 552:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 553:../../../os/rt/src/chthreads.c ****  * @return              The exit code from the terminated thread.
 554:../../../os/rt/src/chthreads.c ****  *
 555:../../../os/rt/src/chthreads.c ****  * @api
 556:../../../os/rt/src/chthreads.c ****  */
 557:../../../os/rt/src/chthreads.c **** msg_t chThdWait(thread_t *tp) {
 911               		.loc 1 557 0
 912               		.cfi_startproc
 913               	.LVL63:
 914 0000 0F93      		push r16
 915               	.LCFI16:
 916               		.cfi_def_cfa_offset 4
 917               		.cfi_offset 16, -3
 918 0002 1F93      		push r17
 919               	.LCFI17:
 920               		.cfi_def_cfa_offset 5
 921               		.cfi_offset 17, -4
 922 0004 CF93      		push r28
 923               	.LCFI18:
 924               		.cfi_def_cfa_offset 6
 925               		.cfi_offset 28, -5
 926 0006 DF93      		push r29
 927               	.LCFI19:
 928               		.cfi_def_cfa_offset 7
 929               		.cfi_offset 29, -6
 930               	/* prologue: function */
 931               	/* frame size = 0 */
 932               	/* stack size = 4 */
 933               	.L__stack_usage = 4
 934 0008 EC01      		movw r28,r24
 935               	.LBB307:
 936               	.LBB308:
 937               	.LBB309:
 437:../../../os/common/ports/AVR/chcore.h **** }
 938               		.loc 3 437 0
 939               	/* #APP */
 940               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 941 000a F894      		cli
 942               	 ;  0 "" 2
 943               	/* #NOAPP */
 944               	.LBE309:
 945               	.LBE308:
 946               	.LBE307:
 558:../../../os/rt/src/chthreads.c ****   msg_t msg;
 559:../../../os/rt/src/chthreads.c **** 
 560:../../../os/rt/src/chthreads.c ****   chDbgCheck(tp != NULL);
 561:../../../os/rt/src/chthreads.c **** 
 562:../../../os/rt/src/chthreads.c ****   chSysLock();
 563:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp != currp, "waiting self");
 564:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 565:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "no references");
 566:../../../os/rt/src/chthreads.c **** #endif
 567:../../../os/rt/src/chthreads.c **** 
 568:../../../os/rt/src/chthreads.c ****   if (tp->state != CH_STATE_FINAL) {
 947               		.loc 1 568 0
 948 000c 8D85      		ldd r24,Y+13
 949               	.LVL64:
 950 000e 8F30      		cpi r24,lo8(15)
 951 0010 01F0      		breq .L24
 569:../../../os/rt/src/chthreads.c ****     list_insert(currp, &tp->waiting);
 952               		.loc 1 569 0
 953 0012 E091 0000 		lds r30,ch+11
 954 0016 F091 0000 		lds r31,ch+11+1
 955               	.LVL65:
 956               	.LBB310:
 957               	.LBB311:
 585:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 958               		.loc 2 585 0
 959 001a 8A89      		ldd r24,Y+18
 960 001c 9B89      		ldd r25,Y+19
 961 001e 9183      		std Z+1,r25
 962 0020 8083      		st Z,r24
 586:../../../os/rt/include/chschd.h **** }
 963               		.loc 2 586 0
 964 0022 FB8B      		std Y+19,r31
 965 0024 EA8B      		std Y+18,r30
 966               	.LVL66:
 967               	.LBE311:
 968               	.LBE310:
 570:../../../os/rt/src/chthreads.c ****     chSchGoSleepS(CH_STATE_WTEXIT);
 969               		.loc 1 570 0
 970 0026 89E0      		ldi r24,lo8(9)
 971 0028 0E94 0000 		call chSchGoSleepS
 972               	.LVL67:
 973               	.L24:
 571:../../../os/rt/src/chthreads.c ****   }
 572:../../../os/rt/src/chthreads.c ****   msg = tp->u.exitcode;
 974               		.loc 1 572 0
 975 002c 0889      		ldd r16,Y+16
 976 002e 1989      		ldd r17,Y+17
 977               	.LVL68:
 978               	.LBB312:
 979               	.LBB313:
 980               	.LBB314:
 981               	.LBB315:
 982               		.loc 3 447 0
 983               	/* #APP */
 984               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 985 0030 7894      		sei
 986               	 ;  0 "" 2
 987               	/* #NOAPP */
 988               	.LBE315:
 989               	.LBE314:
 990               	.LBE313:
 991               	.LBE312:
 573:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 574:../../../os/rt/src/chthreads.c **** 
 575:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 576:../../../os/rt/src/chthreads.c ****   /* Releasing a reference to the thread.*/
 577:../../../os/rt/src/chthreads.c ****   chThdRelease(tp);
 992               		.loc 1 577 0
 993 0032 CE01      		movw r24,r28
 994 0034 0E94 0000 		call chThdRelease
 995               	.LVL69:
 578:../../../os/rt/src/chthreads.c **** #endif
 579:../../../os/rt/src/chthreads.c **** 
 580:../../../os/rt/src/chthreads.c ****   return msg;
 581:../../../os/rt/src/chthreads.c **** }
 996               		.loc 1 581 0
 997 0038 C801      		movw r24,r16
 998               	/* epilogue start */
 999 003a DF91      		pop r29
 1000 003c CF91      		pop r28
 1001               	.LVL70:
 1002 003e 1F91      		pop r17
 1003 0040 0F91      		pop r16
 1004               	.LVL71:
 1005 0042 0895      		ret
 1006               		.cfi_endproc
 1007               	.LFE124:
 1009               		.section	.text.chThdSetPriority,"ax",@progbits
 1010               	.global	chThdSetPriority
 1012               	chThdSetPriority:
 1013               	.LFB125:
 582:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_WAITEXIT */
 583:../../../os/rt/src/chthreads.c **** 
 584:../../../os/rt/src/chthreads.c **** /**
 585:../../../os/rt/src/chthreads.c ****  * @brief   Changes the running thread priority level then reschedules if
 586:../../../os/rt/src/chthreads.c ****  *          necessary.
 587:../../../os/rt/src/chthreads.c ****  * @note    The function returns the real thread priority regardless of the
 588:../../../os/rt/src/chthreads.c ****  *          current priority that could be higher than the real priority
 589:../../../os/rt/src/chthreads.c ****  *          because the priority inheritance mechanism.
 590:../../../os/rt/src/chthreads.c ****  *
 591:../../../os/rt/src/chthreads.c ****  * @param[in] newprio   the new priority level of the running thread
 592:../../../os/rt/src/chthreads.c ****  * @return              The old priority level.
 593:../../../os/rt/src/chthreads.c ****  *
 594:../../../os/rt/src/chthreads.c ****  * @api
 595:../../../os/rt/src/chthreads.c ****  */
 596:../../../os/rt/src/chthreads.c **** tprio_t chThdSetPriority(tprio_t newprio) {
 1014               		.loc 1 596 0
 1015               		.cfi_startproc
 1016               	.LVL72:
 1017 0000 CF93      		push r28
 1018               	.LCFI20:
 1019               		.cfi_def_cfa_offset 4
 1020               		.cfi_offset 28, -3
 1021               	/* prologue: function */
 1022               	/* frame size = 0 */
 1023               	/* stack size = 1 */
 1024               	.L__stack_usage = 1
 1025               	.LBB316:
 1026               	.LBB317:
 1027               	.LBB318:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1028               		.loc 3 437 0
 1029               	/* #APP */
 1030               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1031 0002 F894      		cli
 1032               	 ;  0 "" 2
 1033               	/* #NOAPP */
 1034               	.LBE318:
 1035               	.LBE317:
 1036               	.LBE316:
 597:../../../os/rt/src/chthreads.c ****   tprio_t oldprio;
 598:../../../os/rt/src/chthreads.c **** 
 599:../../../os/rt/src/chthreads.c ****   chDbgCheck(newprio <= HIGHPRIO);
 600:../../../os/rt/src/chthreads.c **** 
 601:../../../os/rt/src/chthreads.c ****   chSysLock();
 602:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 603:../../../os/rt/src/chthreads.c ****   oldprio = currp->realprio;
 1037               		.loc 1 603 0
 1038 0004 E091 0000 		lds r30,ch+11
 1039 0008 F091 0000 		lds r31,ch+11+1
 1040 000c C38D      		ldd r28,Z+27
 1041               	.LVL73:
 604:../../../os/rt/src/chthreads.c ****   if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 1042               		.loc 1 604 0
 1043 000e 9481      		ldd r25,Z+4
 1044 0010 C917      		cp r28,r25
 1045 0012 01F0      		breq .L29
 1046               		.loc 1 604 0 is_stmt 0 discriminator 1
 1047 0014 9817      		cp r25,r24
 1048 0016 00F4      		brsh .L30
 1049               	.L29:
 605:../../../os/rt/src/chthreads.c ****     currp->prio = newprio;
 1050               		.loc 1 605 0 is_stmt 1
 1051 0018 8483      		std Z+4,r24
 1052               	.L30:
 606:../../../os/rt/src/chthreads.c ****   }
 607:../../../os/rt/src/chthreads.c ****   currp->realprio = newprio;
 1053               		.loc 1 607 0
 1054 001a 838F      		std Z+27,r24
 608:../../../os/rt/src/chthreads.c **** #else
 609:../../../os/rt/src/chthreads.c ****   oldprio = currp->prio;
 610:../../../os/rt/src/chthreads.c ****   currp->prio = newprio;
 611:../../../os/rt/src/chthreads.c **** #endif
 612:../../../os/rt/src/chthreads.c ****   chSchRescheduleS();
 1055               		.loc 1 612 0
 1056 001c 0E94 0000 		call chSchRescheduleS
 1057               	.LVL74:
 1058               	.LBB319:
 1059               	.LBB320:
 1060               	.LBB321:
 1061               	.LBB322:
 1062               		.loc 3 447 0
 1063               	/* #APP */
 1064               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1065 0020 7894      		sei
 1066               	 ;  0 "" 2
 1067               	/* #NOAPP */
 1068               	.LBE322:
 1069               	.LBE321:
 1070               	.LBE320:
 1071               	.LBE319:
 613:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 614:../../../os/rt/src/chthreads.c **** 
 615:../../../os/rt/src/chthreads.c ****   return oldprio;
 616:../../../os/rt/src/chthreads.c **** }
 1072               		.loc 1 616 0
 1073 0022 8C2F      		mov r24,r28
 1074               	/* epilogue start */
 1075 0024 CF91      		pop r28
 1076               	.LVL75:
 1077 0026 0895      		ret
 1078               		.cfi_endproc
 1079               	.LFE125:
 1081               		.section	.text.chThdTerminate,"ax",@progbits
 1082               	.global	chThdTerminate
 1084               	chThdTerminate:
 1085               	.LFB126:
 617:../../../os/rt/src/chthreads.c **** 
 618:../../../os/rt/src/chthreads.c **** /**
 619:../../../os/rt/src/chthreads.c ****  * @brief   Requests a thread termination.
 620:../../../os/rt/src/chthreads.c ****  * @pre     The target thread must be written to invoke periodically
 621:../../../os/rt/src/chthreads.c ****  *          @p chThdShouldTerminate() and terminate cleanly if it returns
 622:../../../os/rt/src/chthreads.c ****  *          @p true.
 623:../../../os/rt/src/chthreads.c ****  * @post    The specified thread will terminate after detecting the termination
 624:../../../os/rt/src/chthreads.c ****  *          condition.
 625:../../../os/rt/src/chthreads.c ****  *
 626:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 627:../../../os/rt/src/chthreads.c ****  *
 628:../../../os/rt/src/chthreads.c ****  * @api
 629:../../../os/rt/src/chthreads.c ****  */
 630:../../../os/rt/src/chthreads.c **** void chThdTerminate(thread_t *tp) {
 1086               		.loc 1 630 0
 1087               		.cfi_startproc
 1088               	.LVL76:
 1089               	/* prologue: function */
 1090               	/* frame size = 0 */
 1091               	/* stack size = 0 */
 1092               	.L__stack_usage = 0
 1093 0000 FC01      		movw r30,r24
 1094               	.LBB323:
 1095               	.LBB324:
 1096               	.LBB325:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1097               		.loc 3 437 0
 1098               	/* #APP */
 1099               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1100 0002 F894      		cli
 1101               	 ;  0 "" 2
 1102               	/* #NOAPP */
 1103               	.LBE325:
 1104               	.LBE324:
 1105               	.LBE323:
 631:../../../os/rt/src/chthreads.c **** 
 632:../../../os/rt/src/chthreads.c ****   chSysLock();
 633:../../../os/rt/src/chthreads.c ****   tp->flags |= CH_FLAG_TERMINATE;
 1106               		.loc 1 633 0
 1107 0004 9685      		ldd r25,Z+14
 1108 0006 9460      		ori r25,lo8(4)
 1109 0008 9687      		std Z+14,r25
 1110               	.LBB326:
 1111               	.LBB327:
 1112               	.LBB328:
 1113               	.LBB329:
 1114               		.loc 3 447 0
 1115               	/* #APP */
 1116               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1117 000a 7894      		sei
 1118               	 ;  0 "" 2
 1119               	/* #NOAPP */
 1120 000c 0895      		ret
 1121               	.LBE329:
 1122               	.LBE328:
 1123               	.LBE327:
 1124               	.LBE326:
 1125               		.cfi_endproc
 1126               	.LFE126:
 1128               		.section	.text.chThdSleep,"ax",@progbits
 1129               	.global	chThdSleep
 1131               	chThdSleep:
 1132               	.LFB127:
 634:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 635:../../../os/rt/src/chthreads.c **** }
 636:../../../os/rt/src/chthreads.c **** 
 637:../../../os/rt/src/chthreads.c **** /**
 638:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread for the specified time.
 639:../../../os/rt/src/chthreads.c ****  *
 640:../../../os/rt/src/chthreads.c ****  * @param[in] time      the delay in system ticks, the special values are
 641:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 642:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 643:../../../os/rt/src/chthreads.c ****  *                        state.
 644:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 645:../../../os/rt/src/chthreads.c ****  *                      .
 646:../../../os/rt/src/chthreads.c ****  *
 647:../../../os/rt/src/chthreads.c ****  * @api
 648:../../../os/rt/src/chthreads.c ****  */
 649:../../../os/rt/src/chthreads.c **** void chThdSleep(systime_t time) {
 1133               		.loc 1 649 0
 1134               		.cfi_startproc
 1135               	.LVL77:
 1136               	/* prologue: function */
 1137               	/* frame size = 0 */
 1138               	/* stack size = 0 */
 1139               	.L__stack_usage = 0
 1140               	.LBB330:
 1141               	.LBB331:
 1142               	.LBB332:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1143               		.loc 3 437 0
 1144               	/* #APP */
 1145               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1146 0000 F894      		cli
 1147               	 ;  0 "" 2
 1148               	.LVL78:
 1149               	/* #NOAPP */
 1150               	.LBE332:
 1151               	.LBE331:
 1152               	.LBE330:
 1153               	.LBB333:
 1154               	.LBB334:
 1155               		.file 4 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chthreads.h **** 
   4:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chthreads.h **** 
   6:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chthreads.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chthreads.h ****     (at your option) any later version.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** #if !defined(CH_CFG_THREAD_EXTRA_FIELDS)
  42:../../../os/rt/include/chthreads.h **** #error "CH_CFG_THREAD_EXTRA_FIELDS not defined in chconf.h"
  43:../../../os/rt/include/chthreads.h **** #endif
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** #if !defined(CH_CFG_THREAD_INIT_HOOK)
  46:../../../os/rt/include/chthreads.h **** #error "CH_CFG_THREAD_INIT_HOOK not defined in chconf.h"
  47:../../../os/rt/include/chthreads.h **** #endif
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** #if !defined(CH_CFG_THREAD_EXIT_HOOK)
  50:../../../os/rt/include/chthreads.h **** #error "CH_CFG_THREAD_EXIT_HOOK not defined in chconf.h"
  51:../../../os/rt/include/chthreads.h **** #endif
  52:../../../os/rt/include/chthreads.h **** 
  53:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  54:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  55:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  56:../../../os/rt/include/chthreads.h **** 
  57:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  58:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  59:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  60:../../../os/rt/include/chthreads.h **** 
  61:../../../os/rt/include/chthreads.h **** /**
  62:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  63:../../../os/rt/include/chthreads.h ****  */
  64:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  65:../../../os/rt/include/chthreads.h **** 
  66:../../../os/rt/include/chthreads.h **** /**
  67:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  68:../../../os/rt/include/chthreads.h ****  */
  69:../../../os/rt/include/chthreads.h **** typedef struct {
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   const char        *name;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   End of the working area.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  82:../../../os/rt/include/chthreads.h ****   /**
  83:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  84:../../../os/rt/include/chthreads.h ****    */
  85:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  86:../../../os/rt/include/chthreads.h ****   /**
  87:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  88:../../../os/rt/include/chthreads.h ****    */
  89:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  90:../../../os/rt/include/chthreads.h ****   /**
  91:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  92:../../../os/rt/include/chthreads.h ****    */
  93:../../../os/rt/include/chthreads.h ****   void              *arg;
  94:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  95:../../../os/rt/include/chthreads.h **** 
  96:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  97:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  98:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  99:../../../os/rt/include/chthreads.h **** 
 100:../../../os/rt/include/chthreads.h **** /**
 101:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
 102:../../../os/rt/include/chthreads.h ****  */
 103:../../../os/rt/include/chthreads.h **** /**
 104:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 105:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 106:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 107:../../../os/rt/include/chthreads.h ****  *
 108:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 109:../../../os/rt/include/chthreads.h ****  */
 110:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DATA(name) {(thread_t *)&name, (thread_t *)&name}
 111:../../../os/rt/include/chthreads.h **** 
 112:../../../os/rt/include/chthreads.h **** /**
 113:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 114:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 115:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 116:../../../os/rt/include/chthreads.h ****  *
 117:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 118:../../../os/rt/include/chthreads.h ****  */
 119:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DECL(name)                                           \
 120:../../../os/rt/include/chthreads.h ****   threads_queue_t name = _THREADS_QUEUE_DATA(name)
 121:../../../os/rt/include/chthreads.h **** /** @} */
 122:../../../os/rt/include/chthreads.h **** 
 123:../../../os/rt/include/chthreads.h **** /**
 124:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 125:../../../os/rt/include/chthreads.h ****  */
 126:../../../os/rt/include/chthreads.h **** /**
 127:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 128:../../../os/rt/include/chthreads.h ****  *
 129:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 130:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 131:../../../os/rt/include/chthreads.h ****  *
 132:../../../os/rt/include/chthreads.h ****  * @api
 133:../../../os/rt/include/chthreads.h ****  */
 134:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 135:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 139:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 140:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 141:../../../os/rt/include/chthreads.h ****  *
 142:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 143:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 144:../../../os/rt/include/chthreads.h ****  *
 145:../../../os/rt/include/chthreads.h ****  * @api
 146:../../../os/rt/include/chthreads.h ****  */
 147:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 148:../../../os/rt/include/chthreads.h **** 
 149:../../../os/rt/include/chthreads.h **** /**
 150:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 151:../../../os/rt/include/chthreads.h ****  *
 152:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 153:../../../os/rt/include/chthreads.h ****  */
 154:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 155:../../../os/rt/include/chthreads.h **** 
 156:../../../os/rt/include/chthreads.h **** /**
 157:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 158:../../../os/rt/include/chthreads.h ****  *
 159:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 160:../../../os/rt/include/chthreads.h ****  */
 161:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 162:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 163:../../../os/rt/include/chthreads.h **** /** @} */
 164:../../../os/rt/include/chthreads.h **** 
 165:../../../os/rt/include/chthreads.h **** /**
 166:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 167:../../../os/rt/include/chthreads.h ****  */
 168:../../../os/rt/include/chthreads.h **** /**
 169:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 170:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 171:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 172:../../../os/rt/include/chthreads.h ****  */
 173:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 174:../../../os/rt/include/chthreads.h **** /** @} */
 175:../../../os/rt/include/chthreads.h **** 
 176:../../../os/rt/include/chthreads.h **** /**
 177:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 178:../../../os/rt/include/chthreads.h ****  * @{
 179:../../../os/rt/include/chthreads.h ****  */
 180:../../../os/rt/include/chthreads.h **** /**
 181:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 182:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 183:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 184:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 185:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 186:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 187:../../../os/rt/include/chthreads.h ****  *          converted.
 188:../../../os/rt/include/chthreads.h ****  *
 189:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 190:../../../os/rt/include/chthreads.h ****  *
 191:../../../os/rt/include/chthreads.h ****  * @api
 192:../../../os/rt/include/chthreads.h ****  */
 193:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(S2ST(sec))
 194:../../../os/rt/include/chthreads.h **** 
 195:../../../os/rt/include/chthreads.h **** /**
 196:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 197:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 198:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 199:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 200:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 201:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 202:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 203:../../../os/rt/include/chthreads.h ****  *          converted.
 204:../../../os/rt/include/chthreads.h ****  *
 205:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 206:../../../os/rt/include/chthreads.h ****  *
 207:../../../os/rt/include/chthreads.h ****  * @api
 208:../../../os/rt/include/chthreads.h ****  */
 209:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(MS2ST(msec))
 210:../../../os/rt/include/chthreads.h **** 
 211:../../../os/rt/include/chthreads.h **** /**
 212:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 213:../../../os/rt/include/chthreads.h ****  *          microseconds.
 214:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 215:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 216:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 217:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 218:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 219:../../../os/rt/include/chthreads.h ****  *          converted.
 220:../../../os/rt/include/chthreads.h ****  *
 221:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 222:../../../os/rt/include/chthreads.h ****  *
 223:../../../os/rt/include/chthreads.h ****  * @api
 224:../../../os/rt/include/chthreads.h ****  */
 225:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(US2ST(usec))
 226:../../../os/rt/include/chthreads.h **** /** @} */
 227:../../../os/rt/include/chthreads.h **** 
 228:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 229:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 230:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 231:../../../os/rt/include/chthreads.h **** 
 232:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 233:../../../os/rt/include/chthreads.h **** extern "C" {
 234:../../../os/rt/include/chthreads.h **** #endif
 235:../../../os/rt/include/chthreads.h ****    thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio);
 236:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 237:../../../os/rt/include/chthreads.h ****   void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v);
 238:../../../os/rt/include/chthreads.h **** #endif
 239:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 240:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 241:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 242:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 243:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 244:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 245:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 246:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 247:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 248:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 249:../../../os/rt/include/chthreads.h **** #endif
 250:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 251:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 252:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 253:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 254:../../../os/rt/include/chthreads.h **** #endif
 255:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 256:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 257:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 258:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout);
 259:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 260:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 261:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 262:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout);
 263:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 264:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 265:../../../os/rt/include/chthreads.h ****   void chThdSleep(systime_t time);
 266:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 267:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 268:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 269:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 270:../../../os/rt/include/chthreads.h **** }
 271:../../../os/rt/include/chthreads.h **** #endif
 272:../../../os/rt/include/chthreads.h **** 
 273:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 274:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 275:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 276:../../../os/rt/include/chthreads.h **** 
 277:../../../os/rt/include/chthreads.h ****  /**
 278:../../../os/rt/include/chthreads.h ****   * @brief   Returns a pointer to the current @p thread_t.
 279:../../../os/rt/include/chthreads.h ****   *
 280:../../../os/rt/include/chthreads.h ****   * @return             A pointer to the current thread.
 281:../../../os/rt/include/chthreads.h ****   *
 282:../../../os/rt/include/chthreads.h ****   * @xclass
 283:../../../os/rt/include/chthreads.h ****   */
 284:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 285:../../../os/rt/include/chthreads.h **** 
 286:../../../os/rt/include/chthreads.h ****   return ch.rlist.current;
 287:../../../os/rt/include/chthreads.h **** }
 288:../../../os/rt/include/chthreads.h **** 
 289:../../../os/rt/include/chthreads.h **** /**
 290:../../../os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 291:../../../os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 292:../../../os/rt/include/chthreads.h ****  *
 293:../../../os/rt/include/chthreads.h ****  * @return              The current thread priority.
 294:../../../os/rt/include/chthreads.h ****  *
 295:../../../os/rt/include/chthreads.h ****  * @xclass
 296:../../../os/rt/include/chthreads.h ****  */
 297:../../../os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 298:../../../os/rt/include/chthreads.h **** 
 299:../../../os/rt/include/chthreads.h ****   return chThdGetSelfX()->prio;
 300:../../../os/rt/include/chthreads.h **** }
 301:../../../os/rt/include/chthreads.h **** 
 302:../../../os/rt/include/chthreads.h **** /**
 303:../../../os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 304:../../../os/rt/include/chthreads.h ****  * @note    This function is only available when the
 305:../../../os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 306:../../../os/rt/include/chthreads.h ****  *
 307:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 308:../../../os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 309:../../../os/rt/include/chthreads.h ****  *
 310:../../../os/rt/include/chthreads.h ****  * @xclass
 311:../../../os/rt/include/chthreads.h ****  */
 312:../../../os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 313:../../../os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 314:../../../os/rt/include/chthreads.h **** 
 315:../../../os/rt/include/chthreads.h ****   return tp->time;
 316:../../../os/rt/include/chthreads.h **** }
 317:../../../os/rt/include/chthreads.h **** #endif
 318:../../../os/rt/include/chthreads.h **** 
 319:../../../os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 320:../../../os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 321:../../../os/rt/include/chthreads.h **** /**
 322:../../../os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 323:../../../os/rt/include/chthreads.h ****  *
 324:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 325:../../../os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 326:../../../os/rt/include/chthreads.h ****  *
 327:../../../os/rt/include/chthreads.h ****  * @xclass
 328:../../../os/rt/include/chthreads.h ****  */
 329:../../../os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 330:../../../os/rt/include/chthreads.h **** 
 331:../../../os/rt/include/chthreads.h ****   return tp->wabase;
 332:../../../os/rt/include/chthreads.h **** }
 333:../../../os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 334:../../../os/rt/include/chthreads.h **** 
 335:../../../os/rt/include/chthreads.h **** /**
 336:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 337:../../../os/rt/include/chthreads.h ****  *
 338:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 339:../../../os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 340:../../../os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 341:../../../os/rt/include/chthreads.h ****  *
 342:../../../os/rt/include/chthreads.h ****  * @xclass
 343:../../../os/rt/include/chthreads.h ****  */
 344:../../../os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 345:../../../os/rt/include/chthreads.h **** 
 346:../../../os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 347:../../../os/rt/include/chthreads.h **** }
 348:../../../os/rt/include/chthreads.h **** 
 349:../../../os/rt/include/chthreads.h **** /**
 350:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 351:../../../os/rt/include/chthreads.h ****  *
 352:../../../os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 353:../../../os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 354:../../../os/rt/include/chthreads.h ****  *
 355:../../../os/rt/include/chthreads.h ****  * @xclass
 356:../../../os/rt/include/chthreads.h ****  */
 357:../../../os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 358:../../../os/rt/include/chthreads.h **** 
 359:../../../os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 360:../../../os/rt/include/chthreads.h **** }
 361:../../../os/rt/include/chthreads.h **** 
 362:../../../os/rt/include/chthreads.h **** /**
 363:../../../os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 364:../../../os/rt/include/chthreads.h ****  *
 365:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 366:../../../os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 367:../../../os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @iclass
 370:../../../os/rt/include/chthreads.h ****  */
 371:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 372:../../../os/rt/include/chthreads.h **** 
 373:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 374:../../../os/rt/include/chthreads.h **** 
 375:../../../os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 376:../../../os/rt/include/chthreads.h **** }
 377:../../../os/rt/include/chthreads.h **** 
 378:../../../os/rt/include/chthreads.h **** /**
 379:../../../os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified time.
 380:../../../os/rt/include/chthreads.h ****  *
 381:../../../os/rt/include/chthreads.h ****  * @param[in] time      the delay in system ticks, the special values are
 382:../../../os/rt/include/chthreads.h ****  *                      handled as follow:
 383:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 384:../../../os/rt/include/chthreads.h ****  *                        state.
 385:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 386:../../../os/rt/include/chthreads.h ****  *                      .
 387:../../../os/rt/include/chthreads.h ****  *
 388:../../../os/rt/include/chthreads.h ****  * @sclass
 389:../../../os/rt/include/chthreads.h ****  */
 390:../../../os/rt/include/chthreads.h **** static inline void chThdSleepS(systime_t time) {
 391:../../../os/rt/include/chthreads.h **** 
 392:../../../os/rt/include/chthreads.h ****   chDbgCheck(time != TIME_IMMEDIATE);
 393:../../../os/rt/include/chthreads.h **** 
 394:../../../os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 1156               		.loc 4 394 0
 1157 0002 BC01      		movw r22,r24
 1158 0004 88E0      		ldi r24,lo8(8)
 1159               	.LVL79:
 1160 0006 0E94 0000 		call chSchGoSleepTimeoutS
 1161               	.LVL80:
 1162               	.LBE334:
 1163               	.LBE333:
 1164               	.LBB335:
 1165               	.LBB336:
 1166               	.LBB337:
 1167               	.LBB338:
 1168               		.loc 3 447 0
 1169               	/* #APP */
 1170               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1171 000a 7894      		sei
 1172               	 ;  0 "" 2
 1173               	/* #NOAPP */
 1174 000c 0895      		ret
 1175               	.LBE338:
 1176               	.LBE337:
 1177               	.LBE336:
 1178               	.LBE335:
 1179               		.cfi_endproc
 1180               	.LFE127:
 1182               		.section	.text.chThdSleepUntil,"ax",@progbits
 1183               	.global	chThdSleepUntil
 1185               	chThdSleepUntil:
 1186               	.LFB128:
 650:../../../os/rt/src/chthreads.c **** 
 651:../../../os/rt/src/chthreads.c ****   chSysLock();
 652:../../../os/rt/src/chthreads.c ****   chThdSleepS(time);
 653:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 654:../../../os/rt/src/chthreads.c **** }
 655:../../../os/rt/src/chthreads.c **** 
 656:../../../os/rt/src/chthreads.c **** /**
 657:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 658:../../../os/rt/src/chthreads.c ****  *          specified value.
 659:../../../os/rt/src/chthreads.c ****  * @note    The function has no concept of "past", all specifiable times
 660:../../../os/rt/src/chthreads.c ****  *          are in the future, this means that if you call this function
 661:../../../os/rt/src/chthreads.c ****  *          exceeding your calculated intervals then the function will
 662:../../../os/rt/src/chthreads.c ****  *          return in a far future time, not immediately.
 663:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntilWindowed()
 664:../../../os/rt/src/chthreads.c ****  *
 665:../../../os/rt/src/chthreads.c ****  * @param[in] time      absolute system time
 666:../../../os/rt/src/chthreads.c ****  *
 667:../../../os/rt/src/chthreads.c ****  * @api
 668:../../../os/rt/src/chthreads.c ****  */
 669:../../../os/rt/src/chthreads.c **** void chThdSleepUntil(systime_t time) {
 1187               		.loc 1 669 0
 1188               		.cfi_startproc
 1189               	.LVL81:
 1190               	/* prologue: function */
 1191               	/* frame size = 0 */
 1192               	/* stack size = 0 */
 1193               	.L__stack_usage = 0
 1194               	.LBB339:
 1195               	.LBB340:
 1196               	.LBB341:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1197               		.loc 3 437 0
 1198               	/* #APP */
 1199               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1200 0000 F894      		cli
 1201               	 ;  0 "" 2
 1202               	/* #NOAPP */
 1203               	.LBE341:
 1204               	.LBE340:
 1205               	.LBE339:
 1206               	.LBB342:
 1207               	.LBB343:
 1208               	.LBB344:
 1209               	.LBB345:
 1210               		.file 5 "../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @file    hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  34:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  38:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
  41:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * TODO: for models that have many timers,
  42:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *       could add AVR_ST_USE_TIMER
  43:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  44:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  45:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  46:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  47:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  48:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  49:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
  50:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * TODO: error checks for valid timer selected
  51:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  52:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  53:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  54:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
  55:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  56:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  57:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  58:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
  59:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  60:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  61:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  62:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
  63:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  64:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  65:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  66:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** extern "C" {
  67:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  68:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  69:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  70:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** }
  71:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  72:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  73:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  74:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  75:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  76:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #else
  77:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  78:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  79:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  80:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  81:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  82:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
  83:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  84:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  85:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /**
  86:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  87:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  88:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  89:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  90:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @notapi
  91:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  92:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
  93:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  94:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
 1211               		.loc 5 94 0
 1212 0002 2091 8400 		lds r18,132
 1213 0006 3091 8500 		lds r19,132+1
 1214               	.LBE345:
 1215               	.LBE344:
 1216               	.LBE343:
 1217               	.LBE342:
 670:../../../os/rt/src/chthreads.c **** 
 671:../../../os/rt/src/chthreads.c ****   chSysLock();
 672:../../../os/rt/src/chthreads.c ****   time -= chVTGetSystemTimeX();
 1218               		.loc 1 672 0
 1219 000a BC01      		movw r22,r24
 1220 000c 621B      		sub r22,r18
 1221 000e 730B      		sbc r23,r19
 1222               	.LVL82:
 673:../../../os/rt/src/chthreads.c ****   if (time > (systime_t)0) {
 1223               		.loc 1 673 0
 1224 0010 01F0      		breq .L34
 1225               	.LVL83:
 1226               	.LBB346:
 1227               	.LBB347:
 1228               		.loc 4 394 0
 1229 0012 88E0      		ldi r24,lo8(8)
 1230 0014 0E94 0000 		call chSchGoSleepTimeoutS
 1231               	.LVL84:
 1232               	.L34:
 1233               	.LBE347:
 1234               	.LBE346:
 1235               	.LBB348:
 1236               	.LBB349:
 1237               	.LBB350:
 1238               	.LBB351:
 1239               		.loc 3 447 0
 1240               	/* #APP */
 1241               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1242 0018 7894      		sei
 1243               	 ;  0 "" 2
 1244               	/* #NOAPP */
 1245 001a 0895      		ret
 1246               	.LBE351:
 1247               	.LBE350:
 1248               	.LBE349:
 1249               	.LBE348:
 1250               		.cfi_endproc
 1251               	.LFE128:
 1253               		.section	.text.chThdSleepUntilWindowed,"ax",@progbits
 1254               	.global	chThdSleepUntilWindowed
 1256               	chThdSleepUntilWindowed:
 1257               	.LFB129:
 674:../../../os/rt/src/chthreads.c ****     chThdSleepS(time);
 675:../../../os/rt/src/chthreads.c ****   }
 676:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 677:../../../os/rt/src/chthreads.c **** }
 678:../../../os/rt/src/chthreads.c **** 
 679:../../../os/rt/src/chthreads.c **** /**
 680:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 681:../../../os/rt/src/chthreads.c ****  *          specified value.
 682:../../../os/rt/src/chthreads.c ****  * @note    The system time is assumed to be between @p prev and @p time
 683:../../../os/rt/src/chthreads.c ****  *          else the call is assumed to have been called outside the
 684:../../../os/rt/src/chthreads.c ****  *          allowed time interval, in this case no sleep is performed.
 685:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntil()
 686:../../../os/rt/src/chthreads.c ****  *
 687:../../../os/rt/src/chthreads.c ****  * @param[in] prev      absolute system time of the previous deadline
 688:../../../os/rt/src/chthreads.c ****  * @param[in] next      absolute system time of the next deadline
 689:../../../os/rt/src/chthreads.c ****  * @return              the @p next parameter
 690:../../../os/rt/src/chthreads.c ****  *
 691:../../../os/rt/src/chthreads.c ****  * @api
 692:../../../os/rt/src/chthreads.c ****  */
 693:../../../os/rt/src/chthreads.c **** systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 1258               		.loc 1 693 0
 1259               		.cfi_startproc
 1260               	.LVL85:
 1261 0000 CF93      		push r28
 1262               	.LCFI21:
 1263               		.cfi_def_cfa_offset 4
 1264               		.cfi_offset 28, -3
 1265 0002 DF93      		push r29
 1266               	.LCFI22:
 1267               		.cfi_def_cfa_offset 5
 1268               		.cfi_offset 29, -4
 1269               	/* prologue: function */
 1270               	/* frame size = 0 */
 1271               	/* stack size = 2 */
 1272               	.L__stack_usage = 2
 1273 0004 EB01      		movw r28,r22
 1274               	.LBB352:
 1275               	.LBB353:
 1276               	.LBB354:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1277               		.loc 3 437 0
 1278               	/* #APP */
 1279               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1280 0006 F894      		cli
 1281               	 ;  0 "" 2
 1282               	/* #NOAPP */
 1283               	.LBE354:
 1284               	.LBE353:
 1285               	.LBE352:
 1286               	.LBB355:
 1287               	.LBB356:
 1288               	.LBB357:
 1289               	.LBB358:
 1290               		.loc 5 94 0
 1291 0008 2091 8400 		lds r18,132
 1292 000c 3091 8500 		lds r19,132+1
 1293               	.LBE358:
 1294               	.LBE357:
 1295               	.LBE356:
 1296               	.LBE355:
 694:../../../os/rt/src/chthreads.c ****   systime_t time;
 695:../../../os/rt/src/chthreads.c **** 
 696:../../../os/rt/src/chthreads.c ****   chSysLock();
 697:../../../os/rt/src/chthreads.c ****   time = chVTGetSystemTimeX();
 698:../../../os/rt/src/chthreads.c ****   if (chVTIsTimeWithinX(time, prev, next)) {
 1297               		.loc 1 698 0
 1298 0010 A901      		movw r20,r18
 1299 0012 481B      		sub r20,r24
 1300 0014 590B      		sbc r21,r25
 1301 0016 681B      		sub r22,r24
 1302 0018 790B      		sbc r23,r25
 1303               	.LVL86:
 1304 001a 4617      		cp r20,r22
 1305 001c 5707      		cpc r21,r23
 1306 001e 00F4      		brsh .L39
 1307               	.LVL87:
 1308               	.LBB359:
 1309               	.LBB360:
 1310               		.loc 4 394 0
 1311 0020 BE01      		movw r22,r28
 1312 0022 621B      		sub r22,r18
 1313 0024 730B      		sbc r23,r19
 1314               	.LVL88:
 1315 0026 88E0      		ldi r24,lo8(8)
 1316               	.LVL89:
 1317 0028 0E94 0000 		call chSchGoSleepTimeoutS
 1318               	.LVL90:
 1319               	.L39:
 1320               	.LBE360:
 1321               	.LBE359:
 1322               	.LBB361:
 1323               	.LBB362:
 1324               	.LBB363:
 1325               	.LBB364:
 1326               		.loc 3 447 0
 1327               	/* #APP */
 1328               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1329 002c 7894      		sei
 1330               	 ;  0 "" 2
 1331               	/* #NOAPP */
 1332               	.LBE364:
 1333               	.LBE363:
 1334               	.LBE362:
 1335               	.LBE361:
 699:../../../os/rt/src/chthreads.c ****     chThdSleepS(next - time);
 700:../../../os/rt/src/chthreads.c ****   }
 701:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 702:../../../os/rt/src/chthreads.c **** 
 703:../../../os/rt/src/chthreads.c ****   return next;
 704:../../../os/rt/src/chthreads.c **** }
 1336               		.loc 1 704 0
 1337 002e CE01      		movw r24,r28
 1338               	/* epilogue start */
 1339 0030 DF91      		pop r29
 1340 0032 CF91      		pop r28
 1341               	.LVL91:
 1342 0034 0895      		ret
 1343               		.cfi_endproc
 1344               	.LFE129:
 1346               		.section	.text.chThdYield,"ax",@progbits
 1347               	.global	chThdYield
 1349               	chThdYield:
 1350               	.LFB130:
 705:../../../os/rt/src/chthreads.c **** 
 706:../../../os/rt/src/chthreads.c **** /**
 707:../../../os/rt/src/chthreads.c ****  * @brief   Yields the time slot.
 708:../../../os/rt/src/chthreads.c ****  * @details Yields the CPU control to the next thread in the ready list with
 709:../../../os/rt/src/chthreads.c ****  *          equal priority, if any.
 710:../../../os/rt/src/chthreads.c ****  *
 711:../../../os/rt/src/chthreads.c ****  * @api
 712:../../../os/rt/src/chthreads.c ****  */
 713:../../../os/rt/src/chthreads.c **** void chThdYield(void) {
 1351               		.loc 1 713 0
 1352               		.cfi_startproc
 1353               	/* prologue: function */
 1354               	/* frame size = 0 */
 1355               	/* stack size = 0 */
 1356               	.L__stack_usage = 0
 1357               	.LBB365:
 1358               	.LBB366:
 1359               	.LBB367:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1360               		.loc 3 437 0
 1361               	/* #APP */
 1362               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1363 0000 F894      		cli
 1364               	 ;  0 "" 2
 1365               	/* #NOAPP */
 1366               	.LBE367:
 1367               	.LBE366:
 1368               	.LBE365:
 1369               	.LBB368:
 1370               	.LBB369:
 1371               	.LBB370:
 1372               	.LBB371:
 593:../../../os/rt/include/chschd.h **** 
 594:../../../os/rt/include/chschd.h ****   return tp;
 595:../../../os/rt/include/chschd.h **** }
 596:../../../os/rt/include/chschd.h **** 
 597:../../../os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 598:../../../os/rt/include/chschd.h **** 
 599:../../../os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 600:../../../os/rt/include/chschd.h ****   do {
 601:../../../os/rt/include/chschd.h ****     cp = cp->queue.next;
 602:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 603:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 604:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 605:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 606:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 607:../../../os/rt/include/chschd.h **** }
 608:../../../os/rt/include/chschd.h **** 
 609:../../../os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 610:../../../os/rt/include/chschd.h **** 
 611:../../../os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 612:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 613:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 614:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 615:../../../os/rt/include/chschd.h **** }
 616:../../../os/rt/include/chschd.h **** 
 617:../../../os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 618:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 619:../../../os/rt/include/chschd.h **** 
 620:../../../os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 621:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 622:../../../os/rt/include/chschd.h **** 
 623:../../../os/rt/include/chschd.h ****   return tp;
 624:../../../os/rt/include/chschd.h **** }
 625:../../../os/rt/include/chschd.h **** 
 626:../../../os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 627:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 628:../../../os/rt/include/chschd.h **** 
 629:../../../os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 630:../../../os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 631:../../../os/rt/include/chschd.h **** 
 632:../../../os/rt/include/chschd.h ****   return tp;
 633:../../../os/rt/include/chschd.h **** }
 634:../../../os/rt/include/chschd.h **** 
 635:../../../os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 636:../../../os/rt/include/chschd.h **** 
 637:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 638:../../../os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 639:../../../os/rt/include/chschd.h **** 
 640:../../../os/rt/include/chschd.h ****   return tp;
 641:../../../os/rt/include/chschd.h **** }
 642:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == TRUE */
 643:../../../os/rt/include/chschd.h **** 
 644:../../../os/rt/include/chschd.h **** /**
 645:../../../os/rt/include/chschd.h ****  * @brief   Determines if the current thread must reschedule.
 646:../../../os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 647:../../../os/rt/include/chschd.h ****  *          higher priority.
 648:../../../os/rt/include/chschd.h ****  *
 649:../../../os/rt/include/chschd.h ****  * @return              The priorities situation.
 650:../../../os/rt/include/chschd.h ****  * @retval false        if rescheduling is not necessary.
 651:../../../os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at higher priority.
 652:../../../os/rt/include/chschd.h ****  *
 653:../../../os/rt/include/chschd.h ****  * @iclass
 654:../../../os/rt/include/chschd.h ****  */
 655:../../../os/rt/include/chschd.h **** static inline bool chSchIsRescRequiredI(void) {
 656:../../../os/rt/include/chschd.h **** 
 657:../../../os/rt/include/chschd.h ****   chDbgCheckClassI();
 658:../../../os/rt/include/chschd.h **** 
 659:../../../os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) > currp->prio;
 660:../../../os/rt/include/chschd.h **** }
 661:../../../os/rt/include/chschd.h **** 
 662:../../../os/rt/include/chschd.h **** /**
 663:../../../os/rt/include/chschd.h ****  * @brief   Determines if yielding is possible.
 664:../../../os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 665:../../../os/rt/include/chschd.h ****  *          equal or higher priority.
 666:../../../os/rt/include/chschd.h ****  *
 667:../../../os/rt/include/chschd.h ****  * @return              The priorities situation.
 668:../../../os/rt/include/chschd.h ****  * @retval false        if yielding is not possible.
 669:../../../os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at equal or higher priority.
 670:../../../os/rt/include/chschd.h ****  *
 671:../../../os/rt/include/chschd.h ****  * @sclass
 672:../../../os/rt/include/chschd.h ****  */
 673:../../../os/rt/include/chschd.h **** static inline bool chSchCanYieldS(void) {
 674:../../../os/rt/include/chschd.h **** 
 675:../../../os/rt/include/chschd.h ****   chDbgCheckClassS();
 676:../../../os/rt/include/chschd.h **** 
 677:../../../os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) >= currp->prio;
 1373               		.loc 2 677 0
 1374 0002 A091 0000 		lds r26,ch
 1375 0006 B091 0000 		lds r27,ch+1
 1376 000a E091 0000 		lds r30,ch+11
 1377 000e F091 0000 		lds r31,ch+11+1
 1378               	.LBE371:
 1379               	.LBE370:
 678:../../../os/rt/include/chschd.h **** }
 679:../../../os/rt/include/chschd.h **** 
 680:../../../os/rt/include/chschd.h **** /**
 681:../../../os/rt/include/chschd.h ****  * @brief   Yields the time slot.
 682:../../../os/rt/include/chschd.h ****  * @details Yields the CPU control to the next thread in the ready list with
 683:../../../os/rt/include/chschd.h ****  *          equal or higher priority, if any.
 684:../../../os/rt/include/chschd.h ****  *
 685:../../../os/rt/include/chschd.h ****  * @sclass
 686:../../../os/rt/include/chschd.h ****  */
 687:../../../os/rt/include/chschd.h **** static inline void chSchDoYieldS(void) {
 688:../../../os/rt/include/chschd.h **** 
 689:../../../os/rt/include/chschd.h ****   chDbgCheckClassS();
 690:../../../os/rt/include/chschd.h **** 
 691:../../../os/rt/include/chschd.h ****   if (chSchCanYieldS()) {
 1380               		.loc 2 691 0
 1381 0012 1496      		adiw r26,4
 1382 0014 9C91      		ld r25,X
 1383 0016 8481      		ldd r24,Z+4
 1384 0018 9817      		cp r25,r24
 1385 001a 00F0      		brlo .L41
 692:../../../os/rt/include/chschd.h ****     chSchDoRescheduleBehind();
 1386               		.loc 2 692 0
 1387 001c 0E94 0000 		call chSchDoRescheduleBehind
 1388               	.LVL92:
 1389               	.L41:
 1390               	.LBE369:
 1391               	.LBE368:
 1392               	.LBB372:
 1393               	.LBB373:
 1394               	.LBB374:
 1395               	.LBB375:
 1396               		.loc 3 447 0
 1397               	/* #APP */
 1398               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1399 0020 7894      		sei
 1400               	 ;  0 "" 2
 1401               	/* #NOAPP */
 1402 0022 0895      		ret
 1403               	.LBE375:
 1404               	.LBE374:
 1405               	.LBE373:
 1406               	.LBE372:
 1407               		.cfi_endproc
 1408               	.LFE130:
 1410               		.section	.text.chThdSuspendS,"ax",@progbits
 1411               	.global	chThdSuspendS
 1413               	chThdSuspendS:
 1414               	.LFB131:
 714:../../../os/rt/src/chthreads.c **** 
 715:../../../os/rt/src/chthreads.c ****   chSysLock();
 716:../../../os/rt/src/chthreads.c ****   chSchDoYieldS();
 717:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 718:../../../os/rt/src/chthreads.c **** }
 719:../../../os/rt/src/chthreads.c **** 
 720:../../../os/rt/src/chthreads.c **** /**
 721:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 722:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 723:../../../os/rt/src/chthreads.c ****  *          context.
 724:../../../os/rt/src/chthreads.c ****  *
 725:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 726:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 727:../../../os/rt/src/chthreads.c ****  *
 728:../../../os/rt/src/chthreads.c ****  * @sclass
 729:../../../os/rt/src/chthreads.c ****  */
 730:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendS(thread_reference_t *trp) {
 1415               		.loc 1 730 0
 1416               		.cfi_startproc
 1417               	.LVL93:
 1418 0000 CF93      		push r28
 1419               	.LCFI23:
 1420               		.cfi_def_cfa_offset 4
 1421               		.cfi_offset 28, -3
 1422 0002 DF93      		push r29
 1423               	.LCFI24:
 1424               		.cfi_def_cfa_offset 5
 1425               		.cfi_offset 29, -4
 1426               	/* prologue: function */
 1427               	/* frame size = 0 */
 1428               	/* stack size = 2 */
 1429               	.L__stack_usage = 2
 1430               	.LBB376:
 1431               	.LBB377:
 286:../../../os/rt/include/chthreads.h **** }
 1432               		.loc 4 286 0
 1433 0004 C0E0      		ldi r28,lo8(ch)
 1434 0006 D0E0      		ldi r29,hi8(ch)
 1435 0008 EB85      		ldd r30,Y+11
 1436 000a FC85      		ldd r31,Y+12
 1437               	.LBE377:
 1438               	.LBE376:
 731:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 732:../../../os/rt/src/chthreads.c **** 
 733:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 734:../../../os/rt/src/chthreads.c **** 
 735:../../../os/rt/src/chthreads.c ****   *trp = tp;
 1439               		.loc 1 735 0
 1440 000c DC01      		movw r26,r24
 1441 000e ED93      		st X+,r30
 1442 0010 FC93      		st X,r31
 736:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1443               		.loc 1 736 0
 1444 0012 918B      		std Z+17,r25
 1445 0014 808B      		std Z+16,r24
 737:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_SUSPENDED);
 1446               		.loc 1 737 0
 1447 0016 83E0      		ldi r24,lo8(3)
 1448               	.LVL94:
 1449 0018 0E94 0000 		call chSchGoSleepS
 1450               	.LVL95:
 738:../../../os/rt/src/chthreads.c **** 
 739:../../../os/rt/src/chthreads.c ****   return chThdGetSelfX()->u.rdymsg;
 1451               		.loc 1 739 0
 1452 001c EB85      		ldd r30,Y+11
 1453 001e FC85      		ldd r31,Y+12
 740:../../../os/rt/src/chthreads.c **** }
 1454               		.loc 1 740 0
 1455 0020 8089      		ldd r24,Z+16
 1456 0022 9189      		ldd r25,Z+17
 1457               	/* epilogue start */
 1458 0024 DF91      		pop r29
 1459 0026 CF91      		pop r28
 1460 0028 0895      		ret
 1461               		.cfi_endproc
 1462               	.LFE131:
 1464               		.section	.text.chThdSuspendTimeoutS,"ax",@progbits
 1465               	.global	chThdSuspendTimeoutS
 1467               	chThdSuspendTimeoutS:
 1468               	.LFB132:
 741:../../../os/rt/src/chthreads.c **** 
 742:../../../os/rt/src/chthreads.c **** /**
 743:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 744:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 745:../../../os/rt/src/chthreads.c ****  *          context.
 746:../../../os/rt/src/chthreads.c ****  *
 747:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 748:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 749:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 750:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 751:../../../os/rt/src/chthreads.c ****  *                        state.
 752:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 753:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 754:../../../os/rt/src/chthreads.c ****  *                        occurred.
 755:../../../os/rt/src/chthreads.c ****  *                      .
 756:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 757:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the operation timed out.
 758:../../../os/rt/src/chthreads.c ****  *
 759:../../../os/rt/src/chthreads.c ****  * @sclass
 760:../../../os/rt/src/chthreads.c ****  */
 761:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
 1469               		.loc 1 761 0
 1470               		.cfi_startproc
 1471               	.LVL96:
 1472               	/* prologue: function */
 1473               	/* frame size = 0 */
 1474               	/* stack size = 0 */
 1475               	.L__stack_usage = 0
 1476               	.LBB378:
 1477               	.LBB379:
 286:../../../os/rt/include/chthreads.h **** }
 1478               		.loc 4 286 0
 1479 0000 E091 0000 		lds r30,ch+11
 1480 0004 F091 0000 		lds r31,ch+11+1
 1481               	.LBE379:
 1482               	.LBE378:
 762:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 763:../../../os/rt/src/chthreads.c **** 
 764:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 765:../../../os/rt/src/chthreads.c **** 
 766:../../../os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 1483               		.loc 1 766 0
 1484 0008 6115      		cp r22,__zero_reg__
 1485 000a 7105      		cpc r23,__zero_reg__
 1486 000c 01F0      		breq .L44
 767:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 768:../../../os/rt/src/chthreads.c ****   }
 769:../../../os/rt/src/chthreads.c **** 
 770:../../../os/rt/src/chthreads.c ****   *trp = tp;
 1487               		.loc 1 770 0
 1488 000e DC01      		movw r26,r24
 1489 0010 ED93      		st X+,r30
 1490 0012 FC93      		st X,r31
 771:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1491               		.loc 1 771 0
 1492 0014 918B      		std Z+17,r25
 1493 0016 808B      		std Z+16,r24
 772:../../../os/rt/src/chthreads.c **** 
 773:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 1494               		.loc 1 773 0
 1495 0018 83E0      		ldi r24,lo8(3)
 1496               	.LVL97:
 1497 001a 0C94 0000 		jmp chSchGoSleepTimeoutS
 1498               	.LVL98:
 1499               	.L44:
 774:../../../os/rt/src/chthreads.c **** }
 1500               		.loc 1 774 0
 1501 001e 8FEF      		ldi r24,lo8(-1)
 1502 0020 9FEF      		ldi r25,lo8(-1)
 1503               	.LVL99:
 1504 0022 0895      		ret
 1505               		.cfi_endproc
 1506               	.LFE132:
 1508               		.section	.text.chThdResumeI,"ax",@progbits
 1509               	.global	chThdResumeI
 1511               	chThdResumeI:
 1512               	.LFB133:
 775:../../../os/rt/src/chthreads.c **** 
 776:../../../os/rt/src/chthreads.c **** /**
 777:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 778:../../../os/rt/src/chthreads.c ****  * @note    This function must not reschedule because it can be called from
 779:../../../os/rt/src/chthreads.c ****  *          ISR context.
 780:../../../os/rt/src/chthreads.c ****  *
 781:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 782:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 783:../../../os/rt/src/chthreads.c ****  *
 784:../../../os/rt/src/chthreads.c ****  * @iclass
 785:../../../os/rt/src/chthreads.c ****  */
 786:../../../os/rt/src/chthreads.c **** void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 1513               		.loc 1 786 0
 1514               		.cfi_startproc
 1515               	.LVL100:
 1516               	/* prologue: function */
 1517               	/* frame size = 0 */
 1518               	/* stack size = 0 */
 1519               	.L__stack_usage = 0
 787:../../../os/rt/src/chthreads.c **** 
 788:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1520               		.loc 1 788 0
 1521 0000 DC01      		movw r26,r24
 1522 0002 ED91      		ld r30,X+
 1523 0004 FC91      		ld r31,X
 1524 0006 1197      		sbiw r26,1
 1525 0008 3097      		sbiw r30,0
 1526 000a 01F0      		breq .L45
 1527               	.LVL101:
 1528               	.LBB380:
 789:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 790:../../../os/rt/src/chthreads.c **** 
 791:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 792:../../../os/rt/src/chthreads.c **** 
 793:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 1529               		.loc 1 793 0
 1530 000c 1D92      		st X+,__zero_reg__
 1531 000e 1C92      		st X,__zero_reg__
 794:../../../os/rt/src/chthreads.c ****     tp->u.rdymsg = msg;
 1532               		.loc 1 794 0
 1533 0010 718B      		std Z+17,r23
 1534 0012 608B      		std Z+16,r22
 795:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(tp);
 1535               		.loc 1 795 0
 1536 0014 CF01      		movw r24,r30
 1537               	.LVL102:
 1538 0016 0C94 0000 		jmp chSchReadyI
 1539               	.LVL103:
 1540               	.L45:
 1541 001a 0895      		ret
 1542               	.LBE380:
 1543               		.cfi_endproc
 1544               	.LFE133:
 1546               		.section	.text.chThdResumeS,"ax",@progbits
 1547               	.global	chThdResumeS
 1549               	chThdResumeS:
 1550               	.LFB134:
 796:../../../os/rt/src/chthreads.c ****   }
 797:../../../os/rt/src/chthreads.c **** }
 798:../../../os/rt/src/chthreads.c **** 
 799:../../../os/rt/src/chthreads.c **** /**
 800:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 801:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 802:../../../os/rt/src/chthreads.c ****  *          context.
 803:../../../os/rt/src/chthreads.c ****  *
 804:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 805:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 806:../../../os/rt/src/chthreads.c ****  *
 807:../../../os/rt/src/chthreads.c ****  * @iclass
 808:../../../os/rt/src/chthreads.c ****  */
 809:../../../os/rt/src/chthreads.c **** void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 1551               		.loc 1 809 0
 1552               		.cfi_startproc
 1553               	.LVL104:
 1554               	/* prologue: function */
 1555               	/* frame size = 0 */
 1556               	/* stack size = 0 */
 1557               	.L__stack_usage = 0
 810:../../../os/rt/src/chthreads.c **** 
 811:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1558               		.loc 1 811 0
 1559 0000 FC01      		movw r30,r24
 1560 0002 2081      		ld r18,Z
 1561 0004 3181      		ldd r19,Z+1
 1562 0006 2115      		cp r18,__zero_reg__
 1563 0008 3105      		cpc r19,__zero_reg__
 1564 000a 01F0      		breq .L47
 1565               	.LVL105:
 1566               	.LBB381:
 812:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 813:../../../os/rt/src/chthreads.c **** 
 814:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 815:../../../os/rt/src/chthreads.c **** 
 816:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 1567               		.loc 1 816 0
 1568 000c 1182      		std Z+1,__zero_reg__
 1569 000e 1082      		st Z,__zero_reg__
 817:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1570               		.loc 1 817 0
 1571 0010 C901      		movw r24,r18
 1572               	.LVL106:
 1573 0012 0C94 0000 		jmp chSchWakeupS
 1574               	.LVL107:
 1575               	.L47:
 1576 0016 0895      		ret
 1577               	.LBE381:
 1578               		.cfi_endproc
 1579               	.LFE134:
 1581               		.section	.text.chThdResume,"ax",@progbits
 1582               	.global	chThdResume
 1584               	chThdResume:
 1585               	.LFB135:
 818:../../../os/rt/src/chthreads.c ****   }
 819:../../../os/rt/src/chthreads.c **** }
 820:../../../os/rt/src/chthreads.c **** 
 821:../../../os/rt/src/chthreads.c **** /**
 822:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 823:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 824:../../../os/rt/src/chthreads.c ****  *          context.
 825:../../../os/rt/src/chthreads.c ****  *
 826:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 827:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 828:../../../os/rt/src/chthreads.c ****  *
 829:../../../os/rt/src/chthreads.c ****  * @api
 830:../../../os/rt/src/chthreads.c ****  */
 831:../../../os/rt/src/chthreads.c **** void chThdResume(thread_reference_t *trp, msg_t msg) {
 1586               		.loc 1 831 0
 1587               		.cfi_startproc
 1588               	.LVL108:
 1589               	/* prologue: function */
 1590               	/* frame size = 0 */
 1591               	/* stack size = 0 */
 1592               	.L__stack_usage = 0
 1593 0000 FC01      		movw r30,r24
 1594               	.LBB382:
 1595               	.LBB383:
 1596               	.LBB384:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1597               		.loc 3 437 0
 1598               	/* #APP */
 1599               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1600 0002 F894      		cli
 1601               	 ;  0 "" 2
 1602               	.LVL109:
 1603               	/* #NOAPP */
 1604               	.LBE384:
 1605               	.LBE383:
 1606               	.LBE382:
 1607               	.LBB385:
 1608               	.LBB386:
 811:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 1609               		.loc 1 811 0
 1610 0004 8081      		ld r24,Z
 1611 0006 9181      		ldd r25,Z+1
 1612               	.LVL110:
 1613 0008 0097      		sbiw r24,0
 1614 000a 01F0      		breq .L50
 1615               	.LVL111:
 1616               	.LBB387:
 816:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1617               		.loc 1 816 0
 1618 000c 1182      		std Z+1,__zero_reg__
 1619 000e 1082      		st Z,__zero_reg__
 817:../../../os/rt/src/chthreads.c ****   }
 1620               		.loc 1 817 0
 1621 0010 0E94 0000 		call chSchWakeupS
 1622               	.LVL112:
 1623               	.L50:
 1624               	.LBE387:
 1625               	.LBE386:
 1626               	.LBE385:
 1627               	.LBB388:
 1628               	.LBB389:
 1629               	.LBB390:
 1630               	.LBB391:
 1631               		.loc 3 447 0
 1632               	/* #APP */
 1633               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1634 0014 7894      		sei
 1635               	 ;  0 "" 2
 1636               	/* #NOAPP */
 1637 0016 0895      		ret
 1638               	.LBE391:
 1639               	.LBE390:
 1640               	.LBE389:
 1641               	.LBE388:
 1642               		.cfi_endproc
 1643               	.LFE135:
 1645               		.section	.text.chThdEnqueueTimeoutS,"ax",@progbits
 1646               	.global	chThdEnqueueTimeoutS
 1648               	chThdEnqueueTimeoutS:
 1649               	.LFB136:
 832:../../../os/rt/src/chthreads.c **** 
 833:../../../os/rt/src/chthreads.c ****   chSysLock();
 834:../../../os/rt/src/chthreads.c ****   chThdResumeS(trp, msg);
 835:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 836:../../../os/rt/src/chthreads.c **** }
 837:../../../os/rt/src/chthreads.c **** 
 838:../../../os/rt/src/chthreads.c **** /**
 839:../../../os/rt/src/chthreads.c ****  * @brief   Enqueues the caller thread on a threads queue object.
 840:../../../os/rt/src/chthreads.c ****  * @details The caller thread is enqueued and put to sleep until it is
 841:../../../os/rt/src/chthreads.c ****  *          dequeued or the specified timeouts expires.
 842:../../../os/rt/src/chthreads.c ****  *
 843:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 844:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 845:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 846:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 847:../../../os/rt/src/chthreads.c ****  *                        state.
 848:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 849:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 850:../../../os/rt/src/chthreads.c ****  *                        occurred.
 851:../../../os/rt/src/chthreads.c ****  *                      .
 852:../../../os/rt/src/chthreads.c ****  * @return              The message from @p osalQueueWakeupOneI() or
 853:../../../os/rt/src/chthreads.c ****  *                      @p osalQueueWakeupAllI() functions.
 854:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 855:../../../os/rt/src/chthreads.c ****  *                      specified timeout or if the function has been
 856:../../../os/rt/src/chthreads.c ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 857:../../../os/rt/src/chthreads.c ****  *                      specification.
 858:../../../os/rt/src/chthreads.c ****  *
 859:../../../os/rt/src/chthreads.c ****  * @sclass
 860:../../../os/rt/src/chthreads.c ****  */
 861:../../../os/rt/src/chthreads.c **** msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 1650               		.loc 1 861 0
 1651               		.cfi_startproc
 1652               	.LVL113:
 1653 0000 CF93      		push r28
 1654               	.LCFI25:
 1655               		.cfi_def_cfa_offset 4
 1656               		.cfi_offset 28, -3
 1657 0002 DF93      		push r29
 1658               	.LCFI26:
 1659               		.cfi_def_cfa_offset 5
 1660               		.cfi_offset 29, -4
 1661               	/* prologue: function */
 1662               	/* frame size = 0 */
 1663               	/* stack size = 2 */
 1664               	.L__stack_usage = 2
 862:../../../os/rt/src/chthreads.c **** 
 863:../../../os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 1665               		.loc 1 863 0
 1666 0004 6115      		cp r22,__zero_reg__
 1667 0006 7105      		cpc r23,__zero_reg__
 1668 0008 01F0      		breq .L55
 864:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 865:../../../os/rt/src/chthreads.c ****   }
 866:../../../os/rt/src/chthreads.c **** 
 867:../../../os/rt/src/chthreads.c ****   queue_insert(currp, tqp);
 1669               		.loc 1 867 0
 1670 000a E091 0000 		lds r30,ch+11
 1671 000e F091 0000 		lds r31,ch+11+1
 1672               	.LVL114:
 1673               	.LBB392:
 1674               	.LBB393:
 611:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 1675               		.loc 2 611 0
 1676 0012 9183      		std Z+1,r25
 1677 0014 8083      		st Z,r24
 612:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 1678               		.loc 2 612 0
 1679 0016 EC01      		movw r28,r24
 1680 0018 AA81      		ldd r26,Y+2
 1681 001a BB81      		ldd r27,Y+3
 1682 001c B383      		std Z+3,r27
 1683 001e A283      		std Z+2,r26
 613:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 1684               		.loc 2 613 0
 1685 0020 ED93      		st X+,r30
 1686 0022 FC93      		st X,r31
 614:../../../os/rt/include/chschd.h **** }
 1687               		.loc 2 614 0
 1688 0024 FB83      		std Y+3,r31
 1689 0026 EA83      		std Y+2,r30
 1690               	.LVL115:
 1691               	.LBE393:
 1692               	.LBE392:
 868:../../../os/rt/src/chthreads.c **** 
 869:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 1693               		.loc 1 869 0
 1694 0028 84E0      		ldi r24,lo8(4)
 1695               	.LVL116:
 1696               	/* epilogue start */
 870:../../../os/rt/src/chthreads.c **** }
 1697               		.loc 1 870 0
 1698 002a DF91      		pop r29
 1699 002c CF91      		pop r28
 1700               	.LVL117:
 869:../../../os/rt/src/chthreads.c **** }
 1701               		.loc 1 869 0
 1702 002e 0C94 0000 		jmp chSchGoSleepTimeoutS
 1703               	.LVL118:
 1704               	.L55:
 1705               		.loc 1 870 0
 1706 0032 8FEF      		ldi r24,lo8(-1)
 1707 0034 9FEF      		ldi r25,lo8(-1)
 1708               	.LVL119:
 1709               	/* epilogue start */
 1710 0036 DF91      		pop r29
 1711 0038 CF91      		pop r28
 1712 003a 0895      		ret
 1713               		.cfi_endproc
 1714               	.LFE136:
 1716               		.section	.text.chThdDequeueNextI,"ax",@progbits
 1717               	.global	chThdDequeueNextI
 1719               	chThdDequeueNextI:
 1720               	.LFB137:
 871:../../../os/rt/src/chthreads.c **** 
 872:../../../os/rt/src/chthreads.c **** /**
 873:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object,
 874:../../../os/rt/src/chthreads.c ****  *          if any.
 875:../../../os/rt/src/chthreads.c ****  *
 876:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 877:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 878:../../../os/rt/src/chthreads.c ****  *
 879:../../../os/rt/src/chthreads.c ****  * @iclass
 880:../../../os/rt/src/chthreads.c ****  */
 881:../../../os/rt/src/chthreads.c **** void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 1721               		.loc 1 881 0
 1722               		.cfi_startproc
 1723               	.LVL120:
 1724 0000 CF93      		push r28
 1725               	.LCFI27:
 1726               		.cfi_def_cfa_offset 4
 1727               		.cfi_offset 28, -3
 1728 0002 DF93      		push r29
 1729               	.LCFI28:
 1730               		.cfi_def_cfa_offset 5
 1731               		.cfi_offset 29, -4
 1732               	/* prologue: function */
 1733               	/* frame size = 0 */
 1734               	/* stack size = 2 */
 1735               	.L__stack_usage = 2
 1736 0004 FC01      		movw r30,r24
 1737               	.LVL121:
 1738               	.LBB394:
 1739               	.LBB395:
 577:../../../os/rt/include/chschd.h **** }
 1740               		.loc 2 577 0
 1741 0006 8081      		ld r24,Z
 1742 0008 9181      		ldd r25,Z+1
 1743               	.LVL122:
 1744               	.LBE395:
 1745               	.LBE394:
 882:../../../os/rt/src/chthreads.c **** 
 883:../../../os/rt/src/chthreads.c ****   if (queue_notempty(tqp)) {
 1746               		.loc 1 883 0
 1747 000a E817      		cp r30,r24
 1748 000c F907      		cpc r31,r25
 1749 000e 01F0      		breq .L56
 1750               	.LVL123:
 1751               	.LBB396:
 1752               	.LBB397:
 1753               	.LBB398:
 1754               	.LBB399:
 620:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1755               		.loc 2 620 0
 1756 0010 EC01      		movw r28,r24
 1757 0012 A881      		ld r26,Y
 1758 0014 B981      		ldd r27,Y+1
 1759 0016 B183      		std Z+1,r27
 1760 0018 A083      		st Z,r26
 621:../../../os/rt/include/chschd.h **** 
 1761               		.loc 2 621 0
 1762 001a 1396      		adiw r26,2+1
 1763 001c FC93      		st X,r31
 1764 001e EE93      		st -X,r30
 1765 0020 1297      		sbiw r26,2
 1766               	.LVL124:
 1767               	.LBE399:
 1768               	.LBE398:
 395:../../../os/rt/include/chthreads.h **** }
 396:../../../os/rt/include/chthreads.h **** 
 397:../../../os/rt/include/chthreads.h **** /**
 398:../../../os/rt/include/chthreads.h ****  * @brief   Initializes a threads queue object.
 399:../../../os/rt/include/chthreads.h ****  *
 400:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 401:../../../os/rt/include/chthreads.h ****  *
 402:../../../os/rt/include/chthreads.h ****  * @init
 403:../../../os/rt/include/chthreads.h ****  */
 404:../../../os/rt/include/chthreads.h **** static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 405:../../../os/rt/include/chthreads.h **** 
 406:../../../os/rt/include/chthreads.h ****   queue_init(tqp);
 407:../../../os/rt/include/chthreads.h **** }
 408:../../../os/rt/include/chthreads.h **** 
 409:../../../os/rt/include/chthreads.h **** /**
 410:../../../os/rt/include/chthreads.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 411:../../../os/rt/include/chthreads.h ****  *
 412:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 413:../../../os/rt/include/chthreads.h ****  * @return              The queue status.
 414:../../../os/rt/include/chthreads.h ****  * @retval false        if the queue is not empty.
 415:../../../os/rt/include/chthreads.h ****  * @retval true         if the queue is empty.
 416:../../../os/rt/include/chthreads.h ****  *
 417:../../../os/rt/include/chthreads.h ****  * @iclass
 418:../../../os/rt/include/chthreads.h ****  */
 419:../../../os/rt/include/chthreads.h **** static inline bool chThdQueueIsEmptyI(threads_queue_t *tqp) {
 420:../../../os/rt/include/chthreads.h **** 
 421:../../../os/rt/include/chthreads.h ****   chDbgCheckClassI();
 422:../../../os/rt/include/chthreads.h **** 
 423:../../../os/rt/include/chthreads.h ****   return queue_isempty(tqp);
 424:../../../os/rt/include/chthreads.h **** }
 425:../../../os/rt/include/chthreads.h **** 
 426:../../../os/rt/include/chthreads.h **** /**
 427:../../../os/rt/include/chthreads.h ****  * @brief   Dequeues and wakes up one thread from the threads queue object.
 428:../../../os/rt/include/chthreads.h ****  * @details Dequeues one thread from the queue without checking if the queue
 429:../../../os/rt/include/chthreads.h ****  *          is empty.
 430:../../../os/rt/include/chthreads.h ****  * @pre     The queue must contain at least an object.
 431:../../../os/rt/include/chthreads.h ****  *
 432:../../../os/rt/include/chthreads.h ****  * @param[in] tqp       pointer to the threads queue object
 433:../../../os/rt/include/chthreads.h ****  * @param[in] msg       the message code
 434:../../../os/rt/include/chthreads.h ****  *
 435:../../../os/rt/include/chthreads.h ****  * @iclass
 436:../../../os/rt/include/chthreads.h ****  */
 437:../../../os/rt/include/chthreads.h **** static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 438:../../../os/rt/include/chthreads.h ****   thread_t *tp;
 439:../../../os/rt/include/chthreads.h **** 
 440:../../../os/rt/include/chthreads.h ****   chDbgAssert(queue_notempty(tqp), "empty queue");
 441:../../../os/rt/include/chthreads.h **** 
 442:../../../os/rt/include/chthreads.h ****   tp = queue_fifo_remove(tqp);
 443:../../../os/rt/include/chthreads.h **** 
 444:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 445:../../../os/rt/include/chthreads.h **** 
 446:../../../os/rt/include/chthreads.h ****   tp->u.rdymsg = msg;
 1769               		.loc 4 446 0
 1770 0022 798B      		std Y+17,r23
 1771 0024 688B      		std Y+16,r22
 1772               	/* epilogue start */
 1773               	.LBE397:
 1774               	.LBE396:
 884:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 885:../../../os/rt/src/chthreads.c ****   }
 886:../../../os/rt/src/chthreads.c **** }
 1775               		.loc 1 886 0
 1776 0026 DF91      		pop r29
 1777 0028 CF91      		pop r28
 1778               	.LBB401:
 1779               	.LBB400:
 447:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1780               		.loc 4 447 0
 1781 002a 0C94 0000 		jmp chSchReadyI
 1782               	.LVL125:
 1783               	.L56:
 1784               	/* epilogue start */
 1785               	.LBE400:
 1786               	.LBE401:
 1787               		.loc 1 886 0
 1788 002e DF91      		pop r29
 1789 0030 CF91      		pop r28
 1790 0032 0895      		ret
 1791               		.cfi_endproc
 1792               	.LFE137:
 1794               		.section	.text.chThdDequeueAllI,"ax",@progbits
 1795               	.global	chThdDequeueAllI
 1797               	chThdDequeueAllI:
 1798               	.LFB138:
 887:../../../os/rt/src/chthreads.c **** 
 888:../../../os/rt/src/chthreads.c **** /**
 889:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up all threads from the threads queue object.
 890:../../../os/rt/src/chthreads.c ****  *
 891:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 892:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 893:../../../os/rt/src/chthreads.c ****  *
 894:../../../os/rt/src/chthreads.c ****  * @iclass
 895:../../../os/rt/src/chthreads.c ****  */
 896:../../../os/rt/src/chthreads.c **** void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 1799               		.loc 1 896 0
 1800               		.cfi_startproc
 1801               	.LVL126:
 1802 0000 0F93      		push r16
 1803               	.LCFI29:
 1804               		.cfi_def_cfa_offset 4
 1805               		.cfi_offset 16, -3
 1806 0002 1F93      		push r17
 1807               	.LCFI30:
 1808               		.cfi_def_cfa_offset 5
 1809               		.cfi_offset 17, -4
 1810 0004 CF93      		push r28
 1811               	.LCFI31:
 1812               		.cfi_def_cfa_offset 6
 1813               		.cfi_offset 28, -5
 1814 0006 DF93      		push r29
 1815               	.LCFI32:
 1816               		.cfi_def_cfa_offset 7
 1817               		.cfi_offset 29, -6
 1818               	/* prologue: function */
 1819               	/* frame size = 0 */
 1820               	/* stack size = 4 */
 1821               	.L__stack_usage = 4
 1822 0008 EC01      		movw r28,r24
 1823 000a 8B01      		movw r16,r22
 1824               	.LVL127:
 1825               	.LBB402:
 1826               	.LBB403:
 577:../../../os/rt/include/chschd.h **** }
 1827               		.loc 2 577 0
 1828 000c 8881      		ld r24,Y
 1829 000e 9981      		ldd r25,Y+1
 1830               	.LVL128:
 1831               	.LBE403:
 1832               	.LBE402:
 897:../../../os/rt/src/chthreads.c **** 
 898:../../../os/rt/src/chthreads.c ****   while (queue_notempty(tqp)) {
 1833               		.loc 1 898 0
 1834 0010 C817      		cp r28,r24
 1835 0012 D907      		cpc r29,r25
 1836 0014 01F0      		breq .L58
 1837               	.LVL129:
 1838               	.L62:
 1839               	.LBB405:
 1840               	.LBB406:
 1841               	.LBB407:
 1842               	.LBB408:
 620:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1843               		.loc 2 620 0
 1844 0016 DC01      		movw r26,r24
 1845 0018 ED91      		ld r30,X+
 1846 001a FC91      		ld r31,X
 1847 001c 1197      		sbiw r26,1
 1848 001e F983      		std Y+1,r31
 1849 0020 E883      		st Y,r30
 621:../../../os/rt/include/chschd.h **** 
 1850               		.loc 2 621 0
 1851 0022 D383      		std Z+3,r29
 1852 0024 C283      		std Z+2,r28
 1853               	.LVL130:
 1854               	.LBE408:
 1855               	.LBE407:
 446:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1856               		.loc 4 446 0
 1857 0026 5196      		adiw r26,16+1
 1858 0028 1C93      		st X,r17
 1859 002a 0E93      		st -X,r16
 1860 002c 5097      		sbiw r26,16
 1861               		.loc 4 447 0
 1862 002e 0E94 0000 		call chSchReadyI
 1863               	.LVL131:
 1864               	.LBE406:
 1865               	.LBE405:
 1866               	.LBB409:
 1867               	.LBB404:
 577:../../../os/rt/include/chschd.h **** }
 1868               		.loc 2 577 0
 1869 0032 8881      		ld r24,Y
 1870 0034 9981      		ldd r25,Y+1
 1871               	.LVL132:
 1872               	.LBE404:
 1873               	.LBE409:
 1874               		.loc 1 898 0
 1875 0036 C817      		cp r28,r24
 1876 0038 D907      		cpc r29,r25
 1877 003a 01F4      		brne .L62
 1878               	.LVL133:
 1879               	.L58:
 1880               	/* epilogue start */
 899:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 900:../../../os/rt/src/chthreads.c ****   }
 901:../../../os/rt/src/chthreads.c **** }
 1881               		.loc 1 901 0
 1882 003c DF91      		pop r29
 1883 003e CF91      		pop r28
 1884               	.LVL134:
 1885 0040 1F91      		pop r17
 1886 0042 0F91      		pop r16
 1887               	.LVL135:
 1888 0044 0895      		ret
 1889               		.cfi_endproc
 1890               	.LFE138:
 1892               		.text
 1893               	.Letext0:
 1894               		.file 6 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 1895               		.file 7 "/usr/lib/avr/include/stdint.h"
 1896               		.file 8 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1897               		.file 9 "../../../os/rt/include/chsystypes.h"
 1898               		.file 10 "../../../os/rt/include/chsem.h"
 1899               		.file 11 "../../../os/rt/include/chmtx.h"
 1900               		.file 12 "../../../os/common/ports/AVR/chcore_timer.h"
 1901               		.file 13 "../../../os/rt/include/chsys.h"
 1902               		.file 14 "../../../os/rt/include/chvt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chthreads.c
     /tmp/ccX6upgJ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccX6upgJ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccX6upgJ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccX6upgJ.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccX6upgJ.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccX6upgJ.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccX6upgJ.s:14     .text._thread_init:0000000000000000 _thread_init
     /tmp/ccX6upgJ.s:111    .text.chThdCreateSuspendedI:0000000000000000 chThdCreateSuspendedI
     /tmp/ccX6upgJ.s:261    .text.chThdCreateSuspended:0000000000000000 chThdCreateSuspended
     /tmp/ccX6upgJ.s:308    .text.chThdCreateI:0000000000000000 chThdCreateI
     /tmp/ccX6upgJ.s:328    .text.chThdCreate:0000000000000000 chThdCreate
     /tmp/ccX6upgJ.s:397    .text.chThdCreateStatic:0000000000000000 chThdCreateStatic
     /tmp/ccX6upgJ.s:562    .text.chThdStart:0000000000000000 chThdStart
     /tmp/ccX6upgJ.s:624    .text.chThdAddRef:0000000000000000 chThdAddRef
     /tmp/ccX6upgJ.s:672    .text.chThdRelease:0000000000000000 chThdRelease
     /tmp/ccX6upgJ.s:764    .text.chThdExitS:0000000000000000 chThdExitS
     /tmp/ccX6upgJ.s:879    .text.chThdExit:0000000000000000 chThdExit
     /tmp/ccX6upgJ.s:909    .text.chThdWait:0000000000000000 chThdWait
     /tmp/ccX6upgJ.s:1012   .text.chThdSetPriority:0000000000000000 chThdSetPriority
     /tmp/ccX6upgJ.s:1084   .text.chThdTerminate:0000000000000000 chThdTerminate
     /tmp/ccX6upgJ.s:1131   .text.chThdSleep:0000000000000000 chThdSleep
     /tmp/ccX6upgJ.s:1185   .text.chThdSleepUntil:0000000000000000 chThdSleepUntil
     /tmp/ccX6upgJ.s:1256   .text.chThdSleepUntilWindowed:0000000000000000 chThdSleepUntilWindowed
     /tmp/ccX6upgJ.s:1349   .text.chThdYield:0000000000000000 chThdYield
     /tmp/ccX6upgJ.s:1413   .text.chThdSuspendS:0000000000000000 chThdSuspendS
     /tmp/ccX6upgJ.s:1467   .text.chThdSuspendTimeoutS:0000000000000000 chThdSuspendTimeoutS
     /tmp/ccX6upgJ.s:1511   .text.chThdResumeI:0000000000000000 chThdResumeI
     /tmp/ccX6upgJ.s:1549   .text.chThdResumeS:0000000000000000 chThdResumeS
     /tmp/ccX6upgJ.s:1584   .text.chThdResume:0000000000000000 chThdResume
     /tmp/ccX6upgJ.s:1648   .text.chThdEnqueueTimeoutS:0000000000000000 chThdEnqueueTimeoutS
     /tmp/ccX6upgJ.s:1719   .text.chThdDequeueNextI:0000000000000000 chThdDequeueNextI
     /tmp/ccX6upgJ.s:1797   .text.chThdDequeueAllI:0000000000000000 chThdDequeueAllI

UNDEFINED SYMBOLS
ch
_port_thread_start
chSchReadyI
chSchWakeupS
chSchGoSleepS
chSchRescheduleS
chSchGoSleepTimeoutS
chSchDoRescheduleBehind
__do_copy_data

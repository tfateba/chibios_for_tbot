   1               		.file	"chmtx.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.chMtxObjectInit,"ax",@progbits
  12               	.global	chMtxObjectInit
  14               	chMtxObjectInit:
  15               	.LFB113:
  16               		.file 1 "../../../os/rt/src/chmtx.c"
   1:../../../os/rt/src/chmtx.c **** /*
   2:../../../os/rt/src/chmtx.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/src/chmtx.c **** 
   4:../../../os/rt/src/chmtx.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chmtx.c **** 
   6:../../../os/rt/src/chmtx.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chmtx.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chmtx.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chmtx.c ****     (at your option) any later version.
  10:../../../os/rt/src/chmtx.c **** 
  11:../../../os/rt/src/chmtx.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chmtx.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chmtx.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chmtx.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chmtx.c **** 
  16:../../../os/rt/src/chmtx.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chmtx.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chmtx.c **** */
  19:../../../os/rt/src/chmtx.c **** 
  20:../../../os/rt/src/chmtx.c **** /**
  21:../../../os/rt/src/chmtx.c ****  * @file    chmtx.c
  22:../../../os/rt/src/chmtx.c ****  * @brief   Mutexes code.
  23:../../../os/rt/src/chmtx.c ****  *
  24:../../../os/rt/src/chmtx.c ****  * @addtogroup mutexes
  25:../../../os/rt/src/chmtx.c ****  * @details Mutexes related APIs and services.
  26:../../../os/rt/src/chmtx.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chmtx.c ****  *          A mutex is a threads synchronization object that can be in two
  28:../../../os/rt/src/chmtx.c ****  *          distinct states:
  29:../../../os/rt/src/chmtx.c ****  *          - Not owned (unlocked).
  30:../../../os/rt/src/chmtx.c ****  *          - Owned by a thread (locked).
  31:../../../os/rt/src/chmtx.c ****  *          .
  32:../../../os/rt/src/chmtx.c ****  *          Operations defined for mutexes:
  33:../../../os/rt/src/chmtx.c ****  *          - <b>Lock</b>: The mutex is checked, if the mutex is not owned by
  34:../../../os/rt/src/chmtx.c ****  *            some other thread then it is associated to the locking thread
  35:../../../os/rt/src/chmtx.c ****  *            else the thread is queued on the mutex in a list ordered by
  36:../../../os/rt/src/chmtx.c ****  *            priority.
  37:../../../os/rt/src/chmtx.c ****  *          - <b>Unlock</b>: The mutex is released by the owner and the highest
  38:../../../os/rt/src/chmtx.c ****  *            priority thread waiting in the queue, if any, is resumed and made
  39:../../../os/rt/src/chmtx.c ****  *            owner of the mutex.
  40:../../../os/rt/src/chmtx.c ****  *          .
  41:../../../os/rt/src/chmtx.c ****  *          <h2>Constraints</h2>
  42:../../../os/rt/src/chmtx.c ****  *          In ChibiOS/RT the Unlock operations must always be performed
  43:../../../os/rt/src/chmtx.c ****  *          in lock-reverse order. This restriction both improves the
  44:../../../os/rt/src/chmtx.c ****  *          performance and is required for an efficient implementation
  45:../../../os/rt/src/chmtx.c ****  *          of the priority inheritance mechanism.<br>
  46:../../../os/rt/src/chmtx.c ****  *          Operating under this restriction also ensures that deadlocks
  47:../../../os/rt/src/chmtx.c ****  *          are no possible.
  48:../../../os/rt/src/chmtx.c ****  *
  49:../../../os/rt/src/chmtx.c ****  *          <h2>Recursive mode</h2>
  50:../../../os/rt/src/chmtx.c ****  *          By default mutexes are not recursive, this mean that it is not
  51:../../../os/rt/src/chmtx.c ****  *          possible to take a mutex already owned by the same thread.
  52:../../../os/rt/src/chmtx.c ****  *          It is possible to enable the recursive behavior by enabling the
  53:../../../os/rt/src/chmtx.c ****  *          option @p CH_CFG_USE_MUTEXES_RECURSIVE.
  54:../../../os/rt/src/chmtx.c ****  *
  55:../../../os/rt/src/chmtx.c ****  *          <h2>The priority inversion problem</h2>
  56:../../../os/rt/src/chmtx.c ****  *          The mutexes in ChibiOS/RT implements the <b>full</b> priority
  57:../../../os/rt/src/chmtx.c ****  *          inheritance mechanism in order handle the priority inversion
  58:../../../os/rt/src/chmtx.c ****  *          problem.<br>
  59:../../../os/rt/src/chmtx.c ****  *          When a thread is queued on a mutex, any thread, directly or
  60:../../../os/rt/src/chmtx.c ****  *          indirectly, holding the mutex gains the same priority of the
  61:../../../os/rt/src/chmtx.c ****  *          waiting thread (if their priority was not already equal or higher).
  62:../../../os/rt/src/chmtx.c ****  *          The mechanism works with any number of nested mutexes and any
  63:../../../os/rt/src/chmtx.c ****  *          number of involved threads. The algorithm complexity (worst case)
  64:../../../os/rt/src/chmtx.c ****  *          is N with N equal to the number of nested mutexes.
  65:../../../os/rt/src/chmtx.c ****  * @pre     In order to use the mutex APIs the @p CH_CFG_USE_MUTEXES option
  66:../../../os/rt/src/chmtx.c ****  *          must be enabled in @p chconf.h.
  67:../../../os/rt/src/chmtx.c ****  * @post    Enabling mutexes requires 5-12 (depending on the architecture)
  68:../../../os/rt/src/chmtx.c ****  *          extra bytes in the @p thread_t structure.
  69:../../../os/rt/src/chmtx.c ****  * @{
  70:../../../os/rt/src/chmtx.c ****  */
  71:../../../os/rt/src/chmtx.c **** 
  72:../../../os/rt/src/chmtx.c **** #include "ch.h"
  73:../../../os/rt/src/chmtx.c **** 
  74:../../../os/rt/src/chmtx.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  75:../../../os/rt/src/chmtx.c **** 
  76:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  77:../../../os/rt/src/chmtx.c **** /* Module exported variables.                                                */
  78:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  79:../../../os/rt/src/chmtx.c **** 
  80:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  81:../../../os/rt/src/chmtx.c **** /* Module local types.                                                       */
  82:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  83:../../../os/rt/src/chmtx.c **** 
  84:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  85:../../../os/rt/src/chmtx.c **** /* Module local variables.                                                   */
  86:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  87:../../../os/rt/src/chmtx.c **** 
  88:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  89:../../../os/rt/src/chmtx.c **** /* Module local functions.                                                   */
  90:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  91:../../../os/rt/src/chmtx.c **** 
  92:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  93:../../../os/rt/src/chmtx.c **** /* Module exported functions.                                                */
  94:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  95:../../../os/rt/src/chmtx.c **** 
  96:../../../os/rt/src/chmtx.c **** /**
  97:../../../os/rt/src/chmtx.c ****  * @brief   Initializes s @p mutex_t structure.
  98:../../../os/rt/src/chmtx.c ****  *
  99:../../../os/rt/src/chmtx.c ****  * @param[out] mp       pointer to a @p mutex_t structure
 100:../../../os/rt/src/chmtx.c ****  *
 101:../../../os/rt/src/chmtx.c ****  * @init
 102:../../../os/rt/src/chmtx.c ****  */
 103:../../../os/rt/src/chmtx.c **** void chMtxObjectInit(mutex_t *mp) {
  17               		.loc 1 103 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24 0000 FC01      		movw r30,r24
  25               	.LVL1:
  26               	.LBB95:
  27               	.LBB96:
  28               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:../../../os/rt/include/chschd.h **** #endif
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:../../../os/rt/include/chschd.h **** #endif
 124:../../../os/rt/include/chschd.h **** 
 125:../../../os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:../../../os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:../../../os/rt/include/chschd.h **** #endif
 128:../../../os/rt/include/chschd.h **** 
 129:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 130:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 132:../../../os/rt/include/chschd.h **** 
 133:../../../os/rt/include/chschd.h **** /**
 134:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:../../../os/rt/include/chschd.h ****  */
 136:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 137:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:../../../os/rt/include/chschd.h **** };
 139:../../../os/rt/include/chschd.h **** 
 140:../../../os/rt/include/chschd.h **** /**
 141:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:../../../os/rt/include/chschd.h ****  */
 143:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 144:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:../../../os/rt/include/chschd.h **** };
 147:../../../os/rt/include/chschd.h **** 
 148:../../../os/rt/include/chschd.h **** /**
 149:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:../../../os/rt/include/chschd.h ****  */
 154:../../../os/rt/include/chschd.h **** struct ch_thread {
 155:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:../../../os/rt/include/chschd.h **** #endif
 162:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:../../../os/rt/include/chschd.h ****   /**
 165:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:../../../os/rt/include/chschd.h ****    */
 167:../../../os/rt/include/chschd.h ****   const char            *name;
 168:../../../os/rt/include/chschd.h **** #endif
 169:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:../../../os/rt/include/chschd.h ****   /**
 172:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 175:../../../os/rt/include/chschd.h ****    */
 176:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:../../../os/rt/include/chschd.h **** #endif
 178:../../../os/rt/include/chschd.h ****   /**
 179:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:../../../os/rt/include/chschd.h ****    */
 181:../../../os/rt/include/chschd.h ****   tstate_t              state;
 182:../../../os/rt/include/chschd.h ****   /**
 183:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:../../../os/rt/include/chschd.h ****    */
 185:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 186:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:../../../os/rt/include/chschd.h ****    */
 190:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 191:../../../os/rt/include/chschd.h **** #endif
 192:../../../os/rt/include/chschd.h ****   /**
 193:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:../../../os/rt/include/chschd.h ****    */
 195:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:../../../os/rt/include/chschd.h ****   tslices_t             preempt;
 197:../../../os/rt/include/chschd.h **** #endif
 198:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:../../../os/rt/include/chschd.h ****   /**
 200:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:../../../os/rt/include/chschd.h ****    */
 203:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 204:../../../os/rt/include/chschd.h **** #endif
 205:../../../os/rt/include/chschd.h ****   /**
 206:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:../../../os/rt/include/chschd.h ****    */
 210:../../../os/rt/include/chschd.h ****   union {
 211:../../../os/rt/include/chschd.h ****     /**
 212:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:../../../os/rt/include/chschd.h ****      */
 217:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:../../../os/rt/include/chschd.h ****     /**
 219:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:../../../os/rt/include/chschd.h ****      *          this thread.
 223:../../../os/rt/include/chschd.h ****      */
 224:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 225:../../../os/rt/include/chschd.h ****     /**
 226:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:../../../os/rt/include/chschd.h ****      *          states.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 232:../../../os/rt/include/chschd.h ****     /**
 233:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:../../../os/rt/include/chschd.h ****      *          state.
 237:../../../os/rt/include/chschd.h ****      */
 238:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:../../../os/rt/include/chschd.h ****     /**
 241:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:../../../os/rt/include/chschd.h ****      */
 243:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:../../../os/rt/include/chschd.h **** #endif
 245:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:../../../os/rt/include/chschd.h ****     /**
 247:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:../../../os/rt/include/chschd.h ****      *          state.
 251:../../../os/rt/include/chschd.h ****      */
 252:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:../../../os/rt/include/chschd.h **** #endif
 254:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:../../../os/rt/include/chschd.h ****     /**
 256:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:../../../os/rt/include/chschd.h ****      *          state.
 260:../../../os/rt/include/chschd.h ****      */
 261:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:../../../os/rt/include/chschd.h **** #endif
 263:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:../../../os/rt/include/chschd.h ****     /**
 265:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:../../../os/rt/include/chschd.h ****      */
 269:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:../../../os/rt/include/chschd.h **** #endif
 271:../../../os/rt/include/chschd.h ****   }                     u;
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:../../../os/rt/include/chschd.h ****    */
 282:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:../../../os/rt/include/chschd.h **** #endif
 284:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:../../../os/rt/include/chschd.h ****   /**
 286:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:../../../os/rt/include/chschd.h ****    */
 288:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 289:../../../os/rt/include/chschd.h **** #endif
 290:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:../../../os/rt/include/chschd.h ****    */
 295:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:../../../os/rt/include/chschd.h ****   /**
 297:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:../../../os/rt/include/chschd.h ****    */
 299:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 300:../../../os/rt/include/chschd.h **** #endif
 301:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:../../../os/rt/include/chschd.h ****   /**
 304:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:../../../os/rt/include/chschd.h ****    */
 306:../../../os/rt/include/chschd.h ****   void                  *mpool;
 307:../../../os/rt/include/chschd.h **** #endif
 308:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:../../../os/rt/include/chschd.h ****   /**
 310:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:../../../os/rt/include/chschd.h ****    */
 312:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:../../../os/rt/include/chschd.h **** #endif
 314:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:../../../os/rt/include/chschd.h **** #endif
 318:../../../os/rt/include/chschd.h **** };
 319:../../../os/rt/include/chschd.h **** 
 320:../../../os/rt/include/chschd.h **** /**
 321:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:../../../os/rt/include/chschd.h ****  *
 323:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:../../../os/rt/include/chschd.h ****  */
 325:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 331:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 333:../../../os/rt/include/chschd.h **** };
 334:../../../os/rt/include/chschd.h **** 
 335:../../../os/rt/include/chschd.h **** /**
 336:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:../../../os/rt/include/chschd.h ****  */
 341:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:../../../os/rt/include/chschd.h ****                                                 list.                       */
 344:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:../../../os/rt/include/chschd.h ****                                                 list.                       */
 346:../../../os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:../../../os/rt/include/chschd.h **** #endif
 350:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:../../../os/rt/include/chschd.h ****   /**
 352:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:../../../os/rt/include/chschd.h ****    */
 354:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 356:../../../os/rt/include/chschd.h **** #endif
 357:../../../os/rt/include/chschd.h **** };
 358:../../../os/rt/include/chschd.h **** 
 359:../../../os/rt/include/chschd.h **** /**
 360:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:../../../os/rt/include/chschd.h ****  */
 362:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 363:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 368:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:../../../os/rt/include/chschd.h **** #endif
 372:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 375:../../../os/rt/include/chschd.h **** };
 376:../../../os/rt/include/chschd.h **** 
 377:../../../os/rt/include/chschd.h **** /**
 378:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:../../../os/rt/include/chschd.h ****  */
 380:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 381:../../../os/rt/include/chschd.h ****   /**
 382:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:../../../os/rt/include/chschd.h ****    */
 388:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:../../../os/rt/include/chschd.h ****   /**
 391:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:../../../os/rt/include/chschd.h ****    */
 393:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:../../../os/rt/include/chschd.h ****   /**
 395:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:../../../os/rt/include/chschd.h ****    */
 397:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:../../../os/rt/include/chschd.h **** #endif
 399:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:../../../os/rt/include/chschd.h ****   /**
 401:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:../../../os/rt/include/chschd.h ****    */
 403:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:../../../os/rt/include/chschd.h **** #endif
 405:../../../os/rt/include/chschd.h **** };
 406:../../../os/rt/include/chschd.h **** 
 407:../../../os/rt/include/chschd.h **** /**
 408:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 409:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:../../../os/rt/include/chschd.h ****  *          stacks.
 411:../../../os/rt/include/chschd.h ****  */
 412:../../../os/rt/include/chschd.h **** struct ch_system {
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:../../../os/rt/include/chschd.h ****   /**
 418:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:../../../os/rt/include/chschd.h ****    */
 420:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:../../../os/rt/include/chschd.h ****   /**
 422:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 423:../../../os/rt/include/chschd.h ****    */
 424:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:../../../os/rt/include/chschd.h ****   /**
 426:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:../../../os/rt/include/chschd.h ****    */
 428:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 429:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:../../../os/rt/include/chschd.h ****   /**
 431:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:../../../os/rt/include/chschd.h ****    */
 433:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:../../../os/rt/include/chschd.h **** #endif
 435:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:../../../os/rt/include/chschd.h ****   /**
 437:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:../../../os/rt/include/chschd.h ****    */
 439:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:../../../os/rt/include/chschd.h **** #endif
 441:../../../os/rt/include/chschd.h **** };
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 444:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 446:../../../os/rt/include/chschd.h **** 
 447:../../../os/rt/include/chschd.h **** /**
 448:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:../../../os/rt/include/chschd.h ****  *
 450:../../../os/rt/include/chschd.h ****  * @notapi
 451:../../../os/rt/include/chschd.h ****  */
 452:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** /**
 455:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:../../../os/rt/include/chschd.h ****  */
 459:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:../../../os/rt/include/chschd.h **** 
 461:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 462:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 464:../../../os/rt/include/chschd.h **** 
 465:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 467:../../../os/rt/include/chschd.h **** #endif
 468:../../../os/rt/include/chschd.h **** 
 469:../../../os/rt/include/chschd.h **** /*
 470:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 471:../../../os/rt/include/chschd.h ****  */
 472:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 473:../../../os/rt/include/chschd.h **** extern "C" {
 474:../../../os/rt/include/chschd.h **** #endif
 475:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 496:../../../os/rt/include/chschd.h **** }
 497:../../../os/rt/include/chschd.h **** #endif
 498:../../../os/rt/include/chschd.h **** 
 499:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 500:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 502:../../../os/rt/include/chschd.h **** 
 503:../../../os/rt/include/chschd.h **** /**
 504:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:../../../os/rt/include/chschd.h ****  *
 506:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:../../../os/rt/include/chschd.h ****  *
 508:../../../os/rt/include/chschd.h ****  * @notapi
 509:../../../os/rt/include/chschd.h ****  */
 510:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:../../../os/rt/include/chschd.h **** 
 512:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:../../../os/rt/include/chschd.h **** }
 514:../../../os/rt/include/chschd.h **** 
 515:../../../os/rt/include/chschd.h **** /**
 516:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:../../../os/rt/include/chschd.h ****  *
 518:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 520:../../../os/rt/include/chschd.h ****  *
 521:../../../os/rt/include/chschd.h ****  * @notapi
 522:../../../os/rt/include/chschd.h ****  */
 523:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:../../../os/rt/include/chschd.h **** 
 525:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:../../../os/rt/include/chschd.h **** }
 527:../../../os/rt/include/chschd.h **** 
 528:../../../os/rt/include/chschd.h **** /**
 529:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:../../../os/rt/include/chschd.h ****  *
 531:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 533:../../../os/rt/include/chschd.h ****  *
 534:../../../os/rt/include/chschd.h ****  * @notapi
 535:../../../os/rt/include/chschd.h ****  */
 536:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:../../../os/rt/include/chschd.h **** 
 538:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:../../../os/rt/include/chschd.h **** }
 540:../../../os/rt/include/chschd.h **** 
 541:../../../os/rt/include/chschd.h **** /**
 542:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:../../../os/rt/include/chschd.h ****  *
 544:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @notapi
 547:../../../os/rt/include/chschd.h ****  */
 548:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:../../../os/rt/include/chschd.h **** 
 550:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  29               		.loc 2 550 0
  30 0002 9183      		std Z+1,r25
  31 0004 8083      		st Z,r24
 551:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  32               		.loc 2 551 0
  33 0006 9383      		std Z+3,r25
  34 0008 8283      		std Z+2,r24
  35               	.LVL2:
  36               	.LBE96:
  37               	.LBE95:
 104:../../../os/rt/src/chmtx.c **** 
 105:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 106:../../../os/rt/src/chmtx.c **** 
 107:../../../os/rt/src/chmtx.c ****   queue_init(&mp->queue);
 108:../../../os/rt/src/chmtx.c ****   mp->owner = NULL;
  38               		.loc 1 108 0
  39 000a 1582      		std Z+5,__zero_reg__
  40 000c 1482      		std Z+4,__zero_reg__
  41 000e 0895      		ret
  42               		.cfi_endproc
  43               	.LFE113:
  45               		.section	.text.chMtxLockS,"ax",@progbits
  46               	.global	chMtxLockS
  48               	chMtxLockS:
  49               	.LFB115:
 109:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 110:../../../os/rt/src/chmtx.c ****   mp->cnt = (cnt_t)0;
 111:../../../os/rt/src/chmtx.c **** #endif
 112:../../../os/rt/src/chmtx.c **** }
 113:../../../os/rt/src/chmtx.c **** 
 114:../../../os/rt/src/chmtx.c **** /**
 115:../../../os/rt/src/chmtx.c ****  * @brief   Locks the specified mutex.
 116:../../../os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 117:../../../os/rt/src/chmtx.c ****  *          mutexes.
 118:../../../os/rt/src/chmtx.c ****  *
 119:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 120:../../../os/rt/src/chmtx.c ****  *
 121:../../../os/rt/src/chmtx.c ****  * @api
 122:../../../os/rt/src/chmtx.c ****  */
 123:../../../os/rt/src/chmtx.c **** void chMtxLock(mutex_t *mp) {
 124:../../../os/rt/src/chmtx.c **** 
 125:../../../os/rt/src/chmtx.c ****   chSysLock();
 126:../../../os/rt/src/chmtx.c ****   chMtxLockS(mp);
 127:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 128:../../../os/rt/src/chmtx.c **** }
 129:../../../os/rt/src/chmtx.c **** 
 130:../../../os/rt/src/chmtx.c **** /**
 131:../../../os/rt/src/chmtx.c ****  * @brief   Locks the specified mutex.
 132:../../../os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 133:../../../os/rt/src/chmtx.c ****  *          mutexes.
 134:../../../os/rt/src/chmtx.c ****  *
 135:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 136:../../../os/rt/src/chmtx.c ****  *
 137:../../../os/rt/src/chmtx.c ****  * @sclass
 138:../../../os/rt/src/chmtx.c ****  */
 139:../../../os/rt/src/chmtx.c **** void chMtxLockS(mutex_t *mp) {
  50               		.loc 1 139 0
  51               		.cfi_startproc
  52               	.LVL3:
  53 0000 0F93      		push r16
  54               	.LCFI0:
  55               		.cfi_def_cfa_offset 4
  56               		.cfi_offset 16, -3
  57 0002 1F93      		push r17
  58               	.LCFI1:
  59               		.cfi_def_cfa_offset 5
  60               		.cfi_offset 17, -4
  61 0004 CF93      		push r28
  62               	.LCFI2:
  63               		.cfi_def_cfa_offset 6
  64               		.cfi_offset 28, -5
  65 0006 DF93      		push r29
  66               	.LCFI3:
  67               		.cfi_def_cfa_offset 7
  68               		.cfi_offset 29, -6
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 4 */
  72               	.L__stack_usage = 4
 140:../../../os/rt/src/chmtx.c ****   thread_t *ctp = currp;
  73               		.loc 1 140 0
  74 0008 C091 0000 		lds r28,ch+11
  75 000c D091 0000 		lds r29,ch+11+1
  76               	.LVL4:
 141:../../../os/rt/src/chmtx.c **** 
 142:../../../os/rt/src/chmtx.c ****   chDbgCheckClassS();
 143:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 144:../../../os/rt/src/chmtx.c **** 
 145:../../../os/rt/src/chmtx.c ****   /* Is the mutex already locked? */
 146:../../../os/rt/src/chmtx.c ****   if (mp->owner != NULL) {
  77               		.loc 1 146 0
  78 0010 DC01      		movw r26,r24
  79 0012 1496      		adiw r26,4
  80 0014 6D91      		ld r22,X+
  81 0016 7C91      		ld r23,X
  82 0018 1597      		sbiw r26,4+1
  83 001a 6115      		cp r22,__zero_reg__
  84 001c 7105      		cpc r23,__zero_reg__
  85 001e 01F4      		brne .+2
  86 0020 00C0      		rjmp .L3
  87 0022 8C01      		movw r16,r24
  88               	.LVL5:
  89               	.LBB97:
 147:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 148:../../../os/rt/src/chmtx.c **** 
 149:../../../os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 150:../../../os/rt/src/chmtx.c **** 
 151:../../../os/rt/src/chmtx.c ****     /* If the mutex is already owned by this thread, the counter is increased
 152:../../../os/rt/src/chmtx.c ****        and there is no need of more actions.*/
 153:../../../os/rt/src/chmtx.c ****     if (mp->owner == ctp) {
 154:../../../os/rt/src/chmtx.c ****       mp->cnt++;
 155:../../../os/rt/src/chmtx.c ****     }
 156:../../../os/rt/src/chmtx.c ****     else {
 157:../../../os/rt/src/chmtx.c **** #endif
 158:../../../os/rt/src/chmtx.c ****       /* Priority inheritance protocol; explores the thread-mutex dependencies
 159:../../../os/rt/src/chmtx.c ****          boosting the priority of all the affected threads to equal the
 160:../../../os/rt/src/chmtx.c ****          priority of the running thread requesting the mutex.*/
 161:../../../os/rt/src/chmtx.c ****       thread_t *tp = mp->owner;
 162:../../../os/rt/src/chmtx.c **** 
 163:../../../os/rt/src/chmtx.c ****       /* Does the running thread have higher priority than the mutex
 164:../../../os/rt/src/chmtx.c ****          owning thread? */
 165:../../../os/rt/src/chmtx.c ****       while (tp->prio < ctp->prio) {
  90               		.loc 1 165 0
  91 0024 8C81      		ldd r24,Y+4
  92               	.LVL6:
  93 0026 FB01      		movw r30,r22
  94 0028 9481      		ldd r25,Z+4
  95 002a 9817      		cp r25,r24
  96 002c 00F4      		brsh .L5
  97               	.L20:
 166:../../../os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 167:../../../os/rt/src/chmtx.c ****         tp->prio = ctp->prio;
  98               		.loc 1 167 0
  99 002e DB01      		movw r26,r22
 100 0030 1496      		adiw r26,4
 101 0032 8C93      		st X,r24
 102 0034 1497      		sbiw r26,4
 168:../../../os/rt/src/chmtx.c **** 
 169:../../../os/rt/src/chmtx.c ****         /* The following states need priority queues reordering.*/
 170:../../../os/rt/src/chmtx.c ****         switch (tp->state) {
 103               		.loc 1 170 0
 104 0036 1D96      		adiw r26,13
 105 0038 9C91      		ld r25,X
 106 003a 9630      		cpi r25,lo8(6)
 107 003c 01F4      		brne .+2
 108 003e 00C0      		rjmp .L6
 109 0040 9730      		cpi r25,lo8(7)
 110 0042 01F0      		breq .L7
 111 0044 9923      		tst r25
 112 0046 01F0      		breq .L27
 113               	.LVL7:
 114               	.L5:
 115               	.LBB98:
 116               	.LBB99:
 552:../../../os/rt/include/chschd.h **** }
 553:../../../os/rt/include/chschd.h **** 
 554:../../../os/rt/include/chschd.h **** /**
 555:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 556:../../../os/rt/include/chschd.h ****  *
 557:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 558:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 559:../../../os/rt/include/chschd.h ****  *
 560:../../../os/rt/include/chschd.h ****  * @notapi
 561:../../../os/rt/include/chschd.h ****  */
 562:../../../os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 563:../../../os/rt/include/chschd.h **** 
 564:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 565:../../../os/rt/include/chschd.h **** }
 566:../../../os/rt/include/chschd.h **** 
 567:../../../os/rt/include/chschd.h **** /**
 568:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 569:../../../os/rt/include/chschd.h ****  *
 570:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 571:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 572:../../../os/rt/include/chschd.h ****  *
 573:../../../os/rt/include/chschd.h ****  * @notapi
 574:../../../os/rt/include/chschd.h ****  */
 575:../../../os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 576:../../../os/rt/include/chschd.h **** 
 577:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 578:../../../os/rt/include/chschd.h **** }
 579:../../../os/rt/include/chschd.h **** 
 580:../../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 581:../../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 582:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 583:../../../os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 584:../../../os/rt/include/chschd.h **** 
 585:../../../os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 586:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 587:../../../os/rt/include/chschd.h **** }
 588:../../../os/rt/include/chschd.h **** 
 589:../../../os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 590:../../../os/rt/include/chschd.h **** 
 591:../../../os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 592:../../../os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 593:../../../os/rt/include/chschd.h **** 
 594:../../../os/rt/include/chschd.h ****   return tp;
 595:../../../os/rt/include/chschd.h **** }
 596:../../../os/rt/include/chschd.h **** 
 597:../../../os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 598:../../../os/rt/include/chschd.h **** 
 599:../../../os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 117               		.loc 2 599 0
 118 0048 F801      		movw r30,r16
 119 004a 00C0      		rjmp .L18
 120               	.LVL8:
 121               	.L17:
 600:../../../os/rt/include/chschd.h ****   do {
 601:../../../os/rt/include/chschd.h ****     cp = cp->queue.next;
 602:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 122               		.loc 2 602 0
 123 004c 2481      		ldd r18,Z+4
 124 004e 9C81      		ldd r25,Y+4
 125 0050 2917      		cp r18,r25
 126 0052 00F0      		brlo .L19
 127               	.L18:
 601:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 128               		.loc 2 601 0
 129 0054 0190      		ld __tmp_reg__,Z+
 130 0056 F081      		ld r31,Z
 131 0058 E02D      		mov r30,__tmp_reg__
 132               	.LVL9:
 133               		.loc 2 602 0
 134 005a 0E17      		cp r16,r30
 135 005c 1F07      		cpc r17,r31
 136 005e 01F4      		brne .L17
 137               	.L19:
 603:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 138               		.loc 2 603 0
 139 0060 F983      		std Y+1,r31
 140 0062 E883      		st Y,r30
 604:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 141               		.loc 2 604 0
 142 0064 A281      		ldd r26,Z+2
 143 0066 B381      		ldd r27,Z+3
 144 0068 BB83      		std Y+3,r27
 145 006a AA83      		std Y+2,r26
 605:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 146               		.loc 2 605 0
 147 006c CD93      		st X+,r28
 148 006e DC93      		st X,r29
 606:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 149               		.loc 2 606 0
 150 0070 D383      		std Z+3,r29
 151 0072 C283      		std Z+2,r28
 152               	.LVL10:
 153               	.LBE99:
 154               	.LBE98:
 171:../../../os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 172:../../../os/rt/src/chmtx.c ****           /* Re-enqueues the mutex owner with its new priority.*/
 173:../../../os/rt/src/chmtx.c ****           queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 174:../../../os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 175:../../../os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 176:../../../os/rt/src/chmtx.c ****           continue;
 177:../../../os/rt/src/chmtx.c **** #if (CH_CFG_USE_CONDVARS == TRUE) ||                                        \
 178:../../../os/rt/src/chmtx.c ****     ((CH_CFG_USE_SEMAPHORES == TRUE) &&                                     \
 179:../../../os/rt/src/chmtx.c ****      (CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE)) ||                           \
 180:../../../os/rt/src/chmtx.c ****     ((CH_CFG_USE_MESSAGES == TRUE) &&                                       \
 181:../../../os/rt/src/chmtx.c ****      (CH_CFG_USE_MESSAGES_PRIORITY == TRUE))
 182:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_CONDVARS == TRUE
 183:../../../os/rt/src/chmtx.c ****         case CH_STATE_WTCOND:
 184:../../../os/rt/src/chmtx.c **** #endif
 185:../../../os/rt/src/chmtx.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) &&                                      \
 186:../../../os/rt/src/chmtx.c ****     (CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE)
 187:../../../os/rt/src/chmtx.c ****         case CH_STATE_WTSEM:
 188:../../../os/rt/src/chmtx.c **** #endif
 189:../../../os/rt/src/chmtx.c **** #if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
 190:../../../os/rt/src/chmtx.c ****         case CH_STATE_SNDMSGQ:
 191:../../../os/rt/src/chmtx.c **** #endif
 192:../../../os/rt/src/chmtx.c ****           /* Re-enqueues tp with its new priority on the queue.*/
 193:../../../os/rt/src/chmtx.c ****           queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 194:../../../os/rt/src/chmtx.c ****           break;
 195:../../../os/rt/src/chmtx.c **** #endif
 196:../../../os/rt/src/chmtx.c ****         case CH_STATE_READY:
 197:../../../os/rt/src/chmtx.c **** #if CH_DBG_ENABLE_ASSERTS == TRUE
 198:../../../os/rt/src/chmtx.c ****           /* Prevents an assertion in chSchReadyI().*/
 199:../../../os/rt/src/chmtx.c ****           tp->state = CH_STATE_CURRENT;
 200:../../../os/rt/src/chmtx.c **** #endif
 201:../../../os/rt/src/chmtx.c ****           /* Re-enqueues tp with its new priority on the ready list.*/
 202:../../../os/rt/src/chmtx.c ****           (void) chSchReadyI(queue_dequeue(tp));
 203:../../../os/rt/src/chmtx.c ****           break;
 204:../../../os/rt/src/chmtx.c ****         default:
 205:../../../os/rt/src/chmtx.c ****           /* Nothing to do for other states.*/
 206:../../../os/rt/src/chmtx.c ****           break;
 207:../../../os/rt/src/chmtx.c ****         }
 208:../../../os/rt/src/chmtx.c ****         break;
 209:../../../os/rt/src/chmtx.c ****       }
 210:../../../os/rt/src/chmtx.c **** 
 211:../../../os/rt/src/chmtx.c ****       /* Sleep on the mutex.*/
 212:../../../os/rt/src/chmtx.c ****       queue_prio_insert(ctp, &mp->queue);
 213:../../../os/rt/src/chmtx.c ****       ctp->u.wtmtxp = mp;
 155               		.loc 1 213 0
 156 0074 198B      		std Y+17,r17
 157 0076 088B      		std Y+16,r16
 214:../../../os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 158               		.loc 1 214 0
 159 0078 86E0      		ldi r24,lo8(6)
 160               	/* epilogue start */
 161               	.LBE97:
 215:../../../os/rt/src/chmtx.c **** 
 216:../../../os/rt/src/chmtx.c ****       /* It is assumed that the thread performing the unlock operation assigns
 217:../../../os/rt/src/chmtx.c ****          the mutex to this thread.*/
 218:../../../os/rt/src/chmtx.c ****       chDbgAssert(mp->owner == ctp, "not owner");
 219:../../../os/rt/src/chmtx.c ****       chDbgAssert(ctp->mtxlist == mp, "not owned");
 220:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 221:../../../os/rt/src/chmtx.c ****       chDbgAssert(mp->cnt == (cnt_t)1, "counter is not one");
 222:../../../os/rt/src/chmtx.c ****     }
 223:../../../os/rt/src/chmtx.c **** #endif
 224:../../../os/rt/src/chmtx.c ****   }
 225:../../../os/rt/src/chmtx.c ****   else {
 226:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 227:../../../os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");
 228:../../../os/rt/src/chmtx.c **** 
 229:../../../os/rt/src/chmtx.c ****     mp->cnt++;
 230:../../../os/rt/src/chmtx.c **** #endif
 231:../../../os/rt/src/chmtx.c ****     /* It was not owned, inserted in the owned mutexes list.*/
 232:../../../os/rt/src/chmtx.c ****     mp->owner = ctp;
 233:../../../os/rt/src/chmtx.c ****     mp->next = ctp->mtxlist;
 234:../../../os/rt/src/chmtx.c ****     ctp->mtxlist = mp;
 235:../../../os/rt/src/chmtx.c ****   }
 236:../../../os/rt/src/chmtx.c **** }
 162               		.loc 1 236 0
 163 007a DF91      		pop r29
 164 007c CF91      		pop r28
 165               	.LVL11:
 166 007e 1F91      		pop r17
 167 0080 0F91      		pop r16
 168               	.LVL12:
 169               	.LBB110:
 214:../../../os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 170               		.loc 1 214 0
 171 0082 0C94 0000 		jmp chSchGoSleepS
 172               	.LVL13:
 173               	.L27:
 174               	.LBB100:
 175               	.LBB101:
 607:../../../os/rt/include/chschd.h **** }
 608:../../../os/rt/include/chschd.h **** 
 609:../../../os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 610:../../../os/rt/include/chschd.h **** 
 611:../../../os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 612:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 613:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 614:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 615:../../../os/rt/include/chschd.h **** }
 616:../../../os/rt/include/chschd.h **** 
 617:../../../os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 618:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 619:../../../os/rt/include/chschd.h **** 
 620:../../../os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 621:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 622:../../../os/rt/include/chschd.h **** 
 623:../../../os/rt/include/chschd.h ****   return tp;
 624:../../../os/rt/include/chschd.h **** }
 625:../../../os/rt/include/chschd.h **** 
 626:../../../os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 627:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 628:../../../os/rt/include/chschd.h **** 
 629:../../../os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 630:../../../os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 631:../../../os/rt/include/chschd.h **** 
 632:../../../os/rt/include/chschd.h ****   return tp;
 633:../../../os/rt/include/chschd.h **** }
 634:../../../os/rt/include/chschd.h **** 
 635:../../../os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 636:../../../os/rt/include/chschd.h **** 
 637:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 176               		.loc 2 637 0
 177 0086 DB01      		movw r26,r22
 178 0088 1296      		adiw r26,2
 179 008a ED91      		ld r30,X+
 180 008c FC91      		ld r31,X
 181 008e 1397      		sbiw r26,2+1
 182 0090 8D91      		ld r24,X+
 183 0092 9C91      		ld r25,X
 184 0094 1197      		sbiw r26,1
 185 0096 9183      		std Z+1,r25
 186 0098 8083      		st Z,r24
 638:../../../os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 187               		.loc 2 638 0
 188 009a 8D91      		ld r24,X+
 189 009c 9C91      		ld r25,X
 190 009e DC01      		movw r26,r24
 191 00a0 1396      		adiw r26,2+1
 192 00a2 FC93      		st X,r31
 193 00a4 EE93      		st -X,r30
 194 00a6 1297      		sbiw r26,2
 195               	.LVL14:
 196               	.LBE101:
 197               	.LBE100:
 202:../../../os/rt/src/chmtx.c ****           break;
 198               		.loc 1 202 0
 199 00a8 CB01      		movw r24,r22
 200 00aa 0E94 0000 		call chSchReadyI
 201               	.LVL15:
 203:../../../os/rt/src/chmtx.c ****         default:
 202               		.loc 1 203 0
 203 00ae 00C0      		rjmp .L5
 204               	.LVL16:
 205               	.L7:
 193:../../../os/rt/src/chmtx.c ****           break;
 206               		.loc 1 193 0
 207 00b0 FB01      		movw r30,r22
 208 00b2 2089      		ldd r18,Z+16
 209 00b4 3189      		ldd r19,Z+17
 210               	.LVL17:
 211               	.LBB102:
 212               	.LBB103:
 637:../../../os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 213               		.loc 2 637 0
 214 00b6 0280      		ldd __tmp_reg__,Z+2
 215 00b8 F381      		ldd r31,Z+3
 216 00ba E02D      		mov r30,__tmp_reg__
 217               	.LVL18:
 218 00bc DB01      		movw r26,r22
 219 00be 4D91      		ld r20,X+
 220 00c0 5C91      		ld r21,X
 221 00c2 1197      		sbiw r26,1
 222 00c4 5183      		std Z+1,r21
 223 00c6 4083      		st Z,r20
 224               		.loc 2 638 0
 225 00c8 4D91      		ld r20,X+
 226 00ca 5C91      		ld r21,X
 227 00cc DA01      		movw r26,r20
 228 00ce 1396      		adiw r26,2+1
 229 00d0 FC93      		st X,r31
 230 00d2 EE93      		st -X,r30
 231 00d4 1297      		sbiw r26,2
 232               	.LVL19:
 233               	.LBE103:
 234               	.LBE102:
 235               	.LBB104:
 236               	.LBB105:
 599:../../../os/rt/include/chschd.h ****   do {
 237               		.loc 2 599 0
 238 00d6 F901      		movw r30,r18
 239 00d8 00C0      		rjmp .L15
 240               	.LVL20:
 241               	.L14:
 602:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 242               		.loc 2 602 0
 243 00da 9481      		ldd r25,Z+4
 244 00dc 9817      		cp r25,r24
 245 00de 00F0      		brlo .L16
 246               	.LVL21:
 247               	.L15:
 601:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 248               		.loc 2 601 0
 249 00e0 0190      		ld __tmp_reg__,Z+
 250 00e2 F081      		ld r31,Z
 251 00e4 E02D      		mov r30,__tmp_reg__
 252               	.LVL22:
 602:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 253               		.loc 2 602 0
 254 00e6 2E17      		cp r18,r30
 255 00e8 3F07      		cpc r19,r31
 256 00ea 01F4      		brne .L14
 257               	.L16:
 603:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 258               		.loc 2 603 0
 259 00ec DB01      		movw r26,r22
 260 00ee 1196      		adiw r26,1
 261 00f0 FC93      		st X,r31
 262 00f2 EE93      		st -X,r30
 604:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 263               		.loc 2 604 0
 264 00f4 8281      		ldd r24,Z+2
 265 00f6 9381      		ldd r25,Z+3
 266 00f8 1396      		adiw r26,2+1
 267 00fa 9C93      		st X,r25
 268 00fc 8E93      		st -X,r24
 269 00fe 1297      		sbiw r26,2
 605:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 270               		.loc 2 605 0
 271 0100 DC01      		movw r26,r24
 272 0102 6D93      		st X+,r22
 273 0104 7C93      		st X,r23
 606:../../../os/rt/include/chschd.h **** }
 274               		.loc 2 606 0
 275 0106 7383      		std Z+3,r23
 276 0108 6283      		std Z+2,r22
 277 010a 00C0      		rjmp .L5
 278               	.LVL23:
 279               	.L6:
 280               	.LBE105:
 281               	.LBE104:
 173:../../../os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 282               		.loc 1 173 0
 283 010c FB01      		movw r30,r22
 284 010e 2089      		ldd r18,Z+16
 285 0110 3189      		ldd r19,Z+17
 286               	.LVL24:
 287               	.LBB106:
 288               	.LBB107:
 637:../../../os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 289               		.loc 2 637 0
 290 0112 A281      		ldd r26,Z+2
 291 0114 B381      		ldd r27,Z+3
 292 0116 4081      		ld r20,Z
 293 0118 5181      		ldd r21,Z+1
 294 011a 1196      		adiw r26,1
 295 011c 5C93      		st X,r21
 296 011e 4E93      		st -X,r20
 297               		.loc 2 638 0
 298 0120 4081      		ld r20,Z
 299 0122 5181      		ldd r21,Z+1
 300 0124 FA01      		movw r30,r20
 301               	.LVL25:
 302 0126 B383      		std Z+3,r27
 303 0128 A283      		std Z+2,r26
 304               	.LVL26:
 305               	.LBE107:
 306               	.LBE106:
 307               	.LBB108:
 308               	.LBB109:
 599:../../../os/rt/include/chschd.h ****   do {
 309               		.loc 2 599 0
 310 012a F901      		movw r30,r18
 311 012c 00C0      		rjmp .L12
 312               	.LVL27:
 313               	.L9:
 602:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 314               		.loc 2 602 0
 315 012e 9481      		ldd r25,Z+4
 316 0130 9817      		cp r25,r24
 317 0132 00F0      		brlo .L13
 318               	.LVL28:
 319               	.L12:
 601:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 320               		.loc 2 601 0
 321 0134 0190      		ld __tmp_reg__,Z+
 322 0136 F081      		ld r31,Z
 323 0138 E02D      		mov r30,__tmp_reg__
 324               	.LVL29:
 602:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 325               		.loc 2 602 0
 326 013a 2E17      		cp r18,r30
 327 013c 3F07      		cpc r19,r31
 328 013e 01F4      		brne .L9
 329               	.L13:
 603:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 330               		.loc 2 603 0
 331 0140 DB01      		movw r26,r22
 332 0142 1196      		adiw r26,1
 333 0144 FC93      		st X,r31
 334 0146 EE93      		st -X,r30
 604:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 335               		.loc 2 604 0
 336 0148 8281      		ldd r24,Z+2
 337 014a 9381      		ldd r25,Z+3
 338 014c 1396      		adiw r26,2+1
 339 014e 9C93      		st X,r25
 340 0150 8E93      		st -X,r24
 341 0152 1297      		sbiw r26,2
 605:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 342               		.loc 2 605 0
 343 0154 DC01      		movw r26,r24
 344 0156 6D93      		st X+,r22
 345 0158 7C93      		st X,r23
 606:../../../os/rt/include/chschd.h **** }
 346               		.loc 2 606 0
 347 015a 7383      		std Z+3,r23
 348 015c 6283      		std Z+2,r22
 349               	.LVL30:
 350               	.LBE109:
 351               	.LBE108:
 174:../../../os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 352               		.loc 1 174 0
 353 015e F901      		movw r30,r18
 354               	.LVL31:
 355 0160 6481      		ldd r22,Z+4
 356 0162 7581      		ldd r23,Z+5
 357               	.LVL32:
 165:../../../os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 358               		.loc 1 165 0
 359 0164 8C81      		ldd r24,Y+4
 360 0166 DB01      		movw r26,r22
 361 0168 1496      		adiw r26,4
 362 016a 9C91      		ld r25,X
 363 016c 9817      		cp r25,r24
 364 016e 00F4      		brsh .+2
 365 0170 00C0      		rjmp .L20
 366 0172 00C0      		rjmp .L5
 367               	.LVL33:
 368               	.L3:
 369               	.LBE110:
 232:../../../os/rt/src/chmtx.c ****     mp->next = ctp->mtxlist;
 370               		.loc 1 232 0
 371 0174 FC01      		movw r30,r24
 372 0176 D583      		std Z+5,r29
 373 0178 C483      		std Z+4,r28
 233:../../../os/rt/src/chmtx.c ****     ctp->mtxlist = mp;
 374               		.loc 1 233 0
 375 017a 298D      		ldd r18,Y+25
 376 017c 3A8D      		ldd r19,Y+26
 377 017e 3783      		std Z+7,r19
 378 0180 2683      		std Z+6,r18
 234:../../../os/rt/src/chmtx.c ****   }
 379               		.loc 1 234 0
 380 0182 9A8F      		std Y+26,r25
 381 0184 898F      		std Y+25,r24
 382               	/* epilogue start */
 383               		.loc 1 236 0
 384 0186 DF91      		pop r29
 385 0188 CF91      		pop r28
 386               	.LVL34:
 387 018a 1F91      		pop r17
 388 018c 0F91      		pop r16
 389 018e 0895      		ret
 390               		.cfi_endproc
 391               	.LFE115:
 393               		.section	.text.chMtxLock,"ax",@progbits
 394               	.global	chMtxLock
 396               	chMtxLock:
 397               	.LFB114:
 123:../../../os/rt/src/chmtx.c **** 
 398               		.loc 1 123 0
 399               		.cfi_startproc
 400               	.LVL35:
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 0 */
 404               	.L__stack_usage = 0
 405               	.LBB111:
 406               	.LBB112:
 407               	.LBB113:
 408               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 409               		.loc 3 437 0
 410               	/* #APP */
 411               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 412 0000 F894      		cli
 413               	 ;  0 "" 2
 414               	/* #NOAPP */
 415               	.LBE113:
 416               	.LBE112:
 417               	.LBE111:
 126:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 418               		.loc 1 126 0
 419 0002 0E94 0000 		call chMtxLockS
 420               	.LVL36:
 421               	.LBB114:
 422               	.LBB115:
 423               	.LBB116:
 424               	.LBB117:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 425               		.loc 3 447 0
 426               	/* #APP */
 427               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 428 0006 7894      		sei
 429               	 ;  0 "" 2
 430               	/* #NOAPP */
 431 0008 0895      		ret
 432               	.LBE117:
 433               	.LBE116:
 434               	.LBE115:
 435               	.LBE114:
 436               		.cfi_endproc
 437               	.LFE114:
 439               		.section	.text.chMtxTryLock,"ax",@progbits
 440               	.global	chMtxTryLock
 442               	chMtxTryLock:
 443               	.LFB116:
 237:../../../os/rt/src/chmtx.c **** 
 238:../../../os/rt/src/chmtx.c **** /**
 239:../../../os/rt/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 240:../../../os/rt/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 241:../../../os/rt/src/chmtx.c ****  *          locked by another thread then the function exits without waiting.
 242:../../../os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 243:../../../os/rt/src/chmtx.c ****  *          mutexes.
 244:../../../os/rt/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 245:../../../os/rt/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 246:../../../os/rt/src/chmtx.c ****  *          enter a sleep state.
 247:../../../os/rt/src/chmtx.c ****  *
 248:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 249:../../../os/rt/src/chmtx.c ****  * @return              The operation status.
 250:../../../os/rt/src/chmtx.c ****  * @retval true         if the mutex has been successfully acquired
 251:../../../os/rt/src/chmtx.c ****  * @retval false        if the lock attempt failed.
 252:../../../os/rt/src/chmtx.c ****  *
 253:../../../os/rt/src/chmtx.c ****  * @api
 254:../../../os/rt/src/chmtx.c ****  */
 255:../../../os/rt/src/chmtx.c **** bool chMtxTryLock(mutex_t *mp) {
 444               		.loc 1 255 0
 445               		.cfi_startproc
 446               	.LVL37:
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
 451               	.LBB129:
 452               	.LBB130:
 453               	.LBB131:
 437:../../../os/common/ports/AVR/chcore.h **** }
 454               		.loc 3 437 0
 455               	/* #APP */
 456               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 457 0000 F894      		cli
 458               	 ;  0 "" 2
 459               	.LVL38:
 460               	/* #NOAPP */
 461               	.LBE131:
 462               	.LBE130:
 463               	.LBE129:
 464               	.LBB132:
 465               	.LBB133:
 256:../../../os/rt/src/chmtx.c ****   bool b;
 257:../../../os/rt/src/chmtx.c **** 
 258:../../../os/rt/src/chmtx.c ****   chSysLock();
 259:../../../os/rt/src/chmtx.c ****   b = chMtxTryLockS(mp);
 260:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 261:../../../os/rt/src/chmtx.c **** 
 262:../../../os/rt/src/chmtx.c ****   return b;
 263:../../../os/rt/src/chmtx.c **** }
 264:../../../os/rt/src/chmtx.c **** 
 265:../../../os/rt/src/chmtx.c **** /**
 266:../../../os/rt/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 267:../../../os/rt/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 268:../../../os/rt/src/chmtx.c ****  *          taken by another thread then the function exits without waiting.
 269:../../../os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 270:../../../os/rt/src/chmtx.c ****  *          mutexes.
 271:../../../os/rt/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 272:../../../os/rt/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 273:../../../os/rt/src/chmtx.c ****  *          enter a sleep state.
 274:../../../os/rt/src/chmtx.c ****  *
 275:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 276:../../../os/rt/src/chmtx.c ****  * @return              The operation status.
 277:../../../os/rt/src/chmtx.c ****  * @retval true         if the mutex has been successfully acquired
 278:../../../os/rt/src/chmtx.c ****  * @retval false        if the lock attempt failed.
 279:../../../os/rt/src/chmtx.c ****  *
 280:../../../os/rt/src/chmtx.c ****  * @sclass
 281:../../../os/rt/src/chmtx.c ****  */
 282:../../../os/rt/src/chmtx.c **** bool chMtxTryLockS(mutex_t *mp) {
 283:../../../os/rt/src/chmtx.c **** 
 284:../../../os/rt/src/chmtx.c ****   chDbgCheckClassS();
 285:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 286:../../../os/rt/src/chmtx.c **** 
 287:../../../os/rt/src/chmtx.c ****   if (mp->owner != NULL) {
 466               		.loc 1 287 0
 467 0002 DC01      		movw r26,r24
 468 0004 1496      		adiw r26,4
 469 0006 2D91      		ld r18,X+
 470 0008 3C91      		ld r19,X
 471 000a 1597      		sbiw r26,4+1
 472 000c 232B      		or r18,r19
 473 000e 01F0      		breq .L32
 288:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 289:../../../os/rt/src/chmtx.c **** 
 290:../../../os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 291:../../../os/rt/src/chmtx.c **** 
 292:../../../os/rt/src/chmtx.c ****     if (mp->owner == currp) {
 293:../../../os/rt/src/chmtx.c ****       mp->cnt++;
 294:../../../os/rt/src/chmtx.c ****       return true;
 295:../../../os/rt/src/chmtx.c ****     }
 296:../../../os/rt/src/chmtx.c **** #endif
 297:../../../os/rt/src/chmtx.c ****     return false;
 474               		.loc 1 297 0
 475 0010 80E0      		ldi r24,0
 476               	.LVL39:
 477               	.LBE133:
 478               	.LBE132:
 479               	.LBB137:
 480               	.LBB138:
 481               	.LBB139:
 482               	.LBB140:
 483               		.loc 3 447 0
 484               	/* #APP */
 485               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 486 0012 7894      		sei
 487               	 ;  0 "" 2
 488               	/* #NOAPP */
 489               	.LBE140:
 490               	.LBE139:
 491               	.LBE138:
 492               	.LBE137:
 263:../../../os/rt/src/chmtx.c **** 
 493               		.loc 1 263 0
 494 0014 0895      		ret
 495               	.LVL40:
 496               	.L32:
 497               	.LBB144:
 498               	.LBB136:
 499               	.LBB134:
 500               	.LBB135:
 298:../../../os/rt/src/chmtx.c ****   }
 299:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 300:../../../os/rt/src/chmtx.c **** 
 301:../../../os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");
 302:../../../os/rt/src/chmtx.c **** 
 303:../../../os/rt/src/chmtx.c ****   mp->cnt++;
 304:../../../os/rt/src/chmtx.c **** #endif
 305:../../../os/rt/src/chmtx.c ****   mp->owner = currp;
 501               		.loc 1 305 0
 502 0016 E091 0000 		lds r30,ch+11
 503 001a F091 0000 		lds r31,ch+11+1
 504 001e 1596      		adiw r26,4+1
 505 0020 FC93      		st X,r31
 506 0022 EE93      		st -X,r30
 507 0024 1497      		sbiw r26,4
 306:../../../os/rt/src/chmtx.c ****   mp->next = currp->mtxlist;
 508               		.loc 1 306 0
 509 0026 218D      		ldd r18,Z+25
 510 0028 328D      		ldd r19,Z+26
 511 002a 1796      		adiw r26,6+1
 512 002c 3C93      		st X,r19
 513 002e 2E93      		st -X,r18
 514 0030 1697      		sbiw r26,6
 307:../../../os/rt/src/chmtx.c ****   currp->mtxlist = mp;
 515               		.loc 1 307 0
 516 0032 928F      		std Z+26,r25
 517 0034 818F      		std Z+25,r24
 518               	.LVL41:
 519 0036 81E0      		ldi r24,lo8(1)
 520               	.LVL42:
 521               	.LBE135:
 522               	.LBE134:
 523               	.LBE136:
 524               	.LBE144:
 525               	.LBB145:
 526               	.LBB143:
 527               	.LBB142:
 528               	.LBB141:
 529               		.loc 3 447 0
 530               	/* #APP */
 531               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 532 0038 7894      		sei
 533               	 ;  0 "" 2
 534               	/* #NOAPP */
 535               	.LBE141:
 536               	.LBE142:
 537               	.LBE143:
 538               	.LBE145:
 263:../../../os/rt/src/chmtx.c **** 
 539               		.loc 1 263 0
 540 003a 0895      		ret
 541               		.cfi_endproc
 542               	.LFE116:
 544               		.section	.text.chMtxTryLockS,"ax",@progbits
 545               	.global	chMtxTryLockS
 547               	chMtxTryLockS:
 548               	.LFB117:
 282:../../../os/rt/src/chmtx.c **** 
 549               		.loc 1 282 0
 550               		.cfi_startproc
 551               	.LVL43:
 552               	/* prologue: function */
 553               	/* frame size = 0 */
 554               	/* stack size = 0 */
 555               	.L__stack_usage = 0
 287:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 556               		.loc 1 287 0
 557 0000 DC01      		movw r26,r24
 558 0002 1496      		adiw r26,4
 559 0004 2D91      		ld r18,X+
 560 0006 3C91      		ld r19,X
 561 0008 1597      		sbiw r26,4+1
 562 000a 232B      		or r18,r19
 563 000c 01F0      		breq .L36
 297:../../../os/rt/src/chmtx.c ****   }
 564               		.loc 1 297 0
 565 000e 80E0      		ldi r24,0
 566               	.LVL44:
 308:../../../os/rt/src/chmtx.c ****   return true;
 309:../../../os/rt/src/chmtx.c **** }
 567               		.loc 1 309 0
 568 0010 0895      		ret
 569               	.LVL45:
 570               	.L36:
 571               	.LBB148:
 572               	.LBB149:
 305:../../../os/rt/src/chmtx.c ****   mp->next = currp->mtxlist;
 573               		.loc 1 305 0
 574 0012 E091 0000 		lds r30,ch+11
 575 0016 F091 0000 		lds r31,ch+11+1
 576 001a 1596      		adiw r26,4+1
 577 001c FC93      		st X,r31
 578 001e EE93      		st -X,r30
 579 0020 1497      		sbiw r26,4
 306:../../../os/rt/src/chmtx.c ****   currp->mtxlist = mp;
 580               		.loc 1 306 0
 581 0022 218D      		ldd r18,Z+25
 582 0024 328D      		ldd r19,Z+26
 583 0026 1796      		adiw r26,6+1
 584 0028 3C93      		st X,r19
 585 002a 2E93      		st -X,r18
 586 002c 1697      		sbiw r26,6
 307:../../../os/rt/src/chmtx.c ****   return true;
 587               		.loc 1 307 0
 588 002e 928F      		std Z+26,r25
 589 0030 818F      		std Z+25,r24
 590               	.LVL46:
 591 0032 81E0      		ldi r24,lo8(1)
 592               	.LVL47:
 593 0034 0895      		ret
 594               	.LBE149:
 595               	.LBE148:
 596               		.cfi_endproc
 597               	.LFE117:
 599               		.section	.text.chMtxUnlock,"ax",@progbits
 600               	.global	chMtxUnlock
 602               	chMtxUnlock:
 603               	.LFB118:
 310:../../../os/rt/src/chmtx.c **** 
 311:../../../os/rt/src/chmtx.c **** /**
 312:../../../os/rt/src/chmtx.c ****  * @brief   Unlocks the specified mutex.
 313:../../../os/rt/src/chmtx.c ****  * @note    Mutexes must be unlocked in reverse lock order. Violating this
 314:../../../os/rt/src/chmtx.c ****  *          rules will result in a panic if assertions are enabled.
 315:../../../os/rt/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 316:../../../os/rt/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 317:../../../os/rt/src/chmtx.c ****  *          owned mutexes.
 318:../../../os/rt/src/chmtx.c ****  *
 319:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 320:../../../os/rt/src/chmtx.c ****  *
 321:../../../os/rt/src/chmtx.c ****  * @api
 322:../../../os/rt/src/chmtx.c ****  */
 323:../../../os/rt/src/chmtx.c **** void chMtxUnlock(mutex_t *mp) {
 604               		.loc 1 323 0
 605               		.cfi_startproc
 606               	.LVL48:
 607 0000 CF93      		push r28
 608               	.LCFI4:
 609               		.cfi_def_cfa_offset 4
 610               		.cfi_offset 28, -3
 611 0002 DF93      		push r29
 612               	.LCFI5:
 613               		.cfi_def_cfa_offset 5
 614               		.cfi_offset 29, -4
 615               	/* prologue: function */
 616               	/* frame size = 0 */
 617               	/* stack size = 2 */
 618               	.L__stack_usage = 2
 619 0004 EC01      		movw r28,r24
 324:../../../os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 620               		.loc 1 324 0
 621 0006 4091 0000 		lds r20,ch+11
 622 000a 5091 0000 		lds r21,ch+11+1
 623               	.LVL49:
 624               	.LBB150:
 625               	.LBB151:
 626               	.LBB152:
 437:../../../os/common/ports/AVR/chcore.h **** }
 627               		.loc 3 437 0
 628               	/* #APP */
 629               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 630 000e F894      		cli
 631               	 ;  0 "" 2
 632               	/* #NOAPP */
 633               	.LBE152:
 634               	.LBE151:
 635               	.LBE150:
 325:../../../os/rt/src/chmtx.c ****   mutex_t *lmp;
 326:../../../os/rt/src/chmtx.c **** 
 327:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 328:../../../os/rt/src/chmtx.c **** 
 329:../../../os/rt/src/chmtx.c ****   chSysLock();
 330:../../../os/rt/src/chmtx.c **** 
 331:../../../os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 332:../../../os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 333:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 334:../../../os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 335:../../../os/rt/src/chmtx.c **** 
 336:../../../os/rt/src/chmtx.c ****   if (--mp->cnt == (cnt_t)0) {
 337:../../../os/rt/src/chmtx.c **** #endif
 338:../../../os/rt/src/chmtx.c **** 
 339:../../../os/rt/src/chmtx.c ****     chDbgAssert(ctp->mtxlist == mp, "not next in list");
 340:../../../os/rt/src/chmtx.c **** 
 341:../../../os/rt/src/chmtx.c ****     /* Removes the top mutex from the thread's owned mutexes list and marks
 342:../../../os/rt/src/chmtx.c ****        it as not owned. Note, it is assumed to be the same mutex passed as
 343:../../../os/rt/src/chmtx.c ****        parameter of this function.*/
 344:../../../os/rt/src/chmtx.c ****     ctp->mtxlist = mp->next;
 636               		.loc 1 344 0
 637 0010 EE81      		ldd r30,Y+6
 638 0012 FF81      		ldd r31,Y+7
 639 0014 DA01      		movw r26,r20
 640 0016 5A96      		adiw r26,25+1
 641 0018 FC93      		st X,r31
 642 001a EE93      		st -X,r30
 643 001c 5997      		sbiw r26,25
 345:../../../os/rt/src/chmtx.c **** 
 346:../../../os/rt/src/chmtx.c ****     /* If a thread is waiting on the mutex then the fun part begins.*/
 347:../../../os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 644               		.loc 1 347 0
 645 001e A881      		ld r26,Y
 646 0020 B981      		ldd r27,Y+1
 647 0022 A817      		cp r26,r24
 648 0024 B907      		cpc r27,r25
 649 0026 01F0      		breq .L38
 650               	.LBB153:
 348:../../../os/rt/src/chmtx.c ****       thread_t *tp;
 349:../../../os/rt/src/chmtx.c **** 
 350:../../../os/rt/src/chmtx.c ****       /* Recalculates the optimal thread priority by scanning the owned
 351:../../../os/rt/src/chmtx.c ****          mutexes list.*/
 352:../../../os/rt/src/chmtx.c ****       tprio_t newprio = ctp->realprio;
 651               		.loc 1 352 0
 652 0028 DA01      		movw r26,r20
 653 002a 5B96      		adiw r26,27
 654 002c 2C91      		ld r18,X
 655               	.LVL50:
 353:../../../os/rt/src/chmtx.c ****       lmp = ctp->mtxlist;
 354:../../../os/rt/src/chmtx.c ****       while (lmp != NULL) {
 656               		.loc 1 354 0
 657 002e 3097      		sbiw r30,0
 658 0030 01F0      		breq .L39
 659               	.L42:
 660               	.LVL51:
 661               	.LBB154:
 662               	.LBB155:
 663               	.LBB156:
 664               	.LBB157:
 577:../../../os/rt/include/chschd.h **** }
 665               		.loc 2 577 0
 666 0032 A081      		ld r26,Z
 667 0034 B181      		ldd r27,Z+1
 668               	.LVL52:
 669               	.LBE157:
 670               	.LBE156:
 671               	.LBE155:
 672               	.LBE154:
 355:../../../os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 356:../../../os/rt/src/chmtx.c ****            greater priority than the current thread base priority then the
 357:../../../os/rt/src/chmtx.c ****            final priority will have at least that priority.*/
 358:../../../os/rt/src/chmtx.c ****         if (chMtxQueueNotEmptyS(lmp) &&
 673               		.loc 1 358 0
 674 0036 EA17      		cp r30,r26
 675 0038 FB07      		cpc r31,r27
 676 003a 01F0      		breq .L40
 359:../../../os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 677               		.loc 1 359 0 discriminator 1
 678 003c 1496      		adiw r26,4
 679 003e 9C91      		ld r25,X
 680 0040 2917      		cp r18,r25
 681 0042 00F4      		brsh .L40
 682 0044 292F      		mov r18,r25
 683               	.LVL53:
 684               	.L40:
 360:../../../os/rt/src/chmtx.c ****           newprio = lmp->queue.next->prio;
 361:../../../os/rt/src/chmtx.c ****         }
 362:../../../os/rt/src/chmtx.c ****         lmp = lmp->next;
 685               		.loc 1 362 0
 686 0046 0680      		ldd __tmp_reg__,Z+6
 687 0048 F781      		ldd r31,Z+7
 688 004a E02D      		mov r30,__tmp_reg__
 689               	.LVL54:
 354:../../../os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 690               		.loc 1 354 0
 691 004c 3097      		sbiw r30,0
 692 004e 01F4      		brne .L42
 693               	.L39:
 694 0050 FE01      		movw r30,r28
 695               	.LVL55:
 363:../../../os/rt/src/chmtx.c ****       }
 364:../../../os/rt/src/chmtx.c **** 
 365:../../../os/rt/src/chmtx.c ****       /* Assigns to the current thread the highest priority among all the
 366:../../../os/rt/src/chmtx.c ****          waiting threads.*/
 367:../../../os/rt/src/chmtx.c ****       ctp->prio = newprio;
 696               		.loc 1 367 0
 697 0052 DA01      		movw r26,r20
 698 0054 1496      		adiw r26,4
 699 0056 2C93      		st X,r18
 700               	.LVL56:
 701               	.LBB158:
 702               	.LBB159:
 618:../../../os/rt/include/chschd.h **** 
 703               		.loc 2 618 0
 704 0058 A881      		ld r26,Y
 705 005a B981      		ldd r27,Y+1
 706               	.LVL57:
 620:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 707               		.loc 2 620 0
 708 005c CD91      		ld r28,X+
 709 005e DC91      		ld r29,X
 710 0060 1197      		sbiw r26,1
 711 0062 D183      		std Z+1,r29
 712 0064 C083      		st Z,r28
 621:../../../os/rt/include/chschd.h **** 
 713               		.loc 2 621 0
 714 0066 FB83      		std Y+3,r31
 715 0068 EA83      		std Y+2,r30
 716               	.LVL58:
 717               	.LBE159:
 718               	.LBE158:
 368:../../../os/rt/src/chmtx.c **** 
 369:../../../os/rt/src/chmtx.c ****       /* Awakens the highest priority thread waiting for the unlocked mutex and
 370:../../../os/rt/src/chmtx.c ****          assigns the mutex to it.*/
 371:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 372:../../../os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 373:../../../os/rt/src/chmtx.c **** #endif
 374:../../../os/rt/src/chmtx.c ****       tp = queue_fifo_remove(&mp->queue);
 375:../../../os/rt/src/chmtx.c ****       mp->owner = tp;
 719               		.loc 1 375 0
 720 006a B583      		std Z+5,r27
 721 006c A483      		std Z+4,r26
 376:../../../os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 722               		.loc 1 376 0
 723 006e 5996      		adiw r26,25
 724 0070 8D91      		ld r24,X+
 725 0072 9C91      		ld r25,X
 726 0074 5A97      		sbiw r26,25+1
 727               	.LVL59:
 728 0076 9783      		std Z+7,r25
 729 0078 8683      		std Z+6,r24
 377:../../../os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 730               		.loc 1 377 0
 731 007a 5A96      		adiw r26,25+1
 732 007c FC93      		st X,r31
 733 007e EE93      		st -X,r30
 734 0080 5997      		sbiw r26,25
 378:../../../os/rt/src/chmtx.c **** 
 379:../../../os/rt/src/chmtx.c ****       /* Note, not using chSchWakeupS() becuase that function expects the
 380:../../../os/rt/src/chmtx.c ****          current thread to have the higher or equal priority than the ones
 381:../../../os/rt/src/chmtx.c ****          in the ready list. This is not necessarily true here because we
 382:../../../os/rt/src/chmtx.c ****          just changed priority.*/
 383:../../../os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 735               		.loc 1 383 0
 736 0082 CD01      		movw r24,r26
 737 0084 0E94 0000 		call chSchReadyI
 738               	.LVL60:
 384:../../../os/rt/src/chmtx.c ****       chSchRescheduleS();
 739               		.loc 1 384 0
 740 0088 0E94 0000 		call chSchRescheduleS
 741               	.LVL61:
 742               	.LBE153:
 743               	.LBB160:
 744               	.LBB161:
 745               	.LBB162:
 746               	.LBB163:
 747               		.loc 3 447 0
 748               	/* #APP */
 749               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 750 008c 7894      		sei
 751               	 ;  0 "" 2
 752               	/* epilogue start */
 753               	/* #NOAPP */
 754               	.LBE163:
 755               	.LBE162:
 756               	.LBE161:
 757               	.LBE160:
 385:../../../os/rt/src/chmtx.c ****     }
 386:../../../os/rt/src/chmtx.c ****     else {
 387:../../../os/rt/src/chmtx.c ****       mp->owner = NULL;
 388:../../../os/rt/src/chmtx.c ****     }
 389:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 390:../../../os/rt/src/chmtx.c ****   }
 391:../../../os/rt/src/chmtx.c **** #endif
 392:../../../os/rt/src/chmtx.c **** 
 393:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 394:../../../os/rt/src/chmtx.c **** }
 758               		.loc 1 394 0
 759 008e DF91      		pop r29
 760 0090 CF91      		pop r28
 761 0092 0895      		ret
 762               	.LVL62:
 763               	.L38:
 387:../../../os/rt/src/chmtx.c ****     }
 764               		.loc 1 387 0
 765 0094 1596      		adiw r26,4+1
 766 0096 1C92      		st X,__zero_reg__
 767 0098 1E92      		st -X,__zero_reg__
 768 009a 1497      		sbiw r26,4
 769               	.LBB167:
 770               	.LBB166:
 771               	.LBB165:
 772               	.LBB164:
 773               		.loc 3 447 0
 774               	/* #APP */
 775               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 776 009c 7894      		sei
 777               	 ;  0 "" 2
 778               	/* epilogue start */
 779               	/* #NOAPP */
 780               	.LBE164:
 781               	.LBE165:
 782               	.LBE166:
 783               	.LBE167:
 784               		.loc 1 394 0
 785 009e DF91      		pop r29
 786 00a0 CF91      		pop r28
 787 00a2 0895      		ret
 788               		.cfi_endproc
 789               	.LFE118:
 791               		.section	.text.chMtxUnlockS,"ax",@progbits
 792               	.global	chMtxUnlockS
 794               	chMtxUnlockS:
 795               	.LFB119:
 395:../../../os/rt/src/chmtx.c **** 
 396:../../../os/rt/src/chmtx.c **** /**
 397:../../../os/rt/src/chmtx.c ****  * @brief   Unlocks the specified mutex.
 398:../../../os/rt/src/chmtx.c ****  * @note    Mutexes must be unlocked in reverse lock order. Violating this
 399:../../../os/rt/src/chmtx.c ****  *          rules will result in a panic if assertions are enabled.
 400:../../../os/rt/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 401:../../../os/rt/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 402:../../../os/rt/src/chmtx.c ****  *          owned mutexes.
 403:../../../os/rt/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 404:../../../os/rt/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 405:../../../os/rt/src/chmtx.c ****  *
 406:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 407:../../../os/rt/src/chmtx.c ****  *
 408:../../../os/rt/src/chmtx.c ****  * @sclass
 409:../../../os/rt/src/chmtx.c ****  */
 410:../../../os/rt/src/chmtx.c **** void chMtxUnlockS(mutex_t *mp) {
 796               		.loc 1 410 0
 797               		.cfi_startproc
 798               	.LVL63:
 799 0000 CF93      		push r28
 800               	.LCFI6:
 801               		.cfi_def_cfa_offset 4
 802               		.cfi_offset 28, -3
 803 0002 DF93      		push r29
 804               	.LCFI7:
 805               		.cfi_def_cfa_offset 5
 806               		.cfi_offset 29, -4
 807               	/* prologue: function */
 808               	/* frame size = 0 */
 809               	/* stack size = 2 */
 810               	.L__stack_usage = 2
 811 0004 EC01      		movw r28,r24
 411:../../../os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 812               		.loc 1 411 0
 813 0006 4091 0000 		lds r20,ch+11
 814 000a 5091 0000 		lds r21,ch+11+1
 815               	.LVL64:
 412:../../../os/rt/src/chmtx.c ****   mutex_t *lmp;
 413:../../../os/rt/src/chmtx.c **** 
 414:../../../os/rt/src/chmtx.c ****   chDbgCheckClassS();
 415:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 416:../../../os/rt/src/chmtx.c **** 
 417:../../../os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 418:../../../os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 419:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 420:../../../os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 421:../../../os/rt/src/chmtx.c **** 
 422:../../../os/rt/src/chmtx.c ****   if (--mp->cnt == (cnt_t)0) {
 423:../../../os/rt/src/chmtx.c **** #endif
 424:../../../os/rt/src/chmtx.c **** 
 425:../../../os/rt/src/chmtx.c ****     chDbgAssert(ctp->mtxlist == mp, "not next in list");
 426:../../../os/rt/src/chmtx.c **** 
 427:../../../os/rt/src/chmtx.c ****     /* Removes the top mutex from the thread's owned mutexes list and marks
 428:../../../os/rt/src/chmtx.c ****        it as not owned. Note, it is assumed to be the same mutex passed as
 429:../../../os/rt/src/chmtx.c ****        parameter of this function.*/
 430:../../../os/rt/src/chmtx.c ****     ctp->mtxlist = mp->next;
 816               		.loc 1 430 0
 817 000e EE81      		ldd r30,Y+6
 818 0010 FF81      		ldd r31,Y+7
 819 0012 DA01      		movw r26,r20
 820 0014 5A96      		adiw r26,25+1
 821 0016 FC93      		st X,r31
 822 0018 EE93      		st -X,r30
 823 001a 5997      		sbiw r26,25
 431:../../../os/rt/src/chmtx.c **** 
 432:../../../os/rt/src/chmtx.c ****     /* If a thread is waiting on the mutex then the fun part begins.*/
 433:../../../os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 824               		.loc 1 433 0
 825 001c A881      		ld r26,Y
 826 001e B981      		ldd r27,Y+1
 827 0020 A817      		cp r26,r24
 828 0022 B907      		cpc r27,r25
 829 0024 01F0      		breq .L49
 830               	.LBB168:
 434:../../../os/rt/src/chmtx.c ****       thread_t *tp;
 435:../../../os/rt/src/chmtx.c **** 
 436:../../../os/rt/src/chmtx.c ****       /* Recalculates the optimal thread priority by scanning the owned
 437:../../../os/rt/src/chmtx.c ****          mutexes list.*/
 438:../../../os/rt/src/chmtx.c ****       tprio_t newprio = ctp->realprio;
 831               		.loc 1 438 0
 832 0026 DA01      		movw r26,r20
 833 0028 5B96      		adiw r26,27
 834 002a 2C91      		ld r18,X
 835               	.LVL65:
 439:../../../os/rt/src/chmtx.c ****       lmp = ctp->mtxlist;
 440:../../../os/rt/src/chmtx.c ****       while (lmp != NULL) {
 836               		.loc 1 440 0
 837 002c 3097      		sbiw r30,0
 838 002e 01F0      		breq .L50
 839               	.L53:
 840               	.LVL66:
 841               	.LBB169:
 842               	.LBB170:
 843               	.LBB171:
 844               	.LBB172:
 577:../../../os/rt/include/chschd.h **** }
 845               		.loc 2 577 0
 846 0030 A081      		ld r26,Z
 847 0032 B181      		ldd r27,Z+1
 848               	.LVL67:
 849               	.LBE172:
 850               	.LBE171:
 851               	.LBE170:
 852               	.LBE169:
 441:../../../os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 442:../../../os/rt/src/chmtx.c ****            greater priority than the current thread base priority then the
 443:../../../os/rt/src/chmtx.c ****            final priority will have at least that priority.*/
 444:../../../os/rt/src/chmtx.c ****         if (chMtxQueueNotEmptyS(lmp) &&
 853               		.loc 1 444 0
 854 0034 EA17      		cp r30,r26
 855 0036 FB07      		cpc r31,r27
 856 0038 01F0      		breq .L51
 445:../../../os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 857               		.loc 1 445 0 discriminator 1
 858 003a 1496      		adiw r26,4
 859 003c 9C91      		ld r25,X
 860 003e 2917      		cp r18,r25
 861 0040 00F4      		brsh .L51
 862 0042 292F      		mov r18,r25
 863               	.LVL68:
 864               	.L51:
 446:../../../os/rt/src/chmtx.c ****           newprio = lmp->queue.next->prio;
 447:../../../os/rt/src/chmtx.c ****         }
 448:../../../os/rt/src/chmtx.c ****         lmp = lmp->next;
 865               		.loc 1 448 0
 866 0044 0680      		ldd __tmp_reg__,Z+6
 867 0046 F781      		ldd r31,Z+7
 868 0048 E02D      		mov r30,__tmp_reg__
 869               	.LVL69:
 440:../../../os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 870               		.loc 1 440 0
 871 004a 3097      		sbiw r30,0
 872 004c 01F4      		brne .L53
 873               	.L50:
 449:../../../os/rt/src/chmtx.c ****       }
 450:../../../os/rt/src/chmtx.c **** 
 451:../../../os/rt/src/chmtx.c ****       /* Assigns to the current thread the highest priority among all the
 452:../../../os/rt/src/chmtx.c ****          waiting threads.*/
 453:../../../os/rt/src/chmtx.c ****       ctp->prio = newprio;
 874               		.loc 1 453 0
 875 004e FA01      		movw r30,r20
 876               	.LVL70:
 877 0050 2483      		std Z+4,r18
 878               	.LVL71:
 879               	.LBB173:
 880               	.LBB174:
 618:../../../os/rt/include/chschd.h **** 
 881               		.loc 2 618 0
 882 0052 E881      		ld r30,Y
 883 0054 F981      		ldd r31,Y+1
 884               	.LVL72:
 620:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 885               		.loc 2 620 0
 886 0056 A081      		ld r26,Z
 887 0058 B181      		ldd r27,Z+1
 888 005a B983      		std Y+1,r27
 889 005c A883      		st Y,r26
 621:../../../os/rt/include/chschd.h **** 
 890               		.loc 2 621 0
 891 005e 1396      		adiw r26,2+1
 892 0060 DC93      		st X,r29
 893 0062 CE93      		st -X,r28
 894 0064 1297      		sbiw r26,2
 895               	.LVL73:
 896               	.LBE174:
 897               	.LBE173:
 454:../../../os/rt/src/chmtx.c **** 
 455:../../../os/rt/src/chmtx.c ****       /* Awakens the highest priority thread waiting for the unlocked mutex and
 456:../../../os/rt/src/chmtx.c ****          assigns the mutex to it.*/
 457:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 458:../../../os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 459:../../../os/rt/src/chmtx.c **** #endif
 460:../../../os/rt/src/chmtx.c ****       tp = queue_fifo_remove(&mp->queue);
 461:../../../os/rt/src/chmtx.c ****       mp->owner = tp;
 898               		.loc 1 461 0
 899 0066 FD83      		std Y+5,r31
 900 0068 EC83      		std Y+4,r30
 462:../../../os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 901               		.loc 1 462 0
 902 006a 818D      		ldd r24,Z+25
 903 006c 928D      		ldd r25,Z+26
 904               	.LVL74:
 905 006e 9F83      		std Y+7,r25
 906 0070 8E83      		std Y+6,r24
 463:../../../os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 907               		.loc 1 463 0
 908 0072 D28F      		std Z+26,r29
 909 0074 C18F      		std Z+25,r28
 464:../../../os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 910               		.loc 1 464 0
 911 0076 CF01      		movw r24,r30
 912               	/* epilogue start */
 913               	.LBE168:
 465:../../../os/rt/src/chmtx.c ****     }
 466:../../../os/rt/src/chmtx.c ****     else {
 467:../../../os/rt/src/chmtx.c ****       mp->owner = NULL;
 468:../../../os/rt/src/chmtx.c ****     }
 469:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 470:../../../os/rt/src/chmtx.c ****   }
 471:../../../os/rt/src/chmtx.c **** #endif
 472:../../../os/rt/src/chmtx.c **** }
 914               		.loc 1 472 0
 915 0078 DF91      		pop r29
 916 007a CF91      		pop r28
 917               	.LVL75:
 918               	.LBB175:
 464:../../../os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 919               		.loc 1 464 0
 920 007c 0C94 0000 		jmp chSchReadyI
 921               	.LVL76:
 922               	.L49:
 923               	.LBE175:
 467:../../../os/rt/src/chmtx.c ****     }
 924               		.loc 1 467 0
 925 0080 1596      		adiw r26,4+1
 926 0082 1C92      		st X,__zero_reg__
 927 0084 1E92      		st -X,__zero_reg__
 928 0086 1497      		sbiw r26,4
 929               	/* epilogue start */
 930               		.loc 1 472 0
 931 0088 DF91      		pop r29
 932 008a CF91      		pop r28
 933 008c 0895      		ret
 934               		.cfi_endproc
 935               	.LFE119:
 937               		.section	.text.chMtxUnlockAllS,"ax",@progbits
 938               	.global	chMtxUnlockAllS
 940               	chMtxUnlockAllS:
 941               	.LFB120:
 473:../../../os/rt/src/chmtx.c **** 
 474:../../../os/rt/src/chmtx.c **** /**
 475:../../../os/rt/src/chmtx.c ****  * @brief   Unlocks all mutexes owned by the invoking thread.
 476:../../../os/rt/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 477:../../../os/rt/src/chmtx.c ****  *          mutexes are unlocked.
 478:../../../os/rt/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 479:../../../os/rt/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 480:../../../os/rt/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 481:../../../os/rt/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 482:../../../os/rt/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 483:../../../os/rt/src/chmtx.c ****  *          inheritance mechanism.
 484:../../../os/rt/src/chmtx.c ****  *
 485:../../../os/rt/src/chmtx.c ****  * @sclass
 486:../../../os/rt/src/chmtx.c ****  */
 487:../../../os/rt/src/chmtx.c **** void chMtxUnlockAllS(void) {
 942               		.loc 1 487 0
 943               		.cfi_startproc
 944 0000 0F93      		push r16
 945               	.LCFI8:
 946               		.cfi_def_cfa_offset 4
 947               		.cfi_offset 16, -3
 948 0002 1F93      		push r17
 949               	.LCFI9:
 950               		.cfi_def_cfa_offset 5
 951               		.cfi_offset 17, -4
 952 0004 CF93      		push r28
 953               	.LCFI10:
 954               		.cfi_def_cfa_offset 6
 955               		.cfi_offset 28, -5
 956 0006 DF93      		push r29
 957               	.LCFI11:
 958               		.cfi_def_cfa_offset 7
 959               		.cfi_offset 29, -6
 960               	/* prologue: function */
 961               	/* frame size = 0 */
 962               	/* stack size = 4 */
 963               	.L__stack_usage = 4
 488:../../../os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 964               		.loc 1 488 0
 965 0008 0091 0000 		lds r16,ch+11
 966 000c 1091 0000 		lds r17,ch+11+1
 967               	.LVL77:
 968               	.L59:
 489:../../../os/rt/src/chmtx.c **** 
 490:../../../os/rt/src/chmtx.c ****   while (ctp->mtxlist != NULL) {
 969               		.loc 1 490 0
 970 0010 D801      		movw r26,r16
 971 0012 5996      		adiw r26,25
 972 0014 ED91      		ld r30,X+
 973 0016 FC91      		ld r31,X
 974 0018 5A97      		sbiw r26,25+1
 975 001a 3097      		sbiw r30,0
 976 001c 01F0      		breq .L63
 977               	.L62:
 978               	.LVL78:
 979               	.LBB176:
 491:../../../os/rt/src/chmtx.c ****     mutex_t *mp = ctp->mtxlist;
 492:../../../os/rt/src/chmtx.c ****     ctp->mtxlist = mp->next;
 980               		.loc 1 492 0
 981 001e 8681      		ldd r24,Z+6
 982 0020 9781      		ldd r25,Z+7
 983 0022 D801      		movw r26,r16
 984 0024 5A96      		adiw r26,25+1
 985 0026 9C93      		st X,r25
 986 0028 8E93      		st -X,r24
 987 002a 5997      		sbiw r26,25
 988               	.LVL79:
 989               	.LBB177:
 990               	.LBB178:
 991               	.LBB179:
 992               	.LBB180:
 577:../../../os/rt/include/chschd.h **** }
 993               		.loc 2 577 0
 994 002c A081      		ld r26,Z
 995 002e B181      		ldd r27,Z+1
 996               	.LVL80:
 997               	.LBE180:
 998               	.LBE179:
 999               	.LBE178:
 1000               	.LBE177:
 493:../../../os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 1001               		.loc 1 493 0
 1002 0030 EA17      		cp r30,r26
 1003 0032 FB07      		cpc r31,r27
 1004 0034 01F0      		breq .L60
 1005               	.LVL81:
 1006               	.LBB181:
 1007               	.LBB182:
 1008               	.LBB183:
 620:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1009               		.loc 2 620 0
 1010 0036 8D91      		ld r24,X+
 1011 0038 9C91      		ld r25,X
 1012 003a 1197      		sbiw r26,1
 1013 003c 9183      		std Z+1,r25
 1014 003e 8083      		st Z,r24
 621:../../../os/rt/include/chschd.h **** 
 1015               		.loc 2 621 0
 1016 0040 EC01      		movw r28,r24
 1017 0042 FB83      		std Y+3,r31
 1018 0044 EA83      		std Y+2,r30
 1019               	.LVL82:
 1020               	.LBE183:
 1021               	.LBE182:
 494:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 495:../../../os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 496:../../../os/rt/src/chmtx.c **** #endif
 497:../../../os/rt/src/chmtx.c ****       thread_t *tp = queue_fifo_remove(&mp->queue);
 498:../../../os/rt/src/chmtx.c ****       mp->owner = tp;
 1022               		.loc 1 498 0
 1023 0046 B583      		std Z+5,r27
 1024 0048 A483      		std Z+4,r26
 499:../../../os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 1025               		.loc 1 499 0
 1026 004a 5996      		adiw r26,25
 1027 004c 8D91      		ld r24,X+
 1028 004e 9C91      		ld r25,X
 1029 0050 5A97      		sbiw r26,25+1
 1030 0052 9783      		std Z+7,r25
 1031 0054 8683      		std Z+6,r24
 500:../../../os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 1032               		.loc 1 500 0
 1033 0056 5A96      		adiw r26,25+1
 1034 0058 FC93      		st X,r31
 1035 005a EE93      		st -X,r30
 1036 005c 5997      		sbiw r26,25
 501:../../../os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 1037               		.loc 1 501 0
 1038 005e CD01      		movw r24,r26
 1039 0060 0E94 0000 		call chSchReadyI
 1040               	.LVL83:
 1041               	.LBE181:
 1042               	.LBE176:
 490:../../../os/rt/src/chmtx.c ****     mutex_t *mp = ctp->mtxlist;
 1043               		.loc 1 490 0
 1044 0064 D801      		movw r26,r16
 1045 0066 5996      		adiw r26,25
 1046 0068 ED91      		ld r30,X+
 1047 006a FC91      		ld r31,X
 1048 006c 5A97      		sbiw r26,25+1
 1049 006e 3097      		sbiw r30,0
 1050 0070 01F4      		brne .L62
 1051               	.L63:
 502:../../../os/rt/src/chmtx.c ****     }
 503:../../../os/rt/src/chmtx.c ****     else {
 504:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 505:../../../os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)0;
 506:../../../os/rt/src/chmtx.c **** #endif
 507:../../../os/rt/src/chmtx.c ****       mp->owner = NULL;
 508:../../../os/rt/src/chmtx.c ****     }
 509:../../../os/rt/src/chmtx.c ****   }
 510:../../../os/rt/src/chmtx.c ****   ctp->prio = ctp->realprio;
 1052               		.loc 1 510 0
 1053 0072 5B96      		adiw r26,27
 1054 0074 8C91      		ld r24,X
 1055 0076 5B97      		sbiw r26,27
 1056 0078 1496      		adiw r26,4
 1057 007a 8C93      		st X,r24
 1058               	/* epilogue start */
 511:../../../os/rt/src/chmtx.c **** }
 1059               		.loc 1 511 0
 1060 007c DF91      		pop r29
 1061 007e CF91      		pop r28
 1062 0080 1F91      		pop r17
 1063 0082 0F91      		pop r16
 1064               	.LVL84:
 1065 0084 0895      		ret
 1066               	.LVL85:
 1067               	.L60:
 1068               	.LBB184:
 507:../../../os/rt/src/chmtx.c ****     }
 1069               		.loc 1 507 0
 1070 0086 1582      		std Z+5,__zero_reg__
 1071 0088 1482      		std Z+4,__zero_reg__
 1072 008a 00C0      		rjmp .L59
 1073               	.LBE184:
 1074               		.cfi_endproc
 1075               	.LFE120:
 1077               		.section	.text.chMtxUnlockAll,"ax",@progbits
 1078               	.global	chMtxUnlockAll
 1080               	chMtxUnlockAll:
 1081               	.LFB121:
 512:../../../os/rt/src/chmtx.c **** 
 513:../../../os/rt/src/chmtx.c **** /**
 514:../../../os/rt/src/chmtx.c ****  * @brief   Unlocks all mutexes owned by the invoking thread.
 515:../../../os/rt/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 516:../../../os/rt/src/chmtx.c ****  *          mutexes are unlocked.
 517:../../../os/rt/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 518:../../../os/rt/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 519:../../../os/rt/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 520:../../../os/rt/src/chmtx.c ****  *          inheritance mechanism.
 521:../../../os/rt/src/chmtx.c ****  *
 522:../../../os/rt/src/chmtx.c ****  * @api
 523:../../../os/rt/src/chmtx.c ****  */
 524:../../../os/rt/src/chmtx.c **** void chMtxUnlockAll(void) {
 1082               		.loc 1 524 0
 1083               		.cfi_startproc
 1084 0000 0F93      		push r16
 1085               	.LCFI12:
 1086               		.cfi_def_cfa_offset 4
 1087               		.cfi_offset 16, -3
 1088 0002 1F93      		push r17
 1089               	.LCFI13:
 1090               		.cfi_def_cfa_offset 5
 1091               		.cfi_offset 17, -4
 1092 0004 CF93      		push r28
 1093               	.LCFI14:
 1094               		.cfi_def_cfa_offset 6
 1095               		.cfi_offset 28, -5
 1096 0006 DF93      		push r29
 1097               	.LCFI15:
 1098               		.cfi_def_cfa_offset 7
 1099               		.cfi_offset 29, -6
 1100               	/* prologue: function */
 1101               	/* frame size = 0 */
 1102               	/* stack size = 4 */
 1103               	.L__stack_usage = 4
 525:../../../os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 1104               		.loc 1 525 0
 1105 0008 0091 0000 		lds r16,ch+11
 1106 000c 1091 0000 		lds r17,ch+11+1
 1107               	.LVL86:
 1108               	.LBB185:
 1109               	.LBB186:
 1110               	.LBB187:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1111               		.loc 3 437 0
 1112               	/* #APP */
 1113               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1114 0010 F894      		cli
 1115               	 ;  0 "" 2
 1116               	/* #NOAPP */
 1117               	.LBE187:
 1118               	.LBE186:
 1119               	.LBE185:
 526:../../../os/rt/src/chmtx.c **** 
 527:../../../os/rt/src/chmtx.c ****   chSysLock();
 528:../../../os/rt/src/chmtx.c ****   if (ctp->mtxlist != NULL) {
 1120               		.loc 1 528 0
 1121 0012 D801      		movw r26,r16
 1122 0014 5996      		adiw r26,25
 1123 0016 ED91      		ld r30,X+
 1124 0018 FC91      		ld r31,X
 1125 001a 5A97      		sbiw r26,25+1
 1126 001c 3097      		sbiw r30,0
 1127 001e 01F4      		brne .L68
 1128 0020 00C0      		rjmp .L65
 1129               	.LVL87:
 1130               	.L74:
 1131               	.LBB188:
 1132               	.LBB189:
 1133               	.LBB190:
 1134               	.LBB191:
 620:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1135               		.loc 2 620 0
 1136 0022 8D91      		ld r24,X+
 1137 0024 9C91      		ld r25,X
 1138 0026 1197      		sbiw r26,1
 1139 0028 9183      		std Z+1,r25
 1140 002a 8083      		st Z,r24
 621:../../../os/rt/include/chschd.h **** 
 1141               		.loc 2 621 0
 1142 002c EC01      		movw r28,r24
 1143 002e FB83      		std Y+3,r31
 1144 0030 EA83      		std Y+2,r30
 1145               	.LVL88:
 1146               	.LBE191:
 1147               	.LBE190:
 529:../../../os/rt/src/chmtx.c ****     do {
 530:../../../os/rt/src/chmtx.c ****       mutex_t *mp = ctp->mtxlist;
 531:../../../os/rt/src/chmtx.c ****       ctp->mtxlist = mp->next;
 532:../../../os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 533:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 534:../../../os/rt/src/chmtx.c ****         mp->cnt = (cnt_t)1;
 535:../../../os/rt/src/chmtx.c **** #endif
 536:../../../os/rt/src/chmtx.c ****         thread_t *tp = queue_fifo_remove(&mp->queue);
 537:../../../os/rt/src/chmtx.c ****         mp->owner = tp;
 1148               		.loc 1 537 0
 1149 0032 B583      		std Z+5,r27
 1150 0034 A483      		std Z+4,r26
 538:../../../os/rt/src/chmtx.c ****         mp->next = tp->mtxlist;
 1151               		.loc 1 538 0
 1152 0036 5996      		adiw r26,25
 1153 0038 8D91      		ld r24,X+
 1154 003a 9C91      		ld r25,X
 1155 003c 5A97      		sbiw r26,25+1
 1156 003e 9783      		std Z+7,r25
 1157 0040 8683      		std Z+6,r24
 539:../../../os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 1158               		.loc 1 539 0
 1159 0042 5A96      		adiw r26,25+1
 1160 0044 FC93      		st X,r31
 1161 0046 EE93      		st -X,r30
 1162 0048 5997      		sbiw r26,25
 540:../../../os/rt/src/chmtx.c ****         (void) chSchReadyI(tp);
 1163               		.loc 1 540 0
 1164 004a CD01      		movw r24,r26
 1165 004c 0E94 0000 		call chSchReadyI
 1166               	.LVL89:
 1167               	.LBE189:
 1168               	.LBE188:
 541:../../../os/rt/src/chmtx.c ****       }
 542:../../../os/rt/src/chmtx.c ****       else {
 543:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 544:../../../os/rt/src/chmtx.c ****         mp->cnt = (cnt_t)0;
 545:../../../os/rt/src/chmtx.c **** #endif
 546:../../../os/rt/src/chmtx.c ****         mp->owner = NULL;
 547:../../../os/rt/src/chmtx.c ****       }
 548:../../../os/rt/src/chmtx.c ****     } while (ctp->mtxlist != NULL);
 1169               		.loc 1 548 0
 1170 0050 D801      		movw r26,r16
 1171 0052 5996      		adiw r26,25
 1172 0054 ED91      		ld r30,X+
 1173 0056 FC91      		ld r31,X
 1174 0058 5A97      		sbiw r26,25+1
 1175 005a 3097      		sbiw r30,0
 1176 005c 01F0      		breq .L73
 1177               	.L68:
 1178               	.LVL90:
 1179               	.LBB196:
 531:../../../os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 1180               		.loc 1 531 0
 1181 005e 8681      		ldd r24,Z+6
 1182 0060 9781      		ldd r25,Z+7
 1183 0062 E801      		movw r28,r16
 1184 0064 9A8F      		std Y+26,r25
 1185 0066 898F      		std Y+25,r24
 1186               	.LVL91:
 1187               	.LBB192:
 1188               	.LBB193:
 1189               	.LBB194:
 1190               	.LBB195:
 577:../../../os/rt/include/chschd.h **** }
 1191               		.loc 2 577 0
 1192 0068 A081      		ld r26,Z
 1193 006a B181      		ldd r27,Z+1
 1194               	.LVL92:
 1195               	.LBE195:
 1196               	.LBE194:
 1197               	.LBE193:
 1198               	.LBE192:
 532:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 1199               		.loc 1 532 0
 1200 006c EA17      		cp r30,r26
 1201 006e FB07      		cpc r31,r27
 1202 0070 01F4      		brne .L74
 546:../../../os/rt/src/chmtx.c ****       }
 1203               		.loc 1 546 0
 1204 0072 1582      		std Z+5,__zero_reg__
 1205 0074 1482      		std Z+4,__zero_reg__
 1206               	.LBE196:
 1207               		.loc 1 548 0
 1208 0076 D801      		movw r26,r16
 1209 0078 5996      		adiw r26,25
 1210 007a ED91      		ld r30,X+
 1211 007c FC91      		ld r31,X
 1212 007e 5A97      		sbiw r26,25+1
 1213 0080 3097      		sbiw r30,0
 1214 0082 01F4      		brne .L68
 1215               	.L73:
 549:../../../os/rt/src/chmtx.c ****     ctp->prio = ctp->realprio;
 1216               		.loc 1 549 0
 1217 0084 5B96      		adiw r26,27
 1218 0086 8C91      		ld r24,X
 1219 0088 5B97      		sbiw r26,27
 1220 008a 1496      		adiw r26,4
 1221 008c 8C93      		st X,r24
 550:../../../os/rt/src/chmtx.c ****     chSchRescheduleS();
 1222               		.loc 1 550 0
 1223 008e 0E94 0000 		call chSchRescheduleS
 1224               	.LVL93:
 1225               	.L65:
 1226               	.LBB197:
 1227               	.LBB198:
 1228               	.LBB199:
 1229               	.LBB200:
 1230               		.loc 3 447 0
 1231               	/* #APP */
 1232               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1233 0092 7894      		sei
 1234               	 ;  0 "" 2
 1235               	/* epilogue start */
 1236               	/* #NOAPP */
 1237               	.LBE200:
 1238               	.LBE199:
 1239               	.LBE198:
 1240               	.LBE197:
 551:../../../os/rt/src/chmtx.c ****   }
 552:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 553:../../../os/rt/src/chmtx.c **** }
 1241               		.loc 1 553 0
 1242 0094 DF91      		pop r29
 1243 0096 CF91      		pop r28
 1244 0098 1F91      		pop r17
 1245 009a 0F91      		pop r16
 1246               	.LVL94:
 1247 009c 0895      		ret
 1248               		.cfi_endproc
 1249               	.LFE121:
 1251               		.text
 1252               	.Letext0:
 1253               		.file 4 "/usr/lib/avr/include/stdint.h"
 1254               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1255               		.file 6 "../../../os/rt/include/chsystypes.h"
 1256               		.file 7 "../../../os/rt/include/chsem.h"
 1257               		.file 8 "../../../os/rt/include/chmtx.h"
 1258               		.file 9 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmtx.c
     /tmp/cclcOWMW.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclcOWMW.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclcOWMW.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclcOWMW.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cclcOWMW.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclcOWMW.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclcOWMW.s:14     .text.chMtxObjectInit:0000000000000000 chMtxObjectInit
     /tmp/cclcOWMW.s:48     .text.chMtxLockS:0000000000000000 chMtxLockS
     /tmp/cclcOWMW.s:396    .text.chMtxLock:0000000000000000 chMtxLock
     /tmp/cclcOWMW.s:442    .text.chMtxTryLock:0000000000000000 chMtxTryLock
     /tmp/cclcOWMW.s:547    .text.chMtxTryLockS:0000000000000000 chMtxTryLockS
     /tmp/cclcOWMW.s:602    .text.chMtxUnlock:0000000000000000 chMtxUnlock
     /tmp/cclcOWMW.s:794    .text.chMtxUnlockS:0000000000000000 chMtxUnlockS
     /tmp/cclcOWMW.s:940    .text.chMtxUnlockAllS:0000000000000000 chMtxUnlockAllS
     /tmp/cclcOWMW.s:1080   .text.chMtxUnlockAll:0000000000000000 chMtxUnlockAll

UNDEFINED SYMBOLS
ch
chSchGoSleepS
chSchReadyI
chSchRescheduleS

   1               		.file	"chvt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text._vt_init,"ax",@progbits
  12               	.global	_vt_init
  14               	_vt_init:
  15               	.LFB113:
  16               		.file 1 "../../../os/rt/src/chvt.c"
   1:../../../os/rt/src/chvt.c **** /*
   2:../../../os/rt/src/chvt.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/rt/src/chvt.c **** 
   4:../../../os/rt/src/chvt.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chvt.c **** 
   6:../../../os/rt/src/chvt.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chvt.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chvt.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chvt.c ****     (at your option) any later version.
  10:../../../os/rt/src/chvt.c **** 
  11:../../../os/rt/src/chvt.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chvt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chvt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chvt.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chvt.c **** 
  16:../../../os/rt/src/chvt.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chvt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chvt.c **** */
  19:../../../os/rt/src/chvt.c **** 
  20:../../../os/rt/src/chvt.c **** /**
  21:../../../os/rt/src/chvt.c ****  * @file    chvt.c
  22:../../../os/rt/src/chvt.c ****  * @brief   Time and Virtual Timers module code.
  23:../../../os/rt/src/chvt.c ****  *
  24:../../../os/rt/src/chvt.c ****  * @addtogroup time
  25:../../../os/rt/src/chvt.c ****  * @details Time and Virtual Timers related APIs and services.
  26:../../../os/rt/src/chvt.c ****  * @{
  27:../../../os/rt/src/chvt.c ****  */
  28:../../../os/rt/src/chvt.c **** 
  29:../../../os/rt/src/chvt.c **** #include "ch.h"
  30:../../../os/rt/src/chvt.c **** 
  31:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  32:../../../os/rt/src/chvt.c **** /* Module local definitions.                                                 */
  33:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  34:../../../os/rt/src/chvt.c **** 
  35:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  36:../../../os/rt/src/chvt.c **** /* Module exported variables.                                                */
  37:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  38:../../../os/rt/src/chvt.c **** 
  39:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  40:../../../os/rt/src/chvt.c **** /* Module local types.                                                       */
  41:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  42:../../../os/rt/src/chvt.c **** 
  43:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  44:../../../os/rt/src/chvt.c **** /* Module local variables.                                                   */
  45:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  46:../../../os/rt/src/chvt.c **** 
  47:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  48:../../../os/rt/src/chvt.c **** /* Module local functions.                                                   */
  49:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  50:../../../os/rt/src/chvt.c **** 
  51:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  52:../../../os/rt/src/chvt.c **** /* Module exported functions.                                                */
  53:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  54:../../../os/rt/src/chvt.c **** 
  55:../../../os/rt/src/chvt.c **** /**
  56:../../../os/rt/src/chvt.c ****  * @brief   Virtual Timers initialization.
  57:../../../os/rt/src/chvt.c ****  * @note    Internal use only.
  58:../../../os/rt/src/chvt.c ****  *
  59:../../../os/rt/src/chvt.c ****  * @notapi
  60:../../../os/rt/src/chvt.c ****  */
  61:../../../os/rt/src/chvt.c **** void _vt_init(void) {
  17               		.loc 1 61 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  62:../../../os/rt/src/chvt.c **** 
  63:../../../os/rt/src/chvt.c ****   ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  23               		.loc 1 63 0
  24 0000 E0E0      		ldi r30,lo8(ch)
  25 0002 F0E0      		ldi r31,hi8(ch)
  26 0004 80E0      		ldi r24,lo8(ch+13)
  27 0006 90E0      		ldi r25,hi8(ch+13)
  28 0008 9687      		std Z+14,r25
  29 000a 8587      		std Z+13,r24
  64:../../../os/rt/src/chvt.c ****   ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  30               		.loc 1 64 0
  31 000c 908B      		std Z+16,r25
  32 000e 8787      		std Z+15,r24
  65:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (systime_t)-1;
  33               		.loc 1 65 0
  34 0010 8FEF      		ldi r24,lo8(-1)
  35 0012 9FEF      		ldi r25,lo8(-1)
  36 0014 928B      		std Z+18,r25
  37 0016 818B      		std Z+17,r24
  66:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
  67:../../../os/rt/src/chvt.c ****   ch.vtlist.systime = (systime_t)0;
  68:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
  69:../../../os/rt/src/chvt.c ****   ch.vtlist.lasttime = (systime_t)0;
  38               		.loc 1 69 0
  39 0018 148A      		std Z+20,__zero_reg__
  40 001a 138A      		std Z+19,__zero_reg__
  41 001c 0895      		ret
  42               		.cfi_endproc
  43               	.LFE113:
  45               		.section	.text.chVTDoSetI,"ax",@progbits
  46               	.global	chVTDoSetI
  48               	chVTDoSetI:
  49               	.LFB114:
  70:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
  71:../../../os/rt/src/chvt.c **** }
  72:../../../os/rt/src/chvt.c **** 
  73:../../../os/rt/src/chvt.c **** /**
  74:../../../os/rt/src/chvt.c ****  * @brief   Enables a virtual timer.
  75:../../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
  76:../../../os/rt/src/chvt.c ****  *          specified as parameter.
  77:../../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
  78:../../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
  79:../../../os/rt/src/chvt.c ****  *
  80:../../../os/rt/src/chvt.c ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  81:../../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
  82:../../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
  83:../../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
  84:../../../os/rt/src/chvt.c ****  *                        normal time specification.
  85:../../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
  86:../../../os/rt/src/chvt.c ****  *                      .
  87:../../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
  88:../../../os/rt/src/chvt.c ****  *                      callback the timer is disabled and the structure can
  89:../../../os/rt/src/chvt.c ****  *                      be disposed or reused.
  90:../../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
  91:../../../os/rt/src/chvt.c ****  *                      function
  92:../../../os/rt/src/chvt.c ****  *
  93:../../../os/rt/src/chvt.c ****  * @iclass
  94:../../../os/rt/src/chvt.c ****  */
  95:../../../os/rt/src/chvt.c **** void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
  96:../../../os/rt/src/chvt.c ****                 vtfunc_t vtfunc, void *par) {
  50               		.loc 1 96 0
  51               		.cfi_startproc
  52               	.LVL0:
  53 0000 EF92      		push r14
  54               	.LCFI0:
  55               		.cfi_def_cfa_offset 4
  56               		.cfi_offset 14, -3
  57 0002 FF92      		push r15
  58               	.LCFI1:
  59               		.cfi_def_cfa_offset 5
  60               		.cfi_offset 15, -4
  61 0004 0F93      		push r16
  62               	.LCFI2:
  63               		.cfi_def_cfa_offset 6
  64               		.cfi_offset 16, -5
  65 0006 1F93      		push r17
  66               	.LCFI3:
  67               		.cfi_def_cfa_offset 7
  68               		.cfi_offset 17, -6
  69 0008 CF93      		push r28
  70               	.LCFI4:
  71               		.cfi_def_cfa_offset 8
  72               		.cfi_offset 28, -7
  73 000a DF93      		push r29
  74               	.LCFI5:
  75               		.cfi_def_cfa_offset 9
  76               		.cfi_offset 29, -8
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 6 */
  80               	.L__stack_usage = 6
  81 000c 7C01      		movw r14,r24
  97:../../../os/rt/src/chvt.c ****   virtual_timer_t *p;
  98:../../../os/rt/src/chvt.c ****   systime_t delta;
  99:../../../os/rt/src/chvt.c **** 
 100:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 101:../../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 102:../../../os/rt/src/chvt.c **** 
 103:../../../os/rt/src/chvt.c ****   vtp->par = par;
  82               		.loc 1 103 0
  83 000e DC01      		movw r26,r24
  84 0010 1996      		adiw r26,8+1
  85 0012 3C93      		st X,r19
  86 0014 2E93      		st -X,r18
  87 0016 1897      		sbiw r26,8
 104:../../../os/rt/src/chvt.c ****   vtp->func = vtfunc;
  88               		.loc 1 104 0
  89 0018 1796      		adiw r26,6+1
  90 001a 5C93      		st X,r21
  91 001c 4E93      		st -X,r20
  92 001e 1697      		sbiw r26,6
  93               	.LBB27:
  94               	.LBB28:
  95               	.LBB29:
  96               	.LBB30:
  97               	.LBB31:
  98               		.file 2 "../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @file    hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  34:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  38:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
  41:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * TODO: for models that have many timers,
  42:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *       could add AVR_ST_USE_TIMER
  43:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  44:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  45:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  46:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  47:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  48:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  49:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*
  50:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * TODO: error checks for valid timer selected
  51:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  52:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  53:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  54:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
  55:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  56:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  57:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  58:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
  59:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  60:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  61:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  62:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
  63:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  64:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  65:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  66:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** extern "C" {
  67:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  68:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  69:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  70:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** }
  71:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  72:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  73:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  74:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  75:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  76:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #else
  77:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  78:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  79:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** #endif
  80:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  81:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  82:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
  83:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  84:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  85:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** /**
  86:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  87:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  88:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  89:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  *
  90:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  * @notapi
  91:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****  */
  92:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
  93:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h **** 
  94:../../../os/hal/ports/AVR/MEGA/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
  99               		.loc 2 94 0
 100 0020 2091 8400 		lds r18,132
 101 0024 3091 8500 		lds r19,132+1
 102               	.LVL1:
 103               	.LBE31:
 104               	.LBE30:
 105               	.LBE29:
 106               	.LBE28:
 105:../../../os/rt/src/chvt.c **** 
 106:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 107:../../../os/rt/src/chvt.c ****   {
 108:../../../os/rt/src/chvt.c ****     systime_t now = chVTGetSystemTimeX();
 109:../../../os/rt/src/chvt.c **** 
 110:../../../os/rt/src/chvt.c ****     /* If the requested delay is lower than the minimum safe delta then it
 111:../../../os/rt/src/chvt.c ****        is raised to the minimum safe value.*/
 112:../../../os/rt/src/chvt.c ****     if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
 107               		.loc 1 112 0
 108 0028 6230      		cpi r22,2
 109 002a 7105      		cpc r23,__zero_reg__
 110 002c 00F4      		brsh .+2
 111 002e 00C0      		rjmp .L16
 112               	.LVL2:
 113               	.L3:
 113:../../../os/rt/src/chvt.c ****       delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 114:../../../os/rt/src/chvt.c ****     }
 115:../../../os/rt/src/chvt.c **** 
 116:../../../os/rt/src/chvt.c ****     /* Special case where the timers list is empty.*/
 117:../../../os/rt/src/chvt.c ****     if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 114               		.loc 1 117 0
 115 0030 0091 0000 		lds r16,ch+13
 116 0034 1091 0000 		lds r17,ch+13+1
 117 0038 B0E0      		ldi r27,hi8(ch+13)
 118 003a 0030      		cpi r16,lo8(ch+13)
 119 003c 1B07      		cpc r17,r27
 120 003e 01F4      		brne .+2
 121 0040 00C0      		rjmp .L17
 122               	.LVL3:
 118:../../../os/rt/src/chvt.c **** 
 119:../../../os/rt/src/chvt.c ****       /* The delta list is empty, the current time becomes the new
 120:../../../os/rt/src/chvt.c ****          delta list base time, the timer is inserted.*/
 121:../../../os/rt/src/chvt.c ****       ch.vtlist.lasttime = now;
 122:../../../os/rt/src/chvt.c ****       ch.vtlist.next = vtp;
 123:../../../os/rt/src/chvt.c ****       ch.vtlist.prev = vtp;
 124:../../../os/rt/src/chvt.c ****       vtp->next = (virtual_timer_t *)&ch.vtlist;
 125:../../../os/rt/src/chvt.c ****       vtp->prev = (virtual_timer_t *)&ch.vtlist;
 126:../../../os/rt/src/chvt.c ****       vtp->delta = delay;
 127:../../../os/rt/src/chvt.c **** 
 128:../../../os/rt/src/chvt.c ****       /* Being the first element in the list the alarm timer is started.*/
 129:../../../os/rt/src/chvt.c ****       port_timer_start_alarm(ch.vtlist.lasttime + delay);
 130:../../../os/rt/src/chvt.c **** 
 131:../../../os/rt/src/chvt.c ****       return;
 132:../../../os/rt/src/chvt.c ****     }
 133:../../../os/rt/src/chvt.c **** 
 134:../../../os/rt/src/chvt.c ****     /* Pointer to the first element in the delta list, which is non-empty.*/
 135:../../../os/rt/src/chvt.c ****     p = ch.vtlist.next;
 136:../../../os/rt/src/chvt.c **** 
 137:../../../os/rt/src/chvt.c ****     /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 138:../../../os/rt/src/chvt.c ****        becomes lower than 'now'.*/
 139:../../../os/rt/src/chvt.c ****     delta = now - ch.vtlist.lasttime + delay;
 123               		.loc 1 139 0
 124 0042 8091 0000 		lds r24,ch+19
 125 0046 9091 0000 		lds r25,ch+19+1
 126               	.LVL4:
 127 004a 281B      		sub r18,r24
 128 004c 390B      		sbc r19,r25
 129 004e EB01      		movw r28,r22
 130 0050 C20F      		add r28,r18
 131 0052 D31F      		adc r29,r19
 132               	.LVL5:
 140:../../../os/rt/src/chvt.c **** 
 141:../../../os/rt/src/chvt.c ****     if (delta < now - ch.vtlist.lasttime) {
 142:../../../os/rt/src/chvt.c ****       /* Scenario where a very large delay excedeed the numeric range, it
 143:../../../os/rt/src/chvt.c ****          requires a special handling. We need to skip the first element and
 144:../../../os/rt/src/chvt.c ****          adjust the delta to wrap back in the previous numeric range.*/
 145:../../../os/rt/src/chvt.c ****       delta -= p->delta;
 133               		.loc 1 145 0
 134 0054 D801      		movw r26,r16
 141:../../../os/rt/src/chvt.c ****       /* Scenario where a very large delay excedeed the numeric range, it
 135               		.loc 1 141 0
 136 0056 C217      		cp r28,r18
 137 0058 D307      		cpc r29,r19
 138 005a 00F0      		brlo .L18
 146:../../../os/rt/src/chvt.c ****       p = p->next;
 147:../../../os/rt/src/chvt.c ****     }
 148:../../../os/rt/src/chvt.c ****     else if (delta < p->delta) {
 139               		.loc 1 148 0
 140 005c 1496      		adiw r26,4
 141 005e 2D91      		ld r18,X+
 142 0060 3C91      		ld r19,X
 143 0062 1597      		sbiw r26,4+1
 144 0064 C217      		cp r28,r18
 145 0066 D307      		cpc r29,r19
 146 0068 00F4      		brsh .L8
 147 006a 00C0      		rjmp .L19
 148               	.LVL6:
 149               	.L11:
 150               	.LBE27:
 149:../../../os/rt/src/chvt.c ****      /* A small delay that will become the first element in the delta list
 150:../../../os/rt/src/chvt.c ****         and next deadline.*/
 151:../../../os/rt/src/chvt.c ****       port_timer_set_alarm(ch.vtlist.lasttime + delta);
 152:../../../os/rt/src/chvt.c ****     }
 153:../../../os/rt/src/chvt.c ****   }
 154:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA == 0 */
 155:../../../os/rt/src/chvt.c ****   /* Delta is initially equal to the specified delay.*/
 156:../../../os/rt/src/chvt.c ****   delta = delay;
 157:../../../os/rt/src/chvt.c **** 
 158:../../../os/rt/src/chvt.c ****   /* Pointer to the first element in the delta list.*/
 159:../../../os/rt/src/chvt.c ****   p = ch.vtlist.next;
 160:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA == 0 */
 161:../../../os/rt/src/chvt.c **** 
 162:../../../os/rt/src/chvt.c ****   /* The delta list is scanned in order to find the correct position for
 163:../../../os/rt/src/chvt.c ****      this timer. */
 164:../../../os/rt/src/chvt.c ****   while (p->delta < delta) {
 165:../../../os/rt/src/chvt.c ****     delta -= p->delta;
 151               		.loc 1 165 0
 152 006c C21B      		sub r28,r18
 153 006e D30B      		sbc r29,r19
 154               	.LVL7:
 166:../../../os/rt/src/chvt.c ****     p = p->next;
 155               		.loc 1 166 0
 156 0070 D801      		movw r26,r16
 157               	.LVL8:
 158               	.L13:
 159               	.LBB38:
 146:../../../os/rt/src/chvt.c ****       p = p->next;
 160               		.loc 1 146 0
 161 0072 0D91      		ld r16,X+
 162 0074 1C91      		ld r17,X
 163               	.LVL9:
 164 0076 F801      		movw r30,r16
 165 0078 2481      		ldd r18,Z+4
 166 007a 3581      		ldd r19,Z+5
 167               	.L8:
 168               	.LBE38:
 164:../../../os/rt/src/chvt.c ****     delta -= p->delta;
 169               		.loc 1 164 0
 170 007c 2C17      		cp r18,r28
 171 007e 3D07      		cpc r19,r29
 172 0080 00F0      		brlo .L11
 167:../../../os/rt/src/chvt.c ****   }
 168:../../../os/rt/src/chvt.c **** 
 169:../../../os/rt/src/chvt.c ****   /* The timer is inserted in the delta list.*/
 170:../../../os/rt/src/chvt.c ****   vtp->next = p;
 173               		.loc 1 170 0
 174 0082 D701      		movw r26,r14
 175 0084 0D93      		st X+,r16
 176 0086 1C93      		st X,r17
 171:../../../os/rt/src/chvt.c ****   vtp->prev = vtp->next->prev;
 177               		.loc 1 171 0
 178 0088 D801      		movw r26,r16
 179 008a 1296      		adiw r26,2
 180 008c ED91      		ld r30,X+
 181 008e FC91      		ld r31,X
 182 0090 1397      		sbiw r26,2+1
 183 0092 D701      		movw r26,r14
 184 0094 1396      		adiw r26,2+1
 185 0096 FC93      		st X,r31
 186 0098 EE93      		st -X,r30
 187 009a 1297      		sbiw r26,2
 172:../../../os/rt/src/chvt.c ****   vtp->prev->next = vtp;
 188               		.loc 1 172 0
 189 009c F182      		std Z+1,r15
 190 009e E082      		st Z,r14
 173:../../../os/rt/src/chvt.c ****   p->prev = vtp;
 191               		.loc 1 173 0
 192 00a0 F801      		movw r30,r16
 193 00a2 F382      		std Z+3,r15
 194 00a4 E282      		std Z+2,r14
 174:../../../os/rt/src/chvt.c ****   vtp->delta = delta
 195               		.loc 1 174 0
 196 00a6 1596      		adiw r26,4+1
 197 00a8 DC93      		st X,r29
 198 00aa CE93      		st -X,r28
 199 00ac 1497      		sbiw r26,4
 175:../../../os/rt/src/chvt.c **** 
 176:../../../os/rt/src/chvt.c ****   /* Special case when the timer is in last position in the list, the
 177:../../../os/rt/src/chvt.c ****      value in the header must be restored.*/;
 178:../../../os/rt/src/chvt.c ****   p->delta -= delta;
 200               		.loc 1 178 0
 201 00ae 8481      		ldd r24,Z+4
 202 00b0 9581      		ldd r25,Z+5
 203 00b2 8C1B      		sub r24,r28
 204 00b4 9D0B      		sbc r25,r29
 205 00b6 9583      		std Z+5,r25
 206 00b8 8483      		std Z+4,r24
 179:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (systime_t)-1;
 207               		.loc 1 179 0
 208 00ba 8FEF      		ldi r24,lo8(-1)
 209 00bc 9FEF      		ldi r25,lo8(-1)
 210 00be 9093 0000 		sts ch+17+1,r25
 211 00c2 8093 0000 		sts ch+17,r24
 212               	/* epilogue start */
 180:../../../os/rt/src/chvt.c **** }
 213               		.loc 1 180 0
 214 00c6 DF91      		pop r29
 215 00c8 CF91      		pop r28
 216               	.LVL10:
 217 00ca 1F91      		pop r17
 218 00cc 0F91      		pop r16
 219               	.LVL11:
 220 00ce FF90      		pop r15
 221 00d0 EF90      		pop r14
 222               	.LVL12:
 223 00d2 0895      		ret
 224               	.LVL13:
 225               	.L18:
 226               	.LBB39:
 145:../../../os/rt/src/chvt.c ****       p = p->next;
 227               		.loc 1 145 0
 228 00d4 1496      		adiw r26,4
 229 00d6 8D91      		ld r24,X+
 230 00d8 9C91      		ld r25,X
 231 00da 1597      		sbiw r26,4+1
 232 00dc C81B      		sub r28,r24
 233 00de D90B      		sbc r29,r25
 234               	.LVL14:
 235 00e0 00C0      		rjmp .L13
 236               	.LVL15:
 237               	.L16:
 113:../../../os/rt/src/chvt.c ****     }
 238               		.loc 1 113 0
 239 00e2 62E0      		ldi r22,lo8(2)
 240 00e4 70E0      		ldi r23,0
 241               	.LVL16:
 242 00e6 00C0      		rjmp .L3
 243               	.LVL17:
 244               	.L19:
 245               	.LBB32:
 246               	.LBB33:
 247               		.file 3 "../../../os/common/ports/AVR/chcore_timer.h"
   1:../../../os/common/ports/AVR/chcore_timer.h **** /*
   2:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore_timer.h **** 
   4:../../../os/common/ports/AVR/chcore_timer.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore_timer.h **** 
   6:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore_timer.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore_timer.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore_timer.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore_timer.h **** 
  11:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore_timer.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore_timer.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore_timer.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore_timer.h **** 
  16:../../../os/common/ports/AVR/chcore_timer.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore_timer.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore_timer.h **** */
  19:../../../os/common/ports/AVR/chcore_timer.h **** 
  20:../../../os/common/ports/AVR/chcore_timer.h **** /**
  21:../../../os/common/ports/AVR/chcore_timer.h ****  * @file    AVR/chcore_timer.h
  22:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   System timer header file.
  23:../../../os/common/ports/AVR/chcore_timer.h ****  *
  24:../../../os/common/ports/AVR/chcore_timer.h ****  * @addtogroup AVR_TIMER
  25:../../../os/common/ports/AVR/chcore_timer.h ****  * @{
  26:../../../os/common/ports/AVR/chcore_timer.h ****  */
  27:../../../os/common/ports/AVR/chcore_timer.h **** 
  28:../../../os/common/ports/AVR/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  29:../../../os/common/ports/AVR/chcore_timer.h **** #define CHCORE_TIMER_H
  30:../../../os/common/ports/AVR/chcore_timer.h **** 
  31:../../../os/common/ports/AVR/chcore_timer.h **** /* This is the only header in the HAL designed to be include-able alone.*/
  32:../../../os/common/ports/AVR/chcore_timer.h **** #include "hal_st.h"
  33:../../../os/common/ports/AVR/chcore_timer.h **** 
  34:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  35:../../../os/common/ports/AVR/chcore_timer.h **** /* Module constants.                                                         */
  36:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore_timer.h **** 
  38:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  40:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore_timer.h **** 
  42:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  43:../../../os/common/ports/AVR/chcore_timer.h **** /* Derived constants and error checks.                                       */
  44:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  45:../../../os/common/ports/AVR/chcore_timer.h **** 
  46:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  47:../../../os/common/ports/AVR/chcore_timer.h **** /* Module data structures and types.                                         */
  48:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  49:../../../os/common/ports/AVR/chcore_timer.h **** 
  50:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  51:../../../os/common/ports/AVR/chcore_timer.h **** /* Module macros.                                                            */
  52:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  53:../../../os/common/ports/AVR/chcore_timer.h **** 
  54:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  55:../../../os/common/ports/AVR/chcore_timer.h **** /* External declarations.                                                    */
  56:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  57:../../../os/common/ports/AVR/chcore_timer.h **** 
  58:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  59:../../../os/common/ports/AVR/chcore_timer.h **** /* Module inline functions.                                                  */
  60:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  61:../../../os/common/ports/AVR/chcore_timer.h **** 
  62:../../../os/common/ports/AVR/chcore_timer.h **** /**
  63:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Starts the alarm.
  64:../../../os/common/ports/AVR/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  65:../../../os/common/ports/AVR/chcore_timer.h ****  *          this call.
  66:../../../os/common/ports/AVR/chcore_timer.h ****  *
  67:../../../os/common/ports/AVR/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  68:../../../os/common/ports/AVR/chcore_timer.h ****  *
  69:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  70:../../../os/common/ports/AVR/chcore_timer.h ****  */
  71:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  72:../../../os/common/ports/AVR/chcore_timer.h **** 
  73:../../../os/common/ports/AVR/chcore_timer.h ****   stStartAlarm(time);
  74:../../../os/common/ports/AVR/chcore_timer.h **** }
  75:../../../os/common/ports/AVR/chcore_timer.h **** 
  76:../../../os/common/ports/AVR/chcore_timer.h **** /**
  77:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  78:../../../os/common/ports/AVR/chcore_timer.h ****  *
  79:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  80:../../../os/common/ports/AVR/chcore_timer.h ****  */
  81:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  82:../../../os/common/ports/AVR/chcore_timer.h **** 
  83:../../../os/common/ports/AVR/chcore_timer.h ****   stStopAlarm();
  84:../../../os/common/ports/AVR/chcore_timer.h **** }
  85:../../../os/common/ports/AVR/chcore_timer.h **** 
  86:../../../os/common/ports/AVR/chcore_timer.h **** /**
  87:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Sets the alarm time.
  88:../../../os/common/ports/AVR/chcore_timer.h ****  *
  89:../../../os/common/ports/AVR/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  90:../../../os/common/ports/AVR/chcore_timer.h ****  *
  91:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  92:../../../os/common/ports/AVR/chcore_timer.h ****  */
  93:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
  94:../../../os/common/ports/AVR/chcore_timer.h **** 
  95:../../../os/common/ports/AVR/chcore_timer.h ****   stSetAlarm(time);
 248               		.loc 3 95 0
 249 00e8 8C0F      		add r24,r28
 250 00ea 9D1F      		adc r25,r29
 251               	.LVL18:
 252 00ec 0E94 0000 		call stSetAlarm
 253               	.LVL19:
 254 00f0 F801      		movw r30,r16
 255 00f2 2481      		ldd r18,Z+4
 256 00f4 3581      		ldd r19,Z+5
 257 00f6 00C0      		rjmp .L8
 258               	.LVL20:
 259               	.L17:
 260               	.LBE33:
 261               	.LBE32:
 121:../../../os/rt/src/chvt.c ****       ch.vtlist.next = vtp;
 262               		.loc 1 121 0
 263 00f8 3093 0000 		sts ch+19+1,r19
 264 00fc 2093 0000 		sts ch+19,r18
 122:../../../os/rt/src/chvt.c ****       ch.vtlist.prev = vtp;
 265               		.loc 1 122 0
 266 0100 F092 0000 		sts ch+13+1,r15
 267 0104 E092 0000 		sts ch+13,r14
 123:../../../os/rt/src/chvt.c ****       vtp->next = (virtual_timer_t *)&ch.vtlist;
 268               		.loc 1 123 0
 269 0108 F092 0000 		sts ch+15+1,r15
 270 010c E092 0000 		sts ch+15,r14
 124:../../../os/rt/src/chvt.c ****       vtp->prev = (virtual_timer_t *)&ch.vtlist;
 271               		.loc 1 124 0
 272 0110 F701      		movw r30,r14
 273 0112 1183      		std Z+1,r17
 274 0114 0083      		st Z,r16
 125:../../../os/rt/src/chvt.c ****       vtp->delta = delay;
 275               		.loc 1 125 0
 276 0116 1383      		std Z+3,r17
 277 0118 0283      		std Z+2,r16
 126:../../../os/rt/src/chvt.c **** 
 278               		.loc 1 126 0
 279 011a 7583      		std Z+5,r23
 280 011c 6483      		std Z+4,r22
 281               	.LVL21:
 282               	.LBB34:
 283               	.LBB35:
  73:../../../os/common/ports/AVR/chcore_timer.h **** }
 284               		.loc 3 73 0
 285 011e CB01      		movw r24,r22
 286 0120 820F      		add r24,r18
 287 0122 931F      		adc r25,r19
 288               	.LVL22:
 289               	/* epilogue start */
 290               	.LBE35:
 291               	.LBE34:
 292               	.LBE39:
 293               		.loc 1 180 0
 294 0124 DF91      		pop r29
 295 0126 CF91      		pop r28
 296 0128 1F91      		pop r17
 297 012a 0F91      		pop r16
 298 012c FF90      		pop r15
 299 012e EF90      		pop r14
 300               	.LVL23:
 301               	.LBB40:
 302               	.LBB37:
 303               	.LBB36:
  73:../../../os/common/ports/AVR/chcore_timer.h **** }
 304               		.loc 3 73 0
 305 0130 0C94 0000 		jmp stStartAlarm
 306               	.LVL24:
 307               	.LBE36:
 308               	.LBE37:
 309               	.LBE40:
 310               		.cfi_endproc
 311               	.LFE114:
 313               		.section	.text.chVTDoResetI,"ax",@progbits
 314               	.global	chVTDoResetI
 316               	chVTDoResetI:
 317               	.LFB115:
 181:../../../os/rt/src/chvt.c **** 
 182:../../../os/rt/src/chvt.c **** /**
 183:../../../os/rt/src/chvt.c ****  * @brief   Disables a Virtual Timer.
 184:../../../os/rt/src/chvt.c ****  * @pre     The timer must be in armed state before calling this function.
 185:../../../os/rt/src/chvt.c ****  *
 186:../../../os/rt/src/chvt.c ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 187:../../../os/rt/src/chvt.c ****  *
 188:../../../os/rt/src/chvt.c ****  * @iclass
 189:../../../os/rt/src/chvt.c ****  */
 190:../../../os/rt/src/chvt.c **** void chVTDoResetI(virtual_timer_t *vtp) {
 318               		.loc 1 190 0
 319               		.cfi_startproc
 320               	.LVL25:
 321 0000 CF93      		push r28
 322               	.LCFI6:
 323               		.cfi_def_cfa_offset 4
 324               		.cfi_offset 28, -3
 325 0002 DF93      		push r29
 326               	.LCFI7:
 327               		.cfi_def_cfa_offset 5
 328               		.cfi_offset 29, -4
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	/* stack size = 2 */
 332               	.L__stack_usage = 2
 333 0004 FC01      		movw r30,r24
 191:../../../os/rt/src/chvt.c **** 
 192:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 193:../../../os/rt/src/chvt.c ****   chDbgCheck(vtp != NULL);
 194:../../../os/rt/src/chvt.c ****   chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 195:../../../os/rt/src/chvt.c **** 
 196:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 197:../../../os/rt/src/chvt.c **** 
 198:../../../os/rt/src/chvt.c ****   /* The delta of the timer is added to the next timer.*/
 199:../../../os/rt/src/chvt.c ****   vtp->next->delta += vtp->delta;
 200:../../../os/rt/src/chvt.c **** 
 201:../../../os/rt/src/chvt.c ****  /* Removing the element from the delta list.*/
 202:../../../os/rt/src/chvt.c ****   vtp->prev->next = vtp->next;
 203:../../../os/rt/src/chvt.c ****   vtp->next->prev = vtp->prev;
 204:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 205:../../../os/rt/src/chvt.c **** 
 206:../../../os/rt/src/chvt.c ****   /* The above code changes the value in the header when the removed element
 207:../../../os/rt/src/chvt.c ****      is the last of the list, restoring it.*/
 208:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (systime_t)-1;
 209:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 210:../../../os/rt/src/chvt.c ****   systime_t nowdelta, delta;
 211:../../../os/rt/src/chvt.c **** 
 212:../../../os/rt/src/chvt.c ****   /* If the timer is not the first of the list then it is simply unlinked
 213:../../../os/rt/src/chvt.c ****      else the operation is more complex.*/
 214:../../../os/rt/src/chvt.c ****   if (ch.vtlist.next != vtp) {
 334               		.loc 1 214 0
 335 0006 A091 0000 		lds r26,ch+13
 336 000a B091 0000 		lds r27,ch+13+1
 337 000e A817      		cp r26,r24
 338 0010 B907      		cpc r27,r25
 339 0012 01F0      		breq .L21
 215:../../../os/rt/src/chvt.c ****     /* Removing the element from the delta list.*/
 216:../../../os/rt/src/chvt.c ****     vtp->prev->next = vtp->next;
 340               		.loc 1 216 0
 341 0014 C281      		ldd r28,Z+2
 342 0016 D381      		ldd r29,Z+3
 343 0018 8081      		ld r24,Z
 344 001a 9181      		ldd r25,Z+1
 345               	.LVL26:
 346 001c 9983      		std Y+1,r25
 347 001e 8883      		st Y,r24
 217:../../../os/rt/src/chvt.c ****     vtp->next->prev = vtp->prev;
 348               		.loc 1 217 0
 349 0020 A081      		ld r26,Z
 350 0022 B181      		ldd r27,Z+1
 351 0024 1396      		adiw r26,2+1
 352 0026 DC93      		st X,r29
 353 0028 CE93      		st -X,r28
 354 002a 1297      		sbiw r26,2
 218:../../../os/rt/src/chvt.c ****     vtp->func = NULL;
 355               		.loc 1 218 0
 356 002c 1782      		std Z+7,__zero_reg__
 357 002e 1682      		std Z+6,__zero_reg__
 219:../../../os/rt/src/chvt.c **** 
 220:../../../os/rt/src/chvt.c ****     /* Adding delta to the next element, if it is not the last one.*/
 221:../../../os/rt/src/chvt.c ****     if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 358               		.loc 1 221 0
 359 0030 60E0      		ldi r22,hi8(ch+13)
 360 0032 A030      		cpi r26,lo8(ch+13)
 361 0034 B607      		cpc r27,r22
 362 0036 01F0      		breq .L20
 222:../../../os/rt/src/chvt.c ****       vtp->next->delta += vtp->delta;
 363               		.loc 1 222 0
 364 0038 1496      		adiw r26,4
 365 003a 2D91      		ld r18,X+
 366 003c 3C91      		ld r19,X
 367 003e 1597      		sbiw r26,4+1
 368 0040 8481      		ldd r24,Z+4
 369 0042 9581      		ldd r25,Z+5
 370 0044 820F      		add r24,r18
 371 0046 931F      		adc r25,r19
 372 0048 1596      		adiw r26,4+1
 373 004a 9C93      		st X,r25
 374 004c 8E93      		st -X,r24
 375 004e 1497      		sbiw r26,4
 376               	.LVL27:
 377               	.L20:
 378               	/* epilogue start */
 223:../../../os/rt/src/chvt.c **** 
 224:../../../os/rt/src/chvt.c ****     return;
 225:../../../os/rt/src/chvt.c ****   }
 226:../../../os/rt/src/chvt.c **** 
 227:../../../os/rt/src/chvt.c ****   /* Removing the first timer from the list.*/
 228:../../../os/rt/src/chvt.c ****   ch.vtlist.next = vtp->next;
 229:../../../os/rt/src/chvt.c ****   ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 230:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 231:../../../os/rt/src/chvt.c **** 
 232:../../../os/rt/src/chvt.c ****   /* If the list become empty then the alarm timer is stopped and done.*/
 233:../../../os/rt/src/chvt.c ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 234:../../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 235:../../../os/rt/src/chvt.c **** 
 236:../../../os/rt/src/chvt.c ****     return;
 237:../../../os/rt/src/chvt.c ****   }
 238:../../../os/rt/src/chvt.c **** 
 239:../../../os/rt/src/chvt.c ****   /* The delta of the removed timer is added to the new first timer.*/
 240:../../../os/rt/src/chvt.c ****   ch.vtlist.next->delta += vtp->delta;
 241:../../../os/rt/src/chvt.c **** 
 242:../../../os/rt/src/chvt.c ****   /* If the new first timer has a delta of zero then the alarm is not
 243:../../../os/rt/src/chvt.c ****      modified, the already programmed alarm will serve it.*/
 244:../../../os/rt/src/chvt.c **** /*  if (ch.vtlist.next->delta == 0) {
 245:../../../os/rt/src/chvt.c ****     return;
 246:../../../os/rt/src/chvt.c ****   }*/
 247:../../../os/rt/src/chvt.c **** 
 248:../../../os/rt/src/chvt.c ****   /* Distance in ticks between the last alarm event and current time.*/
 249:../../../os/rt/src/chvt.c ****   nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 250:../../../os/rt/src/chvt.c **** 
 251:../../../os/rt/src/chvt.c ****   /* If the current time surpassed the time of the next element in list
 252:../../../os/rt/src/chvt.c ****      then the event interrupt is already pending, just return.*/
 253:../../../os/rt/src/chvt.c ****   if (nowdelta >= ch.vtlist.next->delta) {
 254:../../../os/rt/src/chvt.c ****     return;
 255:../../../os/rt/src/chvt.c ****   }
 256:../../../os/rt/src/chvt.c **** 
 257:../../../os/rt/src/chvt.c ****   /* Distance from the next scheduled event and now.*/
 258:../../../os/rt/src/chvt.c ****   delta = ch.vtlist.next->delta - nowdelta;
 259:../../../os/rt/src/chvt.c **** 
 260:../../../os/rt/src/chvt.c ****   /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
 261:../../../os/rt/src/chvt.c ****      ticks from now.*/
 262:../../../os/rt/src/chvt.c ****   if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 263:../../../os/rt/src/chvt.c ****     delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 264:../../../os/rt/src/chvt.c ****   }
 265:../../../os/rt/src/chvt.c **** 
 266:../../../os/rt/src/chvt.c ****   port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 267:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 268:../../../os/rt/src/chvt.c **** }
 379               		.loc 1 268 0
 380 0050 DF91      		pop r29
 381 0052 CF91      		pop r28
 382 0054 0895      		ret
 383               	.LVL28:
 384               	.L21:
 228:../../../os/rt/src/chvt.c ****   ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 385               		.loc 1 228 0
 386 0056 ED91      		ld r30,X+
 387 0058 FC91      		ld r31,X
 388 005a 1197      		sbiw r26,1
 389 005c F093 0000 		sts ch+13+1,r31
 390 0060 E093 0000 		sts ch+13,r30
 229:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 391               		.loc 1 229 0
 392 0064 80E0      		ldi r24,lo8(ch+13)
 393 0066 90E0      		ldi r25,hi8(ch+13)
 394               	.LVL29:
 395 0068 9383      		std Z+3,r25
 396 006a 8283      		std Z+2,r24
 230:../../../os/rt/src/chvt.c **** 
 397               		.loc 1 230 0
 398 006c 1796      		adiw r26,6+1
 399 006e 1C92      		st X,__zero_reg__
 400 0070 1E92      		st -X,__zero_reg__
 401 0072 1697      		sbiw r26,6
 233:../../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 402               		.loc 1 233 0
 403 0074 E817      		cp r30,r24
 404 0076 F907      		cpc r31,r25
 405 0078 01F0      		breq .L27
 240:../../../os/rt/src/chvt.c **** 
 406               		.loc 1 240 0
 407 007a 2481      		ldd r18,Z+4
 408 007c 3581      		ldd r19,Z+5
 409 007e 1496      		adiw r26,4
 410 0080 8D91      		ld r24,X+
 411 0082 9C91      		ld r25,X
 412 0084 1597      		sbiw r26,4+1
 413 0086 280F      		add r18,r24
 414 0088 391F      		adc r19,r25
 415 008a 3583      		std Z+5,r19
 416 008c 2483      		std Z+4,r18
 417               	.LBB41:
 418               	.LBB42:
 419               	.LBB43:
 420               	.LBB44:
 421               		.loc 2 94 0
 422 008e 8091 8400 		lds r24,132
 423 0092 9091 8500 		lds r25,132+1
 424               	.LBE44:
 425               	.LBE43:
 426               	.LBE42:
 427               	.LBE41:
 249:../../../os/rt/src/chvt.c **** 
 428               		.loc 1 249 0
 429 0096 4091 0000 		lds r20,ch+19
 430 009a 5091 0000 		lds r21,ch+19+1
 431 009e BC01      		movw r22,r24
 432 00a0 641B      		sub r22,r20
 433 00a2 750B      		sbc r23,r21
 434               	.LVL30:
 253:../../../os/rt/src/chvt.c ****     return;
 435               		.loc 1 253 0
 436 00a4 6217      		cp r22,r18
 437 00a6 7307      		cpc r23,r19
 438 00a8 00F4      		brsh .L20
 258:../../../os/rt/src/chvt.c **** 
 439               		.loc 1 258 0
 440 00aa 261B      		sub r18,r22
 441 00ac 370B      		sbc r19,r23
 442               	.LVL31:
 262:../../../os/rt/src/chvt.c ****     delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 443               		.loc 1 262 0
 444 00ae 2230      		cpi r18,2
 445 00b0 3105      		cpc r19,__zero_reg__
 446 00b2 00F0      		brlo .L28
 447               	.LVL32:
 448               	.L26:
 449               	.LBB45:
 450               	.LBB46:
 451               		.loc 3 95 0
 452 00b4 820F      		add r24,r18
 453 00b6 931F      		adc r25,r19
 454               	.LVL33:
 455               	/* epilogue start */
 456               	.LBE46:
 457               	.LBE45:
 458               		.loc 1 268 0
 459 00b8 DF91      		pop r29
 460 00ba CF91      		pop r28
 461               	.LBB48:
 462               	.LBB47:
 463               		.loc 3 95 0
 464 00bc 0C94 0000 		jmp stSetAlarm
 465               	.LVL34:
 466               	.L28:
 467               	.LBE47:
 468               	.LBE48:
 263:../../../os/rt/src/chvt.c ****   }
 469               		.loc 1 263 0
 470 00c0 22E0      		ldi r18,lo8(2)
 471 00c2 30E0      		ldi r19,0
 472               	.LVL35:
 473 00c4 00C0      		rjmp .L26
 474               	.LVL36:
 475               	.L27:
 476               	/* epilogue start */
 477               		.loc 1 268 0
 478 00c6 DF91      		pop r29
 479 00c8 CF91      		pop r28
 480               	.LBB49:
 481               	.LBB50:
  83:../../../os/common/ports/AVR/chcore_timer.h **** }
 482               		.loc 3 83 0
 483 00ca 0C94 0000 		jmp stStopAlarm
 484               	.LVL37:
 485               	.LBE50:
 486               	.LBE49:
 487               		.cfi_endproc
 488               	.LFE115:
 490               		.text
 491               	.Letext0:
 492               		.file 4 "/usr/lib/avr/include/stdint.h"
 493               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 494               		.file 6 "../../../os/rt/include/chsystypes.h"
 495               		.file 7 "../../../os/rt/include/chschd.h"
 496               		.file 8 "../../../os/common/ports/AVR/chcore.h"
 497               		.file 9 "../../../os/rt/include/chsem.h"
 498               		.file 10 "../../../os/rt/include/chmtx.h"
 499               		.file 11 "../../../os/rt/include/chvt.h"
 500               		.file 12 "../../../os/hal/include/hal_st.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chvt.c
     /tmp/ccf6Xs8P.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccf6Xs8P.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccf6Xs8P.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccf6Xs8P.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccf6Xs8P.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccf6Xs8P.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccf6Xs8P.s:14     .text._vt_init:0000000000000000 _vt_init
     /tmp/ccf6Xs8P.s:48     .text.chVTDoSetI:0000000000000000 chVTDoSetI
     /tmp/ccf6Xs8P.s:316    .text.chVTDoResetI:0000000000000000 chVTDoResetI

UNDEFINED SYMBOLS
ch
stSetAlarm
stStartAlarm
stStopAlarm
